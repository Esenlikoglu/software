
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006570  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a0c  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800810c  0800810c  000208f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800810c  0800810c  0001810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008114  08008114  000208f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008114  08008114  00018114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008118  08008118  00018118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008f4  20000000  0800811c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000132fc  200008f4  08008a10  000208f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013bf0  08008a10  00023bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000208f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efb5  00000000  00000000  00020924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a12  00000000  00000000  0002f8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  000322f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  000330f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ed9  00000000  00000000  00033d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001173c  00000000  00000000  00057c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbfd2  00000000  00000000  0006939d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013536f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043e0  00000000  00000000  001353c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200008f4 	.word	0x200008f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066e8 	.word	0x080066e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200008f8 	.word	0x200008f8
 80001cc:	080066e8 	.word	0x080066e8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <API_Getcommand>:
  * @Note the function will reset after every enter command
  * @Retval None
  */

void API_Getcommand(void)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b0a7      	sub	sp, #156	; 0x9c
 80005a8:	af24      	add	r7, sp, #144	; 0x90
	//Initialize counters
	int i, commactr;

	// Reset the uart receive buffer index 0
	input.byte_buffer_rx[0] = 0;
 80005aa:	4b24      	ldr	r3, [pc, #144]	; (800063c <API_Getcommand+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
	//Reset the characters counter
	input.char_counter = 0;
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <API_Getcommand+0x98>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	//Reset the flag
	input.command_execute_flag = FALSE;
 80005b8:	4b20      	ldr	r3, [pc, #128]	; (800063c <API_Getcommand+0x98>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

	//Loop in the buffer
    for (i=0;i<LINE_BUFLEN;i++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	e00c      	b.n	80005e0 <API_Getcommand+0x3c>
    {
    	//Checks if there is a comma in the buffer
        if(input.line_rx_buffer[i] == ',')
 80005c6:	4a1d      	ldr	r2, [pc, #116]	; (800063c <API_Getcommand+0x98>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	3301      	adds	r3, #1
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b2c      	cmp	r3, #44	; 0x2c
 80005d2:	d102      	bne.n	80005da <API_Getcommand+0x36>
        {
        	//Counts the amount of comma's
        	commactr++;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	3301      	adds	r3, #1
 80005d8:	603b      	str	r3, [r7, #0]
    for (i=0;i<LINE_BUFLEN;i++)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3301      	adds	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005e6:	dbee      	blt.n	80005c6 <API_Getcommand+0x22>
        }
    }

    //Execute function with a stuct and a counter
    API_Command_Data(commando,commactr);
 80005e8:	4c15      	ldr	r4, [pc, #84]	; (8000640 <API_Getcommand+0x9c>)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	9322      	str	r3, [sp, #136]	; 0x88
 80005ee:	4668      	mov	r0, sp
 80005f0:	f104 0310 	add.w	r3, r4, #16
 80005f4:	2288      	movs	r2, #136	; 0x88
 80005f6:	4619      	mov	r1, r3
 80005f8:	f005 f8fb 	bl	80057f2 <memcpy>
 80005fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000600:	f000 f822 	bl	8000648 <API_Command_Data>
    //Flushing the array
    fflush(stdin);
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <API_Getcommand+0xa0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	4618      	mov	r0, r3
 800060c:	f004 ffc2 	bl	8005594 <fflush>

	//Clear the buffer
	for(i = 0; i < LINE_BUFLEN; i++) input.line_rx_buffer[i] = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	e008      	b.n	8000628 <API_Getcommand+0x84>
 8000616:	4a09      	ldr	r2, [pc, #36]	; (800063c <API_Getcommand+0x98>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	3301      	adds	r3, #1
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3301      	adds	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800062e:	dbf2      	blt.n	8000616 <API_Getcommand+0x72>
	//Reset the counter
	commactr = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	603b      	str	r3, [r7, #0]


}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bd90      	pop	{r4, r7, pc}
 800063c:	200009ac 	.word	0x200009ac
 8000640:	20000910 	.word	0x20000910
 8000644:	20000890 	.word	0x20000890

08000648 <API_Command_Data>:
  * @note  Function gives error when counter is not equal to any command
  * @retval None
  */

void API_Command_Data(UI_t commando,int counter)
{
 8000648:	b084      	sub	sp, #16
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
 800064e:	f107 0c08 	add.w	ip, r7, #8
 8000652:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Checks if counter is equal to the amount of commas of the line/rectangle command
	if (counter == LINE_RECT_COMMAND )
 8000656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800065a:	2b06      	cmp	r3, #6
 800065c:	d10e      	bne.n	800067c <API_Command_Data+0x34>
	{
		// If the input command is equal to "lijn",
		// the functions will jump into the Seperate_Line function
		if (API_ReLi_Sep() == LINE) Seperate_line();
 800065e:	f000 fad3 	bl	8000c08 <API_ReLi_Sep>
 8000662:	4603      	mov	r3, r0
 8000664:	2b01      	cmp	r3, #1
 8000666:	d101      	bne.n	800066c <API_Command_Data+0x24>
 8000668:	f000 fb06 	bl	8000c78 <Seperate_line>
		// If the input command is equal to "rechthoek",
		// the functions will jump into the Seperate_Rectangle function
	    if (API_ReLi_Sep() == RECTANGLE) Seperate_Rectangle();
 800066c:	f000 facc 	bl	8000c08 <API_ReLi_Sep>
 8000670:	4603      	mov	r3, r0
 8000672:	2b02      	cmp	r3, #2
 8000674:	d11d      	bne.n	80006b2 <API_Command_Data+0x6a>
 8000676:	f000 fb69 	bl	8000d4c <Seperate_Rectangle>
	else if(counter==BITMAP_COMMAND) Seperate_Bitmap();
	//Checks if counter is equal to the amount of commas of the Clearscreen command
	else if(counter==CLEARSCREEN_COMMAND) Seperate_Clearscreen();

	// else ERROR
}
 800067a:	e01a      	b.n	80006b2 <API_Command_Data+0x6a>
	else if(counter==TEXT_COMMAND) Seperate_Text();
 800067c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000680:	2b07      	cmp	r3, #7
 8000682:	d102      	bne.n	800068a <API_Command_Data+0x42>
 8000684:	f000 fc36 	bl	8000ef4 <Seperate_Text>
}
 8000688:	e013      	b.n	80006b2 <API_Command_Data+0x6a>
	else if(counter==CIRCKEL_COMMAND) Seperate_Circkel();
 800068a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800068e:	2b04      	cmp	r3, #4
 8000690:	d102      	bne.n	8000698 <API_Command_Data+0x50>
 8000692:	f000 fbc5 	bl	8000e20 <Seperate_Circkel>
}
 8000696:	e00c      	b.n	80006b2 <API_Command_Data+0x6a>
	else if(counter==BITMAP_COMMAND) Seperate_Bitmap();
 8000698:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800069c:	2b02      	cmp	r3, #2
 800069e:	d102      	bne.n	80006a6 <API_Command_Data+0x5e>
 80006a0:	f000 fc84 	bl	8000fac <Seperate_Bitmap>
}
 80006a4:	e005      	b.n	80006b2 <API_Command_Data+0x6a>
	else if(counter==CLEARSCREEN_COMMAND) Seperate_Clearscreen();
 80006a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d101      	bne.n	80006b2 <API_Command_Data+0x6a>
 80006ae:	f000 fcbd 	bl	800102c <Seperate_Clearscreen>
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006ba:	b004      	add	sp, #16
 80006bc:	4770      	bx	lr

080006be <plotLine>:
  * @Note The functions will generate a line using a mathematical equation
  * @Retval None
  */

void plotLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,uint8_t COLOR)
{
 80006be:	b590      	push	{r4, r7, lr}
 80006c0:	b089      	sub	sp, #36	; 0x24
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	4604      	mov	r4, r0
 80006c6:	4608      	mov	r0, r1
 80006c8:	4611      	mov	r1, r2
 80006ca:	461a      	mov	r2, r3
 80006cc:	4623      	mov	r3, r4
 80006ce:	80fb      	strh	r3, [r7, #6]
 80006d0:	4603      	mov	r3, r0
 80006d2:	80bb      	strh	r3, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	807b      	strh	r3, [r7, #2]
 80006d8:	4613      	mov	r3, r2
 80006da:	803b      	strh	r3, [r7, #0]

     int dx =  abs(x1-x0), sx = x0<x1 ? 1 : -1;
 80006dc:	887a      	ldrh	r2, [r7, #2]
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	bfb8      	it	lt
 80006e6:	425b      	neglt	r3, r3
 80006e8:	61bb      	str	r3, [r7, #24]
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	887b      	ldrh	r3, [r7, #2]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d201      	bcs.n	80006f6 <plotLine+0x38>
 80006f2:	2301      	movs	r3, #1
 80006f4:	e001      	b.n	80006fa <plotLine+0x3c>
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	617b      	str	r3, [r7, #20]
     int dy = -abs(y1-y0), sy = y0<y1 ? 1 : -1;
 80006fc:	883a      	ldrh	r2, [r7, #0]
 80006fe:	88bb      	ldrh	r3, [r7, #4]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	bfb8      	it	lt
 8000706:	425b      	neglt	r3, r3
 8000708:	425b      	negs	r3, r3
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	88ba      	ldrh	r2, [r7, #4]
 800070e:	883b      	ldrh	r3, [r7, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d201      	bcs.n	8000718 <plotLine+0x5a>
 8000714:	2301      	movs	r3, #1
 8000716:	e001      	b.n	800071c <plotLine+0x5e>
 8000718:	f04f 33ff 	mov.w	r3, #4294967295
 800071c:	60fb      	str	r3, [r7, #12]
     int err = dx+dy, e2; /* error value e_xy */
 800071e:	69ba      	ldr	r2, [r7, #24]
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	4413      	add	r3, r2
 8000724:	61fb      	str	r3, [r7, #28]

     for(;;){  /* loop */
    	 UB_VGA_SetPixel(x0,y0,COLOR);
 8000726:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800072a:	88b9      	ldrh	r1, [r7, #4]
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	4618      	mov	r0, r3
 8000730:	f001 faae 	bl	8001c90 <UB_VGA_SetPixel>
        if (x0==x1 && y0==y1) break;
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	887b      	ldrh	r3, [r7, #2]
 8000738:	429a      	cmp	r2, r3
 800073a:	d103      	bne.n	8000744 <plotLine+0x86>
 800073c:	88ba      	ldrh	r2, [r7, #4]
 800073e:	883b      	ldrh	r3, [r7, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d01d      	beq.n	8000780 <plotLine+0xc2>
        e2 = 2*err;
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	60bb      	str	r3, [r7, #8]
        if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	429a      	cmp	r2, r3
 8000750:	db08      	blt.n	8000764 <plotLine+0xa6>
 8000752:	69fa      	ldr	r2, [r7, #28]
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	4413      	add	r3, r2
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	b29a      	uxth	r2, r3
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	4413      	add	r3, r2
 8000762:	80fb      	strh	r3, [r7, #6]
        if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	429a      	cmp	r2, r3
 800076a:	dcdc      	bgt.n	8000726 <plotLine+0x68>
 800076c:	69fa      	ldr	r2, [r7, #28]
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	4413      	add	r3, r2
 8000772:	61fb      	str	r3, [r7, #28]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	b29a      	uxth	r2, r3
 8000778:	88bb      	ldrh	r3, [r7, #4]
 800077a:	4413      	add	r3, r2
 800077c:	80bb      	strh	r3, [r7, #4]
    	 UB_VGA_SetPixel(x0,y0,COLOR);
 800077e:	e7d2      	b.n	8000726 <plotLine+0x68>
        if (x0==x1 && y0==y1) break;
 8000780:	bf00      	nop
    }
}
 8000782:	bf00      	nop
 8000784:	3724      	adds	r7, #36	; 0x24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd90      	pop	{r4, r7, pc}

0800078a <plotRect>:
  * @Param uint8_t COLOR    rectangle color
  * @Note The functions will generate a rectangle using a mathematical equation
  * @Retval None
  */
void plotRect(uint16_t xp,uint16_t yp,uint16_t width,uint16_t length, uint8_t COLOR)
{
 800078a:	b590      	push	{r4, r7, lr}
 800078c:	b085      	sub	sp, #20
 800078e:	af02      	add	r7, sp, #8
 8000790:	4604      	mov	r4, r0
 8000792:	4608      	mov	r0, r1
 8000794:	4611      	mov	r1, r2
 8000796:	461a      	mov	r2, r3
 8000798:	4623      	mov	r3, r4
 800079a:	80fb      	strh	r3, [r7, #6]
 800079c:	4603      	mov	r3, r0
 800079e:	80bb      	strh	r3, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	807b      	strh	r3, [r7, #2]
 80007a4:	4613      	mov	r3, r2
 80007a6:	803b      	strh	r3, [r7, #0]
	plotLine(xp,yp,xp,yp+length,COLOR);
 80007a8:	88ba      	ldrh	r2, [r7, #4]
 80007aa:	883b      	ldrh	r3, [r7, #0]
 80007ac:	4413      	add	r3, r2
 80007ae:	b29c      	uxth	r4, r3
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	88b9      	ldrh	r1, [r7, #4]
 80007b4:	88f8      	ldrh	r0, [r7, #6]
 80007b6:	7e3b      	ldrb	r3, [r7, #24]
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	4623      	mov	r3, r4
 80007bc:	f7ff ff7f 	bl	80006be <plotLine>
	plotLine(xp,yp,xp+width,yp,COLOR);
 80007c0:	88fa      	ldrh	r2, [r7, #6]
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	4413      	add	r3, r2
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	88bc      	ldrh	r4, [r7, #4]
 80007ca:	88b9      	ldrh	r1, [r7, #4]
 80007cc:	88f8      	ldrh	r0, [r7, #6]
 80007ce:	7e3b      	ldrb	r3, [r7, #24]
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	4623      	mov	r3, r4
 80007d4:	f7ff ff73 	bl	80006be <plotLine>
	plotLine(xp+width,yp+length,xp+width,yp,COLOR);
 80007d8:	88fa      	ldrh	r2, [r7, #6]
 80007da:	887b      	ldrh	r3, [r7, #2]
 80007dc:	4413      	add	r3, r2
 80007de:	b298      	uxth	r0, r3
 80007e0:	88ba      	ldrh	r2, [r7, #4]
 80007e2:	883b      	ldrh	r3, [r7, #0]
 80007e4:	4413      	add	r3, r2
 80007e6:	b299      	uxth	r1, r3
 80007e8:	88fa      	ldrh	r2, [r7, #6]
 80007ea:	887b      	ldrh	r3, [r7, #2]
 80007ec:	4413      	add	r3, r2
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	88bc      	ldrh	r4, [r7, #4]
 80007f2:	7e3b      	ldrb	r3, [r7, #24]
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	4623      	mov	r3, r4
 80007f8:	f7ff ff61 	bl	80006be <plotLine>
	plotLine(xp+width,yp+length,xp,yp+length,COLOR);
 80007fc:	88fa      	ldrh	r2, [r7, #6]
 80007fe:	887b      	ldrh	r3, [r7, #2]
 8000800:	4413      	add	r3, r2
 8000802:	b298      	uxth	r0, r3
 8000804:	88ba      	ldrh	r2, [r7, #4]
 8000806:	883b      	ldrh	r3, [r7, #0]
 8000808:	4413      	add	r3, r2
 800080a:	b299      	uxth	r1, r3
 800080c:	88ba      	ldrh	r2, [r7, #4]
 800080e:	883b      	ldrh	r3, [r7, #0]
 8000810:	4413      	add	r3, r2
 8000812:	b29c      	uxth	r4, r3
 8000814:	88fa      	ldrh	r2, [r7, #6]
 8000816:	7e3b      	ldrb	r3, [r7, #24]
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	4623      	mov	r3, r4
 800081c:	f7ff ff4f 	bl	80006be <plotLine>

}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	bd90      	pop	{r4, r7, pc}

08000828 <plotCircle>:
  * @Param uint8_t color	length of the circle
  * @Note The functions will generate a circle using a mathematical equation
  * @Retval None
  */
void plotCircle(uint16_t xm, uint16_t ym, int r,uint8_t COLOR)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
 800082e:	60ba      	str	r2, [r7, #8]
 8000830:	461a      	mov	r2, r3
 8000832:	4603      	mov	r3, r0
 8000834:	81fb      	strh	r3, [r7, #14]
 8000836:	460b      	mov	r3, r1
 8000838:	81bb      	strh	r3, [r7, #12]
 800083a:	4613      	mov	r3, r2
 800083c:	71fb      	strb	r3, [r7, #7]
   int x = -r, y = 0, err = 2-2*r; /* II. Quadrant */
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	425b      	negs	r3, r3
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	f1c3 0301 	rsb	r3, r3, #1
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	617b      	str	r3, [r7, #20]
   do {
	   UB_VGA_SetPixel(xm-x, ym+y,COLOR); /*   I. Quadrant */
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	b29b      	uxth	r3, r3
 8000856:	89fa      	ldrh	r2, [r7, #14]
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	b298      	uxth	r0, r3
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	b29a      	uxth	r2, r3
 8000860:	89bb      	ldrh	r3, [r7, #12]
 8000862:	4413      	add	r3, r2
 8000864:	b29b      	uxth	r3, r3
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	4619      	mov	r1, r3
 800086a:	f001 fa11 	bl	8001c90 <UB_VGA_SetPixel>
	   UB_VGA_SetPixel(xm-y, ym-x,COLOR); /*  II. Quadrant */
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	b29b      	uxth	r3, r3
 8000872:	89fa      	ldrh	r2, [r7, #14]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	b298      	uxth	r0, r3
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	b29b      	uxth	r3, r3
 800087c:	89ba      	ldrh	r2, [r7, #12]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	b29b      	uxth	r3, r3
 8000882:	79fa      	ldrb	r2, [r7, #7]
 8000884:	4619      	mov	r1, r3
 8000886:	f001 fa03 	bl	8001c90 <UB_VGA_SetPixel>
	   UB_VGA_SetPixel(xm+x, ym-y,COLOR); /* III. Quadrant */
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	b29a      	uxth	r2, r3
 800088e:	89fb      	ldrh	r3, [r7, #14]
 8000890:	4413      	add	r3, r2
 8000892:	b298      	uxth	r0, r3
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	b29b      	uxth	r3, r3
 8000898:	89ba      	ldrh	r2, [r7, #12]
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	b29b      	uxth	r3, r3
 800089e:	79fa      	ldrb	r2, [r7, #7]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f001 f9f5 	bl	8001c90 <UB_VGA_SetPixel>
	   UB_VGA_SetPixel(xm+y, ym+x,COLOR); /*  IV. Quadrant */
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	89fb      	ldrh	r3, [r7, #14]
 80008ac:	4413      	add	r3, r2
 80008ae:	b298      	uxth	r0, r3
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	89bb      	ldrh	r3, [r7, #12]
 80008b6:	4413      	add	r3, r2
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	4619      	mov	r1, r3
 80008be:	f001 f9e7 	bl	8001c90 <UB_VGA_SetPixel>
      r = err;
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	60bb      	str	r3, [r7, #8]
      if (r <= y) err += ++y*2+1;           /* e_xy+e_y < 0 */
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dc08      	bgt.n	80008e0 <plotCircle+0xb8>
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	3301      	adds	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	3301      	adds	r3, #1
 80008da:	697a      	ldr	r2, [r7, #20]
 80008dc:	4413      	add	r3, r2
 80008de:	617b      	str	r3, [r7, #20]
      if (r > x || err > y) err += ++x*2+1; /* e_xy+e_x > 0 or no 2nd y-step */
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dc03      	bgt.n	80008f0 <plotCircle+0xc8>
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dd08      	ble.n	8000902 <plotCircle+0xda>
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	3301      	adds	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	3301      	adds	r3, #1
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	4413      	add	r3, r2
 8000900:	617b      	str	r3, [r7, #20]
   } while (x < 0);
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	2b00      	cmp	r3, #0
 8000906:	dba4      	blt.n	8000852 <plotCircle+0x2a>
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <API_bitmap>:
  * @Param uint16_t 	y_bitmap    y coordinate
  * @Note The functions will generate a bitmap
  * @Retval None
  */
void API_bitmap(uint16_t x_bitmap, uint16_t y_bitmap)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	460a      	mov	r2, r1
 800091e:	80fb      	strh	r3, [r7, #6]
 8000920:	4613      	mov	r3, r2
 8000922:	80bb      	strh	r3, [r7, #4]
uint16_t x,y;
int i=0;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]


	for(y=0;y<119;y++)
 8000928:	2300      	movs	r3, #0
 800092a:	81bb      	strh	r3, [r7, #12]
 800092c:	e01d      	b.n	800096a <API_bitmap+0x56>
	{
	  for(x=0;x<119;x++)
 800092e:	2300      	movs	r3, #0
 8000930:	81fb      	strh	r3, [r7, #14]
 8000932:	e014      	b.n	800095e <API_bitmap+0x4a>
	  {

		  UB_VGA_SetPixel (x+x_bitmap,y+y_bitmap,(uint8_t)HU_Utrecht_logo[i]);
 8000934:	89fa      	ldrh	r2, [r7, #14]
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	4413      	add	r3, r2
 800093a:	b298      	uxth	r0, r3
 800093c:	89ba      	ldrh	r2, [r7, #12]
 800093e:	88bb      	ldrh	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	b299      	uxth	r1, r3
 8000944:	4a0d      	ldr	r2, [pc, #52]	; (800097c <API_bitmap+0x68>)
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	4413      	add	r3, r2
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	f001 f99f 	bl	8001c90 <UB_VGA_SetPixel>
		  i++;
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	3301      	adds	r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
	  for(x=0;x<119;x++)
 8000958:	89fb      	ldrh	r3, [r7, #14]
 800095a:	3301      	adds	r3, #1
 800095c:	81fb      	strh	r3, [r7, #14]
 800095e:	89fb      	ldrh	r3, [r7, #14]
 8000960:	2b76      	cmp	r3, #118	; 0x76
 8000962:	d9e7      	bls.n	8000934 <API_bitmap+0x20>
	for(y=0;y<119;y++)
 8000964:	89bb      	ldrh	r3, [r7, #12]
 8000966:	3301      	adds	r3, #1
 8000968:	81bb      	strh	r3, [r7, #12]
 800096a:	89bb      	ldrh	r3, [r7, #12]
 800096c:	2b76      	cmp	r3, #118	; 0x76
 800096e:	d9de      	bls.n	800092e <API_bitmap+0x1a>
	  }


}
}
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000000 	.word	0x20000000

08000980 <API_text>:
  * @Param char tekst   text
  * @Note The functions will generate the input text
  * @Retval None
  */
void API_text(int x,int y, char kleur, char tekst[])
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	4613      	mov	r3, r2
 800098e:	71fb      	strb	r3, [r7, #7]
	int i,j,k,l;
	int x_old=x;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	61fb      	str	r3, [r7, #28]
	const char* letter;
	char width;
	int size = strlen(tekst);
 8000994:	6838      	ldr	r0, [r7, #0]
 8000996:	f7ff fc25 	bl	80001e4 <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	61bb      	str	r3, [r7, #24]
	for (i=0; i<size;i++)
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009a2:	e060      	b.n	8000a66 <API_text+0xe6>
	{
		letter = Arial_32_addr[tekst[i]-32];
 80009a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	3b20      	subs	r3, #32
 80009ae:	4a32      	ldr	r2, [pc, #200]	; (8000a78 <API_text+0xf8>)
 80009b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b4:	617b      	str	r3, [r7, #20]
		width  = Arial_32_width[tekst[i]-32];
 80009b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	3b20      	subs	r3, #32
 80009c0:	4a2e      	ldr	r2, [pc, #184]	; (8000a7c <API_text+0xfc>)
 80009c2:	5cd3      	ldrb	r3, [r2, r3]
 80009c4:	74fb      	strb	r3, [r7, #19]

		for (j=0; j < 4; j++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ca:	e041      	b.n	8000a50 <API_text+0xd0>
		{
			for (k=0; k<width; k++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
 80009d0:	e037      	b.n	8000a42 <API_text+0xc2>
			{
				for(l=0; l<8;l ++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
 80009d6:	e02e      	b.n	8000a36 <API_text+0xb6>
				{
					if((letter[j*width+k]>>l)&0x01)
 80009d8:	7cfb      	ldrb	r3, [r7, #19]
 80009da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009dc:	fb03 f202 	mul.w	r2, r3, r2
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	4413      	add	r3, r2
 80009e4:	461a      	mov	r2, r3
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	fa42 f303 	asr.w	r3, r2, r3
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d019      	beq.n	8000a30 <API_text+0xb0>
					{
						 UB_VGA_SetPixel (x+x_old + k, y+ j*8+l, kleur);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4413      	add	r3, r2
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b298      	uxth	r0, r3
 8000a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4413      	add	r3, r2
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	6a3b      	ldr	r3, [r7, #32]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4413      	add	r3, r2
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	79fa      	ldrb	r2, [r7, #7]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f001 f930 	bl	8001c90 <UB_VGA_SetPixel>
				for(l=0; l<8;l ++)
 8000a30:	6a3b      	ldr	r3, [r7, #32]
 8000a32:	3301      	adds	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	2b07      	cmp	r3, #7
 8000a3a:	ddcd      	ble.n	80009d8 <API_text+0x58>
			for (k=0; k<width; k++)
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	3301      	adds	r3, #1
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
 8000a42:	7cfb      	ldrb	r3, [r7, #19]
 8000a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a46:	429a      	cmp	r2, r3
 8000a48:	dbc3      	blt.n	80009d2 <API_text+0x52>
		for (j=0; j < 4; j++)
 8000a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	ddba      	ble.n	80009cc <API_text+0x4c>

					}

				}
			}
		}x_old += 5 +k;
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	3305      	adds	r3, #5
 8000a5a:	69fa      	ldr	r2, [r7, #28]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	61fb      	str	r3, [r7, #28]
	for (i=0; i<size;i++)
 8000a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a62:	3301      	adds	r3, #1
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	db9a      	blt.n	80009a4 <API_text+0x24>
	}
}
 8000a6e:	bf00      	nop
 8000a70:	bf00      	nop
 8000a72:	3730      	adds	r7, #48	; 0x30
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000708 	.word	0x20000708
 8000a7c:	08007e44 	.word	0x08007e44

08000a80 <API_In_DrawLine>:
  * @param UI_t apidata
  * @note  Gives an error if the arguments are zero
  * @retval None
  */
void API_In_DrawLine(UI_t apidata)
{
 8000a80:	b084      	sub	sp, #16
 8000a82:	b590      	push	{r4, r7, lr}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af02      	add	r7, sp, #8
 8000a88:	f107 0410 	add.w	r4, r7, #16
 8000a8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//Checks if the arguments in the struct are equal to zero
	if(apidata.x_1 == 0 || apidata.y_1 == 0 || apidata.x_2 == 0|| apidata.y_2 == 0|| apidata.kleur== 0)
 8000a90:	8bbb      	ldrh	r3, [r7, #28]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d00c      	beq.n	8000ab0 <API_In_DrawLine+0x30>
 8000a96:	8bfb      	ldrh	r3, [r7, #30]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d009      	beq.n	8000ab0 <API_In_DrawLine+0x30>
 8000a9c:	8c3b      	ldrh	r3, [r7, #32]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d006      	beq.n	8000ab0 <API_In_DrawLine+0x30>
 8000aa2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d003      	beq.n	8000ab0 <API_In_DrawLine+0x30>
 8000aa8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d10a      	bne.n	8000ac6 <API_In_DrawLine+0x46>
	{
	//Gives an error when the arguments in the struct are zero
			errno = ERANGE;
 8000ab0:	f004 fca8 	bl	8005404 <__errno>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2222      	movs	r2, #34	; 0x22
 8000ab8:	601a      	str	r2, [r3, #0]
			show_errno(errnum);
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <API_In_DrawLine+0x6c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 f86c 	bl	8000b9c <show_errno>
 8000ac4:	e00a      	b.n	8000adc <API_In_DrawLine+0x5c>
	}
	//Else jumps in the function that will plot a line
	else plotLine(apidata.x_1,apidata.y_1 , apidata.x_2, apidata.y_2,apidata.kleur);
 8000ac6:	8bb8      	ldrh	r0, [r7, #28]
 8000ac8:	8bf9      	ldrh	r1, [r7, #30]
 8000aca:	8c3a      	ldrh	r2, [r7, #32]
 8000acc:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8000ace:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	4623      	mov	r3, r4
 8000ad6:	f7ff fdf2 	bl	80006be <plotLine>
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	3704      	adds	r7, #4
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ae6:	b004      	add	sp, #16
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	200009a8 	.word	0x200009a8

08000af0 <API_In_DrawRectangle>:
  * @param UI_t apidata
  * @note  Gives an error if the arguments are zero
  * @retval None
  */
void API_In_DrawRectangle(UI_t apidata)
{
 8000af0:	b084      	sub	sp, #16
 8000af2:	b590      	push	{r4, r7, lr}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af02      	add	r7, sp, #8
 8000af8:	f107 0410 	add.w	r4, r7, #16
 8000afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//Jumps into function that will plot a rectangle
	plotRect(apidata.x_1,apidata.y_1 , apidata.x_2, apidata.y_2,apidata.kleur);
 8000b00:	8bb8      	ldrh	r0, [r7, #28]
 8000b02:	8bf9      	ldrh	r1, [r7, #30]
 8000b04:	8c3a      	ldrh	r2, [r7, #32]
 8000b06:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8000b08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	4623      	mov	r3, r4
 8000b10:	f7ff fe3b 	bl	800078a <plotRect>
}
 8000b14:	bf00      	nop
 8000b16:	3704      	adds	r7, #4
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b1e:	b004      	add	sp, #16
 8000b20:	4770      	bx	lr

08000b22 <API_In_DrawCirckel>:
  * @note  Gives an error if the arguments are zero
  * @retval None
  */

void API_In_DrawCirckel(UI_t apidata)
{
 8000b22:	b084      	sub	sp, #16
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	f107 0c08 	add.w	ip, r7, #8
 8000b2c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Jumps into function that will plot a circle
	plotCircle(apidata.x_1,apidata.y_1 , apidata.x_2, apidata.kleur);
 8000b30:	8ab8      	ldrh	r0, [r7, #20]
 8000b32:	8af9      	ldrh	r1, [r7, #22]
 8000b34:	8b3b      	ldrh	r3, [r7, #24]
 8000b36:	461a      	mov	r2, r3
 8000b38:	7f3b      	ldrb	r3, [r7, #28]
 8000b3a:	f7ff fe75 	bl	8000828 <plotCircle>
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b46:	b004      	add	sp, #16
 8000b48:	4770      	bx	lr

08000b4a <API_In_DrawText>:
  * @param UI_t apidata
  * @note  Gives an error if the arguments are zero
  * @retval None
  */
void API_In_DrawText(UI_t apidata)
{
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	f107 0c08 	add.w	ip, r7, #8
 8000b54:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Jumps into a function that will plot text
	API_text(apidata.x,apidata.y,apidata.text_kleur,apidata.tekst);
 8000b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b5c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000b60:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000b64:	f7ff ff0c 	bl	8000980 <API_text>
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <API_In_Bitmap>:

void API_In_Bitmap(UI_t apidata)
{
 8000b74:	b084      	sub	sp, #16
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	f107 0c08 	add.w	ip, r7, #8
 8000b7e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	 API_bitmap(apidata.x_1, apidata.y_1);
 8000b82:	8abb      	ldrh	r3, [r7, #20]
 8000b84:	8afa      	ldrh	r2, [r7, #22]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fec3 	bl	8000914 <API_bitmap>
	 }
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b96:	b004      	add	sp, #16
 8000b98:	4770      	bx	lr
	...

08000b9c <show_errno>:
  * @note  Functions will print error in the terminal
  * @retval None
  */

void show_errno(const char *err_info)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

    err_info = "unknown error";
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <show_errno+0x54>)
 8000ba6:	607b      	str	r3, [r7, #4]
    switch (errno) {
 8000ba8:	f004 fc2c 	bl	8005404 <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b8a      	cmp	r3, #138	; 0x8a
 8000bb2:	d00c      	beq.n	8000bce <show_errno+0x32>
 8000bb4:	2b8a      	cmp	r3, #138	; 0x8a
 8000bb6:	dc12      	bgt.n	8000bde <show_errno+0x42>
 8000bb8:	2b22      	cmp	r3, #34	; 0x22
 8000bba:	d00b      	beq.n	8000bd4 <show_errno+0x38>
 8000bbc:	2b22      	cmp	r3, #34	; 0x22
 8000bbe:	dc0e      	bgt.n	8000bde <show_errno+0x42>
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d00a      	beq.n	8000bda <show_errno+0x3e>
 8000bc4:	2b21      	cmp	r3, #33	; 0x21
 8000bc6:	d10a      	bne.n	8000bde <show_errno+0x42>
    case EDOM:
        err_info = "domain error";
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <show_errno+0x58>)
 8000bca:	607b      	str	r3, [r7, #4]
        break;
 8000bcc:	e007      	b.n	8000bde <show_errno+0x42>
    case EILSEQ:
        err_info = "illegal sequence";
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <show_errno+0x5c>)
 8000bd0:	607b      	str	r3, [r7, #4]
        break;
 8000bd2:	e004      	b.n	8000bde <show_errno+0x42>
    case ERANGE:
        err_info = "pole or range error";
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <show_errno+0x60>)
 8000bd6:	607b      	str	r3, [r7, #4]
        break;
 8000bd8:	e001      	b.n	8000bde <show_errno+0x42>
    case 0:
        err_info = "no error";
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <show_errno+0x64>)
 8000bdc:	607b      	str	r3, [r7, #4]
    }
    printf("ERROR: %s \n" ,err_info);
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	4808      	ldr	r0, [pc, #32]	; (8000c04 <show_errno+0x68>)
 8000be2:	f004 fefd 	bl	80059e0 <iprintf>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	08006700 	.word	0x08006700
 8000bf4:	08006710 	.word	0x08006710
 8000bf8:	08006720 	.word	0x08006720
 8000bfc:	08006734 	.word	0x08006734
 8000c00:	08006748 	.word	0x08006748
 8000c04:	08006754 	.word	0x08006754

08000c08 <API_ReLi_Sep>:
  * @note  Returns 1 if line, 2 if rectangle
  * @retval None
  */

int API_ReLi_Sep(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
	int cmp;
	char comp_line[LINE_TEXT];

	//Loops the input buffer and passes the characters into another array
	for(int i = 0; i<LINE_TEXT;i++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	e00c      	b.n	8000c2e <API_ReLi_Sep+0x26>
	{
		comp_line[i] = input.line_rx_buffer[i];
 8000c14:	4a15      	ldr	r2, [pc, #84]	; (8000c6c <API_ReLi_Sep+0x64>)
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	4413      	add	r3, r2
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	7819      	ldrb	r1, [r3, #0]
 8000c1e:	1d3a      	adds	r2, r7, #4
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4413      	add	r3, r2
 8000c24:	460a      	mov	r2, r1
 8000c26:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<LINE_TEXT;i++)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	ddef      	ble.n	8000c14 <API_ReLi_Sep+0xc>
	}

	//Compare the written command with "lijn" and "rech"
	if (strncmp ( comp_line, "lijn", sizeof(comp_line)) == 0) cmp = LINE;
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2204      	movs	r2, #4
 8000c38:	490d      	ldr	r1, [pc, #52]	; (8000c70 <API_ReLi_Sep+0x68>)
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f004 ff3b 	bl	8005ab6 <strncmp>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <API_ReLi_Sep+0x42>
 8000c46:	2301      	movs	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
	if (strncmp ( comp_line, "rech", sizeof(comp_line))== 0) cmp = RECTANGLE;
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	4909      	ldr	r1, [pc, #36]	; (8000c74 <API_ReLi_Sep+0x6c>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f004 ff30 	bl	8005ab6 <strncmp>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d101      	bne.n	8000c60 <API_ReLi_Sep+0x58>
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	60fb      	str	r3, [r7, #12]

	//Returns 1 if line, 2 if rectangle
	return cmp;
 8000c60:	68fb      	ldr	r3, [r7, #12]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200009ac 	.word	0x200009ac
 8000c70:	08006760 	.word	0x08006760
 8000c74:	08006768 	.word	0x08006768

08000c78 <Seperate_line>:
  * @note  Fills the variables in the struct
  * @retval None
  */

void Seperate_line(void)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b0af      	sub	sp, #188	; 0xbc
 8000c7c:	af22      	add	r7, sp, #136	; 0x88
	int i = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000c82:	463b      	mov	r3, r7
 8000c84:	2228      	movs	r2, #40	; 0x28
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f004 fdc0 	bl	800580e <memset>

	// comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000c8e:	492c      	ldr	r1, [pc, #176]	; (8000d40 <Seperate_line+0xc8>)
 8000c90:	482c      	ldr	r0, [pc, #176]	; (8000d44 <Seperate_line+0xcc>)
 8000c92:	f004 ff37 	bl	8005b04 <strtok>
 8000c96:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 8000c98:	e00e      	b.n	8000cb8 <Seperate_line+0x40>
	{
		//Passing the value to an array
		aryvul[i]= token;
 8000c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	3330      	adds	r3, #48	; 0x30
 8000ca0:	443b      	add	r3, r7
 8000ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ca4:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 8000ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000caa:	3301      	adds	r3, #1
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000cae:	4924      	ldr	r1, [pc, #144]	; (8000d40 <Seperate_line+0xc8>)
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f004 ff27 	bl	8005b04 <strtok>
 8000cb6:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 8000cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1ed      	bne.n	8000c9a <Seperate_line+0x22>
	}

	//Fills the struct
	commando.x_1 = (uint16_t)atoi(aryvul[ARRAY_FIRST_lOCATION]);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f004 fb9b 	bl	80053fc <atoi>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <Seperate_line+0xd0>)
 8000ccc:	819a      	strh	r2, [r3, #12]
	commando.y_1 = (uint16_t)atoi(aryvul[ARRAY_SECOND_lOCATION]);
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 fb93 	bl	80053fc <atoi>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <Seperate_line+0xd0>)
 8000cdc:	81da      	strh	r2, [r3, #14]
	commando.x_2 = (uint16_t)atoi(aryvul[ARRAY_THIRD_lOCATION]);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f004 fb8b 	bl	80053fc <atoi>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <Seperate_line+0xd0>)
 8000cec:	821a      	strh	r2, [r3, #16]
	commando.y_2 = (uint16_t)atoi(aryvul[ARRAY_FOURTH_lOCATION]);
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 fb83 	bl	80053fc <atoi>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <Seperate_line+0xd0>)
 8000cfc:	825a      	strh	r2, [r3, #18]
	commando.kleur = (uint8_t)atoi(aryvul[ARRAY_FIFTH_lOCATION]);
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f004 fb7b 	bl	80053fc <atoi>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <Seperate_line+0xd0>)
 8000d0c:	751a      	strb	r2, [r3, #20]
	commando.dikte = (uint8_t)atoi(aryvul[ARRAY_SIXTH_lOCATION]);
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 fb73 	bl	80053fc <atoi>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <Seperate_line+0xd0>)
 8000d1c:	755a      	strb	r2, [r3, #21]


	 //Jumps into the function that will draw a line
	 API_In_DrawLine(commando);
 8000d1e:	4c0a      	ldr	r4, [pc, #40]	; (8000d48 <Seperate_line+0xd0>)
 8000d20:	4668      	mov	r0, sp
 8000d22:	f104 0310 	add.w	r3, r4, #16
 8000d26:	2288      	movs	r2, #136	; 0x88
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f004 fd62 	bl	80057f2 <memcpy>
 8000d2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d32:	f7ff fea5 	bl	8000a80 <API_In_DrawLine>

}
 8000d36:	bf00      	nop
 8000d38:	3734      	adds	r7, #52	; 0x34
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd90      	pop	{r4, r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	08006770 	.word	0x08006770
 8000d44:	200009ad 	.word	0x200009ad
 8000d48:	20000910 	.word	0x20000910

08000d4c <Seperate_Rectangle>:
  * @retval None
  */


void Seperate_Rectangle(void)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b0af      	sub	sp, #188	; 0xbc
 8000d50:	af22      	add	r7, sp, #136	; 0x88
	int i = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2228      	movs	r2, #40	; 0x28
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f004 fd56 	bl	800580e <memset>

	// comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000d62:	492c      	ldr	r1, [pc, #176]	; (8000e14 <Seperate_Rectangle+0xc8>)
 8000d64:	482c      	ldr	r0, [pc, #176]	; (8000e18 <Seperate_Rectangle+0xcc>)
 8000d66:	f004 fecd 	bl	8005b04 <strtok>
 8000d6a:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 8000d6c:	e00e      	b.n	8000d8c <Seperate_Rectangle+0x40>
	{
		//Passing the value to an array
		aryvul[i]= token;
 8000d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	3330      	adds	r3, #48	; 0x30
 8000d74:	443b      	add	r3, r7
 8000d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d78:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 8000d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7e:	3301      	adds	r3, #1
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000d82:	4924      	ldr	r1, [pc, #144]	; (8000e14 <Seperate_Rectangle+0xc8>)
 8000d84:	2000      	movs	r0, #0
 8000d86:	f004 febd 	bl	8005b04 <strtok>
 8000d8a:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 8000d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1ed      	bne.n	8000d6e <Seperate_Rectangle+0x22>
	}


	//Fills the struct
	commando.x_1 = (uint16_t)atoi(aryvul[ARRAY_FIRST_lOCATION]);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f004 fb31 	bl	80053fc <atoi>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <Seperate_Rectangle+0xd0>)
 8000da0:	819a      	strh	r2, [r3, #12]
	commando.y_1 = (uint16_t)atoi(aryvul[ARRAY_SECOND_lOCATION]);
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 fb29 	bl	80053fc <atoi>
 8000daa:	4603      	mov	r3, r0
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <Seperate_Rectangle+0xd0>)
 8000db0:	81da      	strh	r2, [r3, #14]
	commando.x_2 = (uint16_t)atoi(aryvul[ARRAY_THIRD_lOCATION]);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f004 fb21 	bl	80053fc <atoi>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <Seperate_Rectangle+0xd0>)
 8000dc0:	821a      	strh	r2, [r3, #16]
	commando.y_2 = (uint16_t)atoi(aryvul[ARRAY_FOURTH_lOCATION]);
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f004 fb19 	bl	80053fc <atoi>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <Seperate_Rectangle+0xd0>)
 8000dd0:	825a      	strh	r2, [r3, #18]
	commando.kleur = (uint8_t)atoi(aryvul[ARRAY_FIFTH_lOCATION]);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fb11 	bl	80053fc <atoi>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <Seperate_Rectangle+0xd0>)
 8000de0:	751a      	strb	r2, [r3, #20]
	commando.gevuld = (uint8_t)atoi(aryvul[ARRAY_SIXTH_lOCATION]);
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 fb09 	bl	80053fc <atoi>
 8000dea:	4603      	mov	r3, r0
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <Seperate_Rectangle+0xd0>)
 8000df0:	759a      	strb	r2, [r3, #22]

	//Jumps into the function that will draw a rectangle
	API_In_DrawRectangle(commando);
 8000df2:	4c0a      	ldr	r4, [pc, #40]	; (8000e1c <Seperate_Rectangle+0xd0>)
 8000df4:	4668      	mov	r0, sp
 8000df6:	f104 0310 	add.w	r3, r4, #16
 8000dfa:	2288      	movs	r2, #136	; 0x88
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f004 fcf8 	bl	80057f2 <memcpy>
 8000e02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e06:	f7ff fe73 	bl	8000af0 <API_In_DrawRectangle>


}
 8000e0a:	bf00      	nop
 8000e0c:	3734      	adds	r7, #52	; 0x34
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd90      	pop	{r4, r7, pc}
 8000e12:	bf00      	nop
 8000e14:	08006770 	.word	0x08006770
 8000e18:	200009ad 	.word	0x200009ad
 8000e1c:	20000910 	.word	0x20000910

08000e20 <Seperate_Circkel>:
  * @note  Fills the variables in the struct
  * @retval None
  */

void Seperate_Circkel(void)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b0af      	sub	sp, #188	; 0xbc
 8000e24:	af22      	add	r7, sp, #136	; 0x88
	int i = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2228      	movs	r2, #40	; 0x28
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f004 fcec 	bl	800580e <memset>

	// comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000e36:	492c      	ldr	r1, [pc, #176]	; (8000ee8 <Seperate_Circkel+0xc8>)
 8000e38:	482c      	ldr	r0, [pc, #176]	; (8000eec <Seperate_Circkel+0xcc>)
 8000e3a:	f004 fe63 	bl	8005b04 <strtok>
 8000e3e:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 8000e40:	e00e      	b.n	8000e60 <Seperate_Circkel+0x40>
	{
		//Passing the value to an array
		aryvul[i]= token;
 8000e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	3330      	adds	r3, #48	; 0x30
 8000e48:	443b      	add	r3, r7
 8000e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e4c:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 8000e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e52:	3301      	adds	r3, #1
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000e56:	4924      	ldr	r1, [pc, #144]	; (8000ee8 <Seperate_Circkel+0xc8>)
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f004 fe53 	bl	8005b04 <strtok>
 8000e5e:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1ed      	bne.n	8000e42 <Seperate_Circkel+0x22>
	}


	//Fills the struct
	commando.x_1 = (uint16_t)atoi(aryvul[ARRAY_FIRST_lOCATION]);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f004 fac7 	bl	80053fc <atoi>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <Seperate_Circkel+0xd0>)
 8000e74:	819a      	strh	r2, [r3, #12]
	commando.y_1 = (uint16_t)atoi(aryvul[ARRAY_SECOND_lOCATION]);
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f004 fabf 	bl	80053fc <atoi>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <Seperate_Circkel+0xd0>)
 8000e84:	81da      	strh	r2, [r3, #14]
	commando.x_2 = (uint16_t)atoi(aryvul[ARRAY_THIRD_lOCATION]);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f004 fab7 	bl	80053fc <atoi>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <Seperate_Circkel+0xd0>)
 8000e94:	821a      	strh	r2, [r3, #16]
	commando.y_2 = (uint16_t)atoi(aryvul[ARRAY_FOURTH_lOCATION]);
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f004 faaf 	bl	80053fc <atoi>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <Seperate_Circkel+0xd0>)
 8000ea4:	825a      	strh	r2, [r3, #18]
	commando.kleur = (uint8_t)atoi(aryvul[ARRAY_FIFTH_lOCATION]);
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f004 faa7 	bl	80053fc <atoi>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <Seperate_Circkel+0xd0>)
 8000eb4:	751a      	strb	r2, [r3, #20]
	commando.gevuld = (uint8_t)atoi(aryvul[ARRAY_SIXTH_lOCATION]);
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f004 fa9f 	bl	80053fc <atoi>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <Seperate_Circkel+0xd0>)
 8000ec4:	759a      	strb	r2, [r3, #22]

	//Jumps into the function that will draw a circle
	API_In_DrawCirckel(commando);
 8000ec6:	4c0a      	ldr	r4, [pc, #40]	; (8000ef0 <Seperate_Circkel+0xd0>)
 8000ec8:	4668      	mov	r0, sp
 8000eca:	f104 0310 	add.w	r3, r4, #16
 8000ece:	2288      	movs	r2, #136	; 0x88
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f004 fc8e 	bl	80057f2 <memcpy>
 8000ed6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000eda:	f7ff fe22 	bl	8000b22 <API_In_DrawCirckel>


}
 8000ede:	bf00      	nop
 8000ee0:	3734      	adds	r7, #52	; 0x34
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd90      	pop	{r4, r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	08006770 	.word	0x08006770
 8000eec:	200009ad 	.word	0x200009ad
 8000ef0:	20000910 	.word	0x20000910

08000ef4 <Seperate_Text>:
  * @retval None
  */


void Seperate_Text(void)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b0af      	sub	sp, #188	; 0xbc
 8000ef8:	af22      	add	r7, sp, #136	; 0x88
	int i = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000efe:	463b      	mov	r3, r7
 8000f00:	2228      	movs	r2, #40	; 0x28
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f004 fc82 	bl	800580e <memset>

	//Comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000f0a:	4924      	ldr	r1, [pc, #144]	; (8000f9c <Seperate_Text+0xa8>)
 8000f0c:	4824      	ldr	r0, [pc, #144]	; (8000fa0 <Seperate_Text+0xac>)
 8000f0e:	f004 fdf9 	bl	8005b04 <strtok>
 8000f12:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 8000f14:	e00e      	b.n	8000f34 <Seperate_Text+0x40>
	{
		//Passing the value to an array
		aryvul[i]= token;
 8000f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	3330      	adds	r3, #48	; 0x30
 8000f1c:	443b      	add	r3, r7
 8000f1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f20:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 8000f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f26:	3301      	adds	r3, #1
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000f2a:	491c      	ldr	r1, [pc, #112]	; (8000f9c <Seperate_Text+0xa8>)
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f004 fde9 	bl	8005b04 <strtok>
 8000f32:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1ed      	bne.n	8000f16 <Seperate_Text+0x22>
	}

	//Fills the struct
	commando.x = (uint16_t)atoi(aryvul[ARRAY_FIRST_lOCATION]);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fa5d 	bl	80053fc <atoi>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <Seperate_Text+0xb0>)
 8000f4a:	61da      	str	r2, [r3, #28]
	commando.y = (uint16_t)atoi(aryvul[ARRAY_SECOND_lOCATION]);
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f004 fa54 	bl	80053fc <atoi>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <Seperate_Text+0xb0>)
 8000f5c:	621a      	str	r2, [r3, #32]
	commando.text_kleur = (uint8_t)atoi(aryvul[ARRAY_THIRD_lOCATION]);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f004 fa4b 	bl	80053fc <atoi>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <Seperate_Text+0xb0>)
 8000f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	strncpy(commando.tekst, aryvul[ARRAY_FOURTH_lOCATION] , sizeof(commando.x_1));
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	2202      	movs	r2, #2
 8000f74:	4619      	mov	r1, r3
 8000f76:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <Seperate_Text+0xb4>)
 8000f78:	f004 fdb1 	bl	8005ade <strncpy>

	//Jumps into the function that will draw text
	API_In_DrawText(commando);
 8000f7c:	4c09      	ldr	r4, [pc, #36]	; (8000fa4 <Seperate_Text+0xb0>)
 8000f7e:	4668      	mov	r0, sp
 8000f80:	f104 0310 	add.w	r3, r4, #16
 8000f84:	2288      	movs	r2, #136	; 0x88
 8000f86:	4619      	mov	r1, r3
 8000f88:	f004 fc33 	bl	80057f2 <memcpy>
 8000f8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f90:	f7ff fddb 	bl	8000b4a <API_In_DrawText>


}
 8000f94:	bf00      	nop
 8000f96:	3734      	adds	r7, #52	; 0x34
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	08006770 	.word	0x08006770
 8000fa0:	200009ad 	.word	0x200009ad
 8000fa4:	20000910 	.word	0x20000910
 8000fa8:	20000935 	.word	0x20000935

08000fac <Seperate_Bitmap>:
  * @note  Fills the variables in the struct
  * @retval None
  */

void Seperate_Bitmap(void)
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b0af      	sub	sp, #188	; 0xbc
 8000fb0:	af22      	add	r7, sp, #136	; 0x88
	int i = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2228      	movs	r2, #40	; 0x28
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 fc26 	bl	800580e <memset>

	//Comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000fc2:	4917      	ldr	r1, [pc, #92]	; (8001020 <Seperate_Bitmap+0x74>)
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <Seperate_Bitmap+0x78>)
 8000fc6:	f004 fd9d 	bl	8005b04 <strtok>
 8000fca:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 8000fcc:	e00e      	b.n	8000fec <Seperate_Bitmap+0x40>
	{
		//Passing the value to an array
		aryvul[i]= token;
 8000fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	3330      	adds	r3, #48	; 0x30
 8000fd4:	443b      	add	r3, r7
 8000fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fd8:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 8000fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fde:	3301      	adds	r3, #1
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000fe2:	490f      	ldr	r1, [pc, #60]	; (8001020 <Seperate_Bitmap+0x74>)
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f004 fd8d 	bl	8005b04 <strtok>
 8000fea:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 8000fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1ed      	bne.n	8000fce <Seperate_Bitmap+0x22>
 8000ff2:	893a      	ldrh	r2, [r7, #8]
	}

	//Fills the struct
	// memcpy(&commando.nr, &aryvul[ARRAY_FIRST_lOCATION] , sizeof(commando.x_1));
	 memcpy(&commando.x_1, &aryvul[ARRAY_SECOND_lOCATION] , sizeof(commando.x_1));
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <Seperate_Bitmap+0x7c>)
 8000ff6:	819a      	strh	r2, [r3, #12]
 8000ff8:	89ba      	ldrh	r2, [r7, #12]
	 memcpy(&commando.y_1, &aryvul[ARRAY_THIRD_lOCATION] , sizeof(commando.x_1));
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <Seperate_Bitmap+0x7c>)
 8000ffc:	81da      	strh	r2, [r3, #14]

	 //Jumps into the function that will draw a bitmap
	 API_In_Bitmap(commando);
 8000ffe:	4c0a      	ldr	r4, [pc, #40]	; (8001028 <Seperate_Bitmap+0x7c>)
 8001000:	4668      	mov	r0, sp
 8001002:	f104 0310 	add.w	r3, r4, #16
 8001006:	2288      	movs	r2, #136	; 0x88
 8001008:	4619      	mov	r1, r3
 800100a:	f004 fbf2 	bl	80057f2 <memcpy>
 800100e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001012:	f7ff fdaf 	bl	8000b74 <API_In_Bitmap>

}
 8001016:	bf00      	nop
 8001018:	3734      	adds	r7, #52	; 0x34
 800101a:	46bd      	mov	sp, r7
 800101c:	bd90      	pop	{r4, r7, pc}
 800101e:	bf00      	nop
 8001020:	08006770 	.word	0x08006770
 8001024:	200009ad 	.word	0x200009ad
 8001028:	20000910 	.word	0x20000910

0800102c <Seperate_Clearscreen>:
  * @note  Shifting the index of the input-buffer-array, reset the screen color
  * @retval None
  */

void Seperate_Clearscreen(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
	int  i;
	char temp;
	int pos = INDEX_COLOR;
 8001032:	230c      	movs	r3, #12
 8001034:	60bb      	str	r3, [r7, #8]

	//Shifting the input index
	while(pos)
 8001036:	e01f      	b.n	8001078 <Seperate_Clearscreen+0x4c>
	{
		temp = input.line_rx_buffer[0];
 8001038:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <Seperate_Clearscreen+0xb8>)
 800103a:	785b      	ldrb	r3, [r3, #1]
 800103c:	71fb      	strb	r3, [r7, #7]
		for(i = 0; i < 1024 - 1; i++)
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	e00d      	b.n	8001060 <Seperate_Clearscreen+0x34>
			input.line_rx_buffer[i] = input.line_rx_buffer[i + 1];
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3301      	adds	r3, #1
 8001048:	4a26      	ldr	r2, [pc, #152]	; (80010e4 <Seperate_Clearscreen+0xb8>)
 800104a:	4413      	add	r3, r2
 800104c:	7859      	ldrb	r1, [r3, #1]
 800104e:	4a25      	ldr	r2, [pc, #148]	; (80010e4 <Seperate_Clearscreen+0xb8>)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	3301      	adds	r3, #1
 8001056:	460a      	mov	r2, r1
 8001058:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < 1024 - 1; i++)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3301      	adds	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001066:	4293      	cmp	r3, r2
 8001068:	ddec      	ble.n	8001044 <Seperate_Clearscreen+0x18>

		input.line_rx_buffer[1024 - 1] = temp;
 800106a:	4a1e      	ldr	r2, [pc, #120]	; (80010e4 <Seperate_Clearscreen+0xb8>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f882 3400 	strb.w	r3, [r2, #1024]	; 0x400
		pos--;
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	3b01      	subs	r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
	while(pos)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1dc      	bne.n	8001038 <Seperate_Clearscreen+0xc>
	}

	//Reset the screen color
	if(strncmp(input.line_rx_buffer, "rood", sizeof(input.line_rx_buffer)) == 0) UB_VGA_FillScreen(VGA_COL_RED);
 800107e:	491a      	ldr	r1, [pc, #104]	; (80010e8 <Seperate_Clearscreen+0xbc>)
 8001080:	481a      	ldr	r0, [pc, #104]	; (80010ec <Seperate_Clearscreen+0xc0>)
 8001082:	f7ff f8a5 	bl	80001d0 <strcmp>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d103      	bne.n	8001094 <Seperate_Clearscreen+0x68>
 800108c:	20e0      	movs	r0, #224	; 0xe0
 800108e:	f000 fddb 	bl	8001c48 <UB_VGA_FillScreen>
	else if(strncmp(input.line_rx_buffer, "zwart", sizeof(input.line_rx_buffer)) == 0) UB_VGA_FillScreen(VGA_COL_BLACK);
	else if(strncmp(input.line_rx_buffer, "groen", sizeof(input.line_rx_buffer)) == 0) UB_VGA_FillScreen(VGA_COL_GREEN);
	else if(strncmp(input.line_rx_buffer, "wit", sizeof(input.line_rx_buffer)) == 0) UB_VGA_FillScreen(VGA_COL_WHITE);
	else UB_VGA_FillScreen(VGA_COL_BLUE);
}
 8001092:	e023      	b.n	80010dc <Seperate_Clearscreen+0xb0>
	else if(strncmp(input.line_rx_buffer, "zwart", sizeof(input.line_rx_buffer)) == 0) UB_VGA_FillScreen(VGA_COL_BLACK);
 8001094:	4916      	ldr	r1, [pc, #88]	; (80010f0 <Seperate_Clearscreen+0xc4>)
 8001096:	4815      	ldr	r0, [pc, #84]	; (80010ec <Seperate_Clearscreen+0xc0>)
 8001098:	f7ff f89a 	bl	80001d0 <strcmp>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d103      	bne.n	80010aa <Seperate_Clearscreen+0x7e>
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 fdd0 	bl	8001c48 <UB_VGA_FillScreen>
}
 80010a8:	e018      	b.n	80010dc <Seperate_Clearscreen+0xb0>
	else if(strncmp(input.line_rx_buffer, "groen", sizeof(input.line_rx_buffer)) == 0) UB_VGA_FillScreen(VGA_COL_GREEN);
 80010aa:	4912      	ldr	r1, [pc, #72]	; (80010f4 <Seperate_Clearscreen+0xc8>)
 80010ac:	480f      	ldr	r0, [pc, #60]	; (80010ec <Seperate_Clearscreen+0xc0>)
 80010ae:	f7ff f88f 	bl	80001d0 <strcmp>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d103      	bne.n	80010c0 <Seperate_Clearscreen+0x94>
 80010b8:	201c      	movs	r0, #28
 80010ba:	f000 fdc5 	bl	8001c48 <UB_VGA_FillScreen>
}
 80010be:	e00d      	b.n	80010dc <Seperate_Clearscreen+0xb0>
	else if(strncmp(input.line_rx_buffer, "wit", sizeof(input.line_rx_buffer)) == 0) UB_VGA_FillScreen(VGA_COL_WHITE);
 80010c0:	490d      	ldr	r1, [pc, #52]	; (80010f8 <Seperate_Clearscreen+0xcc>)
 80010c2:	480a      	ldr	r0, [pc, #40]	; (80010ec <Seperate_Clearscreen+0xc0>)
 80010c4:	f7ff f884 	bl	80001d0 <strcmp>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d103      	bne.n	80010d6 <Seperate_Clearscreen+0xaa>
 80010ce:	20ff      	movs	r0, #255	; 0xff
 80010d0:	f000 fdba 	bl	8001c48 <UB_VGA_FillScreen>
}
 80010d4:	e002      	b.n	80010dc <Seperate_Clearscreen+0xb0>
	else UB_VGA_FillScreen(VGA_COL_BLUE);
 80010d6:	2003      	movs	r0, #3
 80010d8:	f000 fdb6 	bl	8001c48 <UB_VGA_FillScreen>
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200009ac 	.word	0x200009ac
 80010e8:	08006774 	.word	0x08006774
 80010ec:	200009ad 	.word	0x200009ad
 80010f0:	0800677c 	.word	0x0800677c
 80010f4:	08006784 	.word	0x08006784
 80010f8:	0800678c 	.word	0x0800678c

080010fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_DMA_Init+0x3c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <MX_DMA_Init+0x3c>)
 800110c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_DMA_Init+0x3c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	2044      	movs	r0, #68	; 0x44
 8001124:	f000 ff29 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001128:	2044      	movs	r0, #68	; 0x44
 800112a:	f000 ff42 	bl	8001fb2 <HAL_NVIC_EnableIRQ>

}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b32      	ldr	r3, [pc, #200]	; (8001220 <MX_GPIO_Init+0xe4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a31      	ldr	r2, [pc, #196]	; (8001220 <MX_GPIO_Init+0xe4>)
 800115c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <MX_GPIO_Init+0xe4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <MX_GPIO_Init+0xe4>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a2a      	ldr	r2, [pc, #168]	; (8001220 <MX_GPIO_Init+0xe4>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <MX_GPIO_Init+0xe4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <MX_GPIO_Init+0xe4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a23      	ldr	r2, [pc, #140]	; (8001220 <MX_GPIO_Init+0xe4>)
 8001194:	f043 0310 	orr.w	r3, r3, #16
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <MX_GPIO_Init+0xe4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <MX_GPIO_Init+0xe4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <MX_GPIO_Init+0xe4>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_GPIO_Init+0xe4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80011c8:	4816      	ldr	r0, [pc, #88]	; (8001224 <MX_GPIO_Init+0xe8>)
 80011ca:	f001 fc3b 	bl	8002a44 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d4:	4814      	ldr	r0, [pc, #80]	; (8001228 <MX_GPIO_Init+0xec>)
 80011d6:	f001 fc35 	bl	8002a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80011da:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80011de:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	480c      	ldr	r0, [pc, #48]	; (8001224 <MX_GPIO_Init+0xe8>)
 80011f4:	f001 fa8a 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80011f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_GPIO_Init+0xec>)
 8001212:	f001 fa7b 	bl	800270c <HAL_GPIO_Init>

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40021000 	.word	0x40021000
 8001228:	40020400 	.word	0x40020400

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001232:	f000 fd55 	bl	8001ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001236:	f000 f82f 	bl	8001298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123a:	f7ff ff7f 	bl	800113c <MX_GPIO_Init>
  MX_DMA_Init();
 800123e:	f7ff ff5d 	bl	80010fc <MX_DMA_Init>
  MX_TIM1_Init();
 8001242:	f000 faa3 	bl	800178c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001246:	f000 faf1 	bl	800182c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800124a:	f000 fc07 	bl	8001a5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 800124e:	f000 fca9 	bl	8001ba4 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLUE);
 8001252:	2003      	movs	r0, #3
 8001254:	f000 fcf8 	bl	8001c48 <UB_VGA_FillScreen>


  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8001258:	2201      	movs	r2, #1
 800125a:	490d      	ldr	r1, [pc, #52]	; (8001290 <main+0x64>)
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <main+0x68>)
 800125e:	f003 f91f 	bl	80044a0 <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  //unsigned char colorTest = TRUE;

  /* USER CODE END 2 */
plotRect(100,50,90,50,VGA_COL_GREEN,0);
 8001262:	2300      	movs	r3, #0
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	231c      	movs	r3, #28
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2332      	movs	r3, #50	; 0x32
 800126c:	225a      	movs	r2, #90	; 0x5a
 800126e:	2132      	movs	r1, #50	; 0x32
 8001270:	2064      	movs	r0, #100	; 0x64
 8001272:	f7ff fa8a 	bl	800078a <plotRect>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 if(input.command_execute_flag == TRUE)
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <main+0x64>)
 8001278:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800127c:	2bff      	cmp	r3, #255	; 0xff
 800127e:	d1fa      	bne.n	8001276 <main+0x4a>
	  {
		 API_Getcommand();
 8001280:	f7ff f990 	bl	80005a4 <API_Getcommand>

		 //clear the buffer


	  // When finished reset the flag
	     input.command_execute_flag = FALSE;
 8001284:	4b02      	ldr	r3, [pc, #8]	; (8001290 <main+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	 if(input.command_execute_flag == TRUE)
 800128c:	e7f3      	b.n	8001276 <main+0x4a>
 800128e:	bf00      	nop
 8001290:	200009ac 	.word	0x200009ac
 8001294:	20000ea0 	.word	0x20000ea0

08001298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b094      	sub	sp, #80	; 0x50
 800129c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	2230      	movs	r2, #48	; 0x30
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f004 fab1 	bl	800580e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <SystemClock_Config+0xcc>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	4a27      	ldr	r2, [pc, #156]	; (8001364 <SystemClock_Config+0xcc>)
 80012c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ca:	6413      	str	r3, [r2, #64]	; 0x40
 80012cc:	4b25      	ldr	r3, [pc, #148]	; (8001364 <SystemClock_Config+0xcc>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <SystemClock_Config+0xd0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <SystemClock_Config+0xd0>)
 80012e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <SystemClock_Config+0xd0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f4:	2301      	movs	r3, #1
 80012f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fe:	2302      	movs	r3, #2
 8001300:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001302:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001308:	2304      	movs	r3, #4
 800130a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800130c:	23a8      	movs	r3, #168	; 0xa8
 800130e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001310:	2302      	movs	r3, #2
 8001312:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001314:	2304      	movs	r3, #4
 8001316:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	4618      	mov	r0, r3
 800131e:	f001 fbab 	bl	8002a78 <HAL_RCC_OscConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001328:	f000 f832 	bl	8001390 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132c:	230f      	movs	r3, #15
 800132e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001330:	2302      	movs	r3, #2
 8001332:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001338:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800133c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001342:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2105      	movs	r1, #5
 800134a:	4618      	mov	r0, r3
 800134c:	f001 fe02 	bl	8002f54 <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001356:	f000 f81b 	bl	8001390 <Error_Handler>
  }
}
 800135a:	bf00      	nop
 800135c:	3750      	adds	r7, #80	; 0x50
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40007000 	.word	0x40007000

0800136c <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8001374:	1d39      	adds	r1, r7, #4
 8001376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800137a:	2201      	movs	r2, #1
 800137c:	4803      	ldr	r0, [pc, #12]	; (800138c <__io_putchar+0x20>)
 800137e:	f002 fff6 	bl	800436e <HAL_UART_Transmit>
	return ch;												//Return the character
 8001382:	687b      	ldr	r3, [r7, #4]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000ea0 	.word	0x20000ea0

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_MspInit+0x4c>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_MspInit+0x4c>)
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b4:	6453      	str	r3, [r2, #68]	; 0x44
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_MspInit+0x4c>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_MspInit+0x4c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <HAL_MspInit+0x4c>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_MspInit+0x4c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <MemManage_Handler+0x4>

0800140a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <UsageFault_Handler+0x4>

08001416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001444:	f000 fc9e 	bl	8001d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001450:	4828      	ldr	r0, [pc, #160]	; (80014f4 <TIM2_IRQHandler+0xa8>)
 8001452:	f002 f8db 	bl	800360c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8001456:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <TIM2_IRQHandler+0xa8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f06f 0208 	mvn.w	r2, #8
 800145e:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <TIM2_IRQHandler+0xac>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	b29a      	uxth	r2, r3
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <TIM2_IRQHandler+0xac>)
 800146a:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 800146c:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <TIM2_IRQHandler+0xac>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8001474:	d905      	bls.n	8001482 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <TIM2_IRQHandler+0xac>)
 8001478:	2200      	movs	r2, #0
 800147a:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 800147c:	4a1f      	ldr	r2, [pc, #124]	; (80014fc <TIM2_IRQHandler+0xb0>)
 800147e:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <TIM2_IRQHandler+0xac>)
 8001480:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <TIM2_IRQHandler+0xac>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d802      	bhi.n	8001490 <TIM2_IRQHandler+0x44>
 800148a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800148e:	e001      	b.n	8001494 <TIM2_IRQHandler+0x48>
 8001490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001494:	4a1a      	ldr	r2, [pc, #104]	; (8001500 <TIM2_IRQHandler+0xb4>)
 8001496:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <TIM2_IRQHandler+0xac>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	2b23      	cmp	r3, #35	; 0x23
 800149e:	d927      	bls.n	80014f0 <TIM2_IRQHandler+0xa4>
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <TIM2_IRQHandler+0xac>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	f240 2202 	movw	r2, #514	; 0x202
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d821      	bhi.n	80014f0 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 80014ac:	4a15      	ldr	r2, [pc, #84]	; (8001504 <TIM2_IRQHandler+0xb8>)
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <TIM2_IRQHandler+0xac>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80014b4:	4a13      	ldr	r2, [pc, #76]	; (8001504 <TIM2_IRQHandler+0xb8>)
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <TIM2_IRQHandler+0xac>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <TIM2_IRQHandler+0xbc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a11      	ldr	r2, [pc, #68]	; (8001508 <TIM2_IRQHandler+0xbc>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <TIM2_IRQHandler+0xc0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <TIM2_IRQHandler+0xc0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0201 	orr.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <TIM2_IRQHandler+0xac>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <TIM2_IRQHandler+0xac>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f203 1341 	addw	r3, r3, #321	; 0x141
 80014ec:	4a02      	ldr	r2, [pc, #8]	; (80014f8 <TIM2_IRQHandler+0xac>)
 80014ee:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000e00 	.word	0x20000e00
 80014f8:	20013bd0 	.word	0x20013bd0
 80014fc:	20000ee0 	.word	0x20000ee0
 8001500:	40020400 	.word	0x40020400
 8001504:	40026488 	.word	0x40026488
 8001508:	40010000 	.word	0x40010000
 800150c:	20000e40 	.word	0x20000e40

08001510 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <USART2_IRQHandler+0x78>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	71fb      	strb	r3, [r7, #7]


//	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2b0a      	cmp	r3, #10
 8001520:	d026      	beq.n	8001570 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b0d      	cmp	r3, #13
 8001526:	d002      	beq.n	800152e <USART2_IRQHandler+0x1e>
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b2e      	cmp	r3, #46	; 0x2e
 800152c:	d10e      	bne.n	800154c <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <USART2_IRQHandler+0x7c>)
 8001530:	22ff      	movs	r2, #255	; 0xff
 8001532:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <USART2_IRQHandler+0x7c>)
 8001538:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800153c:	4a13      	ldr	r2, [pc, #76]	; (800158c <USART2_IRQHandler+0x7c>)
 800153e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <USART2_IRQHandler+0x7c>)
 8001544:	2200      	movs	r2, #0
 8001546:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800154a:	e011      	b.n	8001570 <USART2_IRQHandler+0x60>

		}
		else
		{
			input.command_execute_flag = FALSE;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <USART2_IRQHandler+0x7c>)
 800154e:	2200      	movs	r2, #0
 8001550:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <USART2_IRQHandler+0x7c>)
 8001556:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800155a:	4a0c      	ldr	r2, [pc, #48]	; (800158c <USART2_IRQHandler+0x7c>)
 800155c:	4413      	add	r3, r2
 800155e:	79fa      	ldrb	r2, [r7, #7]
 8001560:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <USART2_IRQHandler+0x7c>)
 8001564:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001568:	3301      	adds	r3, #1
 800156a:	4a08      	ldr	r2, [pc, #32]	; (800158c <USART2_IRQHandler+0x7c>)
 800156c:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}

	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001570:	4807      	ldr	r0, [pc, #28]	; (8001590 <USART2_IRQHandler+0x80>)
 8001572:	f002 ffeb 	bl	800454c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8001576:	2201      	movs	r2, #1
 8001578:	4904      	ldr	r1, [pc, #16]	; (800158c <USART2_IRQHandler+0x7c>)
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <USART2_IRQHandler+0x80>)
 800157c:	f002 ff90 	bl	80044a0 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */

}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40004400 	.word	0x40004400
 800158c:	200009ac 	.word	0x200009ac
 8001590:	20000ea0 	.word	0x20000ea0

08001594 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <DMA2_Stream5_IRQHandler+0x48>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6a1a      	ldr	r2, [r3, #32]
 800159e:	f241 1311 	movw	r3, #4369	; 0x1111
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10f      	bne.n	80015c8 <DMA2_Stream5_IRQHandler+0x34>
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <DMA2_Stream5_IRQHandler+0x48>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6a1a      	ldr	r2, [r3, #32]
 80015ae:	f240 4344 	movw	r3, #1092	; 0x444
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d107      	bne.n	80015c8 <DMA2_Stream5_IRQHandler+0x34>
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <DMA2_Stream5_IRQHandler+0x48>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <DMA2_Stream5_IRQHandler+0x48>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0201 	bic.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <DMA2_Stream5_IRQHandler+0x4c>)
 80015ca:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80015ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <DMA2_Stream5_IRQHandler+0x50>)
 80015d2:	f000 fe31 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000dc0 	.word	0x20000dc0
 80015e0:	40021000 	.word	0x40021000
 80015e4:	20000e40 	.word	0x20000e40

080015e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
	return 1;
 80015ec:	2301      	movs	r3, #1
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_kill>:

int _kill(int pid, int sig)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001602:	f003 feff 	bl	8005404 <__errno>
 8001606:	4603      	mov	r3, r0
 8001608:	2216      	movs	r2, #22
 800160a:	601a      	str	r2, [r3, #0]
	return -1;
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <_exit>:

void _exit (int status)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffe7 	bl	80015f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800162a:	e7fe      	b.n	800162a <_exit+0x12>

0800162c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e00a      	b.n	8001654 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800163e:	f3af 8000 	nop.w
 8001642:	4601      	mov	r1, r0
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	60ba      	str	r2, [r7, #8]
 800164a:	b2ca      	uxtb	r2, r1
 800164c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	dbf0      	blt.n	800163e <_read+0x12>
	}

return len;
 800165c:	687b      	ldr	r3, [r7, #4]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	e009      	b.n	800168c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	60ba      	str	r2, [r7, #8]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fe73 	bl	800136c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3301      	adds	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	dbf1      	blt.n	8001678 <_write+0x12>
	}
	return len;
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <_close>:

int _close(int file)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
	return -1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c6:	605a      	str	r2, [r3, #4]
	return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <_isatty>:

int _isatty(int file)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
	return 1;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
	return 0;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <_sbrk+0x50>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <_sbrk+0x16>
		heap_end = &end;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <_sbrk+0x50>)
 800171a:	4a10      	ldr	r2, [pc, #64]	; (800175c <_sbrk+0x54>)
 800171c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <_sbrk+0x50>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <_sbrk+0x50>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	466a      	mov	r2, sp
 800172e:	4293      	cmp	r3, r2
 8001730:	d907      	bls.n	8001742 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001732:	f003 fe67 	bl	8005404 <__errno>
 8001736:	4603      	mov	r3, r0
 8001738:	220c      	movs	r2, #12
 800173a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800173c:	f04f 33ff 	mov.w	r3, #4294967295
 8001740:	e006      	b.n	8001750 <_sbrk+0x48>
	}

	heap_end += incr;
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <_sbrk+0x50>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	4a03      	ldr	r2, [pc, #12]	; (8001758 <_sbrk+0x50>)
 800174c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800174e:	68fb      	ldr	r3, [r7, #12]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000dbc 	.word	0x20000dbc
 800175c:	20013bf0 	.word	0x20013bf0

08001760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <SystemInit+0x28>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176a:	4a07      	ldr	r2, [pc, #28]	; (8001788 <SystemInit+0x28>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <SystemInit+0x28>)
 8001776:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800177a:	609a      	str	r2, [r3, #8]
#endif
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	463b      	mov	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <MX_TIM1_Init+0x98>)
 80017aa:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <MX_TIM1_Init+0x9c>)
 80017ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_TIM1_Init+0x98>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <MX_TIM1_Init+0x98>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_TIM1_Init+0x98>)
 80017bc:	220b      	movs	r2, #11
 80017be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_TIM1_Init+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MX_TIM1_Init+0x98>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_TIM1_Init+0x98>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017d2:	4814      	ldr	r0, [pc, #80]	; (8001824 <MX_TIM1_Init+0x98>)
 80017d4:	f001 fdde 	bl	8003394 <HAL_TIM_Base_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80017de:	f7ff fdd7 	bl	8001390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	4619      	mov	r1, r3
 80017ee:	480d      	ldr	r0, [pc, #52]	; (8001824 <MX_TIM1_Init+0x98>)
 80017f0:	f002 f8da 	bl	80039a8 <HAL_TIM_ConfigClockSource>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80017fa:	f7ff fdc9 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	; (8001824 <MX_TIM1_Init+0x98>)
 800180c:	f002 fcd2 	bl	80041b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001816:	f7ff fdbb 	bl	8001390 <Error_Handler>
  }

}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000dc0 	.word	0x20000dc0
 8001828:	40010000 	.word	0x40010000

0800182c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001832:	f107 0320 	add.w	r3, r7, #32
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]
 800184a:	615a      	str	r2, [r3, #20]
 800184c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <MX_TIM2_Init+0xcc>)
 8001850:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001854:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8001856:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <MX_TIM2_Init+0xcc>)
 8001858:	2200      	movs	r2, #0
 800185a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <MX_TIM2_Init+0xcc>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <MX_TIM2_Init+0xcc>)
 8001864:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001868:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <MX_TIM2_Init+0xcc>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001870:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <MX_TIM2_Init+0xcc>)
 8001872:	2200      	movs	r2, #0
 8001874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001876:	4820      	ldr	r0, [pc, #128]	; (80018f8 <MX_TIM2_Init+0xcc>)
 8001878:	f001 fddb 	bl	8003432 <HAL_TIM_PWM_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001882:	f7ff fd85 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	4619      	mov	r1, r3
 8001894:	4818      	ldr	r0, [pc, #96]	; (80018f8 <MX_TIM2_Init+0xcc>)
 8001896:	f002 fc8d 	bl	80041b4 <HAL_TIMEx_MasterConfigSynchronization>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80018a0:	f7ff fd76 	bl	8001390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a4:	2360      	movs	r3, #96	; 0x60
 80018a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 80018a8:	f240 13bb 	movw	r3, #443	; 0x1bb
 80018ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80018ae:	2302      	movs	r3, #2
 80018b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2208      	movs	r2, #8
 80018ba:	4619      	mov	r1, r3
 80018bc:	480e      	ldr	r0, [pc, #56]	; (80018f8 <MX_TIM2_Init+0xcc>)
 80018be:	f001 ffad 	bl	800381c <HAL_TIM_PWM_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80018c8:	f7ff fd62 	bl	8001390 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 80018cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80018d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	220c      	movs	r2, #12
 80018d6:	4619      	mov	r1, r3
 80018d8:	4807      	ldr	r0, [pc, #28]	; (80018f8 <MX_TIM2_Init+0xcc>)
 80018da:	f001 ff9f 	bl	800381c <HAL_TIM_PWM_ConfigChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80018e4:	f7ff fd54 	bl	8001390 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80018e8:	4803      	ldr	r0, [pc, #12]	; (80018f8 <MX_TIM2_Init+0xcc>)
 80018ea:	f000 f87f 	bl	80019ec <HAL_TIM_MspPostInit>

}
 80018ee:	bf00      	nop
 80018f0:	3728      	adds	r7, #40	; 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000e00 	.word	0x20000e00

080018fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a21      	ldr	r2, [pc, #132]	; (8001990 <HAL_TIM_Base_MspInit+0x94>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d13c      	bne.n	8001988 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_TIM_Base_MspInit+0x98>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	4a1f      	ldr	r2, [pc, #124]	; (8001994 <HAL_TIM_Base_MspInit+0x98>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6453      	str	r3, [r2, #68]	; 0x44
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <HAL_TIM_Base_MspInit+0x98>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_TIM_Base_MspInit+0x9c>)
 800192c:	4a1b      	ldr	r2, [pc, #108]	; (800199c <HAL_TIM_Base_MspInit+0xa0>)
 800192e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_TIM_Base_MspInit+0x9c>)
 8001932:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001936:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_TIM_Base_MspInit+0x9c>)
 800193a:	2240      	movs	r2, #64	; 0x40
 800193c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <HAL_TIM_Base_MspInit+0x9c>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_TIM_Base_MspInit+0x9c>)
 8001946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800194a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_TIM_Base_MspInit+0x9c>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_TIM_Base_MspInit+0x9c>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_TIM_Base_MspInit+0x9c>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_TIM_Base_MspInit+0x9c>)
 8001960:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001964:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_TIM_Base_MspInit+0x9c>)
 8001968:	2200      	movs	r2, #0
 800196a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 800196c:	480a      	ldr	r0, [pc, #40]	; (8001998 <HAL_TIM_Base_MspInit+0x9c>)
 800196e:	f000 fb3b 	bl	8001fe8 <HAL_DMA_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8001978:	f7ff fd0a 	bl	8001390 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a06      	ldr	r2, [pc, #24]	; (8001998 <HAL_TIM_Base_MspInit+0x9c>)
 8001980:	621a      	str	r2, [r3, #32]
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <HAL_TIM_Base_MspInit+0x9c>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40010000 	.word	0x40010000
 8001994:	40023800 	.word	0x40023800
 8001998:	20000e40 	.word	0x20000e40
 800199c:	40026488 	.word	0x40026488

080019a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b0:	d115      	bne.n	80019de <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <HAL_TIM_PWM_MspInit+0x48>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <HAL_TIM_PWM_MspInit+0x48>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_TIM_PWM_MspInit+0x48>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	201c      	movs	r0, #28
 80019d4:	f000 fad1 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019d8:	201c      	movs	r0, #28
 80019da:	f000 faea 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800

080019ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0c:	d11e      	bne.n	8001a4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_TIM_MspPostInit+0x68>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <HAL_TIM_MspPostInit+0x68>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_TIM_MspPostInit+0x68>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8001a2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4619      	mov	r1, r3
 8001a46:	4804      	ldr	r0, [pc, #16]	; (8001a58 <HAL_TIM_MspPostInit+0x6c>)
 8001a48:	f000 fe60 	bl	800270c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a4c:	bf00      	nop
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020400 	.word	0x40020400

08001a5c <MX_USART2_UART_Init>:
/* USART2 init function */



void MX_USART2_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <MX_USART2_UART_Init+0x50>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a94:	f002 fc1e 	bl	80042d4 <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a9e:	f7ff fc77 	bl	8001390 <Error_Handler>
  }

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000ea0 	.word	0x20000ea0
 8001aac:	40004400 	.word	0x40004400

08001ab0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <HAL_UART_MspInit+0x94>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d133      	bne.n	8001b3a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_UART_MspInit+0x98>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <HAL_UART_MspInit+0x98>)
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_UART_MspInit+0x98>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_UART_MspInit+0x98>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <HAL_UART_MspInit+0x98>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_UART_MspInit+0x98>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b0a:	230c      	movs	r3, #12
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4809      	ldr	r0, [pc, #36]	; (8001b4c <HAL_UART_MspInit+0x9c>)
 8001b26:	f000 fdf1 	bl	800270c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	2026      	movs	r0, #38	; 0x26
 8001b30:	f000 fa23 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b34:	2026      	movs	r0, #38	; 0x26
 8001b36:	f000 fa3c 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3728      	adds	r7, #40	; 0x28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40004400 	.word	0x40004400
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020000 	.word	0x40020000

08001b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */    movs  r1, #0
 8001b54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b56:	e003      	b.n	8001b60 <LoopCopyDataInit>

08001b58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b5e:	3104      	adds	r1, #4

08001b60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b60:	480b      	ldr	r0, [pc, #44]	; (8001b90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b68:	d3f6      	bcc.n	8001b58 <CopyDataInit>
  ldr  r2, =_sbss
 8001b6a:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b6c:	e002      	b.n	8001b74 <LoopFillZerobss>

08001b6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b70:	f842 3b04 	str.w	r3, [r2], #4

08001b74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b78:	d3f9      	bcc.n	8001b6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b7a:	f7ff fdf1 	bl	8001760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f003 fe11 	bl	80057a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b82:	f7ff fb53 	bl	800122c <main>
  bx  lr    
 8001b86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b8c:	0800811c 	.word	0x0800811c
  ldr  r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b94:	200008f4 	.word	0x200008f4
  ldr  r2, =_sbss
 8001b98:	200008f4 	.word	0x200008f4
  ldr  r3, = _ebss
 8001b9c:	20013bf0 	.word	0x20013bf0

08001ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba0:	e7fe      	b.n	8001ba0 <ADC_IRQHandler>
	...

08001ba4 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <UB_VGA_Screen_Init+0x84>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <UB_VGA_Screen_Init+0x84>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <UB_VGA_Screen_Init+0x84>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <UB_VGA_Screen_Init+0x88>)
 8001bbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bc0:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8001bc2:	481b      	ldr	r0, [pc, #108]	; (8001c30 <UB_VGA_Screen_Init+0x8c>)
 8001bc4:	f001 fc11 	bl	80033ea <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001bc8:	210c      	movs	r1, #12
 8001bca:	4819      	ldr	r0, [pc, #100]	; (8001c30 <UB_VGA_Screen_Init+0x8c>)
 8001bcc:	f001 fc5c 	bl	8003488 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001bd0:	2108      	movs	r1, #8
 8001bd2:	4817      	ldr	r0, [pc, #92]	; (8001c30 <UB_VGA_Screen_Init+0x8c>)
 8001bd4:	f001 fc96 	bl	8003504 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <UB_VGA_Screen_Init+0x90>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <UB_VGA_Screen_Init+0x90>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001be6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <UB_VGA_Screen_Init+0x90>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <UB_VGA_Screen_Init+0x90>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001bf8:	490f      	ldr	r1, [pc, #60]	; (8001c38 <UB_VGA_Screen_Init+0x94>)
 8001bfa:	f240 1341 	movw	r3, #321	; 0x141
 8001bfe:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <UB_VGA_Screen_Init+0x98>)
 8001c00:	480f      	ldr	r0, [pc, #60]	; (8001c40 <UB_VGA_Screen_Init+0x9c>)
 8001c02:	f000 fa9f 	bl	8002144 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8001c06:	480e      	ldr	r0, [pc, #56]	; (8001c40 <UB_VGA_Screen_Init+0x9c>)
 8001c08:	f000 f9ee 	bl	8001fe8 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <UB_VGA_Screen_Init+0x9c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <UB_VGA_Screen_Init+0x9c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0210 	orr.w	r2, r2, #16
 8001c1a:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <UB_VGA_Screen_Init+0xa0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a01      	ldr	r2, [pc, #4]	; (8001c28 <UB_VGA_Screen_Init+0x84>)
 8001c22:	6093      	str	r3, [r2, #8]
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20013bd0 	.word	0x20013bd0
 8001c2c:	40020400 	.word	0x40020400
 8001c30:	20000e00 	.word	0x20000e00
 8001c34:	20000dc0 	.word	0x20000dc0
 8001c38:	20000ee0 	.word	0x20000ee0
 8001c3c:	40021015 	.word	0x40021015
 8001c40:	20000e40 	.word	0x20000e40
 8001c44:	40026488 	.word	0x40026488

08001c48 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001c52:	2300      	movs	r3, #0
 8001c54:	81bb      	strh	r3, [r7, #12]
 8001c56:	e012      	b.n	8001c7e <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001c58:	2300      	movs	r3, #0
 8001c5a:	81fb      	strh	r3, [r7, #14]
 8001c5c:	e008      	b.n	8001c70 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001c5e:	79fa      	ldrb	r2, [r7, #7]
 8001c60:	89b9      	ldrh	r1, [r7, #12]
 8001c62:	89fb      	ldrh	r3, [r7, #14]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 f813 	bl	8001c90 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001c6a:	89fb      	ldrh	r3, [r7, #14]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	81fb      	strh	r3, [r7, #14]
 8001c70:	89fb      	ldrh	r3, [r7, #14]
 8001c72:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c76:	d3f2      	bcc.n	8001c5e <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001c78:	89bb      	ldrh	r3, [r7, #12]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	81bb      	strh	r3, [r7, #12]
 8001c7e:	89bb      	ldrh	r3, [r7, #12]
 8001c80:	2bef      	cmp	r3, #239	; 0xef
 8001c82:	d9e9      	bls.n	8001c58 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	80bb      	strh	r3, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ca8:	d301      	bcc.n	8001cae <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001cae:	88bb      	ldrh	r3, [r7, #4]
 8001cb0:	2bef      	cmp	r3, #239	; 0xef
 8001cb2:	d901      	bls.n	8001cb8 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001cb8:	88ba      	ldrh	r2, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	019b      	lsls	r3, r3, #6
 8001cc2:	441a      	add	r2, r3
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4904      	ldr	r1, [pc, #16]	; (8001cdc <UB_VGA_SetPixel+0x4c>)
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	54ca      	strb	r2, [r1, r3]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000ee0 	.word	0x20000ee0

08001ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_Init+0x40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <HAL_Init+0x40>)
 8001cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <HAL_Init+0x40>)
 8001cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a07      	ldr	r2, [pc, #28]	; (8001d20 <HAL_Init+0x40>)
 8001d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f000 f92b 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f000 f808 	bl	8001d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d14:	f7ff fb44 	bl	80013a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023c00 	.word	0x40023c00

08001d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_InitTick+0x54>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_InitTick+0x58>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f943 	bl	8001fce <HAL_SYSTICK_Config>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00e      	b.n	8001d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b0f      	cmp	r3, #15
 8001d56:	d80a      	bhi.n	8001d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f000 f90b 	bl	8001f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d64:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <HAL_InitTick+0x5c>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e000      	b.n	8001d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000884 	.word	0x20000884
 8001d7c:	2000088c 	.word	0x2000088c
 8001d80:	20000888 	.word	0x20000888

08001d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_IncTick+0x20>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_IncTick+0x24>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <HAL_IncTick+0x24>)
 8001d96:	6013      	str	r3, [r2, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	2000088c 	.word	0x2000088c
 8001da8:	20013bdc 	.word	0x20013bdc

08001dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return uwTick;
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_GetTick+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20013bdc 	.word	0x20013bdc

08001dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de0:	4013      	ands	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df6:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60d3      	str	r3, [r2, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <__NVIC_GetPriorityGrouping+0x18>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	f003 0307 	and.w	r3, r3, #7
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db0b      	blt.n	8001e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	4907      	ldr	r1, [pc, #28]	; (8001e60 <__NVIC_EnableIRQ+0x38>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2001      	movs	r0, #1
 8001e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100

08001e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db0a      	blt.n	8001e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	490c      	ldr	r1, [pc, #48]	; (8001eb0 <__NVIC_SetPriority+0x4c>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	0112      	lsls	r2, r2, #4
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	440b      	add	r3, r1
 8001e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e8c:	e00a      	b.n	8001ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4908      	ldr	r1, [pc, #32]	; (8001eb4 <__NVIC_SetPriority+0x50>)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3b04      	subs	r3, #4
 8001e9c:	0112      	lsls	r2, r2, #4
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	761a      	strb	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f1c3 0307 	rsb	r3, r3, #7
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	bf28      	it	cs
 8001ed6:	2304      	movcs	r3, #4
 8001ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d902      	bls.n	8001ee8 <NVIC_EncodePriority+0x30>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3b03      	subs	r3, #3
 8001ee6:	e000      	b.n	8001eea <NVIC_EncodePriority+0x32>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	401a      	ands	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	4313      	orrs	r3, r2
         );
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f30:	d301      	bcc.n	8001f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00f      	b.n	8001f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <SysTick_Config+0x40>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3e:	210f      	movs	r1, #15
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f7ff ff8e 	bl	8001e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <SysTick_Config+0x40>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <SysTick_Config+0x40>)
 8001f50:	2207      	movs	r2, #7
 8001f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	e000e010 	.word	0xe000e010

08001f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff29 	bl	8001dc4 <__NVIC_SetPriorityGrouping>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff3e 	bl	8001e0c <__NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff8e 	bl	8001eb8 <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5d 	bl	8001e64 <__NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff31 	bl	8001e28 <__NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffa2 	bl	8001f20 <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff feda 	bl	8001dac <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e099      	b.n	8002138 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002024:	e00f      	b.n	8002046 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002026:	f7ff fec1 	bl	8001dac <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b05      	cmp	r3, #5
 8002032:	d908      	bls.n	8002046 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2203      	movs	r2, #3
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e078      	b.n	8002138 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1e8      	bne.n	8002026 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	4b38      	ldr	r3, [pc, #224]	; (8002140 <HAL_DMA_Init+0x158>)
 8002060:	4013      	ands	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002072:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2b04      	cmp	r3, #4
 800209e:	d107      	bne.n	80020b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	4313      	orrs	r3, r2
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f023 0307 	bic.w	r3, r3, #7
 80020c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d117      	bne.n	800210a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00e      	beq.n	800210a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fa91 	bl	8002614 <DMA_CheckFifoParam>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2240      	movs	r2, #64	; 0x40
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002106:	2301      	movs	r3, #1
 8002108:	e016      	b.n	8002138 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fa48 	bl	80025a8 <DMA_CalcBaseAndBitshift>
 8002118:	4603      	mov	r3, r0
 800211a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	223f      	movs	r2, #63	; 0x3f
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	f010803f 	.word	0xf010803f

08002144 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_DMA_Start_IT+0x26>
 8002166:	2302      	movs	r3, #2
 8002168:	e040      	b.n	80021ec <HAL_DMA_Start_IT+0xa8>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d12f      	bne.n	80021de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2202      	movs	r2, #2
 8002182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f9da 	bl	800254c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219c:	223f      	movs	r2, #63	; 0x3f
 800219e:	409a      	lsls	r2, r3
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0216 	orr.w	r2, r2, #22
 80021b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0208 	orr.w	r2, r2, #8
 80021ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e005      	b.n	80021ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021e6:	2302      	movs	r3, #2
 80021e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d004      	beq.n	8002212 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00c      	b.n	800222c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2205      	movs	r2, #5
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002244:	4b8e      	ldr	r3, [pc, #568]	; (8002480 <HAL_DMA_IRQHandler+0x248>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a8e      	ldr	r2, [pc, #568]	; (8002484 <HAL_DMA_IRQHandler+0x24c>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0a9b      	lsrs	r3, r3, #10
 8002250:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002262:	2208      	movs	r2, #8
 8002264:	409a      	lsls	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01a      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d013      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0204 	bic.w	r2, r2, #4
 800228a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	2208      	movs	r2, #8
 8002292:	409a      	lsls	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	f043 0201 	orr.w	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	2201      	movs	r2, #1
 80022aa:	409a      	lsls	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d012      	beq.n	80022da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	2201      	movs	r2, #1
 80022c8:	409a      	lsls	r2, r3
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d2:	f043 0202 	orr.w	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022de:	2204      	movs	r2, #4
 80022e0:	409a      	lsls	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d012      	beq.n	8002310 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00b      	beq.n	8002310 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	2204      	movs	r2, #4
 80022fe:	409a      	lsls	r2, r3
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002308:	f043 0204 	orr.w	r2, r3, #4
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	2210      	movs	r2, #16
 8002316:	409a      	lsls	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d043      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d03c      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	2210      	movs	r2, #16
 8002334:	409a      	lsls	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d018      	beq.n	800237a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d108      	bne.n	8002368 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d024      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	4798      	blx	r3
 8002366:	e01f      	b.n	80023a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01b      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	4798      	blx	r3
 8002378:	e016      	b.n	80023a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d107      	bne.n	8002398 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0208 	bic.w	r2, r2, #8
 8002396:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ac:	2220      	movs	r2, #32
 80023ae:	409a      	lsls	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 808f 	beq.w	80024d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8087 	beq.w	80024d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	2220      	movs	r2, #32
 80023d0:	409a      	lsls	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b05      	cmp	r3, #5
 80023e0:	d136      	bne.n	8002450 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0216 	bic.w	r2, r2, #22
 80023f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695a      	ldr	r2, [r3, #20]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002400:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d103      	bne.n	8002412 <HAL_DMA_IRQHandler+0x1da>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0208 	bic.w	r2, r2, #8
 8002420:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	223f      	movs	r2, #63	; 0x3f
 8002428:	409a      	lsls	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002442:	2b00      	cmp	r3, #0
 8002444:	d07e      	beq.n	8002544 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
        }
        return;
 800244e:	e079      	b.n	8002544 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01d      	beq.n	800249a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10d      	bne.n	8002488 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002470:	2b00      	cmp	r3, #0
 8002472:	d031      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4798      	blx	r3
 800247c:	e02c      	b.n	80024d8 <HAL_DMA_IRQHandler+0x2a0>
 800247e:	bf00      	nop
 8002480:	20000884 	.word	0x20000884
 8002484:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d023      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
 8002498:	e01e      	b.n	80024d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10f      	bne.n	80024c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0210 	bic.w	r2, r2, #16
 80024b6:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d032      	beq.n	8002546 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d022      	beq.n	8002532 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2205      	movs	r2, #5
 80024f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	3301      	adds	r3, #1
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	429a      	cmp	r2, r3
 800250e:	d307      	bcc.n	8002520 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f2      	bne.n	8002504 <HAL_DMA_IRQHandler+0x2cc>
 800251e:	e000      	b.n	8002522 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002520:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
 8002542:	e000      	b.n	8002546 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002544:	bf00      	nop
    }
  }
}
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002568:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b40      	cmp	r3, #64	; 0x40
 8002578:	d108      	bne.n	800258c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800258a:	e007      	b.n	800259c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	60da      	str	r2, [r3, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	3b10      	subs	r3, #16
 80025b8:	4a14      	ldr	r2, [pc, #80]	; (800260c <DMA_CalcBaseAndBitshift+0x64>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025c2:	4a13      	ldr	r2, [pc, #76]	; (8002610 <DMA_CalcBaseAndBitshift+0x68>)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d909      	bls.n	80025ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025de:	f023 0303 	bic.w	r3, r3, #3
 80025e2:	1d1a      	adds	r2, r3, #4
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	659a      	str	r2, [r3, #88]	; 0x58
 80025e8:	e007      	b.n	80025fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025f2:	f023 0303 	bic.w	r3, r3, #3
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	aaaaaaab 	.word	0xaaaaaaab
 8002610:	08007ebc 	.word	0x08007ebc

08002614 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d11f      	bne.n	800266e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d856      	bhi.n	80026e2 <DMA_CheckFifoParam+0xce>
 8002634:	a201      	add	r2, pc, #4	; (adr r2, 800263c <DMA_CheckFifoParam+0x28>)
 8002636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263a:	bf00      	nop
 800263c:	0800264d 	.word	0x0800264d
 8002640:	0800265f 	.word	0x0800265f
 8002644:	0800264d 	.word	0x0800264d
 8002648:	080026e3 	.word	0x080026e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d046      	beq.n	80026e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265c:	e043      	b.n	80026e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002666:	d140      	bne.n	80026ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800266c:	e03d      	b.n	80026ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002676:	d121      	bne.n	80026bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d837      	bhi.n	80026ee <DMA_CheckFifoParam+0xda>
 800267e:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <DMA_CheckFifoParam+0x70>)
 8002680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002684:	08002695 	.word	0x08002695
 8002688:	0800269b 	.word	0x0800269b
 800268c:	08002695 	.word	0x08002695
 8002690:	080026ad 	.word	0x080026ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
      break;
 8002698:	e030      	b.n	80026fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d025      	beq.n	80026f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026aa:	e022      	b.n	80026f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026b4:	d11f      	bne.n	80026f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026ba:	e01c      	b.n	80026f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d903      	bls.n	80026ca <DMA_CheckFifoParam+0xb6>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d003      	beq.n	80026d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026c8:	e018      	b.n	80026fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
      break;
 80026ce:	e015      	b.n	80026fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00e      	beq.n	80026fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      break;
 80026e0:	e00b      	b.n	80026fa <DMA_CheckFifoParam+0xe6>
      break;
 80026e2:	bf00      	nop
 80026e4:	e00a      	b.n	80026fc <DMA_CheckFifoParam+0xe8>
      break;
 80026e6:	bf00      	nop
 80026e8:	e008      	b.n	80026fc <DMA_CheckFifoParam+0xe8>
      break;
 80026ea:	bf00      	nop
 80026ec:	e006      	b.n	80026fc <DMA_CheckFifoParam+0xe8>
      break;
 80026ee:	bf00      	nop
 80026f0:	e004      	b.n	80026fc <DMA_CheckFifoParam+0xe8>
      break;
 80026f2:	bf00      	nop
 80026f4:	e002      	b.n	80026fc <DMA_CheckFifoParam+0xe8>
      break;   
 80026f6:	bf00      	nop
 80026f8:	e000      	b.n	80026fc <DMA_CheckFifoParam+0xe8>
      break;
 80026fa:	bf00      	nop
    }
  } 
  
  return status; 
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop

0800270c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	; 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	e16b      	b.n	8002a00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002728:	2201      	movs	r2, #1
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	429a      	cmp	r2, r3
 8002742:	f040 815a 	bne.w	80029fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d00b      	beq.n	8002766 <HAL_GPIO_Init+0x5a>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d007      	beq.n	8002766 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800275a:	2b11      	cmp	r3, #17
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b12      	cmp	r3, #18
 8002764:	d130      	bne.n	80027c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	2203      	movs	r2, #3
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800279c:	2201      	movs	r2, #1
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 0201 	and.w	r2, r3, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0xfc>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b12      	cmp	r3, #18
 8002806:	d123      	bne.n	8002850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	08da      	lsrs	r2, r3, #3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3208      	adds	r2, #8
 8002810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	220f      	movs	r2, #15
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	08da      	lsrs	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3208      	adds	r2, #8
 800284a:	69b9      	ldr	r1, [r7, #24]
 800284c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0203 	and.w	r2, r3, #3
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80b4 	beq.w	80029fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b60      	ldr	r3, [pc, #384]	; (8002a18 <HAL_GPIO_Init+0x30c>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	4a5f      	ldr	r2, [pc, #380]	; (8002a18 <HAL_GPIO_Init+0x30c>)
 800289c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a0:	6453      	str	r3, [r2, #68]	; 0x44
 80028a2:	4b5d      	ldr	r3, [pc, #372]	; (8002a18 <HAL_GPIO_Init+0x30c>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ae:	4a5b      	ldr	r2, [pc, #364]	; (8002a1c <HAL_GPIO_Init+0x310>)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	089b      	lsrs	r3, r3, #2
 80028b4:	3302      	adds	r3, #2
 80028b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	220f      	movs	r2, #15
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a52      	ldr	r2, [pc, #328]	; (8002a20 <HAL_GPIO_Init+0x314>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d02b      	beq.n	8002932 <HAL_GPIO_Init+0x226>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a51      	ldr	r2, [pc, #324]	; (8002a24 <HAL_GPIO_Init+0x318>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d025      	beq.n	800292e <HAL_GPIO_Init+0x222>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a50      	ldr	r2, [pc, #320]	; (8002a28 <HAL_GPIO_Init+0x31c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01f      	beq.n	800292a <HAL_GPIO_Init+0x21e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a4f      	ldr	r2, [pc, #316]	; (8002a2c <HAL_GPIO_Init+0x320>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d019      	beq.n	8002926 <HAL_GPIO_Init+0x21a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a4e      	ldr	r2, [pc, #312]	; (8002a30 <HAL_GPIO_Init+0x324>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <HAL_GPIO_Init+0x216>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a4d      	ldr	r2, [pc, #308]	; (8002a34 <HAL_GPIO_Init+0x328>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00d      	beq.n	800291e <HAL_GPIO_Init+0x212>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a4c      	ldr	r2, [pc, #304]	; (8002a38 <HAL_GPIO_Init+0x32c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d007      	beq.n	800291a <HAL_GPIO_Init+0x20e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4b      	ldr	r2, [pc, #300]	; (8002a3c <HAL_GPIO_Init+0x330>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d101      	bne.n	8002916 <HAL_GPIO_Init+0x20a>
 8002912:	2307      	movs	r3, #7
 8002914:	e00e      	b.n	8002934 <HAL_GPIO_Init+0x228>
 8002916:	2308      	movs	r3, #8
 8002918:	e00c      	b.n	8002934 <HAL_GPIO_Init+0x228>
 800291a:	2306      	movs	r3, #6
 800291c:	e00a      	b.n	8002934 <HAL_GPIO_Init+0x228>
 800291e:	2305      	movs	r3, #5
 8002920:	e008      	b.n	8002934 <HAL_GPIO_Init+0x228>
 8002922:	2304      	movs	r3, #4
 8002924:	e006      	b.n	8002934 <HAL_GPIO_Init+0x228>
 8002926:	2303      	movs	r3, #3
 8002928:	e004      	b.n	8002934 <HAL_GPIO_Init+0x228>
 800292a:	2302      	movs	r3, #2
 800292c:	e002      	b.n	8002934 <HAL_GPIO_Init+0x228>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_GPIO_Init+0x228>
 8002932:	2300      	movs	r3, #0
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	f002 0203 	and.w	r2, r2, #3
 800293a:	0092      	lsls	r2, r2, #2
 800293c:	4093      	lsls	r3, r2
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002944:	4935      	ldr	r1, [pc, #212]	; (8002a1c <HAL_GPIO_Init+0x310>)
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	089b      	lsrs	r3, r3, #2
 800294a:	3302      	adds	r3, #2
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002952:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <HAL_GPIO_Init+0x334>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002976:	4a32      	ldr	r2, [pc, #200]	; (8002a40 <HAL_GPIO_Init+0x334>)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800297c:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <HAL_GPIO_Init+0x334>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029a0:	4a27      	ldr	r2, [pc, #156]	; (8002a40 <HAL_GPIO_Init+0x334>)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <HAL_GPIO_Init+0x334>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ca:	4a1d      	ldr	r2, [pc, #116]	; (8002a40 <HAL_GPIO_Init+0x334>)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_GPIO_Init+0x334>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029f4:	4a12      	ldr	r2, [pc, #72]	; (8002a40 <HAL_GPIO_Init+0x334>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3301      	adds	r3, #1
 80029fe:	61fb      	str	r3, [r7, #28]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2b0f      	cmp	r3, #15
 8002a04:	f67f ae90 	bls.w	8002728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3724      	adds	r7, #36	; 0x24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40013800 	.word	0x40013800
 8002a20:	40020000 	.word	0x40020000
 8002a24:	40020400 	.word	0x40020400
 8002a28:	40020800 	.word	0x40020800
 8002a2c:	40020c00 	.word	0x40020c00
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40021400 	.word	0x40021400
 8002a38:	40021800 	.word	0x40021800
 8002a3c:	40021c00 	.word	0x40021c00
 8002a40:	40013c00 	.word	0x40013c00

08002a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	807b      	strh	r3, [r7, #2]
 8002a50:	4613      	mov	r3, r2
 8002a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a54:	787b      	ldrb	r3, [r7, #1]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a60:	e003      	b.n	8002a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a62:	887b      	ldrh	r3, [r7, #2]
 8002a64:	041a      	lsls	r2, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	619a      	str	r2, [r3, #24]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e25e      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d075      	beq.n	8002b82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a96:	4b88      	ldr	r3, [pc, #544]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d00c      	beq.n	8002abc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aa2:	4b85      	ldr	r3, [pc, #532]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d112      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aae:	4b82      	ldr	r3, [pc, #520]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aba:	d10b      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abc:	4b7e      	ldr	r3, [pc, #504]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d05b      	beq.n	8002b80 <HAL_RCC_OscConfig+0x108>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d157      	bne.n	8002b80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e239      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002adc:	d106      	bne.n	8002aec <HAL_RCC_OscConfig+0x74>
 8002ade:	4b76      	ldr	r3, [pc, #472]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a75      	ldr	r2, [pc, #468]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e01d      	b.n	8002b28 <HAL_RCC_OscConfig+0xb0>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x98>
 8002af6:	4b70      	ldr	r3, [pc, #448]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a6f      	ldr	r2, [pc, #444]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b6d      	ldr	r3, [pc, #436]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a6c      	ldr	r2, [pc, #432]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e00b      	b.n	8002b28 <HAL_RCC_OscConfig+0xb0>
 8002b10:	4b69      	ldr	r3, [pc, #420]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a68      	ldr	r2, [pc, #416]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b66      	ldr	r3, [pc, #408]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a65      	ldr	r2, [pc, #404]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d013      	beq.n	8002b58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7ff f93c 	bl	8001dac <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b38:	f7ff f938 	bl	8001dac <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1fe      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	4b5b      	ldr	r3, [pc, #364]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0xc0>
 8002b56:	e014      	b.n	8002b82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7ff f928 	bl	8001dac <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b60:	f7ff f924 	bl	8001dac <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	; 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e1ea      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b72:	4b51      	ldr	r3, [pc, #324]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0xe8>
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d063      	beq.n	8002c56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b8e:	4b4a      	ldr	r3, [pc, #296]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d11c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ba6:	4b44      	ldr	r3, [pc, #272]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d116      	bne.n	8002be0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb2:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <HAL_RCC_OscConfig+0x152>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d001      	beq.n	8002bca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e1be      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bca:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4937      	ldr	r1, [pc, #220]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bde:	e03a      	b.n	8002c56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d020      	beq.n	8002c2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be8:	4b34      	ldr	r3, [pc, #208]	; (8002cbc <HAL_RCC_OscConfig+0x244>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7ff f8dd 	bl	8001dac <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf6:	f7ff f8d9 	bl	8001dac <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e19f      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c08:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c14:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4925      	ldr	r1, [pc, #148]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	600b      	str	r3, [r1, #0]
 8002c28:	e015      	b.n	8002c56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c2a:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <HAL_RCC_OscConfig+0x244>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7ff f8bc 	bl	8001dac <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c38:	f7ff f8b8 	bl	8001dac <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e17e      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d036      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d016      	beq.n	8002c98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c6a:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <HAL_RCC_OscConfig+0x248>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7ff f89c 	bl	8001dac <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c78:	f7ff f898 	bl	8001dac <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e15e      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x200>
 8002c96:	e01b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_RCC_OscConfig+0x248>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9e:	f7ff f885 	bl	8001dac <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca4:	e00e      	b.n	8002cc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca6:	f7ff f881 	bl	8001dac <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d907      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e147      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	42470000 	.word	0x42470000
 8002cc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc4:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ea      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8097 	beq.w	8002e0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce2:	4b81      	ldr	r3, [pc, #516]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10f      	bne.n	8002d0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	4b7d      	ldr	r3, [pc, #500]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	4a7c      	ldr	r2, [pc, #496]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfe:	4b7a      	ldr	r3, [pc, #488]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0e:	4b77      	ldr	r3, [pc, #476]	; (8002eec <HAL_RCC_OscConfig+0x474>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d118      	bne.n	8002d4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d1a:	4b74      	ldr	r3, [pc, #464]	; (8002eec <HAL_RCC_OscConfig+0x474>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a73      	ldr	r2, [pc, #460]	; (8002eec <HAL_RCC_OscConfig+0x474>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d26:	f7ff f841 	bl	8001dac <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2e:	f7ff f83d 	bl	8001dac <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e103      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d40:	4b6a      	ldr	r3, [pc, #424]	; (8002eec <HAL_RCC_OscConfig+0x474>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_OscConfig+0x2ea>
 8002d54:	4b64      	ldr	r3, [pc, #400]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d58:	4a63      	ldr	r2, [pc, #396]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d60:	e01c      	b.n	8002d9c <HAL_RCC_OscConfig+0x324>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b05      	cmp	r3, #5
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x30c>
 8002d6a:	4b5f      	ldr	r3, [pc, #380]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	4a5e      	ldr	r2, [pc, #376]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	6713      	str	r3, [r2, #112]	; 0x70
 8002d76:	4b5c      	ldr	r3, [pc, #368]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	4a5b      	ldr	r2, [pc, #364]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6713      	str	r3, [r2, #112]	; 0x70
 8002d82:	e00b      	b.n	8002d9c <HAL_RCC_OscConfig+0x324>
 8002d84:	4b58      	ldr	r3, [pc, #352]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d88:	4a57      	ldr	r2, [pc, #348]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d90:	4b55      	ldr	r3, [pc, #340]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	4a54      	ldr	r2, [pc, #336]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d96:	f023 0304 	bic.w	r3, r3, #4
 8002d9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d015      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7ff f802 	bl	8001dac <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dac:	f7fe fffe 	bl	8001dac <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e0c2      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc2:	4b49      	ldr	r3, [pc, #292]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0ee      	beq.n	8002dac <HAL_RCC_OscConfig+0x334>
 8002dce:	e014      	b.n	8002dfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd0:	f7fe ffec 	bl	8001dac <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd8:	f7fe ffe8 	bl	8001dac <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e0ac      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dee:	4b3e      	ldr	r3, [pc, #248]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ee      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d105      	bne.n	8002e0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e00:	4b39      	ldr	r3, [pc, #228]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	4a38      	ldr	r2, [pc, #224]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8098 	beq.w	8002f46 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e16:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d05c      	beq.n	8002edc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d141      	bne.n	8002eae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2a:	4b31      	ldr	r3, [pc, #196]	; (8002ef0 <HAL_RCC_OscConfig+0x478>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe ffbc 	bl	8001dac <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e38:	f7fe ffb8 	bl	8001dac <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e07e      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	4b27      	ldr	r3, [pc, #156]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69da      	ldr	r2, [r3, #28]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	019b      	lsls	r3, r3, #6
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	085b      	lsrs	r3, r3, #1
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	041b      	lsls	r3, r3, #16
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	061b      	lsls	r3, r3, #24
 8002e7a:	491b      	ldr	r1, [pc, #108]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_RCC_OscConfig+0x478>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fe ff91 	bl	8001dac <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7fe ff8d 	bl	8001dac <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e053      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x416>
 8002eac:	e04b      	b.n	8002f46 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <HAL_RCC_OscConfig+0x478>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fe ff7a 	bl	8001dac <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fe ff76 	bl	8001dac <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e03c      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x444>
 8002eda:	e034      	b.n	8002f46 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e02f      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40007000 	.word	0x40007000
 8002ef0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ef4:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <HAL_RCC_OscConfig+0x4d8>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d11c      	bne.n	8002f42 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d115      	bne.n	8002f42 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10d      	bne.n	8002f42 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40023800 	.word	0x40023800

08002f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0cc      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b68      	ldr	r3, [pc, #416]	; (800310c <HAL_RCC_ClockConfig+0x1b8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d90c      	bls.n	8002f90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b65      	ldr	r3, [pc, #404]	; (800310c <HAL_RCC_ClockConfig+0x1b8>)
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b63      	ldr	r3, [pc, #396]	; (800310c <HAL_RCC_ClockConfig+0x1b8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0b8      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d020      	beq.n	8002fde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa8:	4b59      	ldr	r3, [pc, #356]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4a58      	ldr	r2, [pc, #352]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc0:	4b53      	ldr	r3, [pc, #332]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a52      	ldr	r2, [pc, #328]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fcc:	4b50      	ldr	r3, [pc, #320]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	494d      	ldr	r1, [pc, #308]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d044      	beq.n	8003074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	4b47      	ldr	r3, [pc, #284]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d119      	bne.n	8003032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e07f      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d003      	beq.n	8003012 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800300e:	2b03      	cmp	r3, #3
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003012:	4b3f      	ldr	r3, [pc, #252]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e06f      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003022:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e067      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003032:	4b37      	ldr	r3, [pc, #220]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f023 0203 	bic.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4934      	ldr	r1, [pc, #208]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	4313      	orrs	r3, r2
 8003042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003044:	f7fe feb2 	bl	8001dac <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	e00a      	b.n	8003062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304c:	f7fe feae 	bl	8001dac <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e04f      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 020c 	and.w	r2, r3, #12
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	429a      	cmp	r2, r3
 8003072:	d1eb      	bne.n	800304c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003074:	4b25      	ldr	r3, [pc, #148]	; (800310c <HAL_RCC_ClockConfig+0x1b8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d20c      	bcs.n	800309c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b22      	ldr	r3, [pc, #136]	; (800310c <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308a:	4b20      	ldr	r3, [pc, #128]	; (800310c <HAL_RCC_ClockConfig+0x1b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e032      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a8:	4b19      	ldr	r3, [pc, #100]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4916      	ldr	r1, [pc, #88]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	490e      	ldr	r1, [pc, #56]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030da:	f000 f821 	bl	8003120 <HAL_RCC_GetSysClockFreq>
 80030de:	4602      	mov	r2, r0
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	490a      	ldr	r1, [pc, #40]	; (8003114 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	5ccb      	ldrb	r3, [r1, r3]
 80030ee:	fa22 f303 	lsr.w	r3, r2, r3
 80030f2:	4a09      	ldr	r2, [pc, #36]	; (8003118 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_RCC_ClockConfig+0x1c8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fe12 	bl	8001d24 <HAL_InitTick>

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40023c00 	.word	0x40023c00
 8003110:	40023800 	.word	0x40023800
 8003114:	08007ea4 	.word	0x08007ea4
 8003118:	20000884 	.word	0x20000884
 800311c:	20000888 	.word	0x20000888

08003120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003124:	b094      	sub	sp, #80	; 0x50
 8003126:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	647b      	str	r3, [r7, #68]	; 0x44
 800312c:	2300      	movs	r3, #0
 800312e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003130:	2300      	movs	r3, #0
 8003132:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003138:	4b79      	ldr	r3, [pc, #484]	; (8003320 <HAL_RCC_GetSysClockFreq+0x200>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b08      	cmp	r3, #8
 8003142:	d00d      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0x40>
 8003144:	2b08      	cmp	r3, #8
 8003146:	f200 80e1 	bhi.w	800330c <HAL_RCC_GetSysClockFreq+0x1ec>
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x34>
 800314e:	2b04      	cmp	r3, #4
 8003150:	d003      	beq.n	800315a <HAL_RCC_GetSysClockFreq+0x3a>
 8003152:	e0db      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003154:	4b73      	ldr	r3, [pc, #460]	; (8003324 <HAL_RCC_GetSysClockFreq+0x204>)
 8003156:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003158:	e0db      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800315a:	4b73      	ldr	r3, [pc, #460]	; (8003328 <HAL_RCC_GetSysClockFreq+0x208>)
 800315c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800315e:	e0d8      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003160:	4b6f      	ldr	r3, [pc, #444]	; (8003320 <HAL_RCC_GetSysClockFreq+0x200>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003168:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800316a:	4b6d      	ldr	r3, [pc, #436]	; (8003320 <HAL_RCC_GetSysClockFreq+0x200>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d063      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003176:	4b6a      	ldr	r3, [pc, #424]	; (8003320 <HAL_RCC_GetSysClockFreq+0x200>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	099b      	lsrs	r3, r3, #6
 800317c:	2200      	movs	r2, #0
 800317e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003180:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003188:	633b      	str	r3, [r7, #48]	; 0x30
 800318a:	2300      	movs	r3, #0
 800318c:	637b      	str	r3, [r7, #52]	; 0x34
 800318e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003192:	4622      	mov	r2, r4
 8003194:	462b      	mov	r3, r5
 8003196:	f04f 0000 	mov.w	r0, #0
 800319a:	f04f 0100 	mov.w	r1, #0
 800319e:	0159      	lsls	r1, r3, #5
 80031a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a4:	0150      	lsls	r0, r2, #5
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4621      	mov	r1, r4
 80031ac:	1a51      	subs	r1, r2, r1
 80031ae:	6139      	str	r1, [r7, #16]
 80031b0:	4629      	mov	r1, r5
 80031b2:	eb63 0301 	sbc.w	r3, r3, r1
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031c4:	4659      	mov	r1, fp
 80031c6:	018b      	lsls	r3, r1, #6
 80031c8:	4651      	mov	r1, sl
 80031ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ce:	4651      	mov	r1, sl
 80031d0:	018a      	lsls	r2, r1, #6
 80031d2:	4651      	mov	r1, sl
 80031d4:	ebb2 0801 	subs.w	r8, r2, r1
 80031d8:	4659      	mov	r1, fp
 80031da:	eb63 0901 	sbc.w	r9, r3, r1
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031f2:	4690      	mov	r8, r2
 80031f4:	4699      	mov	r9, r3
 80031f6:	4623      	mov	r3, r4
 80031f8:	eb18 0303 	adds.w	r3, r8, r3
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	462b      	mov	r3, r5
 8003200:	eb49 0303 	adc.w	r3, r9, r3
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003212:	4629      	mov	r1, r5
 8003214:	024b      	lsls	r3, r1, #9
 8003216:	4621      	mov	r1, r4
 8003218:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800321c:	4621      	mov	r1, r4
 800321e:	024a      	lsls	r2, r1, #9
 8003220:	4610      	mov	r0, r2
 8003222:	4619      	mov	r1, r3
 8003224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003226:	2200      	movs	r2, #0
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
 800322a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800322c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003230:	f7fd f836 	bl	80002a0 <__aeabi_uldivmod>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4613      	mov	r3, r2
 800323a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800323c:	e058      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323e:	4b38      	ldr	r3, [pc, #224]	; (8003320 <HAL_RCC_GetSysClockFreq+0x200>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	099b      	lsrs	r3, r3, #6
 8003244:	2200      	movs	r2, #0
 8003246:	4618      	mov	r0, r3
 8003248:	4611      	mov	r1, r2
 800324a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800324e:	623b      	str	r3, [r7, #32]
 8003250:	2300      	movs	r3, #0
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
 8003254:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003258:	4642      	mov	r2, r8
 800325a:	464b      	mov	r3, r9
 800325c:	f04f 0000 	mov.w	r0, #0
 8003260:	f04f 0100 	mov.w	r1, #0
 8003264:	0159      	lsls	r1, r3, #5
 8003266:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800326a:	0150      	lsls	r0, r2, #5
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4641      	mov	r1, r8
 8003272:	ebb2 0a01 	subs.w	sl, r2, r1
 8003276:	4649      	mov	r1, r9
 8003278:	eb63 0b01 	sbc.w	fp, r3, r1
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003288:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800328c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003290:	ebb2 040a 	subs.w	r4, r2, sl
 8003294:	eb63 050b 	sbc.w	r5, r3, fp
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	00eb      	lsls	r3, r5, #3
 80032a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032a6:	00e2      	lsls	r2, r4, #3
 80032a8:	4614      	mov	r4, r2
 80032aa:	461d      	mov	r5, r3
 80032ac:	4643      	mov	r3, r8
 80032ae:	18e3      	adds	r3, r4, r3
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	464b      	mov	r3, r9
 80032b4:	eb45 0303 	adc.w	r3, r5, r3
 80032b8:	607b      	str	r3, [r7, #4]
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032c6:	4629      	mov	r1, r5
 80032c8:	028b      	lsls	r3, r1, #10
 80032ca:	4621      	mov	r1, r4
 80032cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032d0:	4621      	mov	r1, r4
 80032d2:	028a      	lsls	r2, r1, #10
 80032d4:	4610      	mov	r0, r2
 80032d6:	4619      	mov	r1, r3
 80032d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032da:	2200      	movs	r2, #0
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	61fa      	str	r2, [r7, #28]
 80032e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e4:	f7fc ffdc 	bl	80002a0 <__aeabi_uldivmod>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4613      	mov	r3, r2
 80032ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	3301      	adds	r3, #1
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003300:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800330a:	e002      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCC_GetSysClockFreq+0x204>)
 800330e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003314:	4618      	mov	r0, r3
 8003316:	3750      	adds	r7, #80	; 0x50
 8003318:	46bd      	mov	sp, r7
 800331a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	00f42400 	.word	0x00f42400
 8003328:	007a1200 	.word	0x007a1200

0800332c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003330:	4b03      	ldr	r3, [pc, #12]	; (8003340 <HAL_RCC_GetHCLKFreq+0x14>)
 8003332:	681b      	ldr	r3, [r3, #0]
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20000884 	.word	0x20000884

08003344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003348:	f7ff fff0 	bl	800332c <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	0a9b      	lsrs	r3, r3, #10
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4903      	ldr	r1, [pc, #12]	; (8003368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40023800 	.word	0x40023800
 8003368:	08007eb4 	.word	0x08007eb4

0800336c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003370:	f7ff ffdc 	bl	800332c <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	0b5b      	lsrs	r3, r3, #13
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4903      	ldr	r1, [pc, #12]	; (8003390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	08007eb4 	.word	0x08007eb4

08003394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e01d      	b.n	80033e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fe fa9e 	bl	80018fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f000 fbde 	bl	8003b94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2202      	movs	r2, #2
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b06      	cmp	r3, #6
 800340a:	d007      	beq.n	800341c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e01d      	b.n	8003480 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d106      	bne.n	800345e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7fe faa1 	bl	80019a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	4619      	mov	r1, r3
 8003470:	4610      	mov	r0, r2
 8003472:	f000 fb8f 	bl	8003b94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2201      	movs	r2, #1
 8003498:	6839      	ldr	r1, [r7, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fe64 	bl	8004168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a15      	ldr	r2, [pc, #84]	; (80034fc <HAL_TIM_PWM_Start+0x74>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d004      	beq.n	80034b4 <HAL_TIM_PWM_Start+0x2c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a14      	ldr	r2, [pc, #80]	; (8003500 <HAL_TIM_PWM_Start+0x78>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d101      	bne.n	80034b8 <HAL_TIM_PWM_Start+0x30>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <HAL_TIM_PWM_Start+0x32>
 80034b8:	2300      	movs	r3, #0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d007      	beq.n	80034ce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b06      	cmp	r3, #6
 80034de:	d007      	beq.n	80034f0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40010000 	.word	0x40010000
 8003500:	40010400 	.word	0x40010400

08003504 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b0c      	cmp	r3, #12
 8003512:	d841      	bhi.n	8003598 <HAL_TIM_PWM_Start_IT+0x94>
 8003514:	a201      	add	r2, pc, #4	; (adr r2, 800351c <HAL_TIM_PWM_Start_IT+0x18>)
 8003516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351a:	bf00      	nop
 800351c:	08003551 	.word	0x08003551
 8003520:	08003599 	.word	0x08003599
 8003524:	08003599 	.word	0x08003599
 8003528:	08003599 	.word	0x08003599
 800352c:	08003563 	.word	0x08003563
 8003530:	08003599 	.word	0x08003599
 8003534:	08003599 	.word	0x08003599
 8003538:	08003599 	.word	0x08003599
 800353c:	08003575 	.word	0x08003575
 8003540:	08003599 	.word	0x08003599
 8003544:	08003599 	.word	0x08003599
 8003548:	08003599 	.word	0x08003599
 800354c:	08003587 	.word	0x08003587
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0202 	orr.w	r2, r2, #2
 800355e:	60da      	str	r2, [r3, #12]
      break;
 8003560:	e01b      	b.n	800359a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0204 	orr.w	r2, r2, #4
 8003570:	60da      	str	r2, [r3, #12]
      break;
 8003572:	e012      	b.n	800359a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0208 	orr.w	r2, r2, #8
 8003582:	60da      	str	r2, [r3, #12]
      break;
 8003584:	e009      	b.n	800359a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0210 	orr.w	r2, r2, #16
 8003594:	60da      	str	r2, [r3, #12]
      break;
 8003596:	e000      	b.n	800359a <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8003598:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2201      	movs	r2, #1
 80035a0:	6839      	ldr	r1, [r7, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 fde0 	bl	8004168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a15      	ldr	r2, [pc, #84]	; (8003604 <HAL_TIM_PWM_Start_IT+0x100>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d004      	beq.n	80035bc <HAL_TIM_PWM_Start_IT+0xb8>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a14      	ldr	r2, [pc, #80]	; (8003608 <HAL_TIM_PWM_Start_IT+0x104>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d101      	bne.n	80035c0 <HAL_TIM_PWM_Start_IT+0xbc>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <HAL_TIM_PWM_Start_IT+0xbe>
 80035c0:	2300      	movs	r3, #0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b06      	cmp	r3, #6
 80035e6:	d007      	beq.n	80035f8 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40010000 	.word	0x40010000
 8003608:	40010400 	.word	0x40010400

0800360c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d122      	bne.n	8003668 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b02      	cmp	r3, #2
 800362e:	d11b      	bne.n	8003668 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0202 	mvn.w	r2, #2
 8003638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa82 	bl	8003b58 <HAL_TIM_IC_CaptureCallback>
 8003654:	e005      	b.n	8003662 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fa74 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fa85 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b04      	cmp	r3, #4
 8003674:	d122      	bne.n	80036bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b04      	cmp	r3, #4
 8003682:	d11b      	bne.n	80036bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0204 	mvn.w	r2, #4
 800368c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fa58 	bl	8003b58 <HAL_TIM_IC_CaptureCallback>
 80036a8:	e005      	b.n	80036b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fa4a 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fa5b 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d122      	bne.n	8003710 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d11b      	bne.n	8003710 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0208 	mvn.w	r2, #8
 80036e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2204      	movs	r2, #4
 80036e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fa2e 	bl	8003b58 <HAL_TIM_IC_CaptureCallback>
 80036fc:	e005      	b.n	800370a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fa20 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fa31 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b10      	cmp	r3, #16
 800371c:	d122      	bne.n	8003764 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b10      	cmp	r3, #16
 800372a:	d11b      	bne.n	8003764 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0210 	mvn.w	r2, #16
 8003734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2208      	movs	r2, #8
 800373a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fa04 	bl	8003b58 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f9f6 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fa07 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b01      	cmp	r3, #1
 8003770:	d10e      	bne.n	8003790 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b01      	cmp	r3, #1
 800377e:	d107      	bne.n	8003790 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0201 	mvn.w	r2, #1
 8003788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f9d0 	bl	8003b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379a:	2b80      	cmp	r3, #128	; 0x80
 800379c:	d10e      	bne.n	80037bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a8:	2b80      	cmp	r3, #128	; 0x80
 80037aa:	d107      	bne.n	80037bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fd82 	bl	80042c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	d10e      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d107      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f9cc 	bl	8003b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d10e      	bne.n	8003814 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b20      	cmp	r3, #32
 8003802:	d107      	bne.n	8003814 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0220 	mvn.w	r2, #32
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fd4c 	bl	80042ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003832:	2302      	movs	r3, #2
 8003834:	e0b4      	b.n	80039a0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2202      	movs	r2, #2
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b0c      	cmp	r3, #12
 800384a:	f200 809f 	bhi.w	800398c <HAL_TIM_PWM_ConfigChannel+0x170>
 800384e:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003854:	08003889 	.word	0x08003889
 8003858:	0800398d 	.word	0x0800398d
 800385c:	0800398d 	.word	0x0800398d
 8003860:	0800398d 	.word	0x0800398d
 8003864:	080038c9 	.word	0x080038c9
 8003868:	0800398d 	.word	0x0800398d
 800386c:	0800398d 	.word	0x0800398d
 8003870:	0800398d 	.word	0x0800398d
 8003874:	0800390b 	.word	0x0800390b
 8003878:	0800398d 	.word	0x0800398d
 800387c:	0800398d 	.word	0x0800398d
 8003880:	0800398d 	.word	0x0800398d
 8003884:	0800394b 	.word	0x0800394b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fa20 	bl	8003cd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0208 	orr.w	r2, r2, #8
 80038a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0204 	bic.w	r2, r2, #4
 80038b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6999      	ldr	r1, [r3, #24]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	619a      	str	r2, [r3, #24]
      break;
 80038c6:	e062      	b.n	800398e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fa70 	bl	8003db4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6999      	ldr	r1, [r3, #24]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	021a      	lsls	r2, r3, #8
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	619a      	str	r2, [r3, #24]
      break;
 8003908:	e041      	b.n	800398e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68b9      	ldr	r1, [r7, #8]
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fac5 	bl	8003ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 0208 	orr.w	r2, r2, #8
 8003924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0204 	bic.w	r2, r2, #4
 8003934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69d9      	ldr	r1, [r3, #28]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	61da      	str	r2, [r3, #28]
      break;
 8003948:	e021      	b.n	800398e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fb19 	bl	8003f88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69d9      	ldr	r1, [r3, #28]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	021a      	lsls	r2, r3, #8
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	61da      	str	r2, [r3, #28]
      break;
 800398a:	e000      	b.n	800398e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800398c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_TIM_ConfigClockSource+0x18>
 80039bc:	2302      	movs	r3, #2
 80039be:	e0b3      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x180>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f8:	d03e      	beq.n	8003a78 <HAL_TIM_ConfigClockSource+0xd0>
 80039fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fe:	f200 8087 	bhi.w	8003b10 <HAL_TIM_ConfigClockSource+0x168>
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a06:	f000 8085 	beq.w	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0e:	d87f      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x168>
 8003a10:	2b70      	cmp	r3, #112	; 0x70
 8003a12:	d01a      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0xa2>
 8003a14:	2b70      	cmp	r3, #112	; 0x70
 8003a16:	d87b      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x168>
 8003a18:	2b60      	cmp	r3, #96	; 0x60
 8003a1a:	d050      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x116>
 8003a1c:	2b60      	cmp	r3, #96	; 0x60
 8003a1e:	d877      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x168>
 8003a20:	2b50      	cmp	r3, #80	; 0x50
 8003a22:	d03c      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0xf6>
 8003a24:	2b50      	cmp	r3, #80	; 0x50
 8003a26:	d873      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x168>
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d058      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x136>
 8003a2c:	2b40      	cmp	r3, #64	; 0x40
 8003a2e:	d86f      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x168>
 8003a30:	2b30      	cmp	r3, #48	; 0x30
 8003a32:	d064      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x156>
 8003a34:	2b30      	cmp	r3, #48	; 0x30
 8003a36:	d86b      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x168>
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d060      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x156>
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d867      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x168>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d05c      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x156>
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d05a      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003a48:	e062      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6899      	ldr	r1, [r3, #8]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f000 fb65 	bl	8004128 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	609a      	str	r2, [r3, #8]
      break;
 8003a76:	e04e      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	6899      	ldr	r1, [r3, #8]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f000 fb4e 	bl	8004128 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a9a:	609a      	str	r2, [r3, #8]
      break;
 8003a9c:	e03b      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f000 fac2 	bl	8004034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2150      	movs	r1, #80	; 0x50
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fb1b 	bl	80040f2 <TIM_ITRx_SetConfig>
      break;
 8003abc:	e02b      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6859      	ldr	r1, [r3, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f000 fae1 	bl	8004092 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2160      	movs	r1, #96	; 0x60
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fb0b 	bl	80040f2 <TIM_ITRx_SetConfig>
      break;
 8003adc:	e01b      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f000 faa2 	bl	8004034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2140      	movs	r1, #64	; 0x40
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fafb 	bl	80040f2 <TIM_ITRx_SetConfig>
      break;
 8003afc:	e00b      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4619      	mov	r1, r3
 8003b08:	4610      	mov	r0, r2
 8003b0a:	f000 faf2 	bl	80040f2 <TIM_ITRx_SetConfig>
      break;
 8003b0e:	e002      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b10:	bf00      	nop
 8003b12:	e000      	b.n	8003b16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a40      	ldr	r2, [pc, #256]	; (8003ca8 <TIM_Base_SetConfig+0x114>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d013      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb2:	d00f      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a3d      	ldr	r2, [pc, #244]	; (8003cac <TIM_Base_SetConfig+0x118>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00b      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a3c      	ldr	r2, [pc, #240]	; (8003cb0 <TIM_Base_SetConfig+0x11c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d007      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a3b      	ldr	r2, [pc, #236]	; (8003cb4 <TIM_Base_SetConfig+0x120>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a3a      	ldr	r2, [pc, #232]	; (8003cb8 <TIM_Base_SetConfig+0x124>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d108      	bne.n	8003be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a2f      	ldr	r2, [pc, #188]	; (8003ca8 <TIM_Base_SetConfig+0x114>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d02b      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d027      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a2c      	ldr	r2, [pc, #176]	; (8003cac <TIM_Base_SetConfig+0x118>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d023      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a2b      	ldr	r2, [pc, #172]	; (8003cb0 <TIM_Base_SetConfig+0x11c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d01f      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <TIM_Base_SetConfig+0x120>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d01b      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a29      	ldr	r2, [pc, #164]	; (8003cb8 <TIM_Base_SetConfig+0x124>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d017      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a28      	ldr	r2, [pc, #160]	; (8003cbc <TIM_Base_SetConfig+0x128>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a27      	ldr	r2, [pc, #156]	; (8003cc0 <TIM_Base_SetConfig+0x12c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00f      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <TIM_Base_SetConfig+0x130>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00b      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a25      	ldr	r2, [pc, #148]	; (8003cc8 <TIM_Base_SetConfig+0x134>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a24      	ldr	r2, [pc, #144]	; (8003ccc <TIM_Base_SetConfig+0x138>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a23      	ldr	r2, [pc, #140]	; (8003cd0 <TIM_Base_SetConfig+0x13c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d108      	bne.n	8003c58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ca8 <TIM_Base_SetConfig+0x114>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d003      	beq.n	8003c8c <TIM_Base_SetConfig+0xf8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a0c      	ldr	r2, [pc, #48]	; (8003cb8 <TIM_Base_SetConfig+0x124>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d103      	bne.n	8003c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	615a      	str	r2, [r3, #20]
}
 8003c9a:	bf00      	nop
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	40000400 	.word	0x40000400
 8003cb0:	40000800 	.word	0x40000800
 8003cb4:	40000c00 	.word	0x40000c00
 8003cb8:	40010400 	.word	0x40010400
 8003cbc:	40014000 	.word	0x40014000
 8003cc0:	40014400 	.word	0x40014400
 8003cc4:	40014800 	.word	0x40014800
 8003cc8:	40001800 	.word	0x40001800
 8003ccc:	40001c00 	.word	0x40001c00
 8003cd0:	40002000 	.word	0x40002000

08003cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f023 0201 	bic.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 0302 	bic.w	r3, r3, #2
 8003d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a20      	ldr	r2, [pc, #128]	; (8003dac <TIM_OC1_SetConfig+0xd8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d003      	beq.n	8003d38 <TIM_OC1_SetConfig+0x64>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a1f      	ldr	r2, [pc, #124]	; (8003db0 <TIM_OC1_SetConfig+0xdc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d10c      	bne.n	8003d52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f023 0308 	bic.w	r3, r3, #8
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f023 0304 	bic.w	r3, r3, #4
 8003d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a15      	ldr	r2, [pc, #84]	; (8003dac <TIM_OC1_SetConfig+0xd8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d003      	beq.n	8003d62 <TIM_OC1_SetConfig+0x8e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a14      	ldr	r2, [pc, #80]	; (8003db0 <TIM_OC1_SetConfig+0xdc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d111      	bne.n	8003d86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	621a      	str	r2, [r3, #32]
}
 8003da0:	bf00      	nop
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	40010000 	.word	0x40010000
 8003db0:	40010400 	.word	0x40010400

08003db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	f023 0210 	bic.w	r2, r3, #16
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f023 0320 	bic.w	r3, r3, #32
 8003dfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a22      	ldr	r2, [pc, #136]	; (8003e98 <TIM_OC2_SetConfig+0xe4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <TIM_OC2_SetConfig+0x68>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a21      	ldr	r2, [pc, #132]	; (8003e9c <TIM_OC2_SetConfig+0xe8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d10d      	bne.n	8003e38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <TIM_OC2_SetConfig+0xe4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d003      	beq.n	8003e48 <TIM_OC2_SetConfig+0x94>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a16      	ldr	r2, [pc, #88]	; (8003e9c <TIM_OC2_SetConfig+0xe8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d113      	bne.n	8003e70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	621a      	str	r2, [r3, #32]
}
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40010400 	.word	0x40010400

08003ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a21      	ldr	r2, [pc, #132]	; (8003f80 <TIM_OC3_SetConfig+0xe0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d003      	beq.n	8003f06 <TIM_OC3_SetConfig+0x66>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a20      	ldr	r2, [pc, #128]	; (8003f84 <TIM_OC3_SetConfig+0xe4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10d      	bne.n	8003f22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <TIM_OC3_SetConfig+0xe0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d003      	beq.n	8003f32 <TIM_OC3_SetConfig+0x92>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <TIM_OC3_SetConfig+0xe4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d113      	bne.n	8003f5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	621a      	str	r2, [r3, #32]
}
 8003f74:	bf00      	nop
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	40010000 	.word	0x40010000
 8003f84:	40010400 	.word	0x40010400

08003f88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	031b      	lsls	r3, r3, #12
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a12      	ldr	r2, [pc, #72]	; (800402c <TIM_OC4_SetConfig+0xa4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_OC4_SetConfig+0x68>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a11      	ldr	r2, [pc, #68]	; (8004030 <TIM_OC4_SetConfig+0xa8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d109      	bne.n	8004004 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	019b      	lsls	r3, r3, #6
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	621a      	str	r2, [r3, #32]
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40010400 	.word	0x40010400

08004034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	f023 0201 	bic.w	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f023 030a 	bic.w	r3, r3, #10
 8004070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	621a      	str	r2, [r3, #32]
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004092:	b480      	push	{r7}
 8004094:	b087      	sub	sp, #28
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	f023 0210 	bic.w	r2, r3, #16
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	031b      	lsls	r3, r3, #12
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	621a      	str	r2, [r3, #32]
}
 80040e6:	bf00      	nop
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b085      	sub	sp, #20
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	f043 0307 	orr.w	r3, r3, #7
 8004114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	609a      	str	r2, [r3, #8]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004142:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	021a      	lsls	r2, r3, #8
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	431a      	orrs	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	609a      	str	r2, [r3, #8]
}
 800415c:	bf00      	nop
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	2201      	movs	r2, #1
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	43db      	mvns	r3, r3
 800418a:	401a      	ands	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1a      	ldr	r2, [r3, #32]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	fa01 f303 	lsl.w	r3, r1, r3
 80041a0:	431a      	orrs	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e05a      	b.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a21      	ldr	r2, [pc, #132]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d022      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004218:	d01d      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d018      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1b      	ldr	r2, [pc, #108]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1a      	ldr	r2, [pc, #104]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a17      	ldr	r2, [pc, #92]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a15      	ldr	r2, [pc, #84]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10c      	bne.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800425c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	4313      	orrs	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40010000 	.word	0x40010000
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800
 800429c:	40000c00 	.word	0x40000c00
 80042a0:	40010400 	.word	0x40010400
 80042a4:	40014000 	.word	0x40014000
 80042a8:	40001800 	.word	0x40001800

080042ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e03f      	b.n	8004366 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fd fbd8 	bl	8001ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2224      	movs	r2, #36	; 0x24
 8004304:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fba1 	bl	8004a60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800432c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800433c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800434c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b088      	sub	sp, #32
 8004372:	af02      	add	r7, sp, #8
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	603b      	str	r3, [r7, #0]
 800437a:	4613      	mov	r3, r2
 800437c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b20      	cmp	r3, #32
 800438c:	f040 8083 	bne.w	8004496 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <HAL_UART_Transmit+0x2e>
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e07b      	b.n	8004498 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <HAL_UART_Transmit+0x40>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e074      	b.n	8004498 <HAL_UART_Transmit+0x12a>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2221      	movs	r2, #33	; 0x21
 80043c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80043c4:	f7fd fcf2 	bl	8001dac <HAL_GetTick>
 80043c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	88fa      	ldrh	r2, [r7, #6]
 80043ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	88fa      	ldrh	r2, [r7, #6]
 80043d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80043de:	e042      	b.n	8004466 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f6:	d122      	bne.n	800443e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2200      	movs	r2, #0
 8004400:	2180      	movs	r1, #128	; 0x80
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f9c0 	bl	8004788 <UART_WaitOnFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e042      	b.n	8004498 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004424:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d103      	bne.n	8004436 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	3302      	adds	r3, #2
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	e017      	b.n	8004466 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3301      	adds	r3, #1
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	e013      	b.n	8004466 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2200      	movs	r2, #0
 8004446:	2180      	movs	r1, #128	; 0x80
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f99d 	bl	8004788 <UART_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e01f      	b.n	8004498 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	60ba      	str	r2, [r7, #8]
 800445e:	781a      	ldrb	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1b7      	bne.n	80043e0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2200      	movs	r2, #0
 8004478:	2140      	movs	r1, #64	; 0x40
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f984 	bl	8004788 <UART_WaitOnFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e006      	b.n	8004498 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e000      	b.n	8004498 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	4613      	mov	r3, r2
 80044ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d140      	bne.n	800453c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_UART_Receive_IT+0x26>
 80044c0:	88fb      	ldrh	r3, [r7, #6]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e039      	b.n	800453e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_UART_Receive_IT+0x38>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e032      	b.n	800453e <HAL_UART_Receive_IT+0x9e>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	88fa      	ldrh	r2, [r7, #6]
 80044ea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	88fa      	ldrh	r2, [r7, #6]
 80044f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2222      	movs	r2, #34	; 0x22
 80044fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004516:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0220 	orr.w	r2, r2, #32
 8004536:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	e000      	b.n	800453e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10d      	bne.n	800459e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_UART_IRQHandler+0x52>
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f9e0 	bl	800495c <UART_Receive_IT>
      return;
 800459c:	e0d0      	b.n	8004740 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80b0 	beq.w	8004706 <HAL_UART_IRQHandler+0x1ba>
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d105      	bne.n	80045bc <HAL_UART_IRQHandler+0x70>
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80a5 	beq.w	8004706 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_UART_IRQHandler+0x90>
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d4:	f043 0201 	orr.w	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_UART_IRQHandler+0xb0>
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f4:	f043 0202 	orr.w	r2, r3, #2
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_UART_IRQHandler+0xd0>
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004614:	f043 0204 	orr.w	r2, r3, #4
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00f      	beq.n	8004646 <HAL_UART_IRQHandler+0xfa>
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d104      	bne.n	800463a <HAL_UART_IRQHandler+0xee>
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463e:	f043 0208 	orr.w	r2, r3, #8
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464a:	2b00      	cmp	r3, #0
 800464c:	d077      	beq.n	800473e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <HAL_UART_IRQHandler+0x11c>
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f97a 	bl	800495c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	bf0c      	ite	eq
 8004676:	2301      	moveq	r3, #1
 8004678:	2300      	movne	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <HAL_UART_IRQHandler+0x144>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d031      	beq.n	80046f4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f8c3 	bl	800481c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d123      	bne.n	80046ec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d013      	beq.n	80046e4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c0:	4a21      	ldr	r2, [pc, #132]	; (8004748 <HAL_UART_IRQHandler+0x1fc>)
 80046c2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fd fd93 	bl	80021f4 <HAL_DMA_Abort_IT>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d016      	beq.n	8004702 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046de:	4610      	mov	r0, r2
 80046e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e2:	e00e      	b.n	8004702 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f845 	bl	8004774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ea:	e00a      	b.n	8004702 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f841 	bl	8004774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f2:	e006      	b.n	8004702 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f83d 	bl	8004774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004700:	e01d      	b.n	800473e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004702:	bf00      	nop
    return;
 8004704:	e01b      	b.n	800473e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_UART_IRQHandler+0x1d6>
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f8b0 	bl	8004880 <UART_Transmit_IT>
    return;
 8004720:	e00e      	b.n	8004740 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d009      	beq.n	8004740 <HAL_UART_IRQHandler+0x1f4>
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d004      	beq.n	8004740 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f8f8 	bl	800492c <UART_EndTransmit_IT>
    return;
 800473c:	e000      	b.n	8004740 <HAL_UART_IRQHandler+0x1f4>
    return;
 800473e:	bf00      	nop
  }
}
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	08004859 	.word	0x08004859

0800474c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004798:	e02c      	b.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d028      	beq.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80047a8:	f7fd fb00 	bl	8001dac <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d21d      	bcs.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0201 	bic.w	r2, r2, #1
 80047d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e00f      	b.n	8004814 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	4013      	ands	r3, r2
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	429a      	cmp	r2, r3
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	429a      	cmp	r2, r3
 8004810:	d0c3      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004832:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0201 	bic.w	r2, r2, #1
 8004842:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7ff ff7e 	bl	8004774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b21      	cmp	r3, #33	; 0x21
 8004892:	d144      	bne.n	800491e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489c:	d11a      	bne.n	80048d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048b2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d105      	bne.n	80048c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	1c9a      	adds	r2, r3, #2
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	621a      	str	r2, [r3, #32]
 80048c6:	e00e      	b.n	80048e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	621a      	str	r2, [r3, #32]
 80048d2:	e008      	b.n	80048e6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	1c59      	adds	r1, r3, #1
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6211      	str	r1, [r2, #32]
 80048de:	781a      	ldrb	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	4619      	mov	r1, r3
 80048f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10f      	bne.n	800491a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004908:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004918:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	e000      	b.n	8004920 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800491e:	2302      	movs	r3, #2
  }
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004942:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff fefd 	bl	800474c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b22      	cmp	r3, #34	; 0x22
 800496e:	d171      	bne.n	8004a54 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004978:	d123      	bne.n	80049c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10e      	bne.n	80049a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	1c9a      	adds	r2, r3, #2
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28
 80049a4:	e029      	b.n	80049fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	629a      	str	r2, [r3, #40]	; 0x28
 80049c0:	e01b      	b.n	80049fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6858      	ldr	r0, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	1c59      	adds	r1, r3, #1
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6291      	str	r1, [r2, #40]	; 0x28
 80049da:	b2c2      	uxtb	r2, r0
 80049dc:	701a      	strb	r2, [r3, #0]
 80049de:	e00c      	b.n	80049fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	1c58      	adds	r0, r3, #1
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	6288      	str	r0, [r1, #40]	; 0x28
 80049f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4619      	mov	r1, r3
 8004a08:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d120      	bne.n	8004a50 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0220 	bic.w	r2, r2, #32
 8004a1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695a      	ldr	r2, [r3, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff fe8a 	bl	8004760 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e002      	b.n	8004a56 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e000      	b.n	8004a56 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004a54:	2302      	movs	r3, #2
  }
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a64:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a7a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a7e:	68d9      	ldr	r1, [r3, #12]
 8004a80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	ea40 0301 	orr.w	r3, r0, r1
 8004a8a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8004aae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004aba:	f021 010c 	bic.w	r1, r1, #12
 8004abe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004acc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ad8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004adc:	6999      	ldr	r1, [r3, #24]
 8004ade:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	ea40 0301 	orr.w	r3, r0, r1
 8004ae8:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af4:	f040 824a 	bne.w	8004f8c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004af8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4b96      	ldr	r3, [pc, #600]	; (8004d58 <UART_SetConfig+0x2f8>)
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d006      	beq.n	8004b12 <UART_SetConfig+0xb2>
 8004b04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4b94      	ldr	r3, [pc, #592]	; (8004d5c <UART_SetConfig+0x2fc>)
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	f040 8129 	bne.w	8004d64 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b12:	f7fe fc2b 	bl	800336c <HAL_RCC_GetPCLK2Freq>
 8004b16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004b24:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004b28:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004b2c:	4622      	mov	r2, r4
 8004b2e:	462b      	mov	r3, r5
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004b36:	415b      	adcs	r3, r3
 8004b38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b3c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004b40:	4621      	mov	r1, r4
 8004b42:	1851      	adds	r1, r2, r1
 8004b44:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004b48:	4629      	mov	r1, r5
 8004b4a:	414b      	adcs	r3, r1
 8004b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	00cb      	lsls	r3, r1, #3
 8004b60:	4641      	mov	r1, r8
 8004b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b66:	4641      	mov	r1, r8
 8004b68:	00ca      	lsls	r2, r1, #3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4622      	mov	r2, r4
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004b78:	462b      	mov	r3, r5
 8004b7a:	460a      	mov	r2, r1
 8004b7c:	eb42 0303 	adc.w	r3, r2, r3
 8004b80:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004b84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004b90:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004b94:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	18db      	adds	r3, r3, r3
 8004b9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	eb42 0303 	adc.w	r3, r2, r3
 8004ba6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004baa:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004bae:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004bb2:	f7fb fb75 	bl	80002a0 <__aeabi_uldivmod>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4b69      	ldr	r3, [pc, #420]	; (8004d60 <UART_SetConfig+0x300>)
 8004bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	011c      	lsls	r4, r3, #4
 8004bc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004bce:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004bd2:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8004bd6:	4642      	mov	r2, r8
 8004bd8:	464b      	mov	r3, r9
 8004bda:	1891      	adds	r1, r2, r2
 8004bdc:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004be0:	415b      	adcs	r3, r3
 8004be2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004be6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004bea:	4641      	mov	r1, r8
 8004bec:	1851      	adds	r1, r2, r1
 8004bee:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	414b      	adcs	r3, r1
 8004bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8004c06:	4659      	mov	r1, fp
 8004c08:	00cb      	lsls	r3, r1, #3
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c10:	4651      	mov	r1, sl
 8004c12:	00ca      	lsls	r2, r1, #3
 8004c14:	4610      	mov	r0, r2
 8004c16:	4619      	mov	r1, r3
 8004c18:	4603      	mov	r3, r0
 8004c1a:	4642      	mov	r2, r8
 8004c1c:	189b      	adds	r3, r3, r2
 8004c1e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004c22:	464b      	mov	r3, r9
 8004c24:	460a      	mov	r2, r1
 8004c26:	eb42 0303 	adc.w	r3, r2, r3
 8004c2a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8004c2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004c3a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8004c3e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8004c42:	460b      	mov	r3, r1
 8004c44:	18db      	adds	r3, r3, r3
 8004c46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	eb42 0303 	adc.w	r3, r2, r3
 8004c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c54:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004c58:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004c5c:	f7fb fb20 	bl	80002a0 <__aeabi_uldivmod>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4611      	mov	r1, r2
 8004c66:	4b3e      	ldr	r3, [pc, #248]	; (8004d60 <UART_SetConfig+0x300>)
 8004c68:	fba3 2301 	umull	r2, r3, r3, r1
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	2264      	movs	r2, #100	; 0x64
 8004c70:	fb02 f303 	mul.w	r3, r2, r3
 8004c74:	1acb      	subs	r3, r1, r3
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c7c:	4b38      	ldr	r3, [pc, #224]	; (8004d60 <UART_SetConfig+0x300>)
 8004c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c8a:	441c      	add	r4, r3
 8004c8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004c96:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004c9a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8004c9e:	4642      	mov	r2, r8
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	1891      	adds	r1, r2, r2
 8004ca4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004ca8:	415b      	adcs	r3, r3
 8004caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004cae:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004cb2:	4641      	mov	r1, r8
 8004cb4:	1851      	adds	r1, r2, r1
 8004cb6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004cba:	4649      	mov	r1, r9
 8004cbc:	414b      	adcs	r3, r1
 8004cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8004cce:	4659      	mov	r1, fp
 8004cd0:	00cb      	lsls	r3, r1, #3
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd8:	4651      	mov	r1, sl
 8004cda:	00ca      	lsls	r2, r1, #3
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4642      	mov	r2, r8
 8004ce4:	189b      	adds	r3, r3, r2
 8004ce6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004cea:	464b      	mov	r3, r9
 8004cec:	460a      	mov	r2, r1
 8004cee:	eb42 0303 	adc.w	r3, r2, r3
 8004cf2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004cf6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8004d02:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8004d06:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	18db      	adds	r3, r3, r3
 8004d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d12:	4613      	mov	r3, r2
 8004d14:	eb42 0303 	adc.w	r3, r2, r3
 8004d18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d1c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004d20:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004d24:	f7fb fabc 	bl	80002a0 <__aeabi_uldivmod>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <UART_SetConfig+0x300>)
 8004d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	2164      	movs	r1, #100	; 0x64
 8004d36:	fb01 f303 	mul.w	r3, r1, r3
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	3332      	adds	r3, #50	; 0x32
 8004d40:	4a07      	ldr	r2, [pc, #28]	; (8004d60 <UART_SetConfig+0x300>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	f003 0207 	and.w	r2, r3, #7
 8004d4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4422      	add	r2, r4
 8004d54:	609a      	str	r2, [r3, #8]
 8004d56:	e349      	b.n	80053ec <UART_SetConfig+0x98c>
 8004d58:	40011000 	.word	0x40011000
 8004d5c:	40011400 	.word	0x40011400
 8004d60:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d64:	f7fe faee 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 8004d68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004d76:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8004d7a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8004d7e:	4622      	mov	r2, r4
 8004d80:	462b      	mov	r3, r5
 8004d82:	1891      	adds	r1, r2, r2
 8004d84:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004d88:	415b      	adcs	r3, r3
 8004d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d8e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004d92:	4621      	mov	r1, r4
 8004d94:	eb12 0a01 	adds.w	sl, r2, r1
 8004d98:	4629      	mov	r1, r5
 8004d9a:	eb43 0b01 	adc.w	fp, r3, r1
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004daa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004db2:	4692      	mov	sl, r2
 8004db4:	469b      	mov	fp, r3
 8004db6:	4623      	mov	r3, r4
 8004db8:	eb1a 0303 	adds.w	r3, sl, r3
 8004dbc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	eb4b 0303 	adc.w	r3, fp, r3
 8004dc6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004dca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8004dd6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004dda:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004dde:	460b      	mov	r3, r1
 8004de0:	18db      	adds	r3, r3, r3
 8004de2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004de6:	4613      	mov	r3, r2
 8004de8:	eb42 0303 	adc.w	r3, r2, r3
 8004dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004df0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004df4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004df8:	f7fb fa52 	bl	80002a0 <__aeabi_uldivmod>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4b61      	ldr	r3, [pc, #388]	; (8004f88 <UART_SetConfig+0x528>)
 8004e02:	fba3 2302 	umull	r2, r3, r3, r2
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	011c      	lsls	r4, r3, #4
 8004e0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004e14:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004e18:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	1891      	adds	r1, r2, r2
 8004e22:	67b9      	str	r1, [r7, #120]	; 0x78
 8004e24:	415b      	adcs	r3, r3
 8004e26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e28:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004e2c:	4641      	mov	r1, r8
 8004e2e:	1851      	adds	r1, r2, r1
 8004e30:	6739      	str	r1, [r7, #112]	; 0x70
 8004e32:	4649      	mov	r1, r9
 8004e34:	414b      	adcs	r3, r1
 8004e36:	677b      	str	r3, [r7, #116]	; 0x74
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004e44:	4659      	mov	r1, fp
 8004e46:	00cb      	lsls	r3, r1, #3
 8004e48:	4651      	mov	r1, sl
 8004e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e4e:	4651      	mov	r1, sl
 8004e50:	00ca      	lsls	r2, r1, #3
 8004e52:	4610      	mov	r0, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	4603      	mov	r3, r0
 8004e58:	4642      	mov	r2, r8
 8004e5a:	189b      	adds	r3, r3, r2
 8004e5c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004e60:	464b      	mov	r3, r9
 8004e62:	460a      	mov	r2, r1
 8004e64:	eb42 0303 	adc.w	r3, r2, r3
 8004e68:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004e6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004e78:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004e7c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8004e80:	460b      	mov	r3, r1
 8004e82:	18db      	adds	r3, r3, r3
 8004e84:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e86:	4613      	mov	r3, r2
 8004e88:	eb42 0303 	adc.w	r3, r2, r3
 8004e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e8e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004e92:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004e96:	f7fb fa03 	bl	80002a0 <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4b39      	ldr	r3, [pc, #228]	; (8004f88 <UART_SetConfig+0x528>)
 8004ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2264      	movs	r2, #100	; 0x64
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	1acb      	subs	r3, r1, r3
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004eb6:	4b34      	ldr	r3, [pc, #208]	; (8004f88 <UART_SetConfig+0x528>)
 8004eb8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ec4:	441c      	add	r4, r3
 8004ec6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004ed0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004ed4:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004ed8:	4642      	mov	r2, r8
 8004eda:	464b      	mov	r3, r9
 8004edc:	1891      	adds	r1, r2, r2
 8004ede:	6639      	str	r1, [r7, #96]	; 0x60
 8004ee0:	415b      	adcs	r3, r3
 8004ee2:	667b      	str	r3, [r7, #100]	; 0x64
 8004ee4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004ee8:	4641      	mov	r1, r8
 8004eea:	1851      	adds	r1, r2, r1
 8004eec:	65b9      	str	r1, [r7, #88]	; 0x58
 8004eee:	4649      	mov	r1, r9
 8004ef0:	414b      	adcs	r3, r1
 8004ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004f00:	4659      	mov	r1, fp
 8004f02:	00cb      	lsls	r3, r1, #3
 8004f04:	4651      	mov	r1, sl
 8004f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f0a:	4651      	mov	r1, sl
 8004f0c:	00ca      	lsls	r2, r1, #3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	4619      	mov	r1, r3
 8004f12:	4603      	mov	r3, r0
 8004f14:	4642      	mov	r2, r8
 8004f16:	189b      	adds	r3, r3, r2
 8004f18:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	460a      	mov	r2, r1
 8004f20:	eb42 0303 	adc.w	r3, r2, r3
 8004f24:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004f28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004f34:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004f38:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	18db      	adds	r3, r3, r3
 8004f40:	653b      	str	r3, [r7, #80]	; 0x50
 8004f42:	4613      	mov	r3, r2
 8004f44:	eb42 0303 	adc.w	r3, r2, r3
 8004f48:	657b      	str	r3, [r7, #84]	; 0x54
 8004f4a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f4e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004f52:	f7fb f9a5 	bl	80002a0 <__aeabi_uldivmod>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <UART_SetConfig+0x528>)
 8004f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	2164      	movs	r1, #100	; 0x64
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	3332      	adds	r3, #50	; 0x32
 8004f6e:	4a06      	ldr	r2, [pc, #24]	; (8004f88 <UART_SetConfig+0x528>)
 8004f70:	fba2 2303 	umull	r2, r3, r2, r3
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	f003 0207 	and.w	r2, r3, #7
 8004f7a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4422      	add	r2, r4
 8004f82:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004f84:	e232      	b.n	80053ec <UART_SetConfig+0x98c>
 8004f86:	bf00      	nop
 8004f88:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4b8d      	ldr	r3, [pc, #564]	; (80051c8 <UART_SetConfig+0x768>)
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d006      	beq.n	8004fa6 <UART_SetConfig+0x546>
 8004f98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4b8b      	ldr	r3, [pc, #556]	; (80051cc <UART_SetConfig+0x76c>)
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	f040 8117 	bne.w	80051d4 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fa6:	f7fe f9e1 	bl	800336c <HAL_RCC_GetPCLK2Freq>
 8004faa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004fb8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004fbc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004fc0:	4622      	mov	r2, r4
 8004fc2:	462b      	mov	r3, r5
 8004fc4:	1891      	adds	r1, r2, r2
 8004fc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fc8:	415b      	adcs	r3, r3
 8004fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	eb12 0801 	adds.w	r8, r2, r1
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	eb43 0901 	adc.w	r9, r3, r1
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fe8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ff0:	4690      	mov	r8, r2
 8004ff2:	4699      	mov	r9, r3
 8004ff4:	4623      	mov	r3, r4
 8004ff6:	eb18 0303 	adds.w	r3, r8, r3
 8004ffa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004ffe:	462b      	mov	r3, r5
 8005000:	eb49 0303 	adc.w	r3, r9, r3
 8005004:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005008:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005014:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8005024:	4629      	mov	r1, r5
 8005026:	008b      	lsls	r3, r1, #2
 8005028:	4621      	mov	r1, r4
 800502a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800502e:	4621      	mov	r1, r4
 8005030:	008a      	lsls	r2, r1, #2
 8005032:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8005036:	f7fb f933 	bl	80002a0 <__aeabi_uldivmod>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4b64      	ldr	r3, [pc, #400]	; (80051d0 <UART_SetConfig+0x770>)
 8005040:	fba3 2302 	umull	r2, r3, r3, r2
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	011c      	lsls	r4, r3, #4
 8005048:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800504c:	2200      	movs	r2, #0
 800504e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8005052:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005056:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800505a:	4642      	mov	r2, r8
 800505c:	464b      	mov	r3, r9
 800505e:	1891      	adds	r1, r2, r2
 8005060:	6439      	str	r1, [r7, #64]	; 0x40
 8005062:	415b      	adcs	r3, r3
 8005064:	647b      	str	r3, [r7, #68]	; 0x44
 8005066:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800506a:	4641      	mov	r1, r8
 800506c:	1851      	adds	r1, r2, r1
 800506e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005070:	4649      	mov	r1, r9
 8005072:	414b      	adcs	r3, r1
 8005074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8005082:	4659      	mov	r1, fp
 8005084:	00cb      	lsls	r3, r1, #3
 8005086:	4651      	mov	r1, sl
 8005088:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800508c:	4651      	mov	r1, sl
 800508e:	00ca      	lsls	r2, r1, #3
 8005090:	4610      	mov	r0, r2
 8005092:	4619      	mov	r1, r3
 8005094:	4603      	mov	r3, r0
 8005096:	4642      	mov	r2, r8
 8005098:	189b      	adds	r3, r3, r2
 800509a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800509e:	464b      	mov	r3, r9
 80050a0:	460a      	mov	r2, r1
 80050a2:	eb42 0303 	adc.w	r3, r2, r3
 80050a6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80050aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80050b6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80050c6:	4649      	mov	r1, r9
 80050c8:	008b      	lsls	r3, r1, #2
 80050ca:	4641      	mov	r1, r8
 80050cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050d0:	4641      	mov	r1, r8
 80050d2:	008a      	lsls	r2, r1, #2
 80050d4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80050d8:	f7fb f8e2 	bl	80002a0 <__aeabi_uldivmod>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4b3b      	ldr	r3, [pc, #236]	; (80051d0 <UART_SetConfig+0x770>)
 80050e2:	fba3 1302 	umull	r1, r3, r3, r2
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	2164      	movs	r1, #100	; 0x64
 80050ea:	fb01 f303 	mul.w	r3, r1, r3
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	3332      	adds	r3, #50	; 0x32
 80050f4:	4a36      	ldr	r2, [pc, #216]	; (80051d0 <UART_SetConfig+0x770>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005100:	441c      	add	r4, r3
 8005102:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005106:	2200      	movs	r2, #0
 8005108:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800510c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8005110:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8005114:	4642      	mov	r2, r8
 8005116:	464b      	mov	r3, r9
 8005118:	1891      	adds	r1, r2, r2
 800511a:	6339      	str	r1, [r7, #48]	; 0x30
 800511c:	415b      	adcs	r3, r3
 800511e:	637b      	str	r3, [r7, #52]	; 0x34
 8005120:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005124:	4641      	mov	r1, r8
 8005126:	1851      	adds	r1, r2, r1
 8005128:	62b9      	str	r1, [r7, #40]	; 0x28
 800512a:	4649      	mov	r1, r9
 800512c:	414b      	adcs	r3, r1
 800512e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800513c:	4659      	mov	r1, fp
 800513e:	00cb      	lsls	r3, r1, #3
 8005140:	4651      	mov	r1, sl
 8005142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005146:	4651      	mov	r1, sl
 8005148:	00ca      	lsls	r2, r1, #3
 800514a:	4610      	mov	r0, r2
 800514c:	4619      	mov	r1, r3
 800514e:	4603      	mov	r3, r0
 8005150:	4642      	mov	r2, r8
 8005152:	189b      	adds	r3, r3, r2
 8005154:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005158:	464b      	mov	r3, r9
 800515a:	460a      	mov	r2, r1
 800515c:	eb42 0303 	adc.w	r3, r2, r3
 8005160:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005164:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005170:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8005180:	4649      	mov	r1, r9
 8005182:	008b      	lsls	r3, r1, #2
 8005184:	4641      	mov	r1, r8
 8005186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800518a:	4641      	mov	r1, r8
 800518c:	008a      	lsls	r2, r1, #2
 800518e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8005192:	f7fb f885 	bl	80002a0 <__aeabi_uldivmod>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <UART_SetConfig+0x770>)
 800519c:	fba3 1302 	umull	r1, r3, r3, r2
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	2164      	movs	r1, #100	; 0x64
 80051a4:	fb01 f303 	mul.w	r3, r1, r3
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	3332      	adds	r3, #50	; 0x32
 80051ae:	4a08      	ldr	r2, [pc, #32]	; (80051d0 <UART_SetConfig+0x770>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	f003 020f 	and.w	r2, r3, #15
 80051ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4422      	add	r2, r4
 80051c2:	609a      	str	r2, [r3, #8]
 80051c4:	e112      	b.n	80053ec <UART_SetConfig+0x98c>
 80051c6:	bf00      	nop
 80051c8:	40011000 	.word	0x40011000
 80051cc:	40011400 	.word	0x40011400
 80051d0:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80051d4:	f7fe f8b6 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 80051d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80051e0:	2200      	movs	r2, #0
 80051e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80051e6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80051ea:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80051ee:	4642      	mov	r2, r8
 80051f0:	464b      	mov	r3, r9
 80051f2:	1891      	adds	r1, r2, r2
 80051f4:	6239      	str	r1, [r7, #32]
 80051f6:	415b      	adcs	r3, r3
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
 80051fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051fe:	4641      	mov	r1, r8
 8005200:	1854      	adds	r4, r2, r1
 8005202:	4649      	mov	r1, r9
 8005204:	eb43 0501 	adc.w	r5, r3, r1
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	00eb      	lsls	r3, r5, #3
 8005212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005216:	00e2      	lsls	r2, r4, #3
 8005218:	4614      	mov	r4, r2
 800521a:	461d      	mov	r5, r3
 800521c:	4643      	mov	r3, r8
 800521e:	18e3      	adds	r3, r4, r3
 8005220:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005224:	464b      	mov	r3, r9
 8005226:	eb45 0303 	adc.w	r3, r5, r3
 800522a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800522e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800523a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800524a:	4629      	mov	r1, r5
 800524c:	008b      	lsls	r3, r1, #2
 800524e:	4621      	mov	r1, r4
 8005250:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005254:	4621      	mov	r1, r4
 8005256:	008a      	lsls	r2, r1, #2
 8005258:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800525c:	f7fb f820 	bl	80002a0 <__aeabi_uldivmod>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4b64      	ldr	r3, [pc, #400]	; (80053f8 <UART_SetConfig+0x998>)
 8005266:	fba3 2302 	umull	r2, r3, r3, r2
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	011c      	lsls	r4, r3, #4
 800526e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005272:	2200      	movs	r2, #0
 8005274:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005278:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800527c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8005280:	4642      	mov	r2, r8
 8005282:	464b      	mov	r3, r9
 8005284:	1891      	adds	r1, r2, r2
 8005286:	61b9      	str	r1, [r7, #24]
 8005288:	415b      	adcs	r3, r3
 800528a:	61fb      	str	r3, [r7, #28]
 800528c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005290:	4641      	mov	r1, r8
 8005292:	1851      	adds	r1, r2, r1
 8005294:	6139      	str	r1, [r7, #16]
 8005296:	4649      	mov	r1, r9
 8005298:	414b      	adcs	r3, r1
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052a8:	4659      	mov	r1, fp
 80052aa:	00cb      	lsls	r3, r1, #3
 80052ac:	4651      	mov	r1, sl
 80052ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052b2:	4651      	mov	r1, sl
 80052b4:	00ca      	lsls	r2, r1, #3
 80052b6:	4610      	mov	r0, r2
 80052b8:	4619      	mov	r1, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	4642      	mov	r2, r8
 80052be:	189b      	adds	r3, r3, r2
 80052c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052c4:	464b      	mov	r3, r9
 80052c6:	460a      	mov	r2, r1
 80052c8:	eb42 0303 	adc.w	r3, r2, r3
 80052cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80052dc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80052ec:	4649      	mov	r1, r9
 80052ee:	008b      	lsls	r3, r1, #2
 80052f0:	4641      	mov	r1, r8
 80052f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052f6:	4641      	mov	r1, r8
 80052f8:	008a      	lsls	r2, r1, #2
 80052fa:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80052fe:	f7fa ffcf 	bl	80002a0 <__aeabi_uldivmod>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4b3c      	ldr	r3, [pc, #240]	; (80053f8 <UART_SetConfig+0x998>)
 8005308:	fba3 1302 	umull	r1, r3, r3, r2
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	2164      	movs	r1, #100	; 0x64
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	3332      	adds	r3, #50	; 0x32
 800531a:	4a37      	ldr	r2, [pc, #220]	; (80053f8 <UART_SetConfig+0x998>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005326:	441c      	add	r4, r3
 8005328:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800532c:	2200      	movs	r2, #0
 800532e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005332:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005336:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800533a:	4642      	mov	r2, r8
 800533c:	464b      	mov	r3, r9
 800533e:	1891      	adds	r1, r2, r2
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	415b      	adcs	r3, r3
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800534a:	4641      	mov	r1, r8
 800534c:	1851      	adds	r1, r2, r1
 800534e:	6039      	str	r1, [r7, #0]
 8005350:	4649      	mov	r1, r9
 8005352:	414b      	adcs	r3, r1
 8005354:	607b      	str	r3, [r7, #4]
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005362:	4659      	mov	r1, fp
 8005364:	00cb      	lsls	r3, r1, #3
 8005366:	4651      	mov	r1, sl
 8005368:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800536c:	4651      	mov	r1, sl
 800536e:	00ca      	lsls	r2, r1, #3
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	4603      	mov	r3, r0
 8005376:	4642      	mov	r2, r8
 8005378:	189b      	adds	r3, r3, r2
 800537a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800537e:	464b      	mov	r3, r9
 8005380:	460a      	mov	r2, r1
 8005382:	eb42 0303 	adc.w	r3, r2, r3
 8005386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800538a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005396:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80053a6:	4649      	mov	r1, r9
 80053a8:	008b      	lsls	r3, r1, #2
 80053aa:	4641      	mov	r1, r8
 80053ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053b0:	4641      	mov	r1, r8
 80053b2:	008a      	lsls	r2, r1, #2
 80053b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053b8:	f7fa ff72 	bl	80002a0 <__aeabi_uldivmod>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <UART_SetConfig+0x998>)
 80053c2:	fba3 1302 	umull	r1, r3, r3, r2
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	2164      	movs	r1, #100	; 0x64
 80053ca:	fb01 f303 	mul.w	r3, r1, r3
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	3332      	adds	r3, #50	; 0x32
 80053d4:	4a08      	ldr	r2, [pc, #32]	; (80053f8 <UART_SetConfig+0x998>)
 80053d6:	fba2 2303 	umull	r2, r3, r2, r3
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	f003 020f 	and.w	r2, r3, #15
 80053e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4422      	add	r2, r4
 80053e8:	609a      	str	r2, [r3, #8]
}
 80053ea:	e7ff      	b.n	80053ec <UART_SetConfig+0x98c>
 80053ec:	bf00      	nop
 80053ee:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80053f2:	46bd      	mov	sp, r7
 80053f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053f8:	51eb851f 	.word	0x51eb851f

080053fc <atoi>:
 80053fc:	220a      	movs	r2, #10
 80053fe:	2100      	movs	r1, #0
 8005400:	f000 bc5e 	b.w	8005cc0 <strtol>

08005404 <__errno>:
 8005404:	4b01      	ldr	r3, [pc, #4]	; (800540c <__errno+0x8>)
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	20000890 	.word	0x20000890

08005410 <__sflush_r>:
 8005410:	898a      	ldrh	r2, [r1, #12]
 8005412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005416:	4605      	mov	r5, r0
 8005418:	0710      	lsls	r0, r2, #28
 800541a:	460c      	mov	r4, r1
 800541c:	d458      	bmi.n	80054d0 <__sflush_r+0xc0>
 800541e:	684b      	ldr	r3, [r1, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	dc05      	bgt.n	8005430 <__sflush_r+0x20>
 8005424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	dc02      	bgt.n	8005430 <__sflush_r+0x20>
 800542a:	2000      	movs	r0, #0
 800542c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005432:	2e00      	cmp	r6, #0
 8005434:	d0f9      	beq.n	800542a <__sflush_r+0x1a>
 8005436:	2300      	movs	r3, #0
 8005438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800543c:	682f      	ldr	r7, [r5, #0]
 800543e:	602b      	str	r3, [r5, #0]
 8005440:	d032      	beq.n	80054a8 <__sflush_r+0x98>
 8005442:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	075a      	lsls	r2, r3, #29
 8005448:	d505      	bpl.n	8005456 <__sflush_r+0x46>
 800544a:	6863      	ldr	r3, [r4, #4]
 800544c:	1ac0      	subs	r0, r0, r3
 800544e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005450:	b10b      	cbz	r3, 8005456 <__sflush_r+0x46>
 8005452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005454:	1ac0      	subs	r0, r0, r3
 8005456:	2300      	movs	r3, #0
 8005458:	4602      	mov	r2, r0
 800545a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800545c:	6a21      	ldr	r1, [r4, #32]
 800545e:	4628      	mov	r0, r5
 8005460:	47b0      	blx	r6
 8005462:	1c43      	adds	r3, r0, #1
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	d106      	bne.n	8005476 <__sflush_r+0x66>
 8005468:	6829      	ldr	r1, [r5, #0]
 800546a:	291d      	cmp	r1, #29
 800546c:	d82c      	bhi.n	80054c8 <__sflush_r+0xb8>
 800546e:	4a2a      	ldr	r2, [pc, #168]	; (8005518 <__sflush_r+0x108>)
 8005470:	40ca      	lsrs	r2, r1
 8005472:	07d6      	lsls	r6, r2, #31
 8005474:	d528      	bpl.n	80054c8 <__sflush_r+0xb8>
 8005476:	2200      	movs	r2, #0
 8005478:	6062      	str	r2, [r4, #4]
 800547a:	04d9      	lsls	r1, r3, #19
 800547c:	6922      	ldr	r2, [r4, #16]
 800547e:	6022      	str	r2, [r4, #0]
 8005480:	d504      	bpl.n	800548c <__sflush_r+0x7c>
 8005482:	1c42      	adds	r2, r0, #1
 8005484:	d101      	bne.n	800548a <__sflush_r+0x7a>
 8005486:	682b      	ldr	r3, [r5, #0]
 8005488:	b903      	cbnz	r3, 800548c <__sflush_r+0x7c>
 800548a:	6560      	str	r0, [r4, #84]	; 0x54
 800548c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800548e:	602f      	str	r7, [r5, #0]
 8005490:	2900      	cmp	r1, #0
 8005492:	d0ca      	beq.n	800542a <__sflush_r+0x1a>
 8005494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005498:	4299      	cmp	r1, r3
 800549a:	d002      	beq.n	80054a2 <__sflush_r+0x92>
 800549c:	4628      	mov	r0, r5
 800549e:	f000 f9bf 	bl	8005820 <_free_r>
 80054a2:	2000      	movs	r0, #0
 80054a4:	6360      	str	r0, [r4, #52]	; 0x34
 80054a6:	e7c1      	b.n	800542c <__sflush_r+0x1c>
 80054a8:	6a21      	ldr	r1, [r4, #32]
 80054aa:	2301      	movs	r3, #1
 80054ac:	4628      	mov	r0, r5
 80054ae:	47b0      	blx	r6
 80054b0:	1c41      	adds	r1, r0, #1
 80054b2:	d1c7      	bne.n	8005444 <__sflush_r+0x34>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0c4      	beq.n	8005444 <__sflush_r+0x34>
 80054ba:	2b1d      	cmp	r3, #29
 80054bc:	d001      	beq.n	80054c2 <__sflush_r+0xb2>
 80054be:	2b16      	cmp	r3, #22
 80054c0:	d101      	bne.n	80054c6 <__sflush_r+0xb6>
 80054c2:	602f      	str	r7, [r5, #0]
 80054c4:	e7b1      	b.n	800542a <__sflush_r+0x1a>
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054cc:	81a3      	strh	r3, [r4, #12]
 80054ce:	e7ad      	b.n	800542c <__sflush_r+0x1c>
 80054d0:	690f      	ldr	r7, [r1, #16]
 80054d2:	2f00      	cmp	r7, #0
 80054d4:	d0a9      	beq.n	800542a <__sflush_r+0x1a>
 80054d6:	0793      	lsls	r3, r2, #30
 80054d8:	680e      	ldr	r6, [r1, #0]
 80054da:	bf08      	it	eq
 80054dc:	694b      	ldreq	r3, [r1, #20]
 80054de:	600f      	str	r7, [r1, #0]
 80054e0:	bf18      	it	ne
 80054e2:	2300      	movne	r3, #0
 80054e4:	eba6 0807 	sub.w	r8, r6, r7
 80054e8:	608b      	str	r3, [r1, #8]
 80054ea:	f1b8 0f00 	cmp.w	r8, #0
 80054ee:	dd9c      	ble.n	800542a <__sflush_r+0x1a>
 80054f0:	6a21      	ldr	r1, [r4, #32]
 80054f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054f4:	4643      	mov	r3, r8
 80054f6:	463a      	mov	r2, r7
 80054f8:	4628      	mov	r0, r5
 80054fa:	47b0      	blx	r6
 80054fc:	2800      	cmp	r0, #0
 80054fe:	dc06      	bgt.n	800550e <__sflush_r+0xfe>
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005506:	81a3      	strh	r3, [r4, #12]
 8005508:	f04f 30ff 	mov.w	r0, #4294967295
 800550c:	e78e      	b.n	800542c <__sflush_r+0x1c>
 800550e:	4407      	add	r7, r0
 8005510:	eba8 0800 	sub.w	r8, r8, r0
 8005514:	e7e9      	b.n	80054ea <__sflush_r+0xda>
 8005516:	bf00      	nop
 8005518:	20400001 	.word	0x20400001

0800551c <_fflush_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	690b      	ldr	r3, [r1, #16]
 8005520:	4605      	mov	r5, r0
 8005522:	460c      	mov	r4, r1
 8005524:	b913      	cbnz	r3, 800552c <_fflush_r+0x10>
 8005526:	2500      	movs	r5, #0
 8005528:	4628      	mov	r0, r5
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	b118      	cbz	r0, 8005536 <_fflush_r+0x1a>
 800552e:	6983      	ldr	r3, [r0, #24]
 8005530:	b90b      	cbnz	r3, 8005536 <_fflush_r+0x1a>
 8005532:	f000 f899 	bl	8005668 <__sinit>
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <_fflush_r+0x6c>)
 8005538:	429c      	cmp	r4, r3
 800553a:	d11b      	bne.n	8005574 <_fflush_r+0x58>
 800553c:	686c      	ldr	r4, [r5, #4]
 800553e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0ef      	beq.n	8005526 <_fflush_r+0xa>
 8005546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005548:	07d0      	lsls	r0, r2, #31
 800554a:	d404      	bmi.n	8005556 <_fflush_r+0x3a>
 800554c:	0599      	lsls	r1, r3, #22
 800554e:	d402      	bmi.n	8005556 <_fflush_r+0x3a>
 8005550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005552:	f000 f94c 	bl	80057ee <__retarget_lock_acquire_recursive>
 8005556:	4628      	mov	r0, r5
 8005558:	4621      	mov	r1, r4
 800555a:	f7ff ff59 	bl	8005410 <__sflush_r>
 800555e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005560:	07da      	lsls	r2, r3, #31
 8005562:	4605      	mov	r5, r0
 8005564:	d4e0      	bmi.n	8005528 <_fflush_r+0xc>
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	059b      	lsls	r3, r3, #22
 800556a:	d4dd      	bmi.n	8005528 <_fflush_r+0xc>
 800556c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800556e:	f000 f93f 	bl	80057f0 <__retarget_lock_release_recursive>
 8005572:	e7d9      	b.n	8005528 <_fflush_r+0xc>
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <_fflush_r+0x70>)
 8005576:	429c      	cmp	r4, r3
 8005578:	d101      	bne.n	800557e <_fflush_r+0x62>
 800557a:	68ac      	ldr	r4, [r5, #8]
 800557c:	e7df      	b.n	800553e <_fflush_r+0x22>
 800557e:	4b04      	ldr	r3, [pc, #16]	; (8005590 <_fflush_r+0x74>)
 8005580:	429c      	cmp	r4, r3
 8005582:	bf08      	it	eq
 8005584:	68ec      	ldreq	r4, [r5, #12]
 8005586:	e7da      	b.n	800553e <_fflush_r+0x22>
 8005588:	08007ee4 	.word	0x08007ee4
 800558c:	08007f04 	.word	0x08007f04
 8005590:	08007ec4 	.word	0x08007ec4

08005594 <fflush>:
 8005594:	4601      	mov	r1, r0
 8005596:	b920      	cbnz	r0, 80055a2 <fflush+0xe>
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <fflush+0x18>)
 800559a:	4905      	ldr	r1, [pc, #20]	; (80055b0 <fflush+0x1c>)
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	f000 b8e1 	b.w	8005764 <_fwalk_reent>
 80055a2:	4b04      	ldr	r3, [pc, #16]	; (80055b4 <fflush+0x20>)
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	f7ff bfb9 	b.w	800551c <_fflush_r>
 80055aa:	bf00      	nop
 80055ac:	08007f24 	.word	0x08007f24
 80055b0:	0800551d 	.word	0x0800551d
 80055b4:	20000890 	.word	0x20000890

080055b8 <std>:
 80055b8:	2300      	movs	r3, #0
 80055ba:	b510      	push	{r4, lr}
 80055bc:	4604      	mov	r4, r0
 80055be:	e9c0 3300 	strd	r3, r3, [r0]
 80055c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055c6:	6083      	str	r3, [r0, #8]
 80055c8:	8181      	strh	r1, [r0, #12]
 80055ca:	6643      	str	r3, [r0, #100]	; 0x64
 80055cc:	81c2      	strh	r2, [r0, #14]
 80055ce:	6183      	str	r3, [r0, #24]
 80055d0:	4619      	mov	r1, r3
 80055d2:	2208      	movs	r2, #8
 80055d4:	305c      	adds	r0, #92	; 0x5c
 80055d6:	f000 f91a 	bl	800580e <memset>
 80055da:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <std+0x38>)
 80055dc:	6263      	str	r3, [r4, #36]	; 0x24
 80055de:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <std+0x3c>)
 80055e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <std+0x40>)
 80055e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055e6:	4b05      	ldr	r3, [pc, #20]	; (80055fc <std+0x44>)
 80055e8:	6224      	str	r4, [r4, #32]
 80055ea:	6323      	str	r3, [r4, #48]	; 0x30
 80055ec:	bd10      	pop	{r4, pc}
 80055ee:	bf00      	nop
 80055f0:	08005a31 	.word	0x08005a31
 80055f4:	08005a53 	.word	0x08005a53
 80055f8:	08005a8b 	.word	0x08005a8b
 80055fc:	08005aaf 	.word	0x08005aaf

08005600 <_cleanup_r>:
 8005600:	4901      	ldr	r1, [pc, #4]	; (8005608 <_cleanup_r+0x8>)
 8005602:	f000 b8af 	b.w	8005764 <_fwalk_reent>
 8005606:	bf00      	nop
 8005608:	0800551d 	.word	0x0800551d

0800560c <__sfmoreglue>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	2268      	movs	r2, #104	; 0x68
 8005610:	1e4d      	subs	r5, r1, #1
 8005612:	4355      	muls	r5, r2
 8005614:	460e      	mov	r6, r1
 8005616:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800561a:	f000 f96d 	bl	80058f8 <_malloc_r>
 800561e:	4604      	mov	r4, r0
 8005620:	b140      	cbz	r0, 8005634 <__sfmoreglue+0x28>
 8005622:	2100      	movs	r1, #0
 8005624:	e9c0 1600 	strd	r1, r6, [r0]
 8005628:	300c      	adds	r0, #12
 800562a:	60a0      	str	r0, [r4, #8]
 800562c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005630:	f000 f8ed 	bl	800580e <memset>
 8005634:	4620      	mov	r0, r4
 8005636:	bd70      	pop	{r4, r5, r6, pc}

08005638 <__sfp_lock_acquire>:
 8005638:	4801      	ldr	r0, [pc, #4]	; (8005640 <__sfp_lock_acquire+0x8>)
 800563a:	f000 b8d8 	b.w	80057ee <__retarget_lock_acquire_recursive>
 800563e:	bf00      	nop
 8005640:	20013be1 	.word	0x20013be1

08005644 <__sfp_lock_release>:
 8005644:	4801      	ldr	r0, [pc, #4]	; (800564c <__sfp_lock_release+0x8>)
 8005646:	f000 b8d3 	b.w	80057f0 <__retarget_lock_release_recursive>
 800564a:	bf00      	nop
 800564c:	20013be1 	.word	0x20013be1

08005650 <__sinit_lock_acquire>:
 8005650:	4801      	ldr	r0, [pc, #4]	; (8005658 <__sinit_lock_acquire+0x8>)
 8005652:	f000 b8cc 	b.w	80057ee <__retarget_lock_acquire_recursive>
 8005656:	bf00      	nop
 8005658:	20013be2 	.word	0x20013be2

0800565c <__sinit_lock_release>:
 800565c:	4801      	ldr	r0, [pc, #4]	; (8005664 <__sinit_lock_release+0x8>)
 800565e:	f000 b8c7 	b.w	80057f0 <__retarget_lock_release_recursive>
 8005662:	bf00      	nop
 8005664:	20013be2 	.word	0x20013be2

08005668 <__sinit>:
 8005668:	b510      	push	{r4, lr}
 800566a:	4604      	mov	r4, r0
 800566c:	f7ff fff0 	bl	8005650 <__sinit_lock_acquire>
 8005670:	69a3      	ldr	r3, [r4, #24]
 8005672:	b11b      	cbz	r3, 800567c <__sinit+0x14>
 8005674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005678:	f7ff bff0 	b.w	800565c <__sinit_lock_release>
 800567c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005680:	6523      	str	r3, [r4, #80]	; 0x50
 8005682:	4b13      	ldr	r3, [pc, #76]	; (80056d0 <__sinit+0x68>)
 8005684:	4a13      	ldr	r2, [pc, #76]	; (80056d4 <__sinit+0x6c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	62a2      	str	r2, [r4, #40]	; 0x28
 800568a:	42a3      	cmp	r3, r4
 800568c:	bf04      	itt	eq
 800568e:	2301      	moveq	r3, #1
 8005690:	61a3      	streq	r3, [r4, #24]
 8005692:	4620      	mov	r0, r4
 8005694:	f000 f820 	bl	80056d8 <__sfp>
 8005698:	6060      	str	r0, [r4, #4]
 800569a:	4620      	mov	r0, r4
 800569c:	f000 f81c 	bl	80056d8 <__sfp>
 80056a0:	60a0      	str	r0, [r4, #8]
 80056a2:	4620      	mov	r0, r4
 80056a4:	f000 f818 	bl	80056d8 <__sfp>
 80056a8:	2200      	movs	r2, #0
 80056aa:	60e0      	str	r0, [r4, #12]
 80056ac:	2104      	movs	r1, #4
 80056ae:	6860      	ldr	r0, [r4, #4]
 80056b0:	f7ff ff82 	bl	80055b8 <std>
 80056b4:	68a0      	ldr	r0, [r4, #8]
 80056b6:	2201      	movs	r2, #1
 80056b8:	2109      	movs	r1, #9
 80056ba:	f7ff ff7d 	bl	80055b8 <std>
 80056be:	68e0      	ldr	r0, [r4, #12]
 80056c0:	2202      	movs	r2, #2
 80056c2:	2112      	movs	r1, #18
 80056c4:	f7ff ff78 	bl	80055b8 <std>
 80056c8:	2301      	movs	r3, #1
 80056ca:	61a3      	str	r3, [r4, #24]
 80056cc:	e7d2      	b.n	8005674 <__sinit+0xc>
 80056ce:	bf00      	nop
 80056d0:	08007f24 	.word	0x08007f24
 80056d4:	08005601 	.word	0x08005601

080056d8 <__sfp>:
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056da:	4607      	mov	r7, r0
 80056dc:	f7ff ffac 	bl	8005638 <__sfp_lock_acquire>
 80056e0:	4b1e      	ldr	r3, [pc, #120]	; (800575c <__sfp+0x84>)
 80056e2:	681e      	ldr	r6, [r3, #0]
 80056e4:	69b3      	ldr	r3, [r6, #24]
 80056e6:	b913      	cbnz	r3, 80056ee <__sfp+0x16>
 80056e8:	4630      	mov	r0, r6
 80056ea:	f7ff ffbd 	bl	8005668 <__sinit>
 80056ee:	3648      	adds	r6, #72	; 0x48
 80056f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	d503      	bpl.n	8005700 <__sfp+0x28>
 80056f8:	6833      	ldr	r3, [r6, #0]
 80056fa:	b30b      	cbz	r3, 8005740 <__sfp+0x68>
 80056fc:	6836      	ldr	r6, [r6, #0]
 80056fe:	e7f7      	b.n	80056f0 <__sfp+0x18>
 8005700:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005704:	b9d5      	cbnz	r5, 800573c <__sfp+0x64>
 8005706:	4b16      	ldr	r3, [pc, #88]	; (8005760 <__sfp+0x88>)
 8005708:	60e3      	str	r3, [r4, #12]
 800570a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800570e:	6665      	str	r5, [r4, #100]	; 0x64
 8005710:	f000 f86c 	bl	80057ec <__retarget_lock_init_recursive>
 8005714:	f7ff ff96 	bl	8005644 <__sfp_lock_release>
 8005718:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800571c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005720:	6025      	str	r5, [r4, #0]
 8005722:	61a5      	str	r5, [r4, #24]
 8005724:	2208      	movs	r2, #8
 8005726:	4629      	mov	r1, r5
 8005728:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800572c:	f000 f86f 	bl	800580e <memset>
 8005730:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005734:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005738:	4620      	mov	r0, r4
 800573a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800573c:	3468      	adds	r4, #104	; 0x68
 800573e:	e7d9      	b.n	80056f4 <__sfp+0x1c>
 8005740:	2104      	movs	r1, #4
 8005742:	4638      	mov	r0, r7
 8005744:	f7ff ff62 	bl	800560c <__sfmoreglue>
 8005748:	4604      	mov	r4, r0
 800574a:	6030      	str	r0, [r6, #0]
 800574c:	2800      	cmp	r0, #0
 800574e:	d1d5      	bne.n	80056fc <__sfp+0x24>
 8005750:	f7ff ff78 	bl	8005644 <__sfp_lock_release>
 8005754:	230c      	movs	r3, #12
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	e7ee      	b.n	8005738 <__sfp+0x60>
 800575a:	bf00      	nop
 800575c:	08007f24 	.word	0x08007f24
 8005760:	ffff0001 	.word	0xffff0001

08005764 <_fwalk_reent>:
 8005764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005768:	4606      	mov	r6, r0
 800576a:	4688      	mov	r8, r1
 800576c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005770:	2700      	movs	r7, #0
 8005772:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005776:	f1b9 0901 	subs.w	r9, r9, #1
 800577a:	d505      	bpl.n	8005788 <_fwalk_reent+0x24>
 800577c:	6824      	ldr	r4, [r4, #0]
 800577e:	2c00      	cmp	r4, #0
 8005780:	d1f7      	bne.n	8005772 <_fwalk_reent+0xe>
 8005782:	4638      	mov	r0, r7
 8005784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005788:	89ab      	ldrh	r3, [r5, #12]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d907      	bls.n	800579e <_fwalk_reent+0x3a>
 800578e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005792:	3301      	adds	r3, #1
 8005794:	d003      	beq.n	800579e <_fwalk_reent+0x3a>
 8005796:	4629      	mov	r1, r5
 8005798:	4630      	mov	r0, r6
 800579a:	47c0      	blx	r8
 800579c:	4307      	orrs	r7, r0
 800579e:	3568      	adds	r5, #104	; 0x68
 80057a0:	e7e9      	b.n	8005776 <_fwalk_reent+0x12>
	...

080057a4 <__libc_init_array>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	4d0d      	ldr	r5, [pc, #52]	; (80057dc <__libc_init_array+0x38>)
 80057a8:	4c0d      	ldr	r4, [pc, #52]	; (80057e0 <__libc_init_array+0x3c>)
 80057aa:	1b64      	subs	r4, r4, r5
 80057ac:	10a4      	asrs	r4, r4, #2
 80057ae:	2600      	movs	r6, #0
 80057b0:	42a6      	cmp	r6, r4
 80057b2:	d109      	bne.n	80057c8 <__libc_init_array+0x24>
 80057b4:	4d0b      	ldr	r5, [pc, #44]	; (80057e4 <__libc_init_array+0x40>)
 80057b6:	4c0c      	ldr	r4, [pc, #48]	; (80057e8 <__libc_init_array+0x44>)
 80057b8:	f000 ff96 	bl	80066e8 <_init>
 80057bc:	1b64      	subs	r4, r4, r5
 80057be:	10a4      	asrs	r4, r4, #2
 80057c0:	2600      	movs	r6, #0
 80057c2:	42a6      	cmp	r6, r4
 80057c4:	d105      	bne.n	80057d2 <__libc_init_array+0x2e>
 80057c6:	bd70      	pop	{r4, r5, r6, pc}
 80057c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057cc:	4798      	blx	r3
 80057ce:	3601      	adds	r6, #1
 80057d0:	e7ee      	b.n	80057b0 <__libc_init_array+0xc>
 80057d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d6:	4798      	blx	r3
 80057d8:	3601      	adds	r6, #1
 80057da:	e7f2      	b.n	80057c2 <__libc_init_array+0x1e>
 80057dc:	08008114 	.word	0x08008114
 80057e0:	08008114 	.word	0x08008114
 80057e4:	08008114 	.word	0x08008114
 80057e8:	08008118 	.word	0x08008118

080057ec <__retarget_lock_init_recursive>:
 80057ec:	4770      	bx	lr

080057ee <__retarget_lock_acquire_recursive>:
 80057ee:	4770      	bx	lr

080057f0 <__retarget_lock_release_recursive>:
 80057f0:	4770      	bx	lr

080057f2 <memcpy>:
 80057f2:	440a      	add	r2, r1
 80057f4:	4291      	cmp	r1, r2
 80057f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80057fa:	d100      	bne.n	80057fe <memcpy+0xc>
 80057fc:	4770      	bx	lr
 80057fe:	b510      	push	{r4, lr}
 8005800:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005804:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005808:	4291      	cmp	r1, r2
 800580a:	d1f9      	bne.n	8005800 <memcpy+0xe>
 800580c:	bd10      	pop	{r4, pc}

0800580e <memset>:
 800580e:	4402      	add	r2, r0
 8005810:	4603      	mov	r3, r0
 8005812:	4293      	cmp	r3, r2
 8005814:	d100      	bne.n	8005818 <memset+0xa>
 8005816:	4770      	bx	lr
 8005818:	f803 1b01 	strb.w	r1, [r3], #1
 800581c:	e7f9      	b.n	8005812 <memset+0x4>
	...

08005820 <_free_r>:
 8005820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005822:	2900      	cmp	r1, #0
 8005824:	d044      	beq.n	80058b0 <_free_r+0x90>
 8005826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800582a:	9001      	str	r0, [sp, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	f1a1 0404 	sub.w	r4, r1, #4
 8005832:	bfb8      	it	lt
 8005834:	18e4      	addlt	r4, r4, r3
 8005836:	f000 fab9 	bl	8005dac <__malloc_lock>
 800583a:	4a1e      	ldr	r2, [pc, #120]	; (80058b4 <_free_r+0x94>)
 800583c:	9801      	ldr	r0, [sp, #4]
 800583e:	6813      	ldr	r3, [r2, #0]
 8005840:	b933      	cbnz	r3, 8005850 <_free_r+0x30>
 8005842:	6063      	str	r3, [r4, #4]
 8005844:	6014      	str	r4, [r2, #0]
 8005846:	b003      	add	sp, #12
 8005848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800584c:	f000 bab4 	b.w	8005db8 <__malloc_unlock>
 8005850:	42a3      	cmp	r3, r4
 8005852:	d908      	bls.n	8005866 <_free_r+0x46>
 8005854:	6825      	ldr	r5, [r4, #0]
 8005856:	1961      	adds	r1, r4, r5
 8005858:	428b      	cmp	r3, r1
 800585a:	bf01      	itttt	eq
 800585c:	6819      	ldreq	r1, [r3, #0]
 800585e:	685b      	ldreq	r3, [r3, #4]
 8005860:	1949      	addeq	r1, r1, r5
 8005862:	6021      	streq	r1, [r4, #0]
 8005864:	e7ed      	b.n	8005842 <_free_r+0x22>
 8005866:	461a      	mov	r2, r3
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	b10b      	cbz	r3, 8005870 <_free_r+0x50>
 800586c:	42a3      	cmp	r3, r4
 800586e:	d9fa      	bls.n	8005866 <_free_r+0x46>
 8005870:	6811      	ldr	r1, [r2, #0]
 8005872:	1855      	adds	r5, r2, r1
 8005874:	42a5      	cmp	r5, r4
 8005876:	d10b      	bne.n	8005890 <_free_r+0x70>
 8005878:	6824      	ldr	r4, [r4, #0]
 800587a:	4421      	add	r1, r4
 800587c:	1854      	adds	r4, r2, r1
 800587e:	42a3      	cmp	r3, r4
 8005880:	6011      	str	r1, [r2, #0]
 8005882:	d1e0      	bne.n	8005846 <_free_r+0x26>
 8005884:	681c      	ldr	r4, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	6053      	str	r3, [r2, #4]
 800588a:	4421      	add	r1, r4
 800588c:	6011      	str	r1, [r2, #0]
 800588e:	e7da      	b.n	8005846 <_free_r+0x26>
 8005890:	d902      	bls.n	8005898 <_free_r+0x78>
 8005892:	230c      	movs	r3, #12
 8005894:	6003      	str	r3, [r0, #0]
 8005896:	e7d6      	b.n	8005846 <_free_r+0x26>
 8005898:	6825      	ldr	r5, [r4, #0]
 800589a:	1961      	adds	r1, r4, r5
 800589c:	428b      	cmp	r3, r1
 800589e:	bf04      	itt	eq
 80058a0:	6819      	ldreq	r1, [r3, #0]
 80058a2:	685b      	ldreq	r3, [r3, #4]
 80058a4:	6063      	str	r3, [r4, #4]
 80058a6:	bf04      	itt	eq
 80058a8:	1949      	addeq	r1, r1, r5
 80058aa:	6021      	streq	r1, [r4, #0]
 80058ac:	6054      	str	r4, [r2, #4]
 80058ae:	e7ca      	b.n	8005846 <_free_r+0x26>
 80058b0:	b003      	add	sp, #12
 80058b2:	bd30      	pop	{r4, r5, pc}
 80058b4:	20013be4 	.word	0x20013be4

080058b8 <sbrk_aligned>:
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	4e0e      	ldr	r6, [pc, #56]	; (80058f4 <sbrk_aligned+0x3c>)
 80058bc:	460c      	mov	r4, r1
 80058be:	6831      	ldr	r1, [r6, #0]
 80058c0:	4605      	mov	r5, r0
 80058c2:	b911      	cbnz	r1, 80058ca <sbrk_aligned+0x12>
 80058c4:	f000 f8a4 	bl	8005a10 <_sbrk_r>
 80058c8:	6030      	str	r0, [r6, #0]
 80058ca:	4621      	mov	r1, r4
 80058cc:	4628      	mov	r0, r5
 80058ce:	f000 f89f 	bl	8005a10 <_sbrk_r>
 80058d2:	1c43      	adds	r3, r0, #1
 80058d4:	d00a      	beq.n	80058ec <sbrk_aligned+0x34>
 80058d6:	1cc4      	adds	r4, r0, #3
 80058d8:	f024 0403 	bic.w	r4, r4, #3
 80058dc:	42a0      	cmp	r0, r4
 80058de:	d007      	beq.n	80058f0 <sbrk_aligned+0x38>
 80058e0:	1a21      	subs	r1, r4, r0
 80058e2:	4628      	mov	r0, r5
 80058e4:	f000 f894 	bl	8005a10 <_sbrk_r>
 80058e8:	3001      	adds	r0, #1
 80058ea:	d101      	bne.n	80058f0 <sbrk_aligned+0x38>
 80058ec:	f04f 34ff 	mov.w	r4, #4294967295
 80058f0:	4620      	mov	r0, r4
 80058f2:	bd70      	pop	{r4, r5, r6, pc}
 80058f4:	20013be8 	.word	0x20013be8

080058f8 <_malloc_r>:
 80058f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058fc:	1ccd      	adds	r5, r1, #3
 80058fe:	f025 0503 	bic.w	r5, r5, #3
 8005902:	3508      	adds	r5, #8
 8005904:	2d0c      	cmp	r5, #12
 8005906:	bf38      	it	cc
 8005908:	250c      	movcc	r5, #12
 800590a:	2d00      	cmp	r5, #0
 800590c:	4607      	mov	r7, r0
 800590e:	db01      	blt.n	8005914 <_malloc_r+0x1c>
 8005910:	42a9      	cmp	r1, r5
 8005912:	d905      	bls.n	8005920 <_malloc_r+0x28>
 8005914:	230c      	movs	r3, #12
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	2600      	movs	r6, #0
 800591a:	4630      	mov	r0, r6
 800591c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005920:	4e2e      	ldr	r6, [pc, #184]	; (80059dc <_malloc_r+0xe4>)
 8005922:	f000 fa43 	bl	8005dac <__malloc_lock>
 8005926:	6833      	ldr	r3, [r6, #0]
 8005928:	461c      	mov	r4, r3
 800592a:	bb34      	cbnz	r4, 800597a <_malloc_r+0x82>
 800592c:	4629      	mov	r1, r5
 800592e:	4638      	mov	r0, r7
 8005930:	f7ff ffc2 	bl	80058b8 <sbrk_aligned>
 8005934:	1c43      	adds	r3, r0, #1
 8005936:	4604      	mov	r4, r0
 8005938:	d14d      	bne.n	80059d6 <_malloc_r+0xde>
 800593a:	6834      	ldr	r4, [r6, #0]
 800593c:	4626      	mov	r6, r4
 800593e:	2e00      	cmp	r6, #0
 8005940:	d140      	bne.n	80059c4 <_malloc_r+0xcc>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	4631      	mov	r1, r6
 8005946:	4638      	mov	r0, r7
 8005948:	eb04 0803 	add.w	r8, r4, r3
 800594c:	f000 f860 	bl	8005a10 <_sbrk_r>
 8005950:	4580      	cmp	r8, r0
 8005952:	d13a      	bne.n	80059ca <_malloc_r+0xd2>
 8005954:	6821      	ldr	r1, [r4, #0]
 8005956:	3503      	adds	r5, #3
 8005958:	1a6d      	subs	r5, r5, r1
 800595a:	f025 0503 	bic.w	r5, r5, #3
 800595e:	3508      	adds	r5, #8
 8005960:	2d0c      	cmp	r5, #12
 8005962:	bf38      	it	cc
 8005964:	250c      	movcc	r5, #12
 8005966:	4629      	mov	r1, r5
 8005968:	4638      	mov	r0, r7
 800596a:	f7ff ffa5 	bl	80058b8 <sbrk_aligned>
 800596e:	3001      	adds	r0, #1
 8005970:	d02b      	beq.n	80059ca <_malloc_r+0xd2>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	442b      	add	r3, r5
 8005976:	6023      	str	r3, [r4, #0]
 8005978:	e00e      	b.n	8005998 <_malloc_r+0xa0>
 800597a:	6822      	ldr	r2, [r4, #0]
 800597c:	1b52      	subs	r2, r2, r5
 800597e:	d41e      	bmi.n	80059be <_malloc_r+0xc6>
 8005980:	2a0b      	cmp	r2, #11
 8005982:	d916      	bls.n	80059b2 <_malloc_r+0xba>
 8005984:	1961      	adds	r1, r4, r5
 8005986:	42a3      	cmp	r3, r4
 8005988:	6025      	str	r5, [r4, #0]
 800598a:	bf18      	it	ne
 800598c:	6059      	strne	r1, [r3, #4]
 800598e:	6863      	ldr	r3, [r4, #4]
 8005990:	bf08      	it	eq
 8005992:	6031      	streq	r1, [r6, #0]
 8005994:	5162      	str	r2, [r4, r5]
 8005996:	604b      	str	r3, [r1, #4]
 8005998:	4638      	mov	r0, r7
 800599a:	f104 060b 	add.w	r6, r4, #11
 800599e:	f000 fa0b 	bl	8005db8 <__malloc_unlock>
 80059a2:	f026 0607 	bic.w	r6, r6, #7
 80059a6:	1d23      	adds	r3, r4, #4
 80059a8:	1af2      	subs	r2, r6, r3
 80059aa:	d0b6      	beq.n	800591a <_malloc_r+0x22>
 80059ac:	1b9b      	subs	r3, r3, r6
 80059ae:	50a3      	str	r3, [r4, r2]
 80059b0:	e7b3      	b.n	800591a <_malloc_r+0x22>
 80059b2:	6862      	ldr	r2, [r4, #4]
 80059b4:	42a3      	cmp	r3, r4
 80059b6:	bf0c      	ite	eq
 80059b8:	6032      	streq	r2, [r6, #0]
 80059ba:	605a      	strne	r2, [r3, #4]
 80059bc:	e7ec      	b.n	8005998 <_malloc_r+0xa0>
 80059be:	4623      	mov	r3, r4
 80059c0:	6864      	ldr	r4, [r4, #4]
 80059c2:	e7b2      	b.n	800592a <_malloc_r+0x32>
 80059c4:	4634      	mov	r4, r6
 80059c6:	6876      	ldr	r6, [r6, #4]
 80059c8:	e7b9      	b.n	800593e <_malloc_r+0x46>
 80059ca:	230c      	movs	r3, #12
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	4638      	mov	r0, r7
 80059d0:	f000 f9f2 	bl	8005db8 <__malloc_unlock>
 80059d4:	e7a1      	b.n	800591a <_malloc_r+0x22>
 80059d6:	6025      	str	r5, [r4, #0]
 80059d8:	e7de      	b.n	8005998 <_malloc_r+0xa0>
 80059da:	bf00      	nop
 80059dc:	20013be4 	.word	0x20013be4

080059e0 <iprintf>:
 80059e0:	b40f      	push	{r0, r1, r2, r3}
 80059e2:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <iprintf+0x2c>)
 80059e4:	b513      	push	{r0, r1, r4, lr}
 80059e6:	681c      	ldr	r4, [r3, #0]
 80059e8:	b124      	cbz	r4, 80059f4 <iprintf+0x14>
 80059ea:	69a3      	ldr	r3, [r4, #24]
 80059ec:	b913      	cbnz	r3, 80059f4 <iprintf+0x14>
 80059ee:	4620      	mov	r0, r4
 80059f0:	f7ff fe3a 	bl	8005668 <__sinit>
 80059f4:	ab05      	add	r3, sp, #20
 80059f6:	9a04      	ldr	r2, [sp, #16]
 80059f8:	68a1      	ldr	r1, [r4, #8]
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	4620      	mov	r0, r4
 80059fe:	f000 fa0b 	bl	8005e18 <_vfiprintf_r>
 8005a02:	b002      	add	sp, #8
 8005a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a08:	b004      	add	sp, #16
 8005a0a:	4770      	bx	lr
 8005a0c:	20000890 	.word	0x20000890

08005a10 <_sbrk_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4d06      	ldr	r5, [pc, #24]	; (8005a2c <_sbrk_r+0x1c>)
 8005a14:	2300      	movs	r3, #0
 8005a16:	4604      	mov	r4, r0
 8005a18:	4608      	mov	r0, r1
 8005a1a:	602b      	str	r3, [r5, #0]
 8005a1c:	f7fb fe74 	bl	8001708 <_sbrk>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_sbrk_r+0x1a>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_sbrk_r+0x1a>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	20013bec 	.word	0x20013bec

08005a30 <__sread>:
 8005a30:	b510      	push	{r4, lr}
 8005a32:	460c      	mov	r4, r1
 8005a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a38:	f000 fcb2 	bl	80063a0 <_read_r>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	bfab      	itete	ge
 8005a40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a42:	89a3      	ldrhlt	r3, [r4, #12]
 8005a44:	181b      	addge	r3, r3, r0
 8005a46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a4a:	bfac      	ite	ge
 8005a4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a4e:	81a3      	strhlt	r3, [r4, #12]
 8005a50:	bd10      	pop	{r4, pc}

08005a52 <__swrite>:
 8005a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a56:	461f      	mov	r7, r3
 8005a58:	898b      	ldrh	r3, [r1, #12]
 8005a5a:	05db      	lsls	r3, r3, #23
 8005a5c:	4605      	mov	r5, r0
 8005a5e:	460c      	mov	r4, r1
 8005a60:	4616      	mov	r6, r2
 8005a62:	d505      	bpl.n	8005a70 <__swrite+0x1e>
 8005a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a68:	2302      	movs	r3, #2
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f000 f984 	bl	8005d78 <_lseek_r>
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a7a:	81a3      	strh	r3, [r4, #12]
 8005a7c:	4632      	mov	r2, r6
 8005a7e:	463b      	mov	r3, r7
 8005a80:	4628      	mov	r0, r5
 8005a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a86:	f000 b925 	b.w	8005cd4 <_write_r>

08005a8a <__sseek>:
 8005a8a:	b510      	push	{r4, lr}
 8005a8c:	460c      	mov	r4, r1
 8005a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a92:	f000 f971 	bl	8005d78 <_lseek_r>
 8005a96:	1c43      	adds	r3, r0, #1
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	bf15      	itete	ne
 8005a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aa6:	81a3      	strheq	r3, [r4, #12]
 8005aa8:	bf18      	it	ne
 8005aaa:	81a3      	strhne	r3, [r4, #12]
 8005aac:	bd10      	pop	{r4, pc}

08005aae <__sclose>:
 8005aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab2:	f000 b93f 	b.w	8005d34 <_close_r>

08005ab6 <strncmp>:
 8005ab6:	b510      	push	{r4, lr}
 8005ab8:	b17a      	cbz	r2, 8005ada <strncmp+0x24>
 8005aba:	4603      	mov	r3, r0
 8005abc:	3901      	subs	r1, #1
 8005abe:	1884      	adds	r4, r0, r2
 8005ac0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005ac4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005ac8:	4290      	cmp	r0, r2
 8005aca:	d101      	bne.n	8005ad0 <strncmp+0x1a>
 8005acc:	42a3      	cmp	r3, r4
 8005ace:	d101      	bne.n	8005ad4 <strncmp+0x1e>
 8005ad0:	1a80      	subs	r0, r0, r2
 8005ad2:	bd10      	pop	{r4, pc}
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d1f3      	bne.n	8005ac0 <strncmp+0xa>
 8005ad8:	e7fa      	b.n	8005ad0 <strncmp+0x1a>
 8005ada:	4610      	mov	r0, r2
 8005adc:	e7f9      	b.n	8005ad2 <strncmp+0x1c>

08005ade <strncpy>:
 8005ade:	b510      	push	{r4, lr}
 8005ae0:	3901      	subs	r1, #1
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	b132      	cbz	r2, 8005af4 <strncpy+0x16>
 8005ae6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005aea:	f803 4b01 	strb.w	r4, [r3], #1
 8005aee:	3a01      	subs	r2, #1
 8005af0:	2c00      	cmp	r4, #0
 8005af2:	d1f7      	bne.n	8005ae4 <strncpy+0x6>
 8005af4:	441a      	add	r2, r3
 8005af6:	2100      	movs	r1, #0
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d100      	bne.n	8005afe <strncpy+0x20>
 8005afc:	bd10      	pop	{r4, pc}
 8005afe:	f803 1b01 	strb.w	r1, [r3], #1
 8005b02:	e7f9      	b.n	8005af8 <strncpy+0x1a>

08005b04 <strtok>:
 8005b04:	4b16      	ldr	r3, [pc, #88]	; (8005b60 <strtok+0x5c>)
 8005b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b08:	681e      	ldr	r6, [r3, #0]
 8005b0a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	b9fc      	cbnz	r4, 8005b50 <strtok+0x4c>
 8005b10:	2050      	movs	r0, #80	; 0x50
 8005b12:	9101      	str	r1, [sp, #4]
 8005b14:	f000 f942 	bl	8005d9c <malloc>
 8005b18:	9901      	ldr	r1, [sp, #4]
 8005b1a:	65b0      	str	r0, [r6, #88]	; 0x58
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	b920      	cbnz	r0, 8005b2a <strtok+0x26>
 8005b20:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <strtok+0x60>)
 8005b22:	4811      	ldr	r0, [pc, #68]	; (8005b68 <strtok+0x64>)
 8005b24:	2157      	movs	r1, #87	; 0x57
 8005b26:	f000 f8e7 	bl	8005cf8 <__assert_func>
 8005b2a:	e9c0 4400 	strd	r4, r4, [r0]
 8005b2e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005b32:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005b36:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005b3a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005b3e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005b42:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005b46:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005b4a:	6184      	str	r4, [r0, #24]
 8005b4c:	7704      	strb	r4, [r0, #28]
 8005b4e:	6244      	str	r4, [r0, #36]	; 0x24
 8005b50:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005b52:	2301      	movs	r3, #1
 8005b54:	4628      	mov	r0, r5
 8005b56:	b002      	add	sp, #8
 8005b58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b5c:	f000 b806 	b.w	8005b6c <__strtok_r>
 8005b60:	20000890 	.word	0x20000890
 8005b64:	08007f28 	.word	0x08007f28
 8005b68:	08007f3f 	.word	0x08007f3f

08005b6c <__strtok_r>:
 8005b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b6e:	b908      	cbnz	r0, 8005b74 <__strtok_r+0x8>
 8005b70:	6810      	ldr	r0, [r2, #0]
 8005b72:	b188      	cbz	r0, 8005b98 <__strtok_r+0x2c>
 8005b74:	4604      	mov	r4, r0
 8005b76:	4620      	mov	r0, r4
 8005b78:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005b7c:	460f      	mov	r7, r1
 8005b7e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005b82:	b91e      	cbnz	r6, 8005b8c <__strtok_r+0x20>
 8005b84:	b965      	cbnz	r5, 8005ba0 <__strtok_r+0x34>
 8005b86:	6015      	str	r5, [r2, #0]
 8005b88:	4628      	mov	r0, r5
 8005b8a:	e005      	b.n	8005b98 <__strtok_r+0x2c>
 8005b8c:	42b5      	cmp	r5, r6
 8005b8e:	d1f6      	bne.n	8005b7e <__strtok_r+0x12>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f0      	bne.n	8005b76 <__strtok_r+0xa>
 8005b94:	6014      	str	r4, [r2, #0]
 8005b96:	7003      	strb	r3, [r0, #0]
 8005b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b9a:	461c      	mov	r4, r3
 8005b9c:	e00c      	b.n	8005bb8 <__strtok_r+0x4c>
 8005b9e:	b915      	cbnz	r5, 8005ba6 <__strtok_r+0x3a>
 8005ba0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ba4:	460e      	mov	r6, r1
 8005ba6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005baa:	42ab      	cmp	r3, r5
 8005bac:	d1f7      	bne.n	8005b9e <__strtok_r+0x32>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0f3      	beq.n	8005b9a <__strtok_r+0x2e>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005bb8:	6014      	str	r4, [r2, #0]
 8005bba:	e7ed      	b.n	8005b98 <__strtok_r+0x2c>

08005bbc <_strtol_l.constprop.0>:
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc2:	d001      	beq.n	8005bc8 <_strtol_l.constprop.0+0xc>
 8005bc4:	2b24      	cmp	r3, #36	; 0x24
 8005bc6:	d906      	bls.n	8005bd6 <_strtol_l.constprop.0+0x1a>
 8005bc8:	f7ff fc1c 	bl	8005404 <__errno>
 8005bcc:	2316      	movs	r3, #22
 8005bce:	6003      	str	r3, [r0, #0]
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005cbc <_strtol_l.constprop.0+0x100>
 8005bda:	460d      	mov	r5, r1
 8005bdc:	462e      	mov	r6, r5
 8005bde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005be2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005be6:	f017 0708 	ands.w	r7, r7, #8
 8005bea:	d1f7      	bne.n	8005bdc <_strtol_l.constprop.0+0x20>
 8005bec:	2c2d      	cmp	r4, #45	; 0x2d
 8005bee:	d132      	bne.n	8005c56 <_strtol_l.constprop.0+0x9a>
 8005bf0:	782c      	ldrb	r4, [r5, #0]
 8005bf2:	2701      	movs	r7, #1
 8005bf4:	1cb5      	adds	r5, r6, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d05b      	beq.n	8005cb2 <_strtol_l.constprop.0+0xf6>
 8005bfa:	2b10      	cmp	r3, #16
 8005bfc:	d109      	bne.n	8005c12 <_strtol_l.constprop.0+0x56>
 8005bfe:	2c30      	cmp	r4, #48	; 0x30
 8005c00:	d107      	bne.n	8005c12 <_strtol_l.constprop.0+0x56>
 8005c02:	782c      	ldrb	r4, [r5, #0]
 8005c04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005c08:	2c58      	cmp	r4, #88	; 0x58
 8005c0a:	d14d      	bne.n	8005ca8 <_strtol_l.constprop.0+0xec>
 8005c0c:	786c      	ldrb	r4, [r5, #1]
 8005c0e:	2310      	movs	r3, #16
 8005c10:	3502      	adds	r5, #2
 8005c12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005c16:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c1a:	f04f 0c00 	mov.w	ip, #0
 8005c1e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005c22:	4666      	mov	r6, ip
 8005c24:	fb03 8a19 	mls	sl, r3, r9, r8
 8005c28:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005c2c:	f1be 0f09 	cmp.w	lr, #9
 8005c30:	d816      	bhi.n	8005c60 <_strtol_l.constprop.0+0xa4>
 8005c32:	4674      	mov	r4, lr
 8005c34:	42a3      	cmp	r3, r4
 8005c36:	dd24      	ble.n	8005c82 <_strtol_l.constprop.0+0xc6>
 8005c38:	f1bc 0f00 	cmp.w	ip, #0
 8005c3c:	db1e      	blt.n	8005c7c <_strtol_l.constprop.0+0xc0>
 8005c3e:	45b1      	cmp	r9, r6
 8005c40:	d31c      	bcc.n	8005c7c <_strtol_l.constprop.0+0xc0>
 8005c42:	d101      	bne.n	8005c48 <_strtol_l.constprop.0+0x8c>
 8005c44:	45a2      	cmp	sl, r4
 8005c46:	db19      	blt.n	8005c7c <_strtol_l.constprop.0+0xc0>
 8005c48:	fb06 4603 	mla	r6, r6, r3, r4
 8005c4c:	f04f 0c01 	mov.w	ip, #1
 8005c50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c54:	e7e8      	b.n	8005c28 <_strtol_l.constprop.0+0x6c>
 8005c56:	2c2b      	cmp	r4, #43	; 0x2b
 8005c58:	bf04      	itt	eq
 8005c5a:	782c      	ldrbeq	r4, [r5, #0]
 8005c5c:	1cb5      	addeq	r5, r6, #2
 8005c5e:	e7ca      	b.n	8005bf6 <_strtol_l.constprop.0+0x3a>
 8005c60:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005c64:	f1be 0f19 	cmp.w	lr, #25
 8005c68:	d801      	bhi.n	8005c6e <_strtol_l.constprop.0+0xb2>
 8005c6a:	3c37      	subs	r4, #55	; 0x37
 8005c6c:	e7e2      	b.n	8005c34 <_strtol_l.constprop.0+0x78>
 8005c6e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005c72:	f1be 0f19 	cmp.w	lr, #25
 8005c76:	d804      	bhi.n	8005c82 <_strtol_l.constprop.0+0xc6>
 8005c78:	3c57      	subs	r4, #87	; 0x57
 8005c7a:	e7db      	b.n	8005c34 <_strtol_l.constprop.0+0x78>
 8005c7c:	f04f 3cff 	mov.w	ip, #4294967295
 8005c80:	e7e6      	b.n	8005c50 <_strtol_l.constprop.0+0x94>
 8005c82:	f1bc 0f00 	cmp.w	ip, #0
 8005c86:	da05      	bge.n	8005c94 <_strtol_l.constprop.0+0xd8>
 8005c88:	2322      	movs	r3, #34	; 0x22
 8005c8a:	6003      	str	r3, [r0, #0]
 8005c8c:	4646      	mov	r6, r8
 8005c8e:	b942      	cbnz	r2, 8005ca2 <_strtol_l.constprop.0+0xe6>
 8005c90:	4630      	mov	r0, r6
 8005c92:	e79e      	b.n	8005bd2 <_strtol_l.constprop.0+0x16>
 8005c94:	b107      	cbz	r7, 8005c98 <_strtol_l.constprop.0+0xdc>
 8005c96:	4276      	negs	r6, r6
 8005c98:	2a00      	cmp	r2, #0
 8005c9a:	d0f9      	beq.n	8005c90 <_strtol_l.constprop.0+0xd4>
 8005c9c:	f1bc 0f00 	cmp.w	ip, #0
 8005ca0:	d000      	beq.n	8005ca4 <_strtol_l.constprop.0+0xe8>
 8005ca2:	1e69      	subs	r1, r5, #1
 8005ca4:	6011      	str	r1, [r2, #0]
 8005ca6:	e7f3      	b.n	8005c90 <_strtol_l.constprop.0+0xd4>
 8005ca8:	2430      	movs	r4, #48	; 0x30
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1b1      	bne.n	8005c12 <_strtol_l.constprop.0+0x56>
 8005cae:	2308      	movs	r3, #8
 8005cb0:	e7af      	b.n	8005c12 <_strtol_l.constprop.0+0x56>
 8005cb2:	2c30      	cmp	r4, #48	; 0x30
 8005cb4:	d0a5      	beq.n	8005c02 <_strtol_l.constprop.0+0x46>
 8005cb6:	230a      	movs	r3, #10
 8005cb8:	e7ab      	b.n	8005c12 <_strtol_l.constprop.0+0x56>
 8005cba:	bf00      	nop
 8005cbc:	08007fd9 	.word	0x08007fd9

08005cc0 <strtol>:
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	460a      	mov	r2, r1
 8005cc4:	4601      	mov	r1, r0
 8005cc6:	4802      	ldr	r0, [pc, #8]	; (8005cd0 <strtol+0x10>)
 8005cc8:	6800      	ldr	r0, [r0, #0]
 8005cca:	f7ff bf77 	b.w	8005bbc <_strtol_l.constprop.0>
 8005cce:	bf00      	nop
 8005cd0:	20000890 	.word	0x20000890

08005cd4 <_write_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4d07      	ldr	r5, [pc, #28]	; (8005cf4 <_write_r+0x20>)
 8005cd8:	4604      	mov	r4, r0
 8005cda:	4608      	mov	r0, r1
 8005cdc:	4611      	mov	r1, r2
 8005cde:	2200      	movs	r2, #0
 8005ce0:	602a      	str	r2, [r5, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f7fb fcbf 	bl	8001666 <_write>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_write_r+0x1e>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_write_r+0x1e>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	20013bec 	.word	0x20013bec

08005cf8 <__assert_func>:
 8005cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cfa:	4614      	mov	r4, r2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <__assert_func+0x2c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4605      	mov	r5, r0
 8005d04:	68d8      	ldr	r0, [r3, #12]
 8005d06:	b14c      	cbz	r4, 8005d1c <__assert_func+0x24>
 8005d08:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <__assert_func+0x30>)
 8005d0a:	9100      	str	r1, [sp, #0]
 8005d0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d10:	4906      	ldr	r1, [pc, #24]	; (8005d2c <__assert_func+0x34>)
 8005d12:	462b      	mov	r3, r5
 8005d14:	f000 f81e 	bl	8005d54 <fiprintf>
 8005d18:	f000 fc14 	bl	8006544 <abort>
 8005d1c:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <__assert_func+0x38>)
 8005d1e:	461c      	mov	r4, r3
 8005d20:	e7f3      	b.n	8005d0a <__assert_func+0x12>
 8005d22:	bf00      	nop
 8005d24:	20000890 	.word	0x20000890
 8005d28:	08007f9c 	.word	0x08007f9c
 8005d2c:	08007fa9 	.word	0x08007fa9
 8005d30:	08007fd7 	.word	0x08007fd7

08005d34 <_close_r>:
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	4d06      	ldr	r5, [pc, #24]	; (8005d50 <_close_r+0x1c>)
 8005d38:	2300      	movs	r3, #0
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	4608      	mov	r0, r1
 8005d3e:	602b      	str	r3, [r5, #0]
 8005d40:	f7fb fcad 	bl	800169e <_close>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d102      	bne.n	8005d4e <_close_r+0x1a>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	b103      	cbz	r3, 8005d4e <_close_r+0x1a>
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}
 8005d50:	20013bec 	.word	0x20013bec

08005d54 <fiprintf>:
 8005d54:	b40e      	push	{r1, r2, r3}
 8005d56:	b503      	push	{r0, r1, lr}
 8005d58:	4601      	mov	r1, r0
 8005d5a:	ab03      	add	r3, sp, #12
 8005d5c:	4805      	ldr	r0, [pc, #20]	; (8005d74 <fiprintf+0x20>)
 8005d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d62:	6800      	ldr	r0, [r0, #0]
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	f000 f857 	bl	8005e18 <_vfiprintf_r>
 8005d6a:	b002      	add	sp, #8
 8005d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d70:	b003      	add	sp, #12
 8005d72:	4770      	bx	lr
 8005d74:	20000890 	.word	0x20000890

08005d78 <_lseek_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4d07      	ldr	r5, [pc, #28]	; (8005d98 <_lseek_r+0x20>)
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	4608      	mov	r0, r1
 8005d80:	4611      	mov	r1, r2
 8005d82:	2200      	movs	r2, #0
 8005d84:	602a      	str	r2, [r5, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	f7fb fcb0 	bl	80016ec <_lseek>
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	d102      	bne.n	8005d96 <_lseek_r+0x1e>
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	b103      	cbz	r3, 8005d96 <_lseek_r+0x1e>
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	bd38      	pop	{r3, r4, r5, pc}
 8005d98:	20013bec 	.word	0x20013bec

08005d9c <malloc>:
 8005d9c:	4b02      	ldr	r3, [pc, #8]	; (8005da8 <malloc+0xc>)
 8005d9e:	4601      	mov	r1, r0
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	f7ff bda9 	b.w	80058f8 <_malloc_r>
 8005da6:	bf00      	nop
 8005da8:	20000890 	.word	0x20000890

08005dac <__malloc_lock>:
 8005dac:	4801      	ldr	r0, [pc, #4]	; (8005db4 <__malloc_lock+0x8>)
 8005dae:	f7ff bd1e 	b.w	80057ee <__retarget_lock_acquire_recursive>
 8005db2:	bf00      	nop
 8005db4:	20013be0 	.word	0x20013be0

08005db8 <__malloc_unlock>:
 8005db8:	4801      	ldr	r0, [pc, #4]	; (8005dc0 <__malloc_unlock+0x8>)
 8005dba:	f7ff bd19 	b.w	80057f0 <__retarget_lock_release_recursive>
 8005dbe:	bf00      	nop
 8005dc0:	20013be0 	.word	0x20013be0

08005dc4 <__sfputc_r>:
 8005dc4:	6893      	ldr	r3, [r2, #8]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	b410      	push	{r4}
 8005dcc:	6093      	str	r3, [r2, #8]
 8005dce:	da08      	bge.n	8005de2 <__sfputc_r+0x1e>
 8005dd0:	6994      	ldr	r4, [r2, #24]
 8005dd2:	42a3      	cmp	r3, r4
 8005dd4:	db01      	blt.n	8005dda <__sfputc_r+0x16>
 8005dd6:	290a      	cmp	r1, #10
 8005dd8:	d103      	bne.n	8005de2 <__sfputc_r+0x1e>
 8005dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dde:	f000 baf1 	b.w	80063c4 <__swbuf_r>
 8005de2:	6813      	ldr	r3, [r2, #0]
 8005de4:	1c58      	adds	r0, r3, #1
 8005de6:	6010      	str	r0, [r2, #0]
 8005de8:	7019      	strb	r1, [r3, #0]
 8005dea:	4608      	mov	r0, r1
 8005dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <__sfputs_r>:
 8005df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df4:	4606      	mov	r6, r0
 8005df6:	460f      	mov	r7, r1
 8005df8:	4614      	mov	r4, r2
 8005dfa:	18d5      	adds	r5, r2, r3
 8005dfc:	42ac      	cmp	r4, r5
 8005dfe:	d101      	bne.n	8005e04 <__sfputs_r+0x12>
 8005e00:	2000      	movs	r0, #0
 8005e02:	e007      	b.n	8005e14 <__sfputs_r+0x22>
 8005e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e08:	463a      	mov	r2, r7
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f7ff ffda 	bl	8005dc4 <__sfputc_r>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d1f3      	bne.n	8005dfc <__sfputs_r+0xa>
 8005e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e18 <_vfiprintf_r>:
 8005e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1c:	460d      	mov	r5, r1
 8005e1e:	b09d      	sub	sp, #116	; 0x74
 8005e20:	4614      	mov	r4, r2
 8005e22:	4698      	mov	r8, r3
 8005e24:	4606      	mov	r6, r0
 8005e26:	b118      	cbz	r0, 8005e30 <_vfiprintf_r+0x18>
 8005e28:	6983      	ldr	r3, [r0, #24]
 8005e2a:	b90b      	cbnz	r3, 8005e30 <_vfiprintf_r+0x18>
 8005e2c:	f7ff fc1c 	bl	8005668 <__sinit>
 8005e30:	4b89      	ldr	r3, [pc, #548]	; (8006058 <_vfiprintf_r+0x240>)
 8005e32:	429d      	cmp	r5, r3
 8005e34:	d11b      	bne.n	8005e6e <_vfiprintf_r+0x56>
 8005e36:	6875      	ldr	r5, [r6, #4]
 8005e38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e3a:	07d9      	lsls	r1, r3, #31
 8005e3c:	d405      	bmi.n	8005e4a <_vfiprintf_r+0x32>
 8005e3e:	89ab      	ldrh	r3, [r5, #12]
 8005e40:	059a      	lsls	r2, r3, #22
 8005e42:	d402      	bmi.n	8005e4a <_vfiprintf_r+0x32>
 8005e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e46:	f7ff fcd2 	bl	80057ee <__retarget_lock_acquire_recursive>
 8005e4a:	89ab      	ldrh	r3, [r5, #12]
 8005e4c:	071b      	lsls	r3, r3, #28
 8005e4e:	d501      	bpl.n	8005e54 <_vfiprintf_r+0x3c>
 8005e50:	692b      	ldr	r3, [r5, #16]
 8005e52:	b9eb      	cbnz	r3, 8005e90 <_vfiprintf_r+0x78>
 8005e54:	4629      	mov	r1, r5
 8005e56:	4630      	mov	r0, r6
 8005e58:	f000 fb06 	bl	8006468 <__swsetup_r>
 8005e5c:	b1c0      	cbz	r0, 8005e90 <_vfiprintf_r+0x78>
 8005e5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e60:	07dc      	lsls	r4, r3, #31
 8005e62:	d50e      	bpl.n	8005e82 <_vfiprintf_r+0x6a>
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295
 8005e68:	b01d      	add	sp, #116	; 0x74
 8005e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6e:	4b7b      	ldr	r3, [pc, #492]	; (800605c <_vfiprintf_r+0x244>)
 8005e70:	429d      	cmp	r5, r3
 8005e72:	d101      	bne.n	8005e78 <_vfiprintf_r+0x60>
 8005e74:	68b5      	ldr	r5, [r6, #8]
 8005e76:	e7df      	b.n	8005e38 <_vfiprintf_r+0x20>
 8005e78:	4b79      	ldr	r3, [pc, #484]	; (8006060 <_vfiprintf_r+0x248>)
 8005e7a:	429d      	cmp	r5, r3
 8005e7c:	bf08      	it	eq
 8005e7e:	68f5      	ldreq	r5, [r6, #12]
 8005e80:	e7da      	b.n	8005e38 <_vfiprintf_r+0x20>
 8005e82:	89ab      	ldrh	r3, [r5, #12]
 8005e84:	0598      	lsls	r0, r3, #22
 8005e86:	d4ed      	bmi.n	8005e64 <_vfiprintf_r+0x4c>
 8005e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e8a:	f7ff fcb1 	bl	80057f0 <__retarget_lock_release_recursive>
 8005e8e:	e7e9      	b.n	8005e64 <_vfiprintf_r+0x4c>
 8005e90:	2300      	movs	r3, #0
 8005e92:	9309      	str	r3, [sp, #36]	; 0x24
 8005e94:	2320      	movs	r3, #32
 8005e96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e9e:	2330      	movs	r3, #48	; 0x30
 8005ea0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006064 <_vfiprintf_r+0x24c>
 8005ea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ea8:	f04f 0901 	mov.w	r9, #1
 8005eac:	4623      	mov	r3, r4
 8005eae:	469a      	mov	sl, r3
 8005eb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eb4:	b10a      	cbz	r2, 8005eba <_vfiprintf_r+0xa2>
 8005eb6:	2a25      	cmp	r2, #37	; 0x25
 8005eb8:	d1f9      	bne.n	8005eae <_vfiprintf_r+0x96>
 8005eba:	ebba 0b04 	subs.w	fp, sl, r4
 8005ebe:	d00b      	beq.n	8005ed8 <_vfiprintf_r+0xc0>
 8005ec0:	465b      	mov	r3, fp
 8005ec2:	4622      	mov	r2, r4
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f7ff ff93 	bl	8005df2 <__sfputs_r>
 8005ecc:	3001      	adds	r0, #1
 8005ece:	f000 80aa 	beq.w	8006026 <_vfiprintf_r+0x20e>
 8005ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ed4:	445a      	add	r2, fp
 8005ed6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80a2 	beq.w	8006026 <_vfiprintf_r+0x20e>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eec:	f10a 0a01 	add.w	sl, sl, #1
 8005ef0:	9304      	str	r3, [sp, #16]
 8005ef2:	9307      	str	r3, [sp, #28]
 8005ef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ef8:	931a      	str	r3, [sp, #104]	; 0x68
 8005efa:	4654      	mov	r4, sl
 8005efc:	2205      	movs	r2, #5
 8005efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f02:	4858      	ldr	r0, [pc, #352]	; (8006064 <_vfiprintf_r+0x24c>)
 8005f04:	f7fa f97c 	bl	8000200 <memchr>
 8005f08:	9a04      	ldr	r2, [sp, #16]
 8005f0a:	b9d8      	cbnz	r0, 8005f44 <_vfiprintf_r+0x12c>
 8005f0c:	06d1      	lsls	r1, r2, #27
 8005f0e:	bf44      	itt	mi
 8005f10:	2320      	movmi	r3, #32
 8005f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f16:	0713      	lsls	r3, r2, #28
 8005f18:	bf44      	itt	mi
 8005f1a:	232b      	movmi	r3, #43	; 0x2b
 8005f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f20:	f89a 3000 	ldrb.w	r3, [sl]
 8005f24:	2b2a      	cmp	r3, #42	; 0x2a
 8005f26:	d015      	beq.n	8005f54 <_vfiprintf_r+0x13c>
 8005f28:	9a07      	ldr	r2, [sp, #28]
 8005f2a:	4654      	mov	r4, sl
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f04f 0c0a 	mov.w	ip, #10
 8005f32:	4621      	mov	r1, r4
 8005f34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f38:	3b30      	subs	r3, #48	; 0x30
 8005f3a:	2b09      	cmp	r3, #9
 8005f3c:	d94e      	bls.n	8005fdc <_vfiprintf_r+0x1c4>
 8005f3e:	b1b0      	cbz	r0, 8005f6e <_vfiprintf_r+0x156>
 8005f40:	9207      	str	r2, [sp, #28]
 8005f42:	e014      	b.n	8005f6e <_vfiprintf_r+0x156>
 8005f44:	eba0 0308 	sub.w	r3, r0, r8
 8005f48:	fa09 f303 	lsl.w	r3, r9, r3
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	9304      	str	r3, [sp, #16]
 8005f50:	46a2      	mov	sl, r4
 8005f52:	e7d2      	b.n	8005efa <_vfiprintf_r+0xe2>
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	1d19      	adds	r1, r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	9103      	str	r1, [sp, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bfbb      	ittet	lt
 8005f60:	425b      	neglt	r3, r3
 8005f62:	f042 0202 	orrlt.w	r2, r2, #2
 8005f66:	9307      	strge	r3, [sp, #28]
 8005f68:	9307      	strlt	r3, [sp, #28]
 8005f6a:	bfb8      	it	lt
 8005f6c:	9204      	strlt	r2, [sp, #16]
 8005f6e:	7823      	ldrb	r3, [r4, #0]
 8005f70:	2b2e      	cmp	r3, #46	; 0x2e
 8005f72:	d10c      	bne.n	8005f8e <_vfiprintf_r+0x176>
 8005f74:	7863      	ldrb	r3, [r4, #1]
 8005f76:	2b2a      	cmp	r3, #42	; 0x2a
 8005f78:	d135      	bne.n	8005fe6 <_vfiprintf_r+0x1ce>
 8005f7a:	9b03      	ldr	r3, [sp, #12]
 8005f7c:	1d1a      	adds	r2, r3, #4
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	9203      	str	r2, [sp, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	bfb8      	it	lt
 8005f86:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f8a:	3402      	adds	r4, #2
 8005f8c:	9305      	str	r3, [sp, #20]
 8005f8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006074 <_vfiprintf_r+0x25c>
 8005f92:	7821      	ldrb	r1, [r4, #0]
 8005f94:	2203      	movs	r2, #3
 8005f96:	4650      	mov	r0, sl
 8005f98:	f7fa f932 	bl	8000200 <memchr>
 8005f9c:	b140      	cbz	r0, 8005fb0 <_vfiprintf_r+0x198>
 8005f9e:	2340      	movs	r3, #64	; 0x40
 8005fa0:	eba0 000a 	sub.w	r0, r0, sl
 8005fa4:	fa03 f000 	lsl.w	r0, r3, r0
 8005fa8:	9b04      	ldr	r3, [sp, #16]
 8005faa:	4303      	orrs	r3, r0
 8005fac:	3401      	adds	r4, #1
 8005fae:	9304      	str	r3, [sp, #16]
 8005fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb4:	482c      	ldr	r0, [pc, #176]	; (8006068 <_vfiprintf_r+0x250>)
 8005fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fba:	2206      	movs	r2, #6
 8005fbc:	f7fa f920 	bl	8000200 <memchr>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d03f      	beq.n	8006044 <_vfiprintf_r+0x22c>
 8005fc4:	4b29      	ldr	r3, [pc, #164]	; (800606c <_vfiprintf_r+0x254>)
 8005fc6:	bb1b      	cbnz	r3, 8006010 <_vfiprintf_r+0x1f8>
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	3307      	adds	r3, #7
 8005fcc:	f023 0307 	bic.w	r3, r3, #7
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	9303      	str	r3, [sp, #12]
 8005fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd6:	443b      	add	r3, r7
 8005fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fda:	e767      	b.n	8005eac <_vfiprintf_r+0x94>
 8005fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	e7a5      	b.n	8005f32 <_vfiprintf_r+0x11a>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	3401      	adds	r4, #1
 8005fea:	9305      	str	r3, [sp, #20]
 8005fec:	4619      	mov	r1, r3
 8005fee:	f04f 0c0a 	mov.w	ip, #10
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ff8:	3a30      	subs	r2, #48	; 0x30
 8005ffa:	2a09      	cmp	r2, #9
 8005ffc:	d903      	bls.n	8006006 <_vfiprintf_r+0x1ee>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0c5      	beq.n	8005f8e <_vfiprintf_r+0x176>
 8006002:	9105      	str	r1, [sp, #20]
 8006004:	e7c3      	b.n	8005f8e <_vfiprintf_r+0x176>
 8006006:	fb0c 2101 	mla	r1, ip, r1, r2
 800600a:	4604      	mov	r4, r0
 800600c:	2301      	movs	r3, #1
 800600e:	e7f0      	b.n	8005ff2 <_vfiprintf_r+0x1da>
 8006010:	ab03      	add	r3, sp, #12
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	462a      	mov	r2, r5
 8006016:	4b16      	ldr	r3, [pc, #88]	; (8006070 <_vfiprintf_r+0x258>)
 8006018:	a904      	add	r1, sp, #16
 800601a:	4630      	mov	r0, r6
 800601c:	f3af 8000 	nop.w
 8006020:	4607      	mov	r7, r0
 8006022:	1c78      	adds	r0, r7, #1
 8006024:	d1d6      	bne.n	8005fd4 <_vfiprintf_r+0x1bc>
 8006026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006028:	07d9      	lsls	r1, r3, #31
 800602a:	d405      	bmi.n	8006038 <_vfiprintf_r+0x220>
 800602c:	89ab      	ldrh	r3, [r5, #12]
 800602e:	059a      	lsls	r2, r3, #22
 8006030:	d402      	bmi.n	8006038 <_vfiprintf_r+0x220>
 8006032:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006034:	f7ff fbdc 	bl	80057f0 <__retarget_lock_release_recursive>
 8006038:	89ab      	ldrh	r3, [r5, #12]
 800603a:	065b      	lsls	r3, r3, #25
 800603c:	f53f af12 	bmi.w	8005e64 <_vfiprintf_r+0x4c>
 8006040:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006042:	e711      	b.n	8005e68 <_vfiprintf_r+0x50>
 8006044:	ab03      	add	r3, sp, #12
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	462a      	mov	r2, r5
 800604a:	4b09      	ldr	r3, [pc, #36]	; (8006070 <_vfiprintf_r+0x258>)
 800604c:	a904      	add	r1, sp, #16
 800604e:	4630      	mov	r0, r6
 8006050:	f000 f880 	bl	8006154 <_printf_i>
 8006054:	e7e4      	b.n	8006020 <_vfiprintf_r+0x208>
 8006056:	bf00      	nop
 8006058:	08007ee4 	.word	0x08007ee4
 800605c:	08007f04 	.word	0x08007f04
 8006060:	08007ec4 	.word	0x08007ec4
 8006064:	080080d9 	.word	0x080080d9
 8006068:	080080e3 	.word	0x080080e3
 800606c:	00000000 	.word	0x00000000
 8006070:	08005df3 	.word	0x08005df3
 8006074:	080080df 	.word	0x080080df

08006078 <_printf_common>:
 8006078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800607c:	4616      	mov	r6, r2
 800607e:	4699      	mov	r9, r3
 8006080:	688a      	ldr	r2, [r1, #8]
 8006082:	690b      	ldr	r3, [r1, #16]
 8006084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006088:	4293      	cmp	r3, r2
 800608a:	bfb8      	it	lt
 800608c:	4613      	movlt	r3, r2
 800608e:	6033      	str	r3, [r6, #0]
 8006090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006094:	4607      	mov	r7, r0
 8006096:	460c      	mov	r4, r1
 8006098:	b10a      	cbz	r2, 800609e <_printf_common+0x26>
 800609a:	3301      	adds	r3, #1
 800609c:	6033      	str	r3, [r6, #0]
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	0699      	lsls	r1, r3, #26
 80060a2:	bf42      	ittt	mi
 80060a4:	6833      	ldrmi	r3, [r6, #0]
 80060a6:	3302      	addmi	r3, #2
 80060a8:	6033      	strmi	r3, [r6, #0]
 80060aa:	6825      	ldr	r5, [r4, #0]
 80060ac:	f015 0506 	ands.w	r5, r5, #6
 80060b0:	d106      	bne.n	80060c0 <_printf_common+0x48>
 80060b2:	f104 0a19 	add.w	sl, r4, #25
 80060b6:	68e3      	ldr	r3, [r4, #12]
 80060b8:	6832      	ldr	r2, [r6, #0]
 80060ba:	1a9b      	subs	r3, r3, r2
 80060bc:	42ab      	cmp	r3, r5
 80060be:	dc26      	bgt.n	800610e <_printf_common+0x96>
 80060c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060c4:	1e13      	subs	r3, r2, #0
 80060c6:	6822      	ldr	r2, [r4, #0]
 80060c8:	bf18      	it	ne
 80060ca:	2301      	movne	r3, #1
 80060cc:	0692      	lsls	r2, r2, #26
 80060ce:	d42b      	bmi.n	8006128 <_printf_common+0xb0>
 80060d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060d4:	4649      	mov	r1, r9
 80060d6:	4638      	mov	r0, r7
 80060d8:	47c0      	blx	r8
 80060da:	3001      	adds	r0, #1
 80060dc:	d01e      	beq.n	800611c <_printf_common+0xa4>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	68e5      	ldr	r5, [r4, #12]
 80060e2:	6832      	ldr	r2, [r6, #0]
 80060e4:	f003 0306 	and.w	r3, r3, #6
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	bf08      	it	eq
 80060ec:	1aad      	subeq	r5, r5, r2
 80060ee:	68a3      	ldr	r3, [r4, #8]
 80060f0:	6922      	ldr	r2, [r4, #16]
 80060f2:	bf0c      	ite	eq
 80060f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060f8:	2500      	movne	r5, #0
 80060fa:	4293      	cmp	r3, r2
 80060fc:	bfc4      	itt	gt
 80060fe:	1a9b      	subgt	r3, r3, r2
 8006100:	18ed      	addgt	r5, r5, r3
 8006102:	2600      	movs	r6, #0
 8006104:	341a      	adds	r4, #26
 8006106:	42b5      	cmp	r5, r6
 8006108:	d11a      	bne.n	8006140 <_printf_common+0xc8>
 800610a:	2000      	movs	r0, #0
 800610c:	e008      	b.n	8006120 <_printf_common+0xa8>
 800610e:	2301      	movs	r3, #1
 8006110:	4652      	mov	r2, sl
 8006112:	4649      	mov	r1, r9
 8006114:	4638      	mov	r0, r7
 8006116:	47c0      	blx	r8
 8006118:	3001      	adds	r0, #1
 800611a:	d103      	bne.n	8006124 <_printf_common+0xac>
 800611c:	f04f 30ff 	mov.w	r0, #4294967295
 8006120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006124:	3501      	adds	r5, #1
 8006126:	e7c6      	b.n	80060b6 <_printf_common+0x3e>
 8006128:	18e1      	adds	r1, r4, r3
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	2030      	movs	r0, #48	; 0x30
 800612e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006132:	4422      	add	r2, r4
 8006134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800613c:	3302      	adds	r3, #2
 800613e:	e7c7      	b.n	80060d0 <_printf_common+0x58>
 8006140:	2301      	movs	r3, #1
 8006142:	4622      	mov	r2, r4
 8006144:	4649      	mov	r1, r9
 8006146:	4638      	mov	r0, r7
 8006148:	47c0      	blx	r8
 800614a:	3001      	adds	r0, #1
 800614c:	d0e6      	beq.n	800611c <_printf_common+0xa4>
 800614e:	3601      	adds	r6, #1
 8006150:	e7d9      	b.n	8006106 <_printf_common+0x8e>
	...

08006154 <_printf_i>:
 8006154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006158:	7e0f      	ldrb	r7, [r1, #24]
 800615a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800615c:	2f78      	cmp	r7, #120	; 0x78
 800615e:	4691      	mov	r9, r2
 8006160:	4680      	mov	r8, r0
 8006162:	460c      	mov	r4, r1
 8006164:	469a      	mov	sl, r3
 8006166:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800616a:	d807      	bhi.n	800617c <_printf_i+0x28>
 800616c:	2f62      	cmp	r7, #98	; 0x62
 800616e:	d80a      	bhi.n	8006186 <_printf_i+0x32>
 8006170:	2f00      	cmp	r7, #0
 8006172:	f000 80d8 	beq.w	8006326 <_printf_i+0x1d2>
 8006176:	2f58      	cmp	r7, #88	; 0x58
 8006178:	f000 80a3 	beq.w	80062c2 <_printf_i+0x16e>
 800617c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006184:	e03a      	b.n	80061fc <_printf_i+0xa8>
 8006186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800618a:	2b15      	cmp	r3, #21
 800618c:	d8f6      	bhi.n	800617c <_printf_i+0x28>
 800618e:	a101      	add	r1, pc, #4	; (adr r1, 8006194 <_printf_i+0x40>)
 8006190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006194:	080061ed 	.word	0x080061ed
 8006198:	08006201 	.word	0x08006201
 800619c:	0800617d 	.word	0x0800617d
 80061a0:	0800617d 	.word	0x0800617d
 80061a4:	0800617d 	.word	0x0800617d
 80061a8:	0800617d 	.word	0x0800617d
 80061ac:	08006201 	.word	0x08006201
 80061b0:	0800617d 	.word	0x0800617d
 80061b4:	0800617d 	.word	0x0800617d
 80061b8:	0800617d 	.word	0x0800617d
 80061bc:	0800617d 	.word	0x0800617d
 80061c0:	0800630d 	.word	0x0800630d
 80061c4:	08006231 	.word	0x08006231
 80061c8:	080062ef 	.word	0x080062ef
 80061cc:	0800617d 	.word	0x0800617d
 80061d0:	0800617d 	.word	0x0800617d
 80061d4:	0800632f 	.word	0x0800632f
 80061d8:	0800617d 	.word	0x0800617d
 80061dc:	08006231 	.word	0x08006231
 80061e0:	0800617d 	.word	0x0800617d
 80061e4:	0800617d 	.word	0x0800617d
 80061e8:	080062f7 	.word	0x080062f7
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	1d1a      	adds	r2, r3, #4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	602a      	str	r2, [r5, #0]
 80061f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0a3      	b.n	8006348 <_printf_i+0x1f4>
 8006200:	6820      	ldr	r0, [r4, #0]
 8006202:	6829      	ldr	r1, [r5, #0]
 8006204:	0606      	lsls	r6, r0, #24
 8006206:	f101 0304 	add.w	r3, r1, #4
 800620a:	d50a      	bpl.n	8006222 <_printf_i+0xce>
 800620c:	680e      	ldr	r6, [r1, #0]
 800620e:	602b      	str	r3, [r5, #0]
 8006210:	2e00      	cmp	r6, #0
 8006212:	da03      	bge.n	800621c <_printf_i+0xc8>
 8006214:	232d      	movs	r3, #45	; 0x2d
 8006216:	4276      	negs	r6, r6
 8006218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800621c:	485e      	ldr	r0, [pc, #376]	; (8006398 <_printf_i+0x244>)
 800621e:	230a      	movs	r3, #10
 8006220:	e019      	b.n	8006256 <_printf_i+0x102>
 8006222:	680e      	ldr	r6, [r1, #0]
 8006224:	602b      	str	r3, [r5, #0]
 8006226:	f010 0f40 	tst.w	r0, #64	; 0x40
 800622a:	bf18      	it	ne
 800622c:	b236      	sxthne	r6, r6
 800622e:	e7ef      	b.n	8006210 <_printf_i+0xbc>
 8006230:	682b      	ldr	r3, [r5, #0]
 8006232:	6820      	ldr	r0, [r4, #0]
 8006234:	1d19      	adds	r1, r3, #4
 8006236:	6029      	str	r1, [r5, #0]
 8006238:	0601      	lsls	r1, r0, #24
 800623a:	d501      	bpl.n	8006240 <_printf_i+0xec>
 800623c:	681e      	ldr	r6, [r3, #0]
 800623e:	e002      	b.n	8006246 <_printf_i+0xf2>
 8006240:	0646      	lsls	r6, r0, #25
 8006242:	d5fb      	bpl.n	800623c <_printf_i+0xe8>
 8006244:	881e      	ldrh	r6, [r3, #0]
 8006246:	4854      	ldr	r0, [pc, #336]	; (8006398 <_printf_i+0x244>)
 8006248:	2f6f      	cmp	r7, #111	; 0x6f
 800624a:	bf0c      	ite	eq
 800624c:	2308      	moveq	r3, #8
 800624e:	230a      	movne	r3, #10
 8006250:	2100      	movs	r1, #0
 8006252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006256:	6865      	ldr	r5, [r4, #4]
 8006258:	60a5      	str	r5, [r4, #8]
 800625a:	2d00      	cmp	r5, #0
 800625c:	bfa2      	ittt	ge
 800625e:	6821      	ldrge	r1, [r4, #0]
 8006260:	f021 0104 	bicge.w	r1, r1, #4
 8006264:	6021      	strge	r1, [r4, #0]
 8006266:	b90e      	cbnz	r6, 800626c <_printf_i+0x118>
 8006268:	2d00      	cmp	r5, #0
 800626a:	d04d      	beq.n	8006308 <_printf_i+0x1b4>
 800626c:	4615      	mov	r5, r2
 800626e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006272:	fb03 6711 	mls	r7, r3, r1, r6
 8006276:	5dc7      	ldrb	r7, [r0, r7]
 8006278:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800627c:	4637      	mov	r7, r6
 800627e:	42bb      	cmp	r3, r7
 8006280:	460e      	mov	r6, r1
 8006282:	d9f4      	bls.n	800626e <_printf_i+0x11a>
 8006284:	2b08      	cmp	r3, #8
 8006286:	d10b      	bne.n	80062a0 <_printf_i+0x14c>
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	07de      	lsls	r6, r3, #31
 800628c:	d508      	bpl.n	80062a0 <_printf_i+0x14c>
 800628e:	6923      	ldr	r3, [r4, #16]
 8006290:	6861      	ldr	r1, [r4, #4]
 8006292:	4299      	cmp	r1, r3
 8006294:	bfde      	ittt	le
 8006296:	2330      	movle	r3, #48	; 0x30
 8006298:	f805 3c01 	strble.w	r3, [r5, #-1]
 800629c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062a0:	1b52      	subs	r2, r2, r5
 80062a2:	6122      	str	r2, [r4, #16]
 80062a4:	f8cd a000 	str.w	sl, [sp]
 80062a8:	464b      	mov	r3, r9
 80062aa:	aa03      	add	r2, sp, #12
 80062ac:	4621      	mov	r1, r4
 80062ae:	4640      	mov	r0, r8
 80062b0:	f7ff fee2 	bl	8006078 <_printf_common>
 80062b4:	3001      	adds	r0, #1
 80062b6:	d14c      	bne.n	8006352 <_printf_i+0x1fe>
 80062b8:	f04f 30ff 	mov.w	r0, #4294967295
 80062bc:	b004      	add	sp, #16
 80062be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c2:	4835      	ldr	r0, [pc, #212]	; (8006398 <_printf_i+0x244>)
 80062c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062c8:	6829      	ldr	r1, [r5, #0]
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80062d0:	6029      	str	r1, [r5, #0]
 80062d2:	061d      	lsls	r5, r3, #24
 80062d4:	d514      	bpl.n	8006300 <_printf_i+0x1ac>
 80062d6:	07df      	lsls	r7, r3, #31
 80062d8:	bf44      	itt	mi
 80062da:	f043 0320 	orrmi.w	r3, r3, #32
 80062de:	6023      	strmi	r3, [r4, #0]
 80062e0:	b91e      	cbnz	r6, 80062ea <_printf_i+0x196>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	f023 0320 	bic.w	r3, r3, #32
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	2310      	movs	r3, #16
 80062ec:	e7b0      	b.n	8006250 <_printf_i+0xfc>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	f043 0320 	orr.w	r3, r3, #32
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	2378      	movs	r3, #120	; 0x78
 80062f8:	4828      	ldr	r0, [pc, #160]	; (800639c <_printf_i+0x248>)
 80062fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062fe:	e7e3      	b.n	80062c8 <_printf_i+0x174>
 8006300:	0659      	lsls	r1, r3, #25
 8006302:	bf48      	it	mi
 8006304:	b2b6      	uxthmi	r6, r6
 8006306:	e7e6      	b.n	80062d6 <_printf_i+0x182>
 8006308:	4615      	mov	r5, r2
 800630a:	e7bb      	b.n	8006284 <_printf_i+0x130>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	6826      	ldr	r6, [r4, #0]
 8006310:	6961      	ldr	r1, [r4, #20]
 8006312:	1d18      	adds	r0, r3, #4
 8006314:	6028      	str	r0, [r5, #0]
 8006316:	0635      	lsls	r5, r6, #24
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	d501      	bpl.n	8006320 <_printf_i+0x1cc>
 800631c:	6019      	str	r1, [r3, #0]
 800631e:	e002      	b.n	8006326 <_printf_i+0x1d2>
 8006320:	0670      	lsls	r0, r6, #25
 8006322:	d5fb      	bpl.n	800631c <_printf_i+0x1c8>
 8006324:	8019      	strh	r1, [r3, #0]
 8006326:	2300      	movs	r3, #0
 8006328:	6123      	str	r3, [r4, #16]
 800632a:	4615      	mov	r5, r2
 800632c:	e7ba      	b.n	80062a4 <_printf_i+0x150>
 800632e:	682b      	ldr	r3, [r5, #0]
 8006330:	1d1a      	adds	r2, r3, #4
 8006332:	602a      	str	r2, [r5, #0]
 8006334:	681d      	ldr	r5, [r3, #0]
 8006336:	6862      	ldr	r2, [r4, #4]
 8006338:	2100      	movs	r1, #0
 800633a:	4628      	mov	r0, r5
 800633c:	f7f9 ff60 	bl	8000200 <memchr>
 8006340:	b108      	cbz	r0, 8006346 <_printf_i+0x1f2>
 8006342:	1b40      	subs	r0, r0, r5
 8006344:	6060      	str	r0, [r4, #4]
 8006346:	6863      	ldr	r3, [r4, #4]
 8006348:	6123      	str	r3, [r4, #16]
 800634a:	2300      	movs	r3, #0
 800634c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006350:	e7a8      	b.n	80062a4 <_printf_i+0x150>
 8006352:	6923      	ldr	r3, [r4, #16]
 8006354:	462a      	mov	r2, r5
 8006356:	4649      	mov	r1, r9
 8006358:	4640      	mov	r0, r8
 800635a:	47d0      	blx	sl
 800635c:	3001      	adds	r0, #1
 800635e:	d0ab      	beq.n	80062b8 <_printf_i+0x164>
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	079b      	lsls	r3, r3, #30
 8006364:	d413      	bmi.n	800638e <_printf_i+0x23a>
 8006366:	68e0      	ldr	r0, [r4, #12]
 8006368:	9b03      	ldr	r3, [sp, #12]
 800636a:	4298      	cmp	r0, r3
 800636c:	bfb8      	it	lt
 800636e:	4618      	movlt	r0, r3
 8006370:	e7a4      	b.n	80062bc <_printf_i+0x168>
 8006372:	2301      	movs	r3, #1
 8006374:	4632      	mov	r2, r6
 8006376:	4649      	mov	r1, r9
 8006378:	4640      	mov	r0, r8
 800637a:	47d0      	blx	sl
 800637c:	3001      	adds	r0, #1
 800637e:	d09b      	beq.n	80062b8 <_printf_i+0x164>
 8006380:	3501      	adds	r5, #1
 8006382:	68e3      	ldr	r3, [r4, #12]
 8006384:	9903      	ldr	r1, [sp, #12]
 8006386:	1a5b      	subs	r3, r3, r1
 8006388:	42ab      	cmp	r3, r5
 800638a:	dcf2      	bgt.n	8006372 <_printf_i+0x21e>
 800638c:	e7eb      	b.n	8006366 <_printf_i+0x212>
 800638e:	2500      	movs	r5, #0
 8006390:	f104 0619 	add.w	r6, r4, #25
 8006394:	e7f5      	b.n	8006382 <_printf_i+0x22e>
 8006396:	bf00      	nop
 8006398:	080080ea 	.word	0x080080ea
 800639c:	080080fb 	.word	0x080080fb

080063a0 <_read_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d07      	ldr	r5, [pc, #28]	; (80063c0 <_read_r+0x20>)
 80063a4:	4604      	mov	r4, r0
 80063a6:	4608      	mov	r0, r1
 80063a8:	4611      	mov	r1, r2
 80063aa:	2200      	movs	r2, #0
 80063ac:	602a      	str	r2, [r5, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	f7fb f93c 	bl	800162c <_read>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_read_r+0x1e>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	b103      	cbz	r3, 80063be <_read_r+0x1e>
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	20013bec 	.word	0x20013bec

080063c4 <__swbuf_r>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	460e      	mov	r6, r1
 80063c8:	4614      	mov	r4, r2
 80063ca:	4605      	mov	r5, r0
 80063cc:	b118      	cbz	r0, 80063d6 <__swbuf_r+0x12>
 80063ce:	6983      	ldr	r3, [r0, #24]
 80063d0:	b90b      	cbnz	r3, 80063d6 <__swbuf_r+0x12>
 80063d2:	f7ff f949 	bl	8005668 <__sinit>
 80063d6:	4b21      	ldr	r3, [pc, #132]	; (800645c <__swbuf_r+0x98>)
 80063d8:	429c      	cmp	r4, r3
 80063da:	d12b      	bne.n	8006434 <__swbuf_r+0x70>
 80063dc:	686c      	ldr	r4, [r5, #4]
 80063de:	69a3      	ldr	r3, [r4, #24]
 80063e0:	60a3      	str	r3, [r4, #8]
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	071a      	lsls	r2, r3, #28
 80063e6:	d52f      	bpl.n	8006448 <__swbuf_r+0x84>
 80063e8:	6923      	ldr	r3, [r4, #16]
 80063ea:	b36b      	cbz	r3, 8006448 <__swbuf_r+0x84>
 80063ec:	6923      	ldr	r3, [r4, #16]
 80063ee:	6820      	ldr	r0, [r4, #0]
 80063f0:	1ac0      	subs	r0, r0, r3
 80063f2:	6963      	ldr	r3, [r4, #20]
 80063f4:	b2f6      	uxtb	r6, r6
 80063f6:	4283      	cmp	r3, r0
 80063f8:	4637      	mov	r7, r6
 80063fa:	dc04      	bgt.n	8006406 <__swbuf_r+0x42>
 80063fc:	4621      	mov	r1, r4
 80063fe:	4628      	mov	r0, r5
 8006400:	f7ff f88c 	bl	800551c <_fflush_r>
 8006404:	bb30      	cbnz	r0, 8006454 <__swbuf_r+0x90>
 8006406:	68a3      	ldr	r3, [r4, #8]
 8006408:	3b01      	subs	r3, #1
 800640a:	60a3      	str	r3, [r4, #8]
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	6022      	str	r2, [r4, #0]
 8006412:	701e      	strb	r6, [r3, #0]
 8006414:	6963      	ldr	r3, [r4, #20]
 8006416:	3001      	adds	r0, #1
 8006418:	4283      	cmp	r3, r0
 800641a:	d004      	beq.n	8006426 <__swbuf_r+0x62>
 800641c:	89a3      	ldrh	r3, [r4, #12]
 800641e:	07db      	lsls	r3, r3, #31
 8006420:	d506      	bpl.n	8006430 <__swbuf_r+0x6c>
 8006422:	2e0a      	cmp	r6, #10
 8006424:	d104      	bne.n	8006430 <__swbuf_r+0x6c>
 8006426:	4621      	mov	r1, r4
 8006428:	4628      	mov	r0, r5
 800642a:	f7ff f877 	bl	800551c <_fflush_r>
 800642e:	b988      	cbnz	r0, 8006454 <__swbuf_r+0x90>
 8006430:	4638      	mov	r0, r7
 8006432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006434:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <__swbuf_r+0x9c>)
 8006436:	429c      	cmp	r4, r3
 8006438:	d101      	bne.n	800643e <__swbuf_r+0x7a>
 800643a:	68ac      	ldr	r4, [r5, #8]
 800643c:	e7cf      	b.n	80063de <__swbuf_r+0x1a>
 800643e:	4b09      	ldr	r3, [pc, #36]	; (8006464 <__swbuf_r+0xa0>)
 8006440:	429c      	cmp	r4, r3
 8006442:	bf08      	it	eq
 8006444:	68ec      	ldreq	r4, [r5, #12]
 8006446:	e7ca      	b.n	80063de <__swbuf_r+0x1a>
 8006448:	4621      	mov	r1, r4
 800644a:	4628      	mov	r0, r5
 800644c:	f000 f80c 	bl	8006468 <__swsetup_r>
 8006450:	2800      	cmp	r0, #0
 8006452:	d0cb      	beq.n	80063ec <__swbuf_r+0x28>
 8006454:	f04f 37ff 	mov.w	r7, #4294967295
 8006458:	e7ea      	b.n	8006430 <__swbuf_r+0x6c>
 800645a:	bf00      	nop
 800645c:	08007ee4 	.word	0x08007ee4
 8006460:	08007f04 	.word	0x08007f04
 8006464:	08007ec4 	.word	0x08007ec4

08006468 <__swsetup_r>:
 8006468:	4b32      	ldr	r3, [pc, #200]	; (8006534 <__swsetup_r+0xcc>)
 800646a:	b570      	push	{r4, r5, r6, lr}
 800646c:	681d      	ldr	r5, [r3, #0]
 800646e:	4606      	mov	r6, r0
 8006470:	460c      	mov	r4, r1
 8006472:	b125      	cbz	r5, 800647e <__swsetup_r+0x16>
 8006474:	69ab      	ldr	r3, [r5, #24]
 8006476:	b913      	cbnz	r3, 800647e <__swsetup_r+0x16>
 8006478:	4628      	mov	r0, r5
 800647a:	f7ff f8f5 	bl	8005668 <__sinit>
 800647e:	4b2e      	ldr	r3, [pc, #184]	; (8006538 <__swsetup_r+0xd0>)
 8006480:	429c      	cmp	r4, r3
 8006482:	d10f      	bne.n	80064a4 <__swsetup_r+0x3c>
 8006484:	686c      	ldr	r4, [r5, #4]
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800648c:	0719      	lsls	r1, r3, #28
 800648e:	d42c      	bmi.n	80064ea <__swsetup_r+0x82>
 8006490:	06dd      	lsls	r5, r3, #27
 8006492:	d411      	bmi.n	80064b8 <__swsetup_r+0x50>
 8006494:	2309      	movs	r3, #9
 8006496:	6033      	str	r3, [r6, #0]
 8006498:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800649c:	81a3      	strh	r3, [r4, #12]
 800649e:	f04f 30ff 	mov.w	r0, #4294967295
 80064a2:	e03e      	b.n	8006522 <__swsetup_r+0xba>
 80064a4:	4b25      	ldr	r3, [pc, #148]	; (800653c <__swsetup_r+0xd4>)
 80064a6:	429c      	cmp	r4, r3
 80064a8:	d101      	bne.n	80064ae <__swsetup_r+0x46>
 80064aa:	68ac      	ldr	r4, [r5, #8]
 80064ac:	e7eb      	b.n	8006486 <__swsetup_r+0x1e>
 80064ae:	4b24      	ldr	r3, [pc, #144]	; (8006540 <__swsetup_r+0xd8>)
 80064b0:	429c      	cmp	r4, r3
 80064b2:	bf08      	it	eq
 80064b4:	68ec      	ldreq	r4, [r5, #12]
 80064b6:	e7e6      	b.n	8006486 <__swsetup_r+0x1e>
 80064b8:	0758      	lsls	r0, r3, #29
 80064ba:	d512      	bpl.n	80064e2 <__swsetup_r+0x7a>
 80064bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064be:	b141      	cbz	r1, 80064d2 <__swsetup_r+0x6a>
 80064c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064c4:	4299      	cmp	r1, r3
 80064c6:	d002      	beq.n	80064ce <__swsetup_r+0x66>
 80064c8:	4630      	mov	r0, r6
 80064ca:	f7ff f9a9 	bl	8005820 <_free_r>
 80064ce:	2300      	movs	r3, #0
 80064d0:	6363      	str	r3, [r4, #52]	; 0x34
 80064d2:	89a3      	ldrh	r3, [r4, #12]
 80064d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064d8:	81a3      	strh	r3, [r4, #12]
 80064da:	2300      	movs	r3, #0
 80064dc:	6063      	str	r3, [r4, #4]
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	f043 0308 	orr.w	r3, r3, #8
 80064e8:	81a3      	strh	r3, [r4, #12]
 80064ea:	6923      	ldr	r3, [r4, #16]
 80064ec:	b94b      	cbnz	r3, 8006502 <__swsetup_r+0x9a>
 80064ee:	89a3      	ldrh	r3, [r4, #12]
 80064f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f8:	d003      	beq.n	8006502 <__swsetup_r+0x9a>
 80064fa:	4621      	mov	r1, r4
 80064fc:	4630      	mov	r0, r6
 80064fe:	f000 f84d 	bl	800659c <__smakebuf_r>
 8006502:	89a0      	ldrh	r0, [r4, #12]
 8006504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006508:	f010 0301 	ands.w	r3, r0, #1
 800650c:	d00a      	beq.n	8006524 <__swsetup_r+0xbc>
 800650e:	2300      	movs	r3, #0
 8006510:	60a3      	str	r3, [r4, #8]
 8006512:	6963      	ldr	r3, [r4, #20]
 8006514:	425b      	negs	r3, r3
 8006516:	61a3      	str	r3, [r4, #24]
 8006518:	6923      	ldr	r3, [r4, #16]
 800651a:	b943      	cbnz	r3, 800652e <__swsetup_r+0xc6>
 800651c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006520:	d1ba      	bne.n	8006498 <__swsetup_r+0x30>
 8006522:	bd70      	pop	{r4, r5, r6, pc}
 8006524:	0781      	lsls	r1, r0, #30
 8006526:	bf58      	it	pl
 8006528:	6963      	ldrpl	r3, [r4, #20]
 800652a:	60a3      	str	r3, [r4, #8]
 800652c:	e7f4      	b.n	8006518 <__swsetup_r+0xb0>
 800652e:	2000      	movs	r0, #0
 8006530:	e7f7      	b.n	8006522 <__swsetup_r+0xba>
 8006532:	bf00      	nop
 8006534:	20000890 	.word	0x20000890
 8006538:	08007ee4 	.word	0x08007ee4
 800653c:	08007f04 	.word	0x08007f04
 8006540:	08007ec4 	.word	0x08007ec4

08006544 <abort>:
 8006544:	b508      	push	{r3, lr}
 8006546:	2006      	movs	r0, #6
 8006548:	f000 f890 	bl	800666c <raise>
 800654c:	2001      	movs	r0, #1
 800654e:	f7fb f863 	bl	8001618 <_exit>

08006552 <__swhatbuf_r>:
 8006552:	b570      	push	{r4, r5, r6, lr}
 8006554:	460e      	mov	r6, r1
 8006556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800655a:	2900      	cmp	r1, #0
 800655c:	b096      	sub	sp, #88	; 0x58
 800655e:	4614      	mov	r4, r2
 8006560:	461d      	mov	r5, r3
 8006562:	da08      	bge.n	8006576 <__swhatbuf_r+0x24>
 8006564:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	602a      	str	r2, [r5, #0]
 800656c:	061a      	lsls	r2, r3, #24
 800656e:	d410      	bmi.n	8006592 <__swhatbuf_r+0x40>
 8006570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006574:	e00e      	b.n	8006594 <__swhatbuf_r+0x42>
 8006576:	466a      	mov	r2, sp
 8006578:	f000 f894 	bl	80066a4 <_fstat_r>
 800657c:	2800      	cmp	r0, #0
 800657e:	dbf1      	blt.n	8006564 <__swhatbuf_r+0x12>
 8006580:	9a01      	ldr	r2, [sp, #4]
 8006582:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006586:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800658a:	425a      	negs	r2, r3
 800658c:	415a      	adcs	r2, r3
 800658e:	602a      	str	r2, [r5, #0]
 8006590:	e7ee      	b.n	8006570 <__swhatbuf_r+0x1e>
 8006592:	2340      	movs	r3, #64	; 0x40
 8006594:	2000      	movs	r0, #0
 8006596:	6023      	str	r3, [r4, #0]
 8006598:	b016      	add	sp, #88	; 0x58
 800659a:	bd70      	pop	{r4, r5, r6, pc}

0800659c <__smakebuf_r>:
 800659c:	898b      	ldrh	r3, [r1, #12]
 800659e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065a0:	079d      	lsls	r5, r3, #30
 80065a2:	4606      	mov	r6, r0
 80065a4:	460c      	mov	r4, r1
 80065a6:	d507      	bpl.n	80065b8 <__smakebuf_r+0x1c>
 80065a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065ac:	6023      	str	r3, [r4, #0]
 80065ae:	6123      	str	r3, [r4, #16]
 80065b0:	2301      	movs	r3, #1
 80065b2:	6163      	str	r3, [r4, #20]
 80065b4:	b002      	add	sp, #8
 80065b6:	bd70      	pop	{r4, r5, r6, pc}
 80065b8:	ab01      	add	r3, sp, #4
 80065ba:	466a      	mov	r2, sp
 80065bc:	f7ff ffc9 	bl	8006552 <__swhatbuf_r>
 80065c0:	9900      	ldr	r1, [sp, #0]
 80065c2:	4605      	mov	r5, r0
 80065c4:	4630      	mov	r0, r6
 80065c6:	f7ff f997 	bl	80058f8 <_malloc_r>
 80065ca:	b948      	cbnz	r0, 80065e0 <__smakebuf_r+0x44>
 80065cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065d0:	059a      	lsls	r2, r3, #22
 80065d2:	d4ef      	bmi.n	80065b4 <__smakebuf_r+0x18>
 80065d4:	f023 0303 	bic.w	r3, r3, #3
 80065d8:	f043 0302 	orr.w	r3, r3, #2
 80065dc:	81a3      	strh	r3, [r4, #12]
 80065de:	e7e3      	b.n	80065a8 <__smakebuf_r+0xc>
 80065e0:	4b0d      	ldr	r3, [pc, #52]	; (8006618 <__smakebuf_r+0x7c>)
 80065e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	6020      	str	r0, [r4, #0]
 80065e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ec:	81a3      	strh	r3, [r4, #12]
 80065ee:	9b00      	ldr	r3, [sp, #0]
 80065f0:	6163      	str	r3, [r4, #20]
 80065f2:	9b01      	ldr	r3, [sp, #4]
 80065f4:	6120      	str	r0, [r4, #16]
 80065f6:	b15b      	cbz	r3, 8006610 <__smakebuf_r+0x74>
 80065f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065fc:	4630      	mov	r0, r6
 80065fe:	f000 f863 	bl	80066c8 <_isatty_r>
 8006602:	b128      	cbz	r0, 8006610 <__smakebuf_r+0x74>
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	81a3      	strh	r3, [r4, #12]
 8006610:	89a0      	ldrh	r0, [r4, #12]
 8006612:	4305      	orrs	r5, r0
 8006614:	81a5      	strh	r5, [r4, #12]
 8006616:	e7cd      	b.n	80065b4 <__smakebuf_r+0x18>
 8006618:	08005601 	.word	0x08005601

0800661c <_raise_r>:
 800661c:	291f      	cmp	r1, #31
 800661e:	b538      	push	{r3, r4, r5, lr}
 8006620:	4604      	mov	r4, r0
 8006622:	460d      	mov	r5, r1
 8006624:	d904      	bls.n	8006630 <_raise_r+0x14>
 8006626:	2316      	movs	r3, #22
 8006628:	6003      	str	r3, [r0, #0]
 800662a:	f04f 30ff 	mov.w	r0, #4294967295
 800662e:	bd38      	pop	{r3, r4, r5, pc}
 8006630:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006632:	b112      	cbz	r2, 800663a <_raise_r+0x1e>
 8006634:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006638:	b94b      	cbnz	r3, 800664e <_raise_r+0x32>
 800663a:	4620      	mov	r0, r4
 800663c:	f000 f830 	bl	80066a0 <_getpid_r>
 8006640:	462a      	mov	r2, r5
 8006642:	4601      	mov	r1, r0
 8006644:	4620      	mov	r0, r4
 8006646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800664a:	f000 b817 	b.w	800667c <_kill_r>
 800664e:	2b01      	cmp	r3, #1
 8006650:	d00a      	beq.n	8006668 <_raise_r+0x4c>
 8006652:	1c59      	adds	r1, r3, #1
 8006654:	d103      	bne.n	800665e <_raise_r+0x42>
 8006656:	2316      	movs	r3, #22
 8006658:	6003      	str	r3, [r0, #0]
 800665a:	2001      	movs	r0, #1
 800665c:	e7e7      	b.n	800662e <_raise_r+0x12>
 800665e:	2400      	movs	r4, #0
 8006660:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006664:	4628      	mov	r0, r5
 8006666:	4798      	blx	r3
 8006668:	2000      	movs	r0, #0
 800666a:	e7e0      	b.n	800662e <_raise_r+0x12>

0800666c <raise>:
 800666c:	4b02      	ldr	r3, [pc, #8]	; (8006678 <raise+0xc>)
 800666e:	4601      	mov	r1, r0
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	f7ff bfd3 	b.w	800661c <_raise_r>
 8006676:	bf00      	nop
 8006678:	20000890 	.word	0x20000890

0800667c <_kill_r>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	4d07      	ldr	r5, [pc, #28]	; (800669c <_kill_r+0x20>)
 8006680:	2300      	movs	r3, #0
 8006682:	4604      	mov	r4, r0
 8006684:	4608      	mov	r0, r1
 8006686:	4611      	mov	r1, r2
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	f7fa ffb5 	bl	80015f8 <_kill>
 800668e:	1c43      	adds	r3, r0, #1
 8006690:	d102      	bne.n	8006698 <_kill_r+0x1c>
 8006692:	682b      	ldr	r3, [r5, #0]
 8006694:	b103      	cbz	r3, 8006698 <_kill_r+0x1c>
 8006696:	6023      	str	r3, [r4, #0]
 8006698:	bd38      	pop	{r3, r4, r5, pc}
 800669a:	bf00      	nop
 800669c:	20013bec 	.word	0x20013bec

080066a0 <_getpid_r>:
 80066a0:	f7fa bfa2 	b.w	80015e8 <_getpid>

080066a4 <_fstat_r>:
 80066a4:	b538      	push	{r3, r4, r5, lr}
 80066a6:	4d07      	ldr	r5, [pc, #28]	; (80066c4 <_fstat_r+0x20>)
 80066a8:	2300      	movs	r3, #0
 80066aa:	4604      	mov	r4, r0
 80066ac:	4608      	mov	r0, r1
 80066ae:	4611      	mov	r1, r2
 80066b0:	602b      	str	r3, [r5, #0]
 80066b2:	f7fb f800 	bl	80016b6 <_fstat>
 80066b6:	1c43      	adds	r3, r0, #1
 80066b8:	d102      	bne.n	80066c0 <_fstat_r+0x1c>
 80066ba:	682b      	ldr	r3, [r5, #0]
 80066bc:	b103      	cbz	r3, 80066c0 <_fstat_r+0x1c>
 80066be:	6023      	str	r3, [r4, #0]
 80066c0:	bd38      	pop	{r3, r4, r5, pc}
 80066c2:	bf00      	nop
 80066c4:	20013bec 	.word	0x20013bec

080066c8 <_isatty_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4d06      	ldr	r5, [pc, #24]	; (80066e4 <_isatty_r+0x1c>)
 80066cc:	2300      	movs	r3, #0
 80066ce:	4604      	mov	r4, r0
 80066d0:	4608      	mov	r0, r1
 80066d2:	602b      	str	r3, [r5, #0]
 80066d4:	f7fa ffff 	bl	80016d6 <_isatty>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_isatty_r+0x1a>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_isatty_r+0x1a>
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	20013bec 	.word	0x20013bec

080066e8 <_init>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	bf00      	nop
 80066ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ee:	bc08      	pop	{r3}
 80066f0:	469e      	mov	lr, r3
 80066f2:	4770      	bx	lr

080066f4 <_fini>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr
