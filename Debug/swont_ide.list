
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a0c  08006640  08006640  00016640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800804c  0800804c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800804c  0800804c  0001804c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008054  08008054  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008054  08008054  00018054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008058  08008058  00018058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800805c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000132fc  200001ec  08008248  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200134e8  08008248  000234e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef3f  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f8  00000000  00000000  0002f15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00031b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00032950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f01  00000000  00000000  000335e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011734  00000000  00000000  000574e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbfb8  00000000  00000000  00068c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134bcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b4  00000000  00000000  00134c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006628 	.word	0x08006628

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08006628 	.word	0x08006628

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <API_Getcommand>:
//--------------------------------------------------------------
//
//--------------------------------------------------------------

void API_Getcommand(void)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b0a7      	sub	sp, #156	; 0x9c
 80005a8:	af24      	add	r7, sp, #144	; 0x90
	int i;
	int commacounter;

	// Reset some stuff
	input.byte_buffer_rx[0] = 0;
 80005aa:	4b24      	ldr	r3, [pc, #144]	; (800063c <API_Getcommand+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
	input.char_counter = 0;
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <API_Getcommand+0x98>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	input.command_execute_flag = FALSE;
 80005b8:	4b20      	ldr	r3, [pc, #128]	; (800063c <API_Getcommand+0x98>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

	//Loop in the buffer
    for (i=0;i<LINE_BUFLEN;i++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	e00c      	b.n	80005e0 <API_Getcommand+0x3c>
    {
    	//Checks if there is a comma in the buffer
        if(input.line_rx_buffer[i] == ',')
 80005c6:	4a1d      	ldr	r2, [pc, #116]	; (800063c <API_Getcommand+0x98>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	3301      	adds	r3, #1
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b2c      	cmp	r3, #44	; 0x2c
 80005d2:	d102      	bne.n	80005da <API_Getcommand+0x36>
        {
        	//Counts the amount of comma's
        	commacounter++;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	3301      	adds	r3, #1
 80005d8:	603b      	str	r3, [r7, #0]
    for (i=0;i<LINE_BUFLEN;i++)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3301      	adds	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005e6:	dbee      	blt.n	80005c6 <API_Getcommand+0x22>
        }
    }
    API_Command_Data(commando,commacounter);
 80005e8:	4c15      	ldr	r4, [pc, #84]	; (8000640 <API_Getcommand+0x9c>)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	9322      	str	r3, [sp, #136]	; 0x88
 80005ee:	4668      	mov	r0, sp
 80005f0:	f104 0310 	add.w	r3, r4, #16
 80005f4:	2288      	movs	r2, #136	; 0x88
 80005f6:	4619      	mov	r1, r3
 80005f8:	f005 f89b 	bl	8005732 <memcpy>
 80005fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000600:	f000 f822 	bl	8000648 <API_Command_Data>
    fflush(stdin);
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <API_Getcommand+0xa0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	4618      	mov	r0, r3
 800060c:	f004 ff62 	bl	80054d4 <fflush>

	//clear the buffer
	for(i = 0; i < LINE_BUFLEN; i++) input.line_rx_buffer[i] = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	e008      	b.n	8000628 <API_Getcommand+0x84>
 8000616:	4a09      	ldr	r2, [pc, #36]	; (800063c <API_Getcommand+0x98>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	3301      	adds	r3, #1
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3301      	adds	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800062e:	dbf2      	blt.n	8000616 <API_Getcommand+0x72>
	commacounter = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	603b      	str	r3, [r7, #0]


}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bd90      	pop	{r4, r7, pc}
 800063c:	200002a4 	.word	0x200002a4
 8000640:	20000208 	.word	0x20000208
 8000644:	20000188 	.word	0x20000188

08000648 <API_Command_Data>:
//--------------------------------------------------------------
// Switching the amount of comma's and jumps into a certain function
//--------------------------------------------------------------

void API_Command_Data(UI_t commando,int counter)
{
 8000648:	b084      	sub	sp, #16
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
 800064e:	f107 0c08 	add.w	ip, r7, #8
 8000652:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (counter == LINE_RECT_COMMAND )
 8000656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800065a:	2b06      	cmp	r3, #6
 800065c:	d10e      	bne.n	800067c <API_Command_Data+0x34>
	{
		if (API_ReLi_Sep() == LINE) Seperate_line();
 800065e:	f000 fa89 	bl	8000b74 <API_ReLi_Sep>
 8000662:	4603      	mov	r3, r0
 8000664:	2b01      	cmp	r3, #1
 8000666:	d101      	bne.n	800066c <API_Command_Data+0x24>
 8000668:	f000 fabc 	bl	8000be4 <Seperate_line>
	    if (API_ReLi_Sep() == RECTANGLE) Seperate_Rectangle();
 800066c:	f000 fa82 	bl	8000b74 <API_ReLi_Sep>
 8000670:	4603      	mov	r3, r0
 8000672:	2b02      	cmp	r3, #2
 8000674:	d11d      	bne.n	80006b2 <API_Command_Data+0x6a>
 8000676:	f000 fb1f 	bl	8000cb8 <Seperate_Rectangle>
	}
	else if(counter==TEXT_COMMAND) Seperate_Text();
	else if(counter==CIRCKEL_COMMAND) Seperate_Circkel();
	else if(counter==BITMAP_COMMAND) Seperate_Bitmap();
	else if(counter==CLEARSCREEN_COMMAND) Seperate_Clearscreen();
}
 800067a:	e01a      	b.n	80006b2 <API_Command_Data+0x6a>
	else if(counter==TEXT_COMMAND) Seperate_Text();
 800067c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000680:	2b07      	cmp	r3, #7
 8000682:	d102      	bne.n	800068a <API_Command_Data+0x42>
 8000684:	f000 fbec 	bl	8000e60 <Seperate_Text>
}
 8000688:	e013      	b.n	80006b2 <API_Command_Data+0x6a>
	else if(counter==CIRCKEL_COMMAND) Seperate_Circkel();
 800068a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800068e:	2b04      	cmp	r3, #4
 8000690:	d102      	bne.n	8000698 <API_Command_Data+0x50>
 8000692:	f000 fb7b 	bl	8000d8c <Seperate_Circkel>
}
 8000696:	e00c      	b.n	80006b2 <API_Command_Data+0x6a>
	else if(counter==BITMAP_COMMAND) Seperate_Bitmap();
 8000698:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800069c:	2b03      	cmp	r3, #3
 800069e:	d102      	bne.n	80006a6 <API_Command_Data+0x5e>
 80006a0:	f000 fc3a 	bl	8000f18 <Seperate_Bitmap>
}
 80006a4:	e005      	b.n	80006b2 <API_Command_Data+0x6a>
	else if(counter==CLEARSCREEN_COMMAND) Seperate_Clearscreen();
 80006a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d101      	bne.n	80006b2 <API_Command_Data+0x6a>
 80006ae:	f000 fc69 	bl	8000f84 <Seperate_Clearscreen>
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006ba:	b004      	add	sp, #16
 80006bc:	4770      	bx	lr

080006be <plotLine>:
#include "main.h"
#include "IO_API_G2.h"
#include "bitmap.h"

void plotLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,uint8_t COLOR)
{
 80006be:	b590      	push	{r4, r7, lr}
 80006c0:	b089      	sub	sp, #36	; 0x24
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	4604      	mov	r4, r0
 80006c6:	4608      	mov	r0, r1
 80006c8:	4611      	mov	r1, r2
 80006ca:	461a      	mov	r2, r3
 80006cc:	4623      	mov	r3, r4
 80006ce:	80fb      	strh	r3, [r7, #6]
 80006d0:	4603      	mov	r3, r0
 80006d2:	80bb      	strh	r3, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	807b      	strh	r3, [r7, #2]
 80006d8:	4613      	mov	r3, r2
 80006da:	803b      	strh	r3, [r7, #0]

     int dx =  abs(x1-x0), sx = x0<x1 ? 1 : -1;
 80006dc:	887a      	ldrh	r2, [r7, #2]
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	bfb8      	it	lt
 80006e6:	425b      	neglt	r3, r3
 80006e8:	61bb      	str	r3, [r7, #24]
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	887b      	ldrh	r3, [r7, #2]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d201      	bcs.n	80006f6 <plotLine+0x38>
 80006f2:	2301      	movs	r3, #1
 80006f4:	e001      	b.n	80006fa <plotLine+0x3c>
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	617b      	str	r3, [r7, #20]
     int dy = -abs(y1-y0), sy = y0<y1 ? 1 : -1;
 80006fc:	883a      	ldrh	r2, [r7, #0]
 80006fe:	88bb      	ldrh	r3, [r7, #4]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	bfb8      	it	lt
 8000706:	425b      	neglt	r3, r3
 8000708:	425b      	negs	r3, r3
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	88ba      	ldrh	r2, [r7, #4]
 800070e:	883b      	ldrh	r3, [r7, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d201      	bcs.n	8000718 <plotLine+0x5a>
 8000714:	2301      	movs	r3, #1
 8000716:	e001      	b.n	800071c <plotLine+0x5e>
 8000718:	f04f 33ff 	mov.w	r3, #4294967295
 800071c:	60fb      	str	r3, [r7, #12]
     int err = dx+dy, e2; /* error value e_xy */
 800071e:	69ba      	ldr	r2, [r7, #24]
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	4413      	add	r3, r2
 8000724:	61fb      	str	r3, [r7, #28]

     for(;;){  /* loop */
    	 UB_VGA_SetPixel(x0,y0,COLOR);
 8000726:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800072a:	88b9      	ldrh	r1, [r7, #4]
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fa4e 	bl	8001bd0 <UB_VGA_SetPixel>
        if (x0==x1 && y0==y1) break;
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	887b      	ldrh	r3, [r7, #2]
 8000738:	429a      	cmp	r2, r3
 800073a:	d103      	bne.n	8000744 <plotLine+0x86>
 800073c:	88ba      	ldrh	r2, [r7, #4]
 800073e:	883b      	ldrh	r3, [r7, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d01d      	beq.n	8000780 <plotLine+0xc2>
        e2 = 2*err;
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	60bb      	str	r3, [r7, #8]
        if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	429a      	cmp	r2, r3
 8000750:	db08      	blt.n	8000764 <plotLine+0xa6>
 8000752:	69fa      	ldr	r2, [r7, #28]
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	4413      	add	r3, r2
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	b29a      	uxth	r2, r3
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	4413      	add	r3, r2
 8000762:	80fb      	strh	r3, [r7, #6]
        if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	429a      	cmp	r2, r3
 800076a:	dcdc      	bgt.n	8000726 <plotLine+0x68>
 800076c:	69fa      	ldr	r2, [r7, #28]
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	4413      	add	r3, r2
 8000772:	61fb      	str	r3, [r7, #28]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	b29a      	uxth	r2, r3
 8000778:	88bb      	ldrh	r3, [r7, #4]
 800077a:	4413      	add	r3, r2
 800077c:	80bb      	strh	r3, [r7, #4]
    	 UB_VGA_SetPixel(x0,y0,COLOR);
 800077e:	e7d2      	b.n	8000726 <plotLine+0x68>
        if (x0==x1 && y0==y1) break;
 8000780:	bf00      	nop
    }
}
 8000782:	bf00      	nop
 8000784:	3724      	adds	r7, #36	; 0x24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd90      	pop	{r4, r7, pc}

0800078a <plotRect>:


void plotRect(uint16_t xp,uint16_t yp,uint16_t width,uint16_t length, uint8_t COLOR)
{
 800078a:	b590      	push	{r4, r7, lr}
 800078c:	b085      	sub	sp, #20
 800078e:	af02      	add	r7, sp, #8
 8000790:	4604      	mov	r4, r0
 8000792:	4608      	mov	r0, r1
 8000794:	4611      	mov	r1, r2
 8000796:	461a      	mov	r2, r3
 8000798:	4623      	mov	r3, r4
 800079a:	80fb      	strh	r3, [r7, #6]
 800079c:	4603      	mov	r3, r0
 800079e:	80bb      	strh	r3, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	807b      	strh	r3, [r7, #2]
 80007a4:	4613      	mov	r3, r2
 80007a6:	803b      	strh	r3, [r7, #0]
	plotLine(xp,yp,xp,yp+length,COLOR);
 80007a8:	88ba      	ldrh	r2, [r7, #4]
 80007aa:	883b      	ldrh	r3, [r7, #0]
 80007ac:	4413      	add	r3, r2
 80007ae:	b29c      	uxth	r4, r3
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	88b9      	ldrh	r1, [r7, #4]
 80007b4:	88f8      	ldrh	r0, [r7, #6]
 80007b6:	7e3b      	ldrb	r3, [r7, #24]
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	4623      	mov	r3, r4
 80007bc:	f7ff ff7f 	bl	80006be <plotLine>
	plotLine(xp,yp,xp+width,yp,COLOR);
 80007c0:	88fa      	ldrh	r2, [r7, #6]
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	4413      	add	r3, r2
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	88bc      	ldrh	r4, [r7, #4]
 80007ca:	88b9      	ldrh	r1, [r7, #4]
 80007cc:	88f8      	ldrh	r0, [r7, #6]
 80007ce:	7e3b      	ldrb	r3, [r7, #24]
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	4623      	mov	r3, r4
 80007d4:	f7ff ff73 	bl	80006be <plotLine>
	plotLine(xp+width,yp+length,xp+width,yp,COLOR);
 80007d8:	88fa      	ldrh	r2, [r7, #6]
 80007da:	887b      	ldrh	r3, [r7, #2]
 80007dc:	4413      	add	r3, r2
 80007de:	b298      	uxth	r0, r3
 80007e0:	88ba      	ldrh	r2, [r7, #4]
 80007e2:	883b      	ldrh	r3, [r7, #0]
 80007e4:	4413      	add	r3, r2
 80007e6:	b299      	uxth	r1, r3
 80007e8:	88fa      	ldrh	r2, [r7, #6]
 80007ea:	887b      	ldrh	r3, [r7, #2]
 80007ec:	4413      	add	r3, r2
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	88bc      	ldrh	r4, [r7, #4]
 80007f2:	7e3b      	ldrb	r3, [r7, #24]
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	4623      	mov	r3, r4
 80007f8:	f7ff ff61 	bl	80006be <plotLine>
	plotLine(xp+width,yp+length,xp,yp+length,COLOR);
 80007fc:	88fa      	ldrh	r2, [r7, #6]
 80007fe:	887b      	ldrh	r3, [r7, #2]
 8000800:	4413      	add	r3, r2
 8000802:	b298      	uxth	r0, r3
 8000804:	88ba      	ldrh	r2, [r7, #4]
 8000806:	883b      	ldrh	r3, [r7, #0]
 8000808:	4413      	add	r3, r2
 800080a:	b299      	uxth	r1, r3
 800080c:	88ba      	ldrh	r2, [r7, #4]
 800080e:	883b      	ldrh	r3, [r7, #0]
 8000810:	4413      	add	r3, r2
 8000812:	b29c      	uxth	r4, r3
 8000814:	88fa      	ldrh	r2, [r7, #6]
 8000816:	7e3b      	ldrb	r3, [r7, #24]
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	4623      	mov	r3, r4
 800081c:	f7ff ff4f 	bl	80006be <plotLine>

}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	bd90      	pop	{r4, r7, pc}

08000828 <plotCircle>:


void plotCircle(uint16_t xm, uint16_t ym, int r,uint8_t COLOR)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
 800082e:	60ba      	str	r2, [r7, #8]
 8000830:	461a      	mov	r2, r3
 8000832:	4603      	mov	r3, r0
 8000834:	81fb      	strh	r3, [r7, #14]
 8000836:	460b      	mov	r3, r1
 8000838:	81bb      	strh	r3, [r7, #12]
 800083a:	4613      	mov	r3, r2
 800083c:	71fb      	strb	r3, [r7, #7]
   int x = -r, y = 0, err = 2-2*r; /* II. Quadrant */
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	425b      	negs	r3, r3
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	f1c3 0301 	rsb	r3, r3, #1
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	617b      	str	r3, [r7, #20]
   do {
	   UB_VGA_SetPixel(xm-x, ym+y,COLOR); /*   I. Quadrant */
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	b29b      	uxth	r3, r3
 8000856:	89fa      	ldrh	r2, [r7, #14]
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	b298      	uxth	r0, r3
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	b29a      	uxth	r2, r3
 8000860:	89bb      	ldrh	r3, [r7, #12]
 8000862:	4413      	add	r3, r2
 8000864:	b29b      	uxth	r3, r3
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	4619      	mov	r1, r3
 800086a:	f001 f9b1 	bl	8001bd0 <UB_VGA_SetPixel>
	   UB_VGA_SetPixel(xm-y, ym-x,COLOR); /*  II. Quadrant */
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	b29b      	uxth	r3, r3
 8000872:	89fa      	ldrh	r2, [r7, #14]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	b298      	uxth	r0, r3
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	b29b      	uxth	r3, r3
 800087c:	89ba      	ldrh	r2, [r7, #12]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	b29b      	uxth	r3, r3
 8000882:	79fa      	ldrb	r2, [r7, #7]
 8000884:	4619      	mov	r1, r3
 8000886:	f001 f9a3 	bl	8001bd0 <UB_VGA_SetPixel>
	   UB_VGA_SetPixel(xm+x, ym-y,COLOR); /* III. Quadrant */
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	b29a      	uxth	r2, r3
 800088e:	89fb      	ldrh	r3, [r7, #14]
 8000890:	4413      	add	r3, r2
 8000892:	b298      	uxth	r0, r3
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	b29b      	uxth	r3, r3
 8000898:	89ba      	ldrh	r2, [r7, #12]
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	b29b      	uxth	r3, r3
 800089e:	79fa      	ldrb	r2, [r7, #7]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f001 f995 	bl	8001bd0 <UB_VGA_SetPixel>
	   UB_VGA_SetPixel(xm+y, ym+x,COLOR); /*  IV. Quadrant */
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	89fb      	ldrh	r3, [r7, #14]
 80008ac:	4413      	add	r3, r2
 80008ae:	b298      	uxth	r0, r3
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	89bb      	ldrh	r3, [r7, #12]
 80008b6:	4413      	add	r3, r2
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	4619      	mov	r1, r3
 80008be:	f001 f987 	bl	8001bd0 <UB_VGA_SetPixel>
      r = err;
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	60bb      	str	r3, [r7, #8]
      if (r <= y) err += ++y*2+1;           /* e_xy+e_y < 0 */
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dc08      	bgt.n	80008e0 <plotCircle+0xb8>
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	3301      	adds	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	3301      	adds	r3, #1
 80008da:	697a      	ldr	r2, [r7, #20]
 80008dc:	4413      	add	r3, r2
 80008de:	617b      	str	r3, [r7, #20]
      if (r > x || err > y) err += ++x*2+1; /* e_xy+e_x > 0 or no 2nd y-step */
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dc03      	bgt.n	80008f0 <plotCircle+0xc8>
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dd08      	ble.n	8000902 <plotCircle+0xda>
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	3301      	adds	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	3301      	adds	r3, #1
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	4413      	add	r3, r2
 8000900:	617b      	str	r3, [r7, #20]
   } while (x < 0);
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	2b00      	cmp	r3, #0
 8000906:	dba4      	blt.n	8000852 <plotCircle+0x2a>
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <API_text>:

}
}

void API_text(int x,int y, char kleur, char tekst[])
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	4613      	mov	r3, r2
 8000922:	71fb      	strb	r3, [r7, #7]
int i,j,k,l;
int x_old=x;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	61fb      	str	r3, [r7, #28]
const char* letter;
char width;
int size = strlen(tekst);
 8000928:	6838      	ldr	r0, [r7, #0]
 800092a:	f7ff fc5b 	bl	80001e4 <strlen>
 800092e:	4603      	mov	r3, r0
 8000930:	61bb      	str	r3, [r7, #24]
for (i=0; i<size;i++)
 8000932:	2300      	movs	r3, #0
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000936:	e060      	b.n	80009fa <API_text+0xe6>
	{
		letter = Arial_32_addr[tekst[i]-32];
 8000938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093a:	683a      	ldr	r2, [r7, #0]
 800093c:	4413      	add	r3, r2
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	3b20      	subs	r3, #32
 8000942:	4a32      	ldr	r2, [pc, #200]	; (8000a0c <API_text+0xf8>)
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	617b      	str	r3, [r7, #20]
		width  = Arial_32_width[tekst[i]-32];
 800094a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094c:	683a      	ldr	r2, [r7, #0]
 800094e:	4413      	add	r3, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	3b20      	subs	r3, #32
 8000954:	4a2e      	ldr	r2, [pc, #184]	; (8000a10 <API_text+0xfc>)
 8000956:	5cd3      	ldrb	r3, [r2, r3]
 8000958:	74fb      	strb	r3, [r7, #19]

		for (j=0; j < 4; j++)
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
 800095e:	e041      	b.n	80009e4 <API_text+0xd0>
		{
			for (k=0; k<width; k++)
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
 8000964:	e037      	b.n	80009d6 <API_text+0xc2>
			{
				for(l=0; l<8;l ++)
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
 800096a:	e02e      	b.n	80009ca <API_text+0xb6>
				{
					if((letter[j*width+k]>>l)&0x01)
 800096c:	7cfb      	ldrb	r3, [r7, #19]
 800096e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000970:	fb03 f202 	mul.w	r2, r3, r2
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	4413      	add	r3, r2
 8000978:	461a      	mov	r2, r3
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	6a3b      	ldr	r3, [r7, #32]
 8000984:	fa42 f303 	asr.w	r3, r2, r3
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	2b00      	cmp	r3, #0
 800098e:	d019      	beq.n	80009c4 <API_text+0xb0>
					{
						 UB_VGA_SetPixel (x+x_old + k, y+ j*8+l, kleur);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	b29a      	uxth	r2, r3
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	b29b      	uxth	r3, r3
 8000998:	4413      	add	r3, r2
 800099a:	b29a      	uxth	r2, r3
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	b29b      	uxth	r3, r3
 80009a0:	4413      	add	r3, r2
 80009a2:	b298      	uxth	r0, r3
 80009a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	4413      	add	r3, r2
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	6a3b      	ldr	r3, [r7, #32]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	4413      	add	r3, r2
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	79fa      	ldrb	r2, [r7, #7]
 80009be:	4619      	mov	r1, r3
 80009c0:	f001 f906 	bl	8001bd0 <UB_VGA_SetPixel>
				for(l=0; l<8;l ++)
 80009c4:	6a3b      	ldr	r3, [r7, #32]
 80009c6:	3301      	adds	r3, #1
 80009c8:	623b      	str	r3, [r7, #32]
 80009ca:	6a3b      	ldr	r3, [r7, #32]
 80009cc:	2b07      	cmp	r3, #7
 80009ce:	ddcd      	ble.n	800096c <API_text+0x58>
			for (k=0; k<width; k++)
 80009d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d2:	3301      	adds	r3, #1
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
 80009d6:	7cfb      	ldrb	r3, [r7, #19]
 80009d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009da:	429a      	cmp	r2, r3
 80009dc:	dbc3      	blt.n	8000966 <API_text+0x52>
		for (j=0; j < 4; j++)
 80009de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e0:	3301      	adds	r3, #1
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80009e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	ddba      	ble.n	8000960 <API_text+0x4c>

					}

				}
			}
		}x_old += 5 +k;
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	3305      	adds	r3, #5
 80009ee:	69fa      	ldr	r2, [r7, #28]
 80009f0:	4413      	add	r3, r2
 80009f2:	61fb      	str	r3, [r7, #28]
for (i=0; i<size;i++)
 80009f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f6:	3301      	adds	r3, #1
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	db9a      	blt.n	8000938 <API_text+0x24>
	}
}
 8000a02:	bf00      	nop
 8000a04:	bf00      	nop
 8000a06:	3730      	adds	r7, #48	; 0x30
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	08007d84 	.word	0x08007d84

08000a14 <API_In_DrawLine>:
////Output: custom error message followed by colon, space, and implementation-defined error message

const char* errnum;

void API_In_DrawLine(UI_t apidata)
{
 8000a14:	b084      	sub	sp, #16
 8000a16:	b590      	push	{r4, r7, lr}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af02      	add	r7, sp, #8
 8000a1c:	f107 0410 	add.w	r4, r7, #16
 8000a20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if(apidata.x_1 == 0 || apidata.y_1 == 0 || apidata.x_2 == 0|| apidata.y_2 == 0|| apidata.kleur== 0)
 8000a24:	8bbb      	ldrh	r3, [r7, #28]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d00c      	beq.n	8000a44 <API_In_DrawLine+0x30>
 8000a2a:	8bfb      	ldrh	r3, [r7, #30]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d009      	beq.n	8000a44 <API_In_DrawLine+0x30>
 8000a30:	8c3b      	ldrh	r3, [r7, #32]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d006      	beq.n	8000a44 <API_In_DrawLine+0x30>
 8000a36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d003      	beq.n	8000a44 <API_In_DrawLine+0x30>
 8000a3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10a      	bne.n	8000a5a <API_In_DrawLine+0x46>
	{
			errno = ERANGE;
 8000a44:	f004 fc7e 	bl	8005344 <__errno>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2222      	movs	r2, #34	; 0x22
 8000a4c:	601a      	str	r2, [r3, #0]
			show_errno(errnum);
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <API_In_DrawLine+0x6c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f858 	bl	8000b08 <show_errno>
 8000a58:	e00a      	b.n	8000a70 <API_In_DrawLine+0x5c>
		}
	 else plotLine(apidata.x_1,apidata.y_1 , apidata.x_2, apidata.y_2,apidata.kleur);
 8000a5a:	8bb8      	ldrh	r0, [r7, #28]
 8000a5c:	8bf9      	ldrh	r1, [r7, #30]
 8000a5e:	8c3a      	ldrh	r2, [r7, #32]
 8000a60:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8000a62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	4623      	mov	r3, r4
 8000a6a:	f7ff fe28 	bl	80006be <plotLine>



}
 8000a6e:	bf00      	nop
 8000a70:	bf00      	nop
 8000a72:	3704      	adds	r7, #4
 8000a74:	46bd      	mov	sp, r7
 8000a76:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000a7a:	b004      	add	sp, #16
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200002a0 	.word	0x200002a0

08000a84 <API_In_DrawRectangle>:

void API_In_DrawRectangle(UI_t apidata)
{
 8000a84:	b084      	sub	sp, #16
 8000a86:	b590      	push	{r4, r7, lr}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af02      	add	r7, sp, #8
 8000a8c:	f107 0410 	add.w	r4, r7, #16
 8000a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	plotRect(apidata.x_1,apidata.y_1 , apidata.x_2, apidata.y_2,apidata.kleur);
 8000a94:	8bb8      	ldrh	r0, [r7, #28]
 8000a96:	8bf9      	ldrh	r1, [r7, #30]
 8000a98:	8c3a      	ldrh	r2, [r7, #32]
 8000a9a:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8000a9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	4623      	mov	r3, r4
 8000aa4:	f7ff fe71 	bl	800078a <plotRect>
}
 8000aa8:	bf00      	nop
 8000aaa:	3704      	adds	r7, #4
 8000aac:	46bd      	mov	sp, r7
 8000aae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ab2:	b004      	add	sp, #16
 8000ab4:	4770      	bx	lr

08000ab6 <API_In_DrawCirckel>:


void API_In_DrawCirckel(UI_t apidata)
{
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	f107 0c08 	add.w	ip, r7, #8
 8000ac0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	plotCircle(apidata.x_1,apidata.y_1 , apidata.x_2, apidata.kleur);
 8000ac4:	8ab8      	ldrh	r0, [r7, #20]
 8000ac6:	8af9      	ldrh	r1, [r7, #22]
 8000ac8:	8b3b      	ldrh	r3, [r7, #24]
 8000aca:	461a      	mov	r2, r3
 8000acc:	7f3b      	ldrb	r3, [r7, #28]
 8000ace:	f7ff feab 	bl	8000828 <plotCircle>
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ada:	b004      	add	sp, #16
 8000adc:	4770      	bx	lr

08000ade <API_In_DrawText>:



void API_In_DrawText(UI_t apidata)
{
 8000ade:	b084      	sub	sp, #16
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	f107 0c08 	add.w	ip, r7, #8
 8000ae8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	API_text(apidata.x,apidata.y,apidata.text_kleur,apidata.tekst);
 8000aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000aee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000af0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000af4:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000af8:	f7ff ff0c 	bl	8000914 <API_text>
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b04:	b004      	add	sp, #16
 8000b06:	4770      	bx	lr

08000b08 <show_errno>:




void show_errno(const char *err_info)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

    err_info = "unknown error";
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <show_errno+0x54>)
 8000b12:	607b      	str	r3, [r7, #4]
    switch (errno) {
 8000b14:	f004 fc16 	bl	8005344 <__errno>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b8a      	cmp	r3, #138	; 0x8a
 8000b1e:	d00c      	beq.n	8000b3a <show_errno+0x32>
 8000b20:	2b8a      	cmp	r3, #138	; 0x8a
 8000b22:	dc12      	bgt.n	8000b4a <show_errno+0x42>
 8000b24:	2b22      	cmp	r3, #34	; 0x22
 8000b26:	d00b      	beq.n	8000b40 <show_errno+0x38>
 8000b28:	2b22      	cmp	r3, #34	; 0x22
 8000b2a:	dc0e      	bgt.n	8000b4a <show_errno+0x42>
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00a      	beq.n	8000b46 <show_errno+0x3e>
 8000b30:	2b21      	cmp	r3, #33	; 0x21
 8000b32:	d10a      	bne.n	8000b4a <show_errno+0x42>
    case EDOM:
        err_info = "domain error";
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <show_errno+0x58>)
 8000b36:	607b      	str	r3, [r7, #4]
        break;
 8000b38:	e007      	b.n	8000b4a <show_errno+0x42>
    case EILSEQ:
        err_info = "illegal sequence";
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <show_errno+0x5c>)
 8000b3c:	607b      	str	r3, [r7, #4]
        break;
 8000b3e:	e004      	b.n	8000b4a <show_errno+0x42>
    case ERANGE:
        err_info = "pole or range error";
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <show_errno+0x60>)
 8000b42:	607b      	str	r3, [r7, #4]
        break;
 8000b44:	e001      	b.n	8000b4a <show_errno+0x42>
    case 0:
        err_info = "no error";
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <show_errno+0x64>)
 8000b48:	607b      	str	r3, [r7, #4]
    }
    printf("ERROR: %s \n" ,err_info);
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	4808      	ldr	r0, [pc, #32]	; (8000b70 <show_errno+0x68>)
 8000b4e:	f004 fee7 	bl	8005920 <iprintf>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	08006640 	.word	0x08006640
 8000b60:	08006650 	.word	0x08006650
 8000b64:	08006660 	.word	0x08006660
 8000b68:	08006674 	.word	0x08006674
 8000b6c:	08006688 	.word	0x08006688
 8000b70:	08006694 	.word	0x08006694

08000b74 <API_ReLi_Sep>:
//--------------------------------------------------------------
// Check if the command is a line or a rectangle
// Returns 1 if line, 2 if rectangle
//--------------------------------------------------------------
int API_ReLi_Sep(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
	int cmp;
	char comp_line[LINE_TEXT];

	for(int i = 0; i<LINE_TEXT;i++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	e00c      	b.n	8000b9a <API_ReLi_Sep+0x26>
	{
		comp_line[i] = input.line_rx_buffer[i];
 8000b80:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <API_ReLi_Sep+0x64>)
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	4413      	add	r3, r2
 8000b86:	3301      	adds	r3, #1
 8000b88:	7819      	ldrb	r1, [r3, #0]
 8000b8a:	1d3a      	adds	r2, r7, #4
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4413      	add	r3, r2
 8000b90:	460a      	mov	r2, r1
 8000b92:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<LINE_TEXT;i++)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	3301      	adds	r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	ddef      	ble.n	8000b80 <API_ReLi_Sep+0xc>
	}

	//Compare the written command with "lijn" and "rech"
	if (strncmp ( comp_line, "lijn", sizeof(comp_line)) == 0) cmp = LINE;
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	490d      	ldr	r1, [pc, #52]	; (8000bdc <API_ReLi_Sep+0x68>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f004 ff25 	bl	80059f6 <strncmp>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <API_ReLi_Sep+0x42>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	60fb      	str	r3, [r7, #12]
	if (strncmp ( comp_line, "rech", sizeof(comp_line))== 0) cmp = RECTANGLE;
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2204      	movs	r2, #4
 8000bba:	4909      	ldr	r1, [pc, #36]	; (8000be0 <API_ReLi_Sep+0x6c>)
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f004 ff1a 	bl	80059f6 <strncmp>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d101      	bne.n	8000bcc <API_ReLi_Sep+0x58>
 8000bc8:	2302      	movs	r3, #2
 8000bca:	60fb      	str	r3, [r7, #12]

	//Returns 1 if line, 2 if rectangle
	return cmp;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200002a4 	.word	0x200002a4
 8000bdc:	080066a0 	.word	0x080066a0
 8000be0:	080066a8 	.word	0x080066a8

08000be4 <Seperate_line>:
//--------------------------------------------------------------
// Seperate the buffer of a line-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------
void Seperate_line(void)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b0af      	sub	sp, #188	; 0xbc
 8000be8:	af22      	add	r7, sp, #136	; 0x88
	int i = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2228      	movs	r2, #40	; 0x28
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f004 fdaa 	bl	800574e <memset>

	// comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000bfa:	492c      	ldr	r1, [pc, #176]	; (8000cac <Seperate_line+0xc8>)
 8000bfc:	482c      	ldr	r0, [pc, #176]	; (8000cb0 <Seperate_line+0xcc>)
 8000bfe:	f004 ff21 	bl	8005a44 <strtok>
 8000c02:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 8000c04:	e00e      	b.n	8000c24 <Seperate_line+0x40>
	{

		aryvul[i]= token;
 8000c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	3330      	adds	r3, #48	; 0x30
 8000c0c:	443b      	add	r3, r7
 8000c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c10:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 8000c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c16:	3301      	adds	r3, #1
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000c1a:	4924      	ldr	r1, [pc, #144]	; (8000cac <Seperate_line+0xc8>)
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f004 ff11 	bl	8005a44 <strtok>
 8000c22:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 8000c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1ed      	bne.n	8000c06 <Seperate_line+0x22>
	}


	commando.x_1 = (uint16_t)atoi(aryvul[ARRAY_FIRST_lOCATION]);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f004 fb85 	bl	800533c <atoi>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <Seperate_line+0xd0>)
 8000c38:	819a      	strh	r2, [r3, #12]
	commando.y_1 = (uint16_t)atoi(aryvul[ARRAY_SECOND_lOCATION]);
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f004 fb7d 	bl	800533c <atoi>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <Seperate_line+0xd0>)
 8000c48:	81da      	strh	r2, [r3, #14]
	commando.x_2 = (uint16_t)atoi(aryvul[ARRAY_THIRD_lOCATION]);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 fb75 	bl	800533c <atoi>
 8000c52:	4603      	mov	r3, r0
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <Seperate_line+0xd0>)
 8000c58:	821a      	strh	r2, [r3, #16]
	commando.y_2 = (uint16_t)atoi(aryvul[ARRAY_FOURTH_lOCATION]);
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f004 fb6d 	bl	800533c <atoi>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <Seperate_line+0xd0>)
 8000c68:	825a      	strh	r2, [r3, #18]
	commando.kleur = (uint8_t)atoi(aryvul[ARRAY_FIFTH_lOCATION]);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f004 fb65 	bl	800533c <atoi>
 8000c72:	4603      	mov	r3, r0
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <Seperate_line+0xd0>)
 8000c78:	751a      	strb	r2, [r3, #20]
	commando.dikte = (uint8_t)atoi(aryvul[ARRAY_SIXTH_lOCATION]);
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 fb5d 	bl	800533c <atoi>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <Seperate_line+0xd0>)
 8000c88:	755a      	strb	r2, [r3, #21]


	 //draw line
	 API_In_DrawLine(commando);
 8000c8a:	4c0a      	ldr	r4, [pc, #40]	; (8000cb4 <Seperate_line+0xd0>)
 8000c8c:	4668      	mov	r0, sp
 8000c8e:	f104 0310 	add.w	r3, r4, #16
 8000c92:	2288      	movs	r2, #136	; 0x88
 8000c94:	4619      	mov	r1, r3
 8000c96:	f004 fd4c 	bl	8005732 <memcpy>
 8000c9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c9e:	f7ff feb9 	bl	8000a14 <API_In_DrawLine>

}
 8000ca2:	bf00      	nop
 8000ca4:	3734      	adds	r7, #52	; 0x34
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd90      	pop	{r4, r7, pc}
 8000caa:	bf00      	nop
 8000cac:	080066b0 	.word	0x080066b0
 8000cb0:	200002a5 	.word	0x200002a5
 8000cb4:	20000208 	.word	0x20000208

08000cb8 <Seperate_Rectangle>:
//--------------------------------------------------------------
// Seperate the buffer of a rectangle-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------
void Seperate_Rectangle(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b0af      	sub	sp, #188	; 0xbc
 8000cbc:	af22      	add	r7, sp, #136	; 0x88
	int i = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	2228      	movs	r2, #40	; 0x28
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f004 fd40 	bl	800574e <memset>

	// comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000cce:	492c      	ldr	r1, [pc, #176]	; (8000d80 <Seperate_Rectangle+0xc8>)
 8000cd0:	482c      	ldr	r0, [pc, #176]	; (8000d84 <Seperate_Rectangle+0xcc>)
 8000cd2:	f004 feb7 	bl	8005a44 <strtok>
 8000cd6:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 8000cd8:	e00e      	b.n	8000cf8 <Seperate_Rectangle+0x40>
	{
		aryvul[i]= token;
 8000cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	3330      	adds	r3, #48	; 0x30
 8000ce0:	443b      	add	r3, r7
 8000ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ce4:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 8000ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cea:	3301      	adds	r3, #1
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000cee:	4924      	ldr	r1, [pc, #144]	; (8000d80 <Seperate_Rectangle+0xc8>)
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f004 fea7 	bl	8005a44 <strtok>
 8000cf6:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1ed      	bne.n	8000cda <Seperate_Rectangle+0x22>
	}



	commando.x_1 = (uint16_t)atoi(aryvul[ARRAY_FIRST_lOCATION]);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f004 fb1b 	bl	800533c <atoi>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <Seperate_Rectangle+0xd0>)
 8000d0c:	819a      	strh	r2, [r3, #12]
	commando.y_1 = (uint16_t)atoi(aryvul[ARRAY_SECOND_lOCATION]);
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 fb13 	bl	800533c <atoi>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <Seperate_Rectangle+0xd0>)
 8000d1c:	81da      	strh	r2, [r3, #14]
	commando.x_2 = (uint16_t)atoi(aryvul[ARRAY_THIRD_lOCATION]);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f004 fb0b 	bl	800533c <atoi>
 8000d26:	4603      	mov	r3, r0
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <Seperate_Rectangle+0xd0>)
 8000d2c:	821a      	strh	r2, [r3, #16]
	commando.y_2 = (uint16_t)atoi(aryvul[ARRAY_FOURTH_lOCATION]);
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 fb03 	bl	800533c <atoi>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <Seperate_Rectangle+0xd0>)
 8000d3c:	825a      	strh	r2, [r3, #18]
	commando.kleur = (uint8_t)atoi(aryvul[ARRAY_FIFTH_lOCATION]);
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f004 fafb 	bl	800533c <atoi>
 8000d46:	4603      	mov	r3, r0
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <Seperate_Rectangle+0xd0>)
 8000d4c:	751a      	strb	r2, [r3, #20]
	commando.gevuld = (uint8_t)atoi(aryvul[ARRAY_SIXTH_lOCATION]);
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 faf3 	bl	800533c <atoi>
 8000d56:	4603      	mov	r3, r0
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <Seperate_Rectangle+0xd0>)
 8000d5c:	759a      	strb	r2, [r3, #22]

	API_In_DrawRectangle(commando);
 8000d5e:	4c0a      	ldr	r4, [pc, #40]	; (8000d88 <Seperate_Rectangle+0xd0>)
 8000d60:	4668      	mov	r0, sp
 8000d62:	f104 0310 	add.w	r3, r4, #16
 8000d66:	2288      	movs	r2, #136	; 0x88
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f004 fce2 	bl	8005732 <memcpy>
 8000d6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d72:	f7ff fe87 	bl	8000a84 <API_In_DrawRectangle>


}
 8000d76:	bf00      	nop
 8000d78:	3734      	adds	r7, #52	; 0x34
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd90      	pop	{r4, r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	080066b0 	.word	0x080066b0
 8000d84:	200002a5 	.word	0x200002a5
 8000d88:	20000208 	.word	0x20000208

08000d8c <Seperate_Circkel>:
//--------------------------------------------------------------
// Seperate the buffer of a circkel-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------
void Seperate_Circkel(void)
{
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b0af      	sub	sp, #188	; 0xbc
 8000d90:	af22      	add	r7, sp, #136	; 0x88
	int i = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000d96:	463b      	mov	r3, r7
 8000d98:	2228      	movs	r2, #40	; 0x28
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f004 fcd6 	bl	800574e <memset>

	// comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000da2:	492c      	ldr	r1, [pc, #176]	; (8000e54 <Seperate_Circkel+0xc8>)
 8000da4:	482c      	ldr	r0, [pc, #176]	; (8000e58 <Seperate_Circkel+0xcc>)
 8000da6:	f004 fe4d 	bl	8005a44 <strtok>
 8000daa:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 8000dac:	e00e      	b.n	8000dcc <Seperate_Circkel+0x40>
	{
		aryvul[i]= token;
 8000dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	3330      	adds	r3, #48	; 0x30
 8000db4:	443b      	add	r3, r7
 8000db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000db8:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 8000dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000dc2:	4924      	ldr	r1, [pc, #144]	; (8000e54 <Seperate_Circkel+0xc8>)
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f004 fe3d 	bl	8005a44 <strtok>
 8000dca:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 8000dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1ed      	bne.n	8000dae <Seperate_Circkel+0x22>
	}



	commando.x_1 = (uint16_t)atoi(aryvul[ARRAY_FIRST_lOCATION]);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fab1 	bl	800533c <atoi>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <Seperate_Circkel+0xd0>)
 8000de0:	819a      	strh	r2, [r3, #12]
	commando.y_1 = (uint16_t)atoi(aryvul[ARRAY_SECOND_lOCATION]);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 faa9 	bl	800533c <atoi>
 8000dea:	4603      	mov	r3, r0
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <Seperate_Circkel+0xd0>)
 8000df0:	81da      	strh	r2, [r3, #14]
	commando.x_2 = (uint16_t)atoi(aryvul[ARRAY_THIRD_lOCATION]);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f004 faa1 	bl	800533c <atoi>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <Seperate_Circkel+0xd0>)
 8000e00:	821a      	strh	r2, [r3, #16]
	commando.y_2 = (uint16_t)atoi(aryvul[ARRAY_FOURTH_lOCATION]);
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f004 fa99 	bl	800533c <atoi>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <Seperate_Circkel+0xd0>)
 8000e10:	825a      	strh	r2, [r3, #18]
	commando.kleur = (uint8_t)atoi(aryvul[ARRAY_FIFTH_lOCATION]);
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f004 fa91 	bl	800533c <atoi>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <Seperate_Circkel+0xd0>)
 8000e20:	751a      	strb	r2, [r3, #20]
	commando.gevuld = (uint8_t)atoi(aryvul[ARRAY_SIXTH_lOCATION]);
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f004 fa89 	bl	800533c <atoi>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <Seperate_Circkel+0xd0>)
 8000e30:	759a      	strb	r2, [r3, #22]

	API_In_DrawCirckel(commando);
 8000e32:	4c0a      	ldr	r4, [pc, #40]	; (8000e5c <Seperate_Circkel+0xd0>)
 8000e34:	4668      	mov	r0, sp
 8000e36:	f104 0310 	add.w	r3, r4, #16
 8000e3a:	2288      	movs	r2, #136	; 0x88
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f004 fc78 	bl	8005732 <memcpy>
 8000e42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e46:	f7ff fe36 	bl	8000ab6 <API_In_DrawCirckel>


}
 8000e4a:	bf00      	nop
 8000e4c:	3734      	adds	r7, #52	; 0x34
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd90      	pop	{r4, r7, pc}
 8000e52:	bf00      	nop
 8000e54:	080066b0 	.word	0x080066b0
 8000e58:	200002a5 	.word	0x200002a5
 8000e5c:	20000208 	.word	0x20000208

08000e60 <Seperate_Text>:
// Seperate the buffer of a text-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------

void Seperate_Text(void)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b0af      	sub	sp, #188	; 0xbc
 8000e64:	af22      	add	r7, sp, #136	; 0x88
	int i = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2228      	movs	r2, #40	; 0x28
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f004 fc6c 	bl	800574e <memset>

	//Comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000e76:	4924      	ldr	r1, [pc, #144]	; (8000f08 <Seperate_Text+0xa8>)
 8000e78:	4824      	ldr	r0, [pc, #144]	; (8000f0c <Seperate_Text+0xac>)
 8000e7a:	f004 fde3 	bl	8005a44 <strtok>
 8000e7e:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 8000e80:	e00e      	b.n	8000ea0 <Seperate_Text+0x40>
	{
		aryvul[i]= token;
 8000e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	3330      	adds	r3, #48	; 0x30
 8000e88:	443b      	add	r3, r7
 8000e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e8c:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 8000e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e92:	3301      	adds	r3, #1
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000e96:	491c      	ldr	r1, [pc, #112]	; (8000f08 <Seperate_Text+0xa8>)
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f004 fdd3 	bl	8005a44 <strtok>
 8000e9e:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 8000ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1ed      	bne.n	8000e82 <Seperate_Text+0x22>
	}

	//Fills the struct
	commando.x = (uint16_t)atoi(aryvul[ARRAY_FIRST_lOCATION]);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f004 fa47 	bl	800533c <atoi>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <Seperate_Text+0xb0>)
 8000eb6:	61da      	str	r2, [r3, #28]
	commando.y = (uint16_t)atoi(aryvul[ARRAY_SECOND_lOCATION]);
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f004 fa3e 	bl	800533c <atoi>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <Seperate_Text+0xb0>)
 8000ec8:	621a      	str	r2, [r3, #32]
	commando.text_kleur = (uint8_t)atoi(aryvul[ARRAY_THIRD_lOCATION]);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f004 fa35 	bl	800533c <atoi>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <Seperate_Text+0xb0>)
 8000ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	strncpy(commando.tekst, aryvul[ARRAY_FOURTH_lOCATION] , sizeof(commando.x_1));
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480c      	ldr	r0, [pc, #48]	; (8000f14 <Seperate_Text+0xb4>)
 8000ee4:	f004 fd9b 	bl	8005a1e <strncpy>
	//commando.tekst = (uint8_t)atoi(aryvul[ARRAY_SIXTH_lOCATION]);

	API_In_DrawText(commando);
 8000ee8:	4c09      	ldr	r4, [pc, #36]	; (8000f10 <Seperate_Text+0xb0>)
 8000eea:	4668      	mov	r0, sp
 8000eec:	f104 0310 	add.w	r3, r4, #16
 8000ef0:	2288      	movs	r2, #136	; 0x88
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f004 fc1d 	bl	8005732 <memcpy>
 8000ef8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000efc:	f7ff fdef 	bl	8000ade <API_In_DrawText>


}
 8000f00:	bf00      	nop
 8000f02:	3734      	adds	r7, #52	; 0x34
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd90      	pop	{r4, r7, pc}
 8000f08:	080066b0 	.word	0x080066b0
 8000f0c:	200002a5 	.word	0x200002a5
 8000f10:	20000208 	.word	0x20000208
 8000f14:	2000022d 	.word	0x2000022d

08000f18 <Seperate_Bitmap>:
// Seperate the buffer of a Bitmap-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------

void Seperate_Bitmap(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	; 0x30
 8000f1c:	af00      	add	r7, sp, #0
	int i = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2228      	movs	r2, #40	; 0x28
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 fc10 	bl	800574e <memset>

	//Comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000f2e:	4912      	ldr	r1, [pc, #72]	; (8000f78 <Seperate_Bitmap+0x60>)
 8000f30:	4812      	ldr	r0, [pc, #72]	; (8000f7c <Seperate_Bitmap+0x64>)
 8000f32:	f004 fd87 	bl	8005a44 <strtok>
 8000f36:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 8000f38:	e00e      	b.n	8000f58 <Seperate_Bitmap+0x40>
	{
		aryvul[i]= token;
 8000f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	3330      	adds	r3, #48	; 0x30
 8000f40:	443b      	add	r3, r7
 8000f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f44:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 8000f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000f4e:	490a      	ldr	r1, [pc, #40]	; (8000f78 <Seperate_Bitmap+0x60>)
 8000f50:	2000      	movs	r0, #0
 8000f52:	f004 fd77 	bl	8005a44 <strtok>
 8000f56:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 8000f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1ed      	bne.n	8000f3a <Seperate_Bitmap+0x22>
 8000f5e:	88ba      	ldrh	r2, [r7, #4]
	}

	//Fills the struct
	 memcpy(&commando.nr, &aryvul[ARRAY_FIRST_lOCATION] , sizeof(commando.x_1));
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <Seperate_Bitmap+0x68>)
 8000f62:	831a      	strh	r2, [r3, #24]
 8000f64:	893a      	ldrh	r2, [r7, #8]
	 memcpy(&commando.x_1, &aryvul[ARRAY_SECOND_lOCATION] , sizeof(commando.x_1));
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <Seperate_Bitmap+0x68>)
 8000f68:	819a      	strh	r2, [r3, #12]
 8000f6a:	89ba      	ldrh	r2, [r7, #12]
	 memcpy(&commando.y_1, &aryvul[ARRAY_THIRD_lOCATION] , sizeof(commando.x_1));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <Seperate_Bitmap+0x68>)
 8000f6e:	81da      	strh	r2, [r3, #14]

}
 8000f70:	bf00      	nop
 8000f72:	3730      	adds	r7, #48	; 0x30
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	080066b0 	.word	0x080066b0
 8000f7c:	200002a5 	.word	0x200002a5
 8000f80:	20000208 	.word	0x20000208

08000f84 <Seperate_Clearscreen>:
// Seperate the buffer of a Clearscreen-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------

void Seperate_Clearscreen(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
	int  i;
	char temp;
	int pos = INDEX_COLOR;
 8000f8a:	230c      	movs	r3, #12
 8000f8c:	60bb      	str	r3, [r7, #8]


	while(pos)
 8000f8e:	e01f      	b.n	8000fd0 <Seperate_Clearscreen+0x4c>
	{
		temp = input.line_rx_buffer[0];
 8000f90:	4b2a      	ldr	r3, [pc, #168]	; (800103c <Seperate_Clearscreen+0xb8>)
 8000f92:	785b      	ldrb	r3, [r3, #1]
 8000f94:	71fb      	strb	r3, [r7, #7]
		for(i = 0; i < 1024 - 1; i++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	e00d      	b.n	8000fb8 <Seperate_Clearscreen+0x34>
			input.line_rx_buffer[i] = input.line_rx_buffer[i + 1];
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4a26      	ldr	r2, [pc, #152]	; (800103c <Seperate_Clearscreen+0xb8>)
 8000fa2:	4413      	add	r3, r2
 8000fa4:	7859      	ldrb	r1, [r3, #1]
 8000fa6:	4a25      	ldr	r2, [pc, #148]	; (800103c <Seperate_Clearscreen+0xb8>)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	3301      	adds	r3, #1
 8000fae:	460a      	mov	r2, r1
 8000fb0:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < 1024 - 1; i++)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	ddec      	ble.n	8000f9c <Seperate_Clearscreen+0x18>

		input.line_rx_buffer[1024 - 1] = temp;
 8000fc2:	4a1e      	ldr	r2, [pc, #120]	; (800103c <Seperate_Clearscreen+0xb8>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f882 3400 	strb.w	r3, [r2, #1024]	; 0x400
		pos--;
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
	while(pos)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1dc      	bne.n	8000f90 <Seperate_Clearscreen+0xc>
	}


	if(strncmp(input.line_rx_buffer, "rood", sizeof(input.line_rx_buffer)) == 0) UB_VGA_FillScreen(VGA_COL_RED);
 8000fd6:	491a      	ldr	r1, [pc, #104]	; (8001040 <Seperate_Clearscreen+0xbc>)
 8000fd8:	481a      	ldr	r0, [pc, #104]	; (8001044 <Seperate_Clearscreen+0xc0>)
 8000fda:	f7ff f8f9 	bl	80001d0 <strcmp>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d103      	bne.n	8000fec <Seperate_Clearscreen+0x68>
 8000fe4:	20e0      	movs	r0, #224	; 0xe0
 8000fe6:	f000 fdcf 	bl	8001b88 <UB_VGA_FillScreen>
	else if(strncmp(input.line_rx_buffer, "zwart", sizeof(input.line_rx_buffer)) == 0) UB_VGA_FillScreen(VGA_COL_BLACK);
	else if(strncmp(input.line_rx_buffer, "groen", sizeof(input.line_rx_buffer)) == 0) UB_VGA_FillScreen(VGA_COL_GREEN);
	else if(strncmp(input.line_rx_buffer, "wit", sizeof(input.line_rx_buffer)) == 0) UB_VGA_FillScreen(VGA_COL_WHITE);
	else UB_VGA_FillScreen(VGA_COL_BLUE);
}
 8000fea:	e023      	b.n	8001034 <Seperate_Clearscreen+0xb0>
	else if(strncmp(input.line_rx_buffer, "zwart", sizeof(input.line_rx_buffer)) == 0) UB_VGA_FillScreen(VGA_COL_BLACK);
 8000fec:	4916      	ldr	r1, [pc, #88]	; (8001048 <Seperate_Clearscreen+0xc4>)
 8000fee:	4815      	ldr	r0, [pc, #84]	; (8001044 <Seperate_Clearscreen+0xc0>)
 8000ff0:	f7ff f8ee 	bl	80001d0 <strcmp>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d103      	bne.n	8001002 <Seperate_Clearscreen+0x7e>
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 fdc4 	bl	8001b88 <UB_VGA_FillScreen>
}
 8001000:	e018      	b.n	8001034 <Seperate_Clearscreen+0xb0>
	else if(strncmp(input.line_rx_buffer, "groen", sizeof(input.line_rx_buffer)) == 0) UB_VGA_FillScreen(VGA_COL_GREEN);
 8001002:	4912      	ldr	r1, [pc, #72]	; (800104c <Seperate_Clearscreen+0xc8>)
 8001004:	480f      	ldr	r0, [pc, #60]	; (8001044 <Seperate_Clearscreen+0xc0>)
 8001006:	f7ff f8e3 	bl	80001d0 <strcmp>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d103      	bne.n	8001018 <Seperate_Clearscreen+0x94>
 8001010:	201c      	movs	r0, #28
 8001012:	f000 fdb9 	bl	8001b88 <UB_VGA_FillScreen>
}
 8001016:	e00d      	b.n	8001034 <Seperate_Clearscreen+0xb0>
	else if(strncmp(input.line_rx_buffer, "wit", sizeof(input.line_rx_buffer)) == 0) UB_VGA_FillScreen(VGA_COL_WHITE);
 8001018:	490d      	ldr	r1, [pc, #52]	; (8001050 <Seperate_Clearscreen+0xcc>)
 800101a:	480a      	ldr	r0, [pc, #40]	; (8001044 <Seperate_Clearscreen+0xc0>)
 800101c:	f7ff f8d8 	bl	80001d0 <strcmp>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d103      	bne.n	800102e <Seperate_Clearscreen+0xaa>
 8001026:	20ff      	movs	r0, #255	; 0xff
 8001028:	f000 fdae 	bl	8001b88 <UB_VGA_FillScreen>
}
 800102c:	e002      	b.n	8001034 <Seperate_Clearscreen+0xb0>
	else UB_VGA_FillScreen(VGA_COL_BLUE);
 800102e:	2003      	movs	r0, #3
 8001030:	f000 fdaa 	bl	8001b88 <UB_VGA_FillScreen>
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200002a4 	.word	0x200002a4
 8001040:	080066b4 	.word	0x080066b4
 8001044:	200002a5 	.word	0x200002a5
 8001048:	080066bc 	.word	0x080066bc
 800104c:	080066c4 	.word	0x080066c4
 8001050:	080066cc 	.word	0x080066cc

08001054 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_DMA_Init+0x3c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <MX_DMA_Init+0x3c>)
 8001064:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_DMA_Init+0x3c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	2044      	movs	r0, #68	; 0x44
 800107c:	f000 ff1d 	bl	8001eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001080:	2044      	movs	r0, #68	; 0x44
 8001082:	f000 ff36 	bl	8001ef2 <HAL_NVIC_EnableIRQ>

}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800

08001094 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b32      	ldr	r3, [pc, #200]	; (8001178 <MX_GPIO_Init+0xe4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a31      	ldr	r2, [pc, #196]	; (8001178 <MX_GPIO_Init+0xe4>)
 80010b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <MX_GPIO_Init+0xe4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <MX_GPIO_Init+0xe4>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a2a      	ldr	r2, [pc, #168]	; (8001178 <MX_GPIO_Init+0xe4>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b28      	ldr	r3, [pc, #160]	; (8001178 <MX_GPIO_Init+0xe4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b24      	ldr	r3, [pc, #144]	; (8001178 <MX_GPIO_Init+0xe4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a23      	ldr	r2, [pc, #140]	; (8001178 <MX_GPIO_Init+0xe4>)
 80010ec:	f043 0310 	orr.w	r3, r3, #16
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <MX_GPIO_Init+0xe4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_GPIO_Init+0xe4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <MX_GPIO_Init+0xe4>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_GPIO_Init+0xe4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001120:	4816      	ldr	r0, [pc, #88]	; (800117c <MX_GPIO_Init+0xe8>)
 8001122:	f001 fc2f 	bl	8002984 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112c:	4814      	ldr	r0, [pc, #80]	; (8001180 <MX_GPIO_Init+0xec>)
 800112e:	f001 fc29 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001132:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001136:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <MX_GPIO_Init+0xe8>)
 800114c:	f001 fa7e 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_GPIO_Init+0xec>)
 800116a:	f001 fa6f 	bl	800264c <HAL_GPIO_Init>

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	; 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40021000 	.word	0x40021000
 8001180:	40020400 	.word	0x40020400

08001184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001188:	f000 fd4a 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118c:	f000 f824 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001190:	f7ff ff80 	bl	8001094 <MX_GPIO_Init>
  MX_DMA_Init();
 8001194:	f7ff ff5e 	bl	8001054 <MX_DMA_Init>
  MX_TIM1_Init();
 8001198:	f000 fa98 	bl	80016cc <MX_TIM1_Init>
  MX_TIM2_Init();
 800119c:	f000 fae6 	bl	800176c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80011a0:	f000 fbfc 	bl	800199c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 80011a4:	f000 fc9e 	bl	8001ae4 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLUE);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 fced 	bl	8001b88 <UB_VGA_FillScreen>


  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 80011ae:	2201      	movs	r2, #1
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <main+0x4c>)
 80011b2:	4808      	ldr	r0, [pc, #32]	; (80011d4 <main+0x50>)
 80011b4:	f003 f914 	bl	80043e0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 if(input.command_execute_flag == TRUE)
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <main+0x4c>)
 80011ba:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80011be:	2bff      	cmp	r3, #255	; 0xff
 80011c0:	d1fa      	bne.n	80011b8 <main+0x34>
	  {
		 API_Getcommand();
 80011c2:	f7ff f9ef 	bl	80005a4 <API_Getcommand>

		 //clear the buffer


	  // When finished reset the flag
	     input.command_execute_flag = FALSE;
 80011c6:	4b02      	ldr	r3, [pc, #8]	; (80011d0 <main+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	 if(input.command_execute_flag == TRUE)
 80011ce:	e7f3      	b.n	80011b8 <main+0x34>
 80011d0:	200002a4 	.word	0x200002a4
 80011d4:	20000798 	.word	0x20000798

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b094      	sub	sp, #80	; 0x50
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	2230      	movs	r2, #48	; 0x30
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f004 fab1 	bl	800574e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <SystemClock_Config+0xcc>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	4a27      	ldr	r2, [pc, #156]	; (80012a4 <SystemClock_Config+0xcc>)
 8001206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120a:	6413      	str	r3, [r2, #64]	; 0x40
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <SystemClock_Config+0xcc>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <SystemClock_Config+0xd0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <SystemClock_Config+0xd0>)
 8001222:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <SystemClock_Config+0xd0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001234:	2301      	movs	r3, #1
 8001236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001248:	2304      	movs	r3, #4
 800124a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800124c:	23a8      	movs	r3, #168	; 0xa8
 800124e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001250:	2302      	movs	r3, #2
 8001252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001254:	2304      	movs	r3, #4
 8001256:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	4618      	mov	r0, r3
 800125e:	f001 fbab 	bl	80029b8 <HAL_RCC_OscConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001268:	f000 f832 	bl	80012d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
 800126e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001270:	2302      	movs	r3, #2
 8001272:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001278:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800127c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800127e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001282:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	2105      	movs	r1, #5
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fe02 	bl	8002e94 <HAL_RCC_ClockConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001296:	f000 f81b 	bl	80012d0 <Error_Handler>
  }
}
 800129a:	bf00      	nop
 800129c:	3750      	adds	r7, #80	; 0x50
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40007000 	.word	0x40007000

080012ac <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 80012b4:	1d39      	adds	r1, r7, #4
 80012b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ba:	2201      	movs	r2, #1
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <__io_putchar+0x20>)
 80012be:	f002 fff6 	bl	80042ae <HAL_UART_Transmit>
	return ch;												//Return the character
 80012c2:	687b      	ldr	r3, [r7, #4]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000798 	.word	0x20000798

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_MspInit+0x4c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a0f      	ldr	r2, [pc, #60]	; (800132c <HAL_MspInit+0x4c>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_MspInit+0x4c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_MspInit+0x4c>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f000 fc9e 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001390:	4828      	ldr	r0, [pc, #160]	; (8001434 <TIM2_IRQHandler+0xa8>)
 8001392:	f002 f8db 	bl	800354c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8001396:	4b27      	ldr	r3, [pc, #156]	; (8001434 <TIM2_IRQHandler+0xa8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f06f 0208 	mvn.w	r2, #8
 800139e:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 80013a0:	4b25      	ldr	r3, [pc, #148]	; (8001438 <TIM2_IRQHandler+0xac>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4b23      	ldr	r3, [pc, #140]	; (8001438 <TIM2_IRQHandler+0xac>)
 80013aa:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 80013ac:	4b22      	ldr	r3, [pc, #136]	; (8001438 <TIM2_IRQHandler+0xac>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80013b4:	d905      	bls.n	80013c2 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <TIM2_IRQHandler+0xac>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 80013bc:	4a1f      	ldr	r2, [pc, #124]	; (800143c <TIM2_IRQHandler+0xb0>)
 80013be:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <TIM2_IRQHandler+0xac>)
 80013c0:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <TIM2_IRQHandler+0xac>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d802      	bhi.n	80013d0 <TIM2_IRQHandler+0x44>
 80013ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013ce:	e001      	b.n	80013d4 <TIM2_IRQHandler+0x48>
 80013d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d4:	4a1a      	ldr	r2, [pc, #104]	; (8001440 <TIM2_IRQHandler+0xb4>)
 80013d6:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <TIM2_IRQHandler+0xac>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	2b23      	cmp	r3, #35	; 0x23
 80013de:	d927      	bls.n	8001430 <TIM2_IRQHandler+0xa4>
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <TIM2_IRQHandler+0xac>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	f240 2202 	movw	r2, #514	; 0x202
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d821      	bhi.n	8001430 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 80013ec:	4a15      	ldr	r2, [pc, #84]	; (8001444 <TIM2_IRQHandler+0xb8>)
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <TIM2_IRQHandler+0xac>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80013f4:	4a13      	ldr	r2, [pc, #76]	; (8001444 <TIM2_IRQHandler+0xb8>)
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <TIM2_IRQHandler+0xac>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <TIM2_IRQHandler+0xbc>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a11      	ldr	r2, [pc, #68]	; (8001448 <TIM2_IRQHandler+0xbc>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <TIM2_IRQHandler+0xc0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <TIM2_IRQHandler+0xc0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0201 	orr.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <TIM2_IRQHandler+0xac>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <TIM2_IRQHandler+0xac>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f203 1341 	addw	r3, r3, #321	; 0x141
 800142c:	4a02      	ldr	r2, [pc, #8]	; (8001438 <TIM2_IRQHandler+0xac>)
 800142e:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200006f8 	.word	0x200006f8
 8001438:	200134c8 	.word	0x200134c8
 800143c:	200007d8 	.word	0x200007d8
 8001440:	40020400 	.word	0x40020400
 8001444:	40026488 	.word	0x40026488
 8001448:	40010000 	.word	0x40010000
 800144c:	20000738 	.word	0x20000738

08001450 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <USART2_IRQHandler+0x78>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	71fb      	strb	r3, [r7, #7]


//	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	2b0a      	cmp	r3, #10
 8001460:	d026      	beq.n	80014b0 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b0d      	cmp	r3, #13
 8001466:	d002      	beq.n	800146e <USART2_IRQHandler+0x1e>
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b2e      	cmp	r3, #46	; 0x2e
 800146c:	d10e      	bne.n	800148c <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <USART2_IRQHandler+0x7c>)
 8001470:	22ff      	movs	r2, #255	; 0xff
 8001472:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <USART2_IRQHandler+0x7c>)
 8001478:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800147c:	4a13      	ldr	r2, [pc, #76]	; (80014cc <USART2_IRQHandler+0x7c>)
 800147e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <USART2_IRQHandler+0x7c>)
 8001484:	2200      	movs	r2, #0
 8001486:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800148a:	e011      	b.n	80014b0 <USART2_IRQHandler+0x60>

		}
		else
		{
			input.command_execute_flag = FALSE;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <USART2_IRQHandler+0x7c>)
 800148e:	2200      	movs	r2, #0
 8001490:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <USART2_IRQHandler+0x7c>)
 8001496:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800149a:	4a0c      	ldr	r2, [pc, #48]	; (80014cc <USART2_IRQHandler+0x7c>)
 800149c:	4413      	add	r3, r2
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <USART2_IRQHandler+0x7c>)
 80014a4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80014a8:	3301      	adds	r3, #1
 80014aa:	4a08      	ldr	r2, [pc, #32]	; (80014cc <USART2_IRQHandler+0x7c>)
 80014ac:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}

	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014b0:	4807      	ldr	r0, [pc, #28]	; (80014d0 <USART2_IRQHandler+0x80>)
 80014b2:	f002 ffeb 	bl	800448c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 80014b6:	2201      	movs	r2, #1
 80014b8:	4904      	ldr	r1, [pc, #16]	; (80014cc <USART2_IRQHandler+0x7c>)
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <USART2_IRQHandler+0x80>)
 80014bc:	f002 ff90 	bl	80043e0 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */

}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40004400 	.word	0x40004400
 80014cc:	200002a4 	.word	0x200002a4
 80014d0:	20000798 	.word	0x20000798

080014d4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <DMA2_Stream5_IRQHandler+0x48>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6a1a      	ldr	r2, [r3, #32]
 80014de:	f241 1311 	movw	r3, #4369	; 0x1111
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10f      	bne.n	8001508 <DMA2_Stream5_IRQHandler+0x34>
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <DMA2_Stream5_IRQHandler+0x48>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6a1a      	ldr	r2, [r3, #32]
 80014ee:	f240 4344 	movw	r3, #1092	; 0x444
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d107      	bne.n	8001508 <DMA2_Stream5_IRQHandler+0x34>
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <DMA2_Stream5_IRQHandler+0x48>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <DMA2_Stream5_IRQHandler+0x48>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0201 	bic.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <DMA2_Stream5_IRQHandler+0x4c>)
 800150a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800150e:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <DMA2_Stream5_IRQHandler+0x50>)
 8001512:	f000 fe31 	bl	8002178 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200006b8 	.word	0x200006b8
 8001520:	40021000 	.word	0x40021000
 8001524:	20000738 	.word	0x20000738

08001528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	return 1;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_kill>:

int _kill(int pid, int sig)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001542:	f003 feff 	bl	8005344 <__errno>
 8001546:	4603      	mov	r3, r0
 8001548:	2216      	movs	r2, #22
 800154a:	601a      	str	r2, [r3, #0]
	return -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <_exit>:

void _exit (int status)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ffe7 	bl	8001538 <_kill>
	while (1) {}		/* Make sure we hang here */
 800156a:	e7fe      	b.n	800156a <_exit+0x12>

0800156c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e00a      	b.n	8001594 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800157e:	f3af 8000 	nop.w
 8001582:	4601      	mov	r1, r0
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	60ba      	str	r2, [r7, #8]
 800158a:	b2ca      	uxtb	r2, r1
 800158c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbf0      	blt.n	800157e <_read+0x12>
	}

return len;
 800159c:	687b      	ldr	r3, [r7, #4]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e009      	b.n	80015cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	60ba      	str	r2, [r7, #8]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fe73 	bl	80012ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dbf1      	blt.n	80015b8 <_write+0x12>
	}
	return len;
 80015d4:	687b      	ldr	r3, [r7, #4]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_close>:

int _close(int file)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	return -1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001606:	605a      	str	r2, [r3, #4]
	return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_isatty>:

int _isatty(int file)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
	return 1;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
	return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <_sbrk+0x50>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <_sbrk+0x16>
		heap_end = &end;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <_sbrk+0x50>)
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <_sbrk+0x54>)
 800165c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <_sbrk+0x50>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <_sbrk+0x50>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	466a      	mov	r2, sp
 800166e:	4293      	cmp	r3, r2
 8001670:	d907      	bls.n	8001682 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001672:	f003 fe67 	bl	8005344 <__errno>
 8001676:	4603      	mov	r3, r0
 8001678:	220c      	movs	r2, #12
 800167a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	e006      	b.n	8001690 <_sbrk+0x48>
	}

	heap_end += incr;
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <_sbrk+0x50>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	4a03      	ldr	r2, [pc, #12]	; (8001698 <_sbrk+0x50>)
 800168c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200006b4 	.word	0x200006b4
 800169c:	200134e8 	.word	0x200134e8

080016a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <SystemInit+0x28>)
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <SystemInit+0x28>)
 80016ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SystemInit+0x28>)
 80016b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ba:	609a      	str	r2, [r3, #8]
#endif
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	463b      	mov	r3, r7
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <MX_TIM1_Init+0x98>)
 80016ea:	4a1f      	ldr	r2, [pc, #124]	; (8001768 <MX_TIM1_Init+0x9c>)
 80016ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_TIM1_Init+0x98>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_TIM1_Init+0x98>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_TIM1_Init+0x98>)
 80016fc:	220b      	movs	r2, #11
 80016fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <MX_TIM1_Init+0x98>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_TIM1_Init+0x98>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_TIM1_Init+0x98>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001712:	4814      	ldr	r0, [pc, #80]	; (8001764 <MX_TIM1_Init+0x98>)
 8001714:	f001 fdde 	bl	80032d4 <HAL_TIM_Base_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800171e:	f7ff fdd7 	bl	80012d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001726:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	4619      	mov	r1, r3
 800172e:	480d      	ldr	r0, [pc, #52]	; (8001764 <MX_TIM1_Init+0x98>)
 8001730:	f002 f8da 	bl	80038e8 <HAL_TIM_ConfigClockSource>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800173a:	f7ff fdc9 	bl	80012d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001746:	463b      	mov	r3, r7
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	; (8001764 <MX_TIM1_Init+0x98>)
 800174c:	f002 fcd2 	bl	80040f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001756:	f7ff fdbb 	bl	80012d0 <Error_Handler>
  }

}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200006b8 	.word	0x200006b8
 8001768:	40010000 	.word	0x40010000

0800176c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001772:	f107 0320 	add.w	r3, r7, #32
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]
 800178a:	615a      	str	r2, [r3, #20]
 800178c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <MX_TIM2_Init+0xcc>)
 8001790:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001794:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8001796:	4b28      	ldr	r3, [pc, #160]	; (8001838 <MX_TIM2_Init+0xcc>)
 8001798:	2200      	movs	r2, #0
 800179a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179c:	4b26      	ldr	r3, [pc, #152]	; (8001838 <MX_TIM2_Init+0xcc>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <MX_TIM2_Init+0xcc>)
 80017a4:	f640 226b 	movw	r2, #2667	; 0xa6b
 80017a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017aa:	4b23      	ldr	r3, [pc, #140]	; (8001838 <MX_TIM2_Init+0xcc>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <MX_TIM2_Init+0xcc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017b6:	4820      	ldr	r0, [pc, #128]	; (8001838 <MX_TIM2_Init+0xcc>)
 80017b8:	f001 fddb 	bl	8003372 <HAL_TIM_PWM_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80017c2:	f7ff fd85 	bl	80012d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ce:	f107 0320 	add.w	r3, r7, #32
 80017d2:	4619      	mov	r1, r3
 80017d4:	4818      	ldr	r0, [pc, #96]	; (8001838 <MX_TIM2_Init+0xcc>)
 80017d6:	f002 fc8d 	bl	80040f4 <HAL_TIMEx_MasterConfigSynchronization>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80017e0:	f7ff fd76 	bl	80012d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e4:	2360      	movs	r3, #96	; 0x60
 80017e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 80017e8:	f240 13bb 	movw	r3, #443	; 0x1bb
 80017ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80017ee:	2302      	movs	r3, #2
 80017f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2208      	movs	r2, #8
 80017fa:	4619      	mov	r1, r3
 80017fc:	480e      	ldr	r0, [pc, #56]	; (8001838 <MX_TIM2_Init+0xcc>)
 80017fe:	f001 ffad 	bl	800375c <HAL_TIM_PWM_ConfigChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001808:	f7ff fd62 	bl	80012d0 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 800180c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001810:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	220c      	movs	r2, #12
 8001816:	4619      	mov	r1, r3
 8001818:	4807      	ldr	r0, [pc, #28]	; (8001838 <MX_TIM2_Init+0xcc>)
 800181a:	f001 ff9f 	bl	800375c <HAL_TIM_PWM_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001824:	f7ff fd54 	bl	80012d0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <MX_TIM2_Init+0xcc>)
 800182a:	f000 f87f 	bl	800192c <HAL_TIM_MspPostInit>

}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200006f8 	.word	0x200006f8

0800183c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <HAL_TIM_Base_MspInit+0x94>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d13c      	bne.n	80018c8 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_TIM_Base_MspInit+0x98>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <HAL_TIM_Base_MspInit+0x98>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6453      	str	r3, [r2, #68]	; 0x44
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_TIM_Base_MspInit+0x98>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_TIM_Base_MspInit+0x9c>)
 800186c:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <HAL_TIM_Base_MspInit+0xa0>)
 800186e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_TIM_Base_MspInit+0x9c>)
 8001872:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001876:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_TIM_Base_MspInit+0x9c>)
 800187a:	2240      	movs	r2, #64	; 0x40
 800187c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_TIM_Base_MspInit+0x9c>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_TIM_Base_MspInit+0x9c>)
 8001886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800188a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_TIM_Base_MspInit+0x9c>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_TIM_Base_MspInit+0x9c>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_TIM_Base_MspInit+0x9c>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_TIM_Base_MspInit+0x9c>)
 80018a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018a4:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_TIM_Base_MspInit+0x9c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80018ac:	480a      	ldr	r0, [pc, #40]	; (80018d8 <HAL_TIM_Base_MspInit+0x9c>)
 80018ae:	f000 fb3b 	bl	8001f28 <HAL_DMA_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 80018b8:	f7ff fd0a 	bl	80012d0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <HAL_TIM_Base_MspInit+0x9c>)
 80018c0:	621a      	str	r2, [r3, #32]
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <HAL_TIM_Base_MspInit+0x9c>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40010000 	.word	0x40010000
 80018d4:	40023800 	.word	0x40023800
 80018d8:	20000738 	.word	0x20000738
 80018dc:	40026488 	.word	0x40026488

080018e0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f0:	d115      	bne.n	800191e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_TIM_PWM_MspInit+0x48>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <HAL_TIM_PWM_MspInit+0x48>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_TIM_PWM_MspInit+0x48>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	201c      	movs	r0, #28
 8001914:	f000 fad1 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001918:	201c      	movs	r0, #28
 800191a:	f000 faea 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800194c:	d11e      	bne.n	800198c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_TIM_MspPostInit+0x68>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <HAL_TIM_MspPostInit+0x68>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_TIM_MspPostInit+0x68>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 800196a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800196e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800197c:	2301      	movs	r3, #1
 800197e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4619      	mov	r1, r3
 8001986:	4804      	ldr	r0, [pc, #16]	; (8001998 <HAL_TIM_MspPostInit+0x6c>)
 8001988:	f000 fe60 	bl	800264c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800198c:	bf00      	nop
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	40020400 	.word	0x40020400

0800199c <MX_USART2_UART_Init>:
/* USART2 init function */



void MX_USART2_UART_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <MX_USART2_UART_Init+0x50>)
 80019a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_USART2_UART_Init+0x4c>)
 80019d4:	f002 fc1e 	bl	8004214 <HAL_UART_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019de:	f7ff fc77 	bl	80012d0 <Error_Handler>
  }

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000798 	.word	0x20000798
 80019ec:	40004400 	.word	0x40004400

080019f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_UART_MspInit+0x94>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d133      	bne.n	8001a7a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
 8001a22:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a4a:	230c      	movs	r3, #12
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a5a:	2307      	movs	r3, #7
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	4809      	ldr	r0, [pc, #36]	; (8001a8c <HAL_UART_MspInit+0x9c>)
 8001a66:	f000 fdf1 	bl	800264c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2026      	movs	r0, #38	; 0x26
 8001a70:	f000 fa23 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a74:	2026      	movs	r0, #38	; 0x26
 8001a76:	f000 fa3c 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	3728      	adds	r7, #40	; 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40004400 	.word	0x40004400
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020000 	.word	0x40020000

08001a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */    movs  r1, #0
 8001a94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a96:	e003      	b.n	8001aa0 <LoopCopyDataInit>

08001a98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a9e:	3104      	adds	r1, #4

08001aa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001aa0:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001aa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001aa8:	d3f6      	bcc.n	8001a98 <CopyDataInit>
  ldr  r2, =_sbss
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001aac:	e002      	b.n	8001ab4 <LoopFillZerobss>

08001aae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ab0:	f842 3b04 	str.w	r3, [r2], #4

08001ab4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ab6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ab8:	d3f9      	bcc.n	8001aae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aba:	f7ff fdf1 	bl	80016a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001abe:	f003 fe11 	bl	80056e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac2:	f7ff fb5f 	bl	8001184 <main>
  bx  lr    
 8001ac6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ac8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001acc:	0800805c 	.word	0x0800805c
  ldr  r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ad4:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8001ad8:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8001adc:	200134e8 	.word	0x200134e8

08001ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC_IRQHandler>
	...

08001ae4 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <UB_VGA_Screen_Init+0x84>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001aee:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <UB_VGA_Screen_Init+0x84>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <UB_VGA_Screen_Init+0x84>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <UB_VGA_Screen_Init+0x88>)
 8001afc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b00:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8001b02:	481b      	ldr	r0, [pc, #108]	; (8001b70 <UB_VGA_Screen_Init+0x8c>)
 8001b04:	f001 fc11 	bl	800332a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001b08:	210c      	movs	r1, #12
 8001b0a:	4819      	ldr	r0, [pc, #100]	; (8001b70 <UB_VGA_Screen_Init+0x8c>)
 8001b0c:	f001 fc5c 	bl	80033c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001b10:	2108      	movs	r1, #8
 8001b12:	4817      	ldr	r0, [pc, #92]	; (8001b70 <UB_VGA_Screen_Init+0x8c>)
 8001b14:	f001 fc96 	bl	8003444 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <UB_VGA_Screen_Init+0x90>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <UB_VGA_Screen_Init+0x90>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b26:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <UB_VGA_Screen_Init+0x90>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <UB_VGA_Screen_Init+0x90>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001b38:	490f      	ldr	r1, [pc, #60]	; (8001b78 <UB_VGA_Screen_Init+0x94>)
 8001b3a:	f240 1341 	movw	r3, #321	; 0x141
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	; (8001b7c <UB_VGA_Screen_Init+0x98>)
 8001b40:	480f      	ldr	r0, [pc, #60]	; (8001b80 <UB_VGA_Screen_Init+0x9c>)
 8001b42:	f000 fa9f 	bl	8002084 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8001b46:	480e      	ldr	r0, [pc, #56]	; (8001b80 <UB_VGA_Screen_Init+0x9c>)
 8001b48:	f000 f9ee 	bl	8001f28 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <UB_VGA_Screen_Init+0x9c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <UB_VGA_Screen_Init+0x9c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0210 	orr.w	r2, r2, #16
 8001b5a:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <UB_VGA_Screen_Init+0xa0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a01      	ldr	r2, [pc, #4]	; (8001b68 <UB_VGA_Screen_Init+0x84>)
 8001b62:	6093      	str	r3, [r2, #8]
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200134c8 	.word	0x200134c8
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	200006f8 	.word	0x200006f8
 8001b74:	200006b8 	.word	0x200006b8
 8001b78:	200007d8 	.word	0x200007d8
 8001b7c:	40021015 	.word	0x40021015
 8001b80:	20000738 	.word	0x20000738
 8001b84:	40026488 	.word	0x40026488

08001b88 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	81bb      	strh	r3, [r7, #12]
 8001b96:	e012      	b.n	8001bbe <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001b98:	2300      	movs	r3, #0
 8001b9a:	81fb      	strh	r3, [r7, #14]
 8001b9c:	e008      	b.n	8001bb0 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001b9e:	79fa      	ldrb	r2, [r7, #7]
 8001ba0:	89b9      	ldrh	r1, [r7, #12]
 8001ba2:	89fb      	ldrh	r3, [r7, #14]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 f813 	bl	8001bd0 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001baa:	89fb      	ldrh	r3, [r7, #14]
 8001bac:	3301      	adds	r3, #1
 8001bae:	81fb      	strh	r3, [r7, #14]
 8001bb0:	89fb      	ldrh	r3, [r7, #14]
 8001bb2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001bb6:	d3f2      	bcc.n	8001b9e <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001bb8:	89bb      	ldrh	r3, [r7, #12]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	81bb      	strh	r3, [r7, #12]
 8001bbe:	89bb      	ldrh	r3, [r7, #12]
 8001bc0:	2bef      	cmp	r3, #239	; 0xef
 8001bc2:	d9e9      	bls.n	8001b98 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80fb      	strh	r3, [r7, #6]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	80bb      	strh	r3, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001be8:	d301      	bcc.n	8001bee <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001bee:	88bb      	ldrh	r3, [r7, #4]
 8001bf0:	2bef      	cmp	r3, #239	; 0xef
 8001bf2:	d901      	bls.n	8001bf8 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001bf8:	88ba      	ldrh	r2, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	019b      	lsls	r3, r3, #6
 8001c02:	441a      	add	r2, r3
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	4413      	add	r3, r2
 8001c08:	4904      	ldr	r1, [pc, #16]	; (8001c1c <UB_VGA_SetPixel+0x4c>)
 8001c0a:	78fa      	ldrb	r2, [r7, #3]
 8001c0c:	54ca      	strb	r2, [r1, r3]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	200007d8 	.word	0x200007d8

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <HAL_Init+0x40>)
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_Init+0x40>)
 8001c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_Init+0x40>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 f92b 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fb44 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f943 	bl	8001f0e <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f000 f90b 	bl	8001eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2000017c 	.word	0x2000017c
 8001cbc:	20000184 	.word	0x20000184
 8001cc0:	20000180 	.word	0x20000180

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000184 	.word	0x20000184
 8001ce8:	200134d4 	.word	0x200134d4

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	200134d4 	.word	0x200134d4

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d36:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4907      	ldr	r1, [pc, #28]	; (8001da0 <__NVIC_EnableIRQ+0x38>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f7ff ff8e 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff29 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ecc:	f7ff ff3e 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f7ff ff8e 	bl	8001df8 <NVIC_EncodePriority>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff5d 	bl	8001da4 <__NVIC_SetPriority>
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff31 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffa2 	bl	8001e60 <SysTick_Config>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff feda 	bl	8001cec <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e099      	b.n	8002078 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f64:	e00f      	b.n	8001f86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f66:	f7ff fec1 	bl	8001cec <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d908      	bls.n	8001f86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e078      	b.n	8002078 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1e8      	bne.n	8001f66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	4b38      	ldr	r3, [pc, #224]	; (8002080 <HAL_DMA_Init+0x158>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d107      	bne.n	8001ff0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f023 0307 	bic.w	r3, r3, #7
 8002006:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	4313      	orrs	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	2b04      	cmp	r3, #4
 8002018:	d117      	bne.n	800204a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00e      	beq.n	800204a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fa91 	bl	8002554 <DMA_CheckFifoParam>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2240      	movs	r2, #64	; 0x40
 800203c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002046:	2301      	movs	r3, #1
 8002048:	e016      	b.n	8002078 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fa48 	bl	80024e8 <DMA_CalcBaseAndBitshift>
 8002058:	4603      	mov	r3, r0
 800205a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002060:	223f      	movs	r2, #63	; 0x3f
 8002062:	409a      	lsls	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	f010803f 	.word	0xf010803f

08002084 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_DMA_Start_IT+0x26>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e040      	b.n	800212c <HAL_DMA_Start_IT+0xa8>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d12f      	bne.n	800211e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2202      	movs	r2, #2
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f9da 	bl	800248c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	223f      	movs	r2, #63	; 0x3f
 80020de:	409a      	lsls	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0216 	orr.w	r2, r2, #22
 80020f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0208 	orr.w	r2, r2, #8
 800210a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	e005      	b.n	800212a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002126:	2302      	movs	r3, #2
 8002128:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800212a:	7dfb      	ldrb	r3, [r7, #23]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d004      	beq.n	8002152 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2280      	movs	r2, #128	; 0x80
 800214c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e00c      	b.n	800216c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2205      	movs	r2, #5
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002184:	4b8e      	ldr	r3, [pc, #568]	; (80023c0 <HAL_DMA_IRQHandler+0x248>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a8e      	ldr	r2, [pc, #568]	; (80023c4 <HAL_DMA_IRQHandler+0x24c>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	0a9b      	lsrs	r3, r3, #10
 8002190:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	2208      	movs	r2, #8
 80021a4:	409a      	lsls	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d01a      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d013      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0204 	bic.w	r2, r2, #4
 80021ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d0:	2208      	movs	r2, #8
 80021d2:	409a      	lsls	r2, r3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	2201      	movs	r2, #1
 80021ea:	409a      	lsls	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d012      	beq.n	800221a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002206:	2201      	movs	r2, #1
 8002208:	409a      	lsls	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	f043 0202 	orr.w	r2, r3, #2
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	2204      	movs	r2, #4
 8002220:	409a      	lsls	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d012      	beq.n	8002250 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00b      	beq.n	8002250 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223c:	2204      	movs	r2, #4
 800223e:	409a      	lsls	r2, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002248:	f043 0204 	orr.w	r2, r3, #4
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	2210      	movs	r2, #16
 8002256:	409a      	lsls	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d043      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d03c      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	2210      	movs	r2, #16
 8002274:	409a      	lsls	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d018      	beq.n	80022ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d108      	bne.n	80022a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d024      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4798      	blx	r3
 80022a6:	e01f      	b.n	80022e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01b      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
 80022b8:	e016      	b.n	80022e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0208 	bic.w	r2, r2, #8
 80022d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ec:	2220      	movs	r2, #32
 80022ee:	409a      	lsls	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 808f 	beq.w	8002418 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 8087 	beq.w	8002418 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	2220      	movs	r2, #32
 8002310:	409a      	lsls	r2, r3
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b05      	cmp	r3, #5
 8002320:	d136      	bne.n	8002390 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0216 	bic.w	r2, r2, #22
 8002330:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002340:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d103      	bne.n	8002352 <HAL_DMA_IRQHandler+0x1da>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234e:	2b00      	cmp	r3, #0
 8002350:	d007      	beq.n	8002362 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0208 	bic.w	r2, r2, #8
 8002360:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	223f      	movs	r2, #63	; 0x3f
 8002368:	409a      	lsls	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002382:	2b00      	cmp	r3, #0
 8002384:	d07e      	beq.n	8002484 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	4798      	blx	r3
        }
        return;
 800238e:	e079      	b.n	8002484 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d01d      	beq.n	80023da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10d      	bne.n	80023c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d031      	beq.n	8002418 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
 80023bc:	e02c      	b.n	8002418 <HAL_DMA_IRQHandler+0x2a0>
 80023be:	bf00      	nop
 80023c0:	2000017c 	.word	0x2000017c
 80023c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d023      	beq.n	8002418 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4798      	blx	r3
 80023d8:	e01e      	b.n	8002418 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10f      	bne.n	8002408 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0210 	bic.w	r2, r2, #16
 80023f6:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	2b00      	cmp	r3, #0
 800241e:	d032      	beq.n	8002486 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d022      	beq.n	8002472 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2205      	movs	r2, #5
 8002430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	3301      	adds	r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	429a      	cmp	r2, r3
 800244e:	d307      	bcc.n	8002460 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f2      	bne.n	8002444 <HAL_DMA_IRQHandler+0x2cc>
 800245e:	e000      	b.n	8002462 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002460:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
 8002482:	e000      	b.n	8002486 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002484:	bf00      	nop
    }
  }
}
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b40      	cmp	r3, #64	; 0x40
 80024b8:	d108      	bne.n	80024cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024ca:	e007      	b.n	80024dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	60da      	str	r2, [r3, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	3b10      	subs	r3, #16
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <DMA_CalcBaseAndBitshift+0x64>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002502:	4a13      	ldr	r2, [pc, #76]	; (8002550 <DMA_CalcBaseAndBitshift+0x68>)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d909      	bls.n	800252a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	1d1a      	adds	r2, r3, #4
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	659a      	str	r2, [r3, #88]	; 0x58
 8002528:	e007      	b.n	800253a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002532:	f023 0303 	bic.w	r3, r3, #3
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	aaaaaaab 	.word	0xaaaaaaab
 8002550:	08007dfc 	.word	0x08007dfc

08002554 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d11f      	bne.n	80025ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d856      	bhi.n	8002622 <DMA_CheckFifoParam+0xce>
 8002574:	a201      	add	r2, pc, #4	; (adr r2, 800257c <DMA_CheckFifoParam+0x28>)
 8002576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257a:	bf00      	nop
 800257c:	0800258d 	.word	0x0800258d
 8002580:	0800259f 	.word	0x0800259f
 8002584:	0800258d 	.word	0x0800258d
 8002588:	08002623 	.word	0x08002623
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d046      	beq.n	8002626 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259c:	e043      	b.n	8002626 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025a6:	d140      	bne.n	800262a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ac:	e03d      	b.n	800262a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b6:	d121      	bne.n	80025fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d837      	bhi.n	800262e <DMA_CheckFifoParam+0xda>
 80025be:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <DMA_CheckFifoParam+0x70>)
 80025c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c4:	080025d5 	.word	0x080025d5
 80025c8:	080025db 	.word	0x080025db
 80025cc:	080025d5 	.word	0x080025d5
 80025d0:	080025ed 	.word	0x080025ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      break;
 80025d8:	e030      	b.n	800263c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d025      	beq.n	8002632 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ea:	e022      	b.n	8002632 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025f4:	d11f      	bne.n	8002636 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025fa:	e01c      	b.n	8002636 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d903      	bls.n	800260a <DMA_CheckFifoParam+0xb6>
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d003      	beq.n	8002610 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002608:	e018      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
      break;
 800260e:	e015      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e00b      	b.n	800263a <DMA_CheckFifoParam+0xe6>
      break;
 8002622:	bf00      	nop
 8002624:	e00a      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 8002626:	bf00      	nop
 8002628:	e008      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 800262a:	bf00      	nop
 800262c:	e006      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 800262e:	bf00      	nop
 8002630:	e004      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 8002632:	bf00      	nop
 8002634:	e002      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;   
 8002636:	bf00      	nop
 8002638:	e000      	b.n	800263c <DMA_CheckFifoParam+0xe8>
      break;
 800263a:	bf00      	nop
    }
  } 
  
  return status; 
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop

0800264c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800264c:	b480      	push	{r7}
 800264e:	b089      	sub	sp, #36	; 0x24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	e16b      	b.n	8002940 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002668:	2201      	movs	r2, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	429a      	cmp	r2, r3
 8002682:	f040 815a 	bne.w	800293a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d00b      	beq.n	80026a6 <HAL_GPIO_Init+0x5a>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d007      	beq.n	80026a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800269a:	2b11      	cmp	r3, #17
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b12      	cmp	r3, #18
 80026a4:	d130      	bne.n	8002708 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2203      	movs	r2, #3
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 0201 	and.w	r2, r3, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0xfc>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b12      	cmp	r3, #18
 8002746:	d123      	bne.n	8002790 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	08da      	lsrs	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3208      	adds	r2, #8
 8002750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	220f      	movs	r2, #15
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	08da      	lsrs	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3208      	adds	r2, #8
 800278a:	69b9      	ldr	r1, [r7, #24]
 800278c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0203 	and.w	r2, r3, #3
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80b4 	beq.w	800293a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	4b60      	ldr	r3, [pc, #384]	; (8002958 <HAL_GPIO_Init+0x30c>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	4a5f      	ldr	r2, [pc, #380]	; (8002958 <HAL_GPIO_Init+0x30c>)
 80027dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e0:	6453      	str	r3, [r2, #68]	; 0x44
 80027e2:	4b5d      	ldr	r3, [pc, #372]	; (8002958 <HAL_GPIO_Init+0x30c>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ee:	4a5b      	ldr	r2, [pc, #364]	; (800295c <HAL_GPIO_Init+0x310>)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	3302      	adds	r3, #2
 80027f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	220f      	movs	r2, #15
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a52      	ldr	r2, [pc, #328]	; (8002960 <HAL_GPIO_Init+0x314>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d02b      	beq.n	8002872 <HAL_GPIO_Init+0x226>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a51      	ldr	r2, [pc, #324]	; (8002964 <HAL_GPIO_Init+0x318>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d025      	beq.n	800286e <HAL_GPIO_Init+0x222>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a50      	ldr	r2, [pc, #320]	; (8002968 <HAL_GPIO_Init+0x31c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d01f      	beq.n	800286a <HAL_GPIO_Init+0x21e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4f      	ldr	r2, [pc, #316]	; (800296c <HAL_GPIO_Init+0x320>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d019      	beq.n	8002866 <HAL_GPIO_Init+0x21a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4e      	ldr	r2, [pc, #312]	; (8002970 <HAL_GPIO_Init+0x324>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_GPIO_Init+0x216>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4d      	ldr	r2, [pc, #308]	; (8002974 <HAL_GPIO_Init+0x328>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00d      	beq.n	800285e <HAL_GPIO_Init+0x212>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4c      	ldr	r2, [pc, #304]	; (8002978 <HAL_GPIO_Init+0x32c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d007      	beq.n	800285a <HAL_GPIO_Init+0x20e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4b      	ldr	r2, [pc, #300]	; (800297c <HAL_GPIO_Init+0x330>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d101      	bne.n	8002856 <HAL_GPIO_Init+0x20a>
 8002852:	2307      	movs	r3, #7
 8002854:	e00e      	b.n	8002874 <HAL_GPIO_Init+0x228>
 8002856:	2308      	movs	r3, #8
 8002858:	e00c      	b.n	8002874 <HAL_GPIO_Init+0x228>
 800285a:	2306      	movs	r3, #6
 800285c:	e00a      	b.n	8002874 <HAL_GPIO_Init+0x228>
 800285e:	2305      	movs	r3, #5
 8002860:	e008      	b.n	8002874 <HAL_GPIO_Init+0x228>
 8002862:	2304      	movs	r3, #4
 8002864:	e006      	b.n	8002874 <HAL_GPIO_Init+0x228>
 8002866:	2303      	movs	r3, #3
 8002868:	e004      	b.n	8002874 <HAL_GPIO_Init+0x228>
 800286a:	2302      	movs	r3, #2
 800286c:	e002      	b.n	8002874 <HAL_GPIO_Init+0x228>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_GPIO_Init+0x228>
 8002872:	2300      	movs	r3, #0
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	f002 0203 	and.w	r2, r2, #3
 800287a:	0092      	lsls	r2, r2, #2
 800287c:	4093      	lsls	r3, r2
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002884:	4935      	ldr	r1, [pc, #212]	; (800295c <HAL_GPIO_Init+0x310>)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	3302      	adds	r3, #2
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002892:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <HAL_GPIO_Init+0x334>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028b6:	4a32      	ldr	r2, [pc, #200]	; (8002980 <HAL_GPIO_Init+0x334>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028bc:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_GPIO_Init+0x334>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028e0:	4a27      	ldr	r2, [pc, #156]	; (8002980 <HAL_GPIO_Init+0x334>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028e6:	4b26      	ldr	r3, [pc, #152]	; (8002980 <HAL_GPIO_Init+0x334>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800290a:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <HAL_GPIO_Init+0x334>)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <HAL_GPIO_Init+0x334>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002934:	4a12      	ldr	r2, [pc, #72]	; (8002980 <HAL_GPIO_Init+0x334>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3301      	adds	r3, #1
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	2b0f      	cmp	r3, #15
 8002944:	f67f ae90 	bls.w	8002668 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800
 800295c:	40013800 	.word	0x40013800
 8002960:	40020000 	.word	0x40020000
 8002964:	40020400 	.word	0x40020400
 8002968:	40020800 	.word	0x40020800
 800296c:	40020c00 	.word	0x40020c00
 8002970:	40021000 	.word	0x40021000
 8002974:	40021400 	.word	0x40021400
 8002978:	40021800 	.word	0x40021800
 800297c:	40021c00 	.word	0x40021c00
 8002980:	40013c00 	.word	0x40013c00

08002984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
 8002990:	4613      	mov	r3, r2
 8002992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002994:	787b      	ldrb	r3, [r7, #1]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800299a:	887a      	ldrh	r2, [r7, #2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029a0:	e003      	b.n	80029aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029a2:	887b      	ldrh	r3, [r7, #2]
 80029a4:	041a      	lsls	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	619a      	str	r2, [r3, #24]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e25e      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d075      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029d6:	4b88      	ldr	r3, [pc, #544]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d00c      	beq.n	80029fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e2:	4b85      	ldr	r3, [pc, #532]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d112      	bne.n	8002a14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ee:	4b82      	ldr	r3, [pc, #520]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029fa:	d10b      	bne.n	8002a14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	4b7e      	ldr	r3, [pc, #504]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d05b      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x108>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d157      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e239      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1c:	d106      	bne.n	8002a2c <HAL_RCC_OscConfig+0x74>
 8002a1e:	4b76      	ldr	r3, [pc, #472]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a75      	ldr	r2, [pc, #468]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e01d      	b.n	8002a68 <HAL_RCC_OscConfig+0xb0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x98>
 8002a36:	4b70      	ldr	r3, [pc, #448]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a6f      	ldr	r2, [pc, #444]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b6d      	ldr	r3, [pc, #436]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6c      	ldr	r2, [pc, #432]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0xb0>
 8002a50:	4b69      	ldr	r3, [pc, #420]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a68      	ldr	r2, [pc, #416]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b66      	ldr	r3, [pc, #408]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a65      	ldr	r2, [pc, #404]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7ff f93c 	bl	8001cec <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a78:	f7ff f938 	bl	8001cec <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e1fe      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b5b      	ldr	r3, [pc, #364]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0xc0>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7ff f928 	bl	8001cec <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7ff f924 	bl	8001cec <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1ea      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	4b51      	ldr	r3, [pc, #324]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0xe8>
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d063      	beq.n	8002b96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ace:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ada:	4b47      	ldr	r3, [pc, #284]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d11c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae6:	4b44      	ldr	r3, [pc, #272]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	4b41      	ldr	r3, [pc, #260]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x152>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e1be      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4937      	ldr	r1, [pc, #220]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	e03a      	b.n	8002b96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b28:	4b34      	ldr	r3, [pc, #208]	; (8002bfc <HAL_RCC_OscConfig+0x244>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7ff f8dd 	bl	8001cec <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b36:	f7ff f8d9 	bl	8001cec <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e19f      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b54:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4925      	ldr	r1, [pc, #148]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
 8002b68:	e015      	b.n	8002b96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <HAL_RCC_OscConfig+0x244>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7ff f8bc 	bl	8001cec <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b78:	f7ff f8b8 	bl	8001cec <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e17e      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d036      	beq.n	8002c10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d016      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_RCC_OscConfig+0x248>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7ff f89c 	bl	8001cec <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7ff f898 	bl	8001cec <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e15e      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x200>
 8002bd6:	e01b      	b.n	8002c10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_OscConfig+0x248>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bde:	f7ff f885 	bl	8001cec <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be4:	e00e      	b.n	8002c04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be6:	f7ff f881 	bl	8001cec <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d907      	bls.n	8002c04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e147      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	42470000 	.word	0x42470000
 8002c00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c04:	4b88      	ldr	r3, [pc, #544]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ea      	bne.n	8002be6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8097 	beq.w	8002d4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c22:	4b81      	ldr	r3, [pc, #516]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10f      	bne.n	8002c4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	4b7d      	ldr	r3, [pc, #500]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	4a7c      	ldr	r2, [pc, #496]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3e:	4b7a      	ldr	r3, [pc, #488]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b77      	ldr	r3, [pc, #476]	; (8002e2c <HAL_RCC_OscConfig+0x474>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d118      	bne.n	8002c8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5a:	4b74      	ldr	r3, [pc, #464]	; (8002e2c <HAL_RCC_OscConfig+0x474>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a73      	ldr	r2, [pc, #460]	; (8002e2c <HAL_RCC_OscConfig+0x474>)
 8002c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c66:	f7ff f841 	bl	8001cec <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6e:	f7ff f83d 	bl	8001cec <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e103      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	4b6a      	ldr	r3, [pc, #424]	; (8002e2c <HAL_RCC_OscConfig+0x474>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x2ea>
 8002c94:	4b64      	ldr	r3, [pc, #400]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	4a63      	ldr	r2, [pc, #396]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca0:	e01c      	b.n	8002cdc <HAL_RCC_OscConfig+0x324>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b05      	cmp	r3, #5
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x30c>
 8002caa:	4b5f      	ldr	r3, [pc, #380]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	4a5e      	ldr	r2, [pc, #376]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	f043 0304 	orr.w	r3, r3, #4
 8002cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb6:	4b5c      	ldr	r3, [pc, #368]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	4a5b      	ldr	r2, [pc, #364]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0x324>
 8002cc4:	4b58      	ldr	r3, [pc, #352]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	4a57      	ldr	r2, [pc, #348]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd0:	4b55      	ldr	r3, [pc, #340]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a54      	ldr	r2, [pc, #336]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002cd6:	f023 0304 	bic.w	r3, r3, #4
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d015      	beq.n	8002d10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7ff f802 	bl	8001cec <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cec:	f7fe fffe 	bl	8001cec <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0c2      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d02:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0ee      	beq.n	8002cec <HAL_RCC_OscConfig+0x334>
 8002d0e:	e014      	b.n	8002d3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d10:	f7fe ffec 	bl	8001cec <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7fe ffe8 	bl	8001cec <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e0ac      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2e:	4b3e      	ldr	r3, [pc, #248]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1ee      	bne.n	8002d18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d40:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	4a38      	ldr	r2, [pc, #224]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8098 	beq.w	8002e86 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d56:	4b34      	ldr	r3, [pc, #208]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d05c      	beq.n	8002e1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d141      	bne.n	8002dee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4b31      	ldr	r3, [pc, #196]	; (8002e30 <HAL_RCC_OscConfig+0x478>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7fe ffbc 	bl	8001cec <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe ffb8 	bl	8001cec <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e07e      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	019b      	lsls	r3, r3, #6
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	085b      	lsrs	r3, r3, #1
 8002dae:	3b01      	subs	r3, #1
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	061b      	lsls	r3, r3, #24
 8002dba:	491b      	ldr	r1, [pc, #108]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_RCC_OscConfig+0x478>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7fe ff91 	bl	8001cec <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dce:	f7fe ff8d 	bl	8001cec <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e053      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x416>
 8002dec:	e04b      	b.n	8002e86 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_RCC_OscConfig+0x478>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe ff7a 	bl	8001cec <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7fe ff76 	bl	8001cec <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e03c      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_RCC_OscConfig+0x470>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x444>
 8002e1a:	e034      	b.n	8002e86 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d107      	bne.n	8002e34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e02f      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40007000 	.word	0x40007000
 8002e30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e34:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d11c      	bne.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d115      	bne.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d10d      	bne.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d106      	bne.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d001      	beq.n	8002e86 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40023800 	.word	0x40023800

08002e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0cc      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b68      	ldr	r3, [pc, #416]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d90c      	bls.n	8002ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b65      	ldr	r3, [pc, #404]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b63      	ldr	r3, [pc, #396]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0b8      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d020      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee8:	4b59      	ldr	r3, [pc, #356]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a58      	ldr	r2, [pc, #352]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ef2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f00:	4b53      	ldr	r3, [pc, #332]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a52      	ldr	r2, [pc, #328]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0c:	4b50      	ldr	r3, [pc, #320]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	494d      	ldr	r1, [pc, #308]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d044      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f32:	4b47      	ldr	r3, [pc, #284]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d119      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e07f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f52:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e06f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f62:	4b3b      	ldr	r3, [pc, #236]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e067      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f72:	4b37      	ldr	r3, [pc, #220]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f023 0203 	bic.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4934      	ldr	r1, [pc, #208]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f84:	f7fe feb2 	bl	8001cec <HAL_GetTick>
 8002f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8c:	f7fe feae 	bl	8001cec <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e04f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	4b2b      	ldr	r3, [pc, #172]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 020c 	and.w	r2, r3, #12
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1eb      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b25      	ldr	r3, [pc, #148]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d20c      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b22      	ldr	r3, [pc, #136]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b20      	ldr	r3, [pc, #128]	; (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e032      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4916      	ldr	r1, [pc, #88]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d009      	beq.n	800301a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	490e      	ldr	r1, [pc, #56]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800301a:	f000 f821 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 800301e:	4602      	mov	r2, r0
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	490a      	ldr	r1, [pc, #40]	; (8003054 <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	5ccb      	ldrb	r3, [r1, r3]
 800302e:	fa22 f303 	lsr.w	r3, r2, r3
 8003032:	4a09      	ldr	r2, [pc, #36]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe fe12 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023c00 	.word	0x40023c00
 8003050:	40023800 	.word	0x40023800
 8003054:	08007de4 	.word	0x08007de4
 8003058:	2000017c 	.word	0x2000017c
 800305c:	20000180 	.word	0x20000180

08003060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003064:	b094      	sub	sp, #80	; 0x50
 8003066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	647b      	str	r3, [r7, #68]	; 0x44
 800306c:	2300      	movs	r3, #0
 800306e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003070:	2300      	movs	r3, #0
 8003072:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003078:	4b79      	ldr	r3, [pc, #484]	; (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b08      	cmp	r3, #8
 8003082:	d00d      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003084:	2b08      	cmp	r3, #8
 8003086:	f200 80e1 	bhi.w	800324c <HAL_RCC_GetSysClockFreq+0x1ec>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x34>
 800308e:	2b04      	cmp	r3, #4
 8003090:	d003      	beq.n	800309a <HAL_RCC_GetSysClockFreq+0x3a>
 8003092:	e0db      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003094:	4b73      	ldr	r3, [pc, #460]	; (8003264 <HAL_RCC_GetSysClockFreq+0x204>)
 8003096:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003098:	e0db      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800309a:	4b73      	ldr	r3, [pc, #460]	; (8003268 <HAL_RCC_GetSysClockFreq+0x208>)
 800309c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800309e:	e0d8      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a0:	4b6f      	ldr	r3, [pc, #444]	; (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030aa:	4b6d      	ldr	r3, [pc, #436]	; (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d063      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b6:	4b6a      	ldr	r3, [pc, #424]	; (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	099b      	lsrs	r3, r3, #6
 80030bc:	2200      	movs	r2, #0
 80030be:	63bb      	str	r3, [r7, #56]	; 0x38
 80030c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c8:	633b      	str	r3, [r7, #48]	; 0x30
 80030ca:	2300      	movs	r3, #0
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
 80030ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030d2:	4622      	mov	r2, r4
 80030d4:	462b      	mov	r3, r5
 80030d6:	f04f 0000 	mov.w	r0, #0
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	0159      	lsls	r1, r3, #5
 80030e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e4:	0150      	lsls	r0, r2, #5
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4621      	mov	r1, r4
 80030ec:	1a51      	subs	r1, r2, r1
 80030ee:	6139      	str	r1, [r7, #16]
 80030f0:	4629      	mov	r1, r5
 80030f2:	eb63 0301 	sbc.w	r3, r3, r1
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003104:	4659      	mov	r1, fp
 8003106:	018b      	lsls	r3, r1, #6
 8003108:	4651      	mov	r1, sl
 800310a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800310e:	4651      	mov	r1, sl
 8003110:	018a      	lsls	r2, r1, #6
 8003112:	4651      	mov	r1, sl
 8003114:	ebb2 0801 	subs.w	r8, r2, r1
 8003118:	4659      	mov	r1, fp
 800311a:	eb63 0901 	sbc.w	r9, r3, r1
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800312a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800312e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003132:	4690      	mov	r8, r2
 8003134:	4699      	mov	r9, r3
 8003136:	4623      	mov	r3, r4
 8003138:	eb18 0303 	adds.w	r3, r8, r3
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	462b      	mov	r3, r5
 8003140:	eb49 0303 	adc.w	r3, r9, r3
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003152:	4629      	mov	r1, r5
 8003154:	024b      	lsls	r3, r1, #9
 8003156:	4621      	mov	r1, r4
 8003158:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800315c:	4621      	mov	r1, r4
 800315e:	024a      	lsls	r2, r1, #9
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003166:	2200      	movs	r2, #0
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
 800316a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800316c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003170:	f7fd f896 	bl	80002a0 <__aeabi_uldivmod>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4613      	mov	r3, r2
 800317a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800317c:	e058      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317e:	4b38      	ldr	r3, [pc, #224]	; (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	099b      	lsrs	r3, r3, #6
 8003184:	2200      	movs	r2, #0
 8003186:	4618      	mov	r0, r3
 8003188:	4611      	mov	r1, r2
 800318a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800318e:	623b      	str	r3, [r7, #32]
 8003190:	2300      	movs	r3, #0
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
 8003194:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003198:	4642      	mov	r2, r8
 800319a:	464b      	mov	r3, r9
 800319c:	f04f 0000 	mov.w	r0, #0
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	0159      	lsls	r1, r3, #5
 80031a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031aa:	0150      	lsls	r0, r2, #5
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4641      	mov	r1, r8
 80031b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80031b6:	4649      	mov	r1, r9
 80031b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031d0:	ebb2 040a 	subs.w	r4, r2, sl
 80031d4:	eb63 050b 	sbc.w	r5, r3, fp
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	00eb      	lsls	r3, r5, #3
 80031e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031e6:	00e2      	lsls	r2, r4, #3
 80031e8:	4614      	mov	r4, r2
 80031ea:	461d      	mov	r5, r3
 80031ec:	4643      	mov	r3, r8
 80031ee:	18e3      	adds	r3, r4, r3
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	464b      	mov	r3, r9
 80031f4:	eb45 0303 	adc.w	r3, r5, r3
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003206:	4629      	mov	r1, r5
 8003208:	028b      	lsls	r3, r1, #10
 800320a:	4621      	mov	r1, r4
 800320c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003210:	4621      	mov	r1, r4
 8003212:	028a      	lsls	r2, r1, #10
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800321a:	2200      	movs	r2, #0
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	61fa      	str	r2, [r7, #28]
 8003220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003224:	f7fd f83c 	bl	80002a0 <__aeabi_uldivmod>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4613      	mov	r3, r2
 800322e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCC_GetSysClockFreq+0x200>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	0c1b      	lsrs	r3, r3, #16
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	3301      	adds	r3, #1
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003240:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800324a:	e002      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_RCC_GetSysClockFreq+0x204>)
 800324e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003254:	4618      	mov	r0, r3
 8003256:	3750      	adds	r7, #80	; 0x50
 8003258:	46bd      	mov	sp, r7
 800325a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800
 8003264:	00f42400 	.word	0x00f42400
 8003268:	007a1200 	.word	0x007a1200

0800326c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <HAL_RCC_GetHCLKFreq+0x14>)
 8003272:	681b      	ldr	r3, [r3, #0]
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	2000017c 	.word	0x2000017c

08003284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003288:	f7ff fff0 	bl	800326c <HAL_RCC_GetHCLKFreq>
 800328c:	4602      	mov	r2, r0
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	0a9b      	lsrs	r3, r3, #10
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	4903      	ldr	r1, [pc, #12]	; (80032a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800329a:	5ccb      	ldrb	r3, [r1, r3]
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40023800 	.word	0x40023800
 80032a8:	08007df4 	.word	0x08007df4

080032ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032b0:	f7ff ffdc 	bl	800326c <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0b5b      	lsrs	r3, r3, #13
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4903      	ldr	r1, [pc, #12]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	08007df4 	.word	0x08007df4

080032d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e01d      	b.n	8003322 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fe fa9e 	bl	800183c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3304      	adds	r3, #4
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f000 fbde 	bl	8003ad4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800332a:	b480      	push	{r7}
 800332c:	b085      	sub	sp, #20
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2202      	movs	r2, #2
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b06      	cmp	r3, #6
 800334a:	d007      	beq.n	800335c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e01d      	b.n	80033c0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d106      	bne.n	800339e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7fe faa1 	bl	80018e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3304      	adds	r3, #4
 80033ae:	4619      	mov	r1, r3
 80033b0:	4610      	mov	r0, r2
 80033b2:	f000 fb8f 	bl	8003ad4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2201      	movs	r2, #1
 80033d8:	6839      	ldr	r1, [r7, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fe64 	bl	80040a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a15      	ldr	r2, [pc, #84]	; (800343c <HAL_TIM_PWM_Start+0x74>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_TIM_PWM_Start+0x2c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a14      	ldr	r2, [pc, #80]	; (8003440 <HAL_TIM_PWM_Start+0x78>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d101      	bne.n	80033f8 <HAL_TIM_PWM_Start+0x30>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <HAL_TIM_PWM_Start+0x32>
 80033f8:	2300      	movs	r3, #0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b06      	cmp	r3, #6
 800341e:	d007      	beq.n	8003430 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40010000 	.word	0x40010000
 8003440:	40010400 	.word	0x40010400

08003444 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b0c      	cmp	r3, #12
 8003452:	d841      	bhi.n	80034d8 <HAL_TIM_PWM_Start_IT+0x94>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <HAL_TIM_PWM_Start_IT+0x18>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	08003491 	.word	0x08003491
 8003460:	080034d9 	.word	0x080034d9
 8003464:	080034d9 	.word	0x080034d9
 8003468:	080034d9 	.word	0x080034d9
 800346c:	080034a3 	.word	0x080034a3
 8003470:	080034d9 	.word	0x080034d9
 8003474:	080034d9 	.word	0x080034d9
 8003478:	080034d9 	.word	0x080034d9
 800347c:	080034b5 	.word	0x080034b5
 8003480:	080034d9 	.word	0x080034d9
 8003484:	080034d9 	.word	0x080034d9
 8003488:	080034d9 	.word	0x080034d9
 800348c:	080034c7 	.word	0x080034c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0202 	orr.w	r2, r2, #2
 800349e:	60da      	str	r2, [r3, #12]
      break;
 80034a0:	e01b      	b.n	80034da <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0204 	orr.w	r2, r2, #4
 80034b0:	60da      	str	r2, [r3, #12]
      break;
 80034b2:	e012      	b.n	80034da <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0208 	orr.w	r2, r2, #8
 80034c2:	60da      	str	r2, [r3, #12]
      break;
 80034c4:	e009      	b.n	80034da <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0210 	orr.w	r2, r2, #16
 80034d4:	60da      	str	r2, [r3, #12]
      break;
 80034d6:	e000      	b.n	80034da <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80034d8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2201      	movs	r2, #1
 80034e0:	6839      	ldr	r1, [r7, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fde0 	bl	80040a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a15      	ldr	r2, [pc, #84]	; (8003544 <HAL_TIM_PWM_Start_IT+0x100>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d004      	beq.n	80034fc <HAL_TIM_PWM_Start_IT+0xb8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a14      	ldr	r2, [pc, #80]	; (8003548 <HAL_TIM_PWM_Start_IT+0x104>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d101      	bne.n	8003500 <HAL_TIM_PWM_Start_IT+0xbc>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <HAL_TIM_PWM_Start_IT+0xbe>
 8003500:	2300      	movs	r3, #0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003514:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b06      	cmp	r3, #6
 8003526:	d007      	beq.n	8003538 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000
 8003548:	40010400 	.word	0x40010400

0800354c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b02      	cmp	r3, #2
 8003560:	d122      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b02      	cmp	r3, #2
 800356e:	d11b      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0202 	mvn.w	r2, #2
 8003578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fa82 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa74 	bl	8003a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fa85 	bl	8003aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d122      	bne.n	80035fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d11b      	bne.n	80035fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0204 	mvn.w	r2, #4
 80035cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fa58 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 80035e8:	e005      	b.n	80035f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fa4a 	bl	8003a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fa5b 	bl	8003aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b08      	cmp	r3, #8
 8003608:	d122      	bne.n	8003650 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b08      	cmp	r3, #8
 8003616:	d11b      	bne.n	8003650 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0208 	mvn.w	r2, #8
 8003620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2204      	movs	r2, #4
 8003626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fa2e 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 800363c:	e005      	b.n	800364a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa20 	bl	8003a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fa31 	bl	8003aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	2b10      	cmp	r3, #16
 800365c:	d122      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b10      	cmp	r3, #16
 800366a:	d11b      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0210 	mvn.w	r2, #16
 8003674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2208      	movs	r2, #8
 800367a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fa04 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 8003690:	e005      	b.n	800369e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f9f6 	bl	8003a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fa07 	bl	8003aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d10e      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d107      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0201 	mvn.w	r2, #1
 80036c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f9d0 	bl	8003a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036da:	2b80      	cmp	r3, #128	; 0x80
 80036dc:	d10e      	bne.n	80036fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e8:	2b80      	cmp	r3, #128	; 0x80
 80036ea:	d107      	bne.n	80036fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fd82 	bl	8004200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	2b40      	cmp	r3, #64	; 0x40
 8003708:	d10e      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003714:	2b40      	cmp	r3, #64	; 0x40
 8003716:	d107      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f9cc 	bl	8003ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b20      	cmp	r3, #32
 8003734:	d10e      	bne.n	8003754 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b20      	cmp	r3, #32
 8003742:	d107      	bne.n	8003754 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0220 	mvn.w	r2, #32
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fd4c 	bl	80041ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003772:	2302      	movs	r3, #2
 8003774:	e0b4      	b.n	80038e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b0c      	cmp	r3, #12
 800378a:	f200 809f 	bhi.w	80038cc <HAL_TIM_PWM_ConfigChannel+0x170>
 800378e:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037c9 	.word	0x080037c9
 8003798:	080038cd 	.word	0x080038cd
 800379c:	080038cd 	.word	0x080038cd
 80037a0:	080038cd 	.word	0x080038cd
 80037a4:	08003809 	.word	0x08003809
 80037a8:	080038cd 	.word	0x080038cd
 80037ac:	080038cd 	.word	0x080038cd
 80037b0:	080038cd 	.word	0x080038cd
 80037b4:	0800384b 	.word	0x0800384b
 80037b8:	080038cd 	.word	0x080038cd
 80037bc:	080038cd 	.word	0x080038cd
 80037c0:	080038cd 	.word	0x080038cd
 80037c4:	0800388b 	.word	0x0800388b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fa20 	bl	8003c14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0208 	orr.w	r2, r2, #8
 80037e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0204 	bic.w	r2, r2, #4
 80037f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6999      	ldr	r1, [r3, #24]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	619a      	str	r2, [r3, #24]
      break;
 8003806:	e062      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fa70 	bl	8003cf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699a      	ldr	r2, [r3, #24]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6999      	ldr	r1, [r3, #24]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	021a      	lsls	r2, r3, #8
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	619a      	str	r2, [r3, #24]
      break;
 8003848:	e041      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fac5 	bl	8003de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0208 	orr.w	r2, r2, #8
 8003864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69da      	ldr	r2, [r3, #28]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0204 	bic.w	r2, r2, #4
 8003874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69d9      	ldr	r1, [r3, #28]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	61da      	str	r2, [r3, #28]
      break;
 8003888:	e021      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fb19 	bl	8003ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69d9      	ldr	r1, [r3, #28]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	021a      	lsls	r2, r3, #8
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	61da      	str	r2, [r3, #28]
      break;
 80038ca:	e000      	b.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80038cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_TIM_ConfigClockSource+0x18>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0b3      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x180>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800391e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003926:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003938:	d03e      	beq.n	80039b8 <HAL_TIM_ConfigClockSource+0xd0>
 800393a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393e:	f200 8087 	bhi.w	8003a50 <HAL_TIM_ConfigClockSource+0x168>
 8003942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003946:	f000 8085 	beq.w	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 800394a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394e:	d87f      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x168>
 8003950:	2b70      	cmp	r3, #112	; 0x70
 8003952:	d01a      	beq.n	800398a <HAL_TIM_ConfigClockSource+0xa2>
 8003954:	2b70      	cmp	r3, #112	; 0x70
 8003956:	d87b      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x168>
 8003958:	2b60      	cmp	r3, #96	; 0x60
 800395a:	d050      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0x116>
 800395c:	2b60      	cmp	r3, #96	; 0x60
 800395e:	d877      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x168>
 8003960:	2b50      	cmp	r3, #80	; 0x50
 8003962:	d03c      	beq.n	80039de <HAL_TIM_ConfigClockSource+0xf6>
 8003964:	2b50      	cmp	r3, #80	; 0x50
 8003966:	d873      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x168>
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d058      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x136>
 800396c:	2b40      	cmp	r3, #64	; 0x40
 800396e:	d86f      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x168>
 8003970:	2b30      	cmp	r3, #48	; 0x30
 8003972:	d064      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x156>
 8003974:	2b30      	cmp	r3, #48	; 0x30
 8003976:	d86b      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x168>
 8003978:	2b20      	cmp	r3, #32
 800397a:	d060      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x156>
 800397c:	2b20      	cmp	r3, #32
 800397e:	d867      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x168>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d05c      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x156>
 8003984:	2b10      	cmp	r3, #16
 8003986:	d05a      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003988:	e062      	b.n	8003a50 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6899      	ldr	r1, [r3, #8]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f000 fb65 	bl	8004068 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	609a      	str	r2, [r3, #8]
      break;
 80039b6:	e04e      	b.n	8003a56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6899      	ldr	r1, [r3, #8]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f000 fb4e 	bl	8004068 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039da:	609a      	str	r2, [r3, #8]
      break;
 80039dc:	e03b      	b.n	8003a56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6859      	ldr	r1, [r3, #4]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	461a      	mov	r2, r3
 80039ec:	f000 fac2 	bl	8003f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2150      	movs	r1, #80	; 0x50
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fb1b 	bl	8004032 <TIM_ITRx_SetConfig>
      break;
 80039fc:	e02b      	b.n	8003a56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f000 fae1 	bl	8003fd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2160      	movs	r1, #96	; 0x60
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fb0b 	bl	8004032 <TIM_ITRx_SetConfig>
      break;
 8003a1c:	e01b      	b.n	8003a56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f000 faa2 	bl	8003f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2140      	movs	r1, #64	; 0x40
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fafb 	bl	8004032 <TIM_ITRx_SetConfig>
      break;
 8003a3c:	e00b      	b.n	8003a56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4619      	mov	r1, r3
 8003a48:	4610      	mov	r0, r2
 8003a4a:	f000 faf2 	bl	8004032 <TIM_ITRx_SetConfig>
      break;
 8003a4e:	e002      	b.n	8003a56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a50:	bf00      	nop
 8003a52:	e000      	b.n	8003a56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a40      	ldr	r2, [pc, #256]	; (8003be8 <TIM_Base_SetConfig+0x114>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d013      	beq.n	8003b14 <TIM_Base_SetConfig+0x40>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af2:	d00f      	beq.n	8003b14 <TIM_Base_SetConfig+0x40>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a3d      	ldr	r2, [pc, #244]	; (8003bec <TIM_Base_SetConfig+0x118>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00b      	beq.n	8003b14 <TIM_Base_SetConfig+0x40>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a3c      	ldr	r2, [pc, #240]	; (8003bf0 <TIM_Base_SetConfig+0x11c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d007      	beq.n	8003b14 <TIM_Base_SetConfig+0x40>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a3b      	ldr	r2, [pc, #236]	; (8003bf4 <TIM_Base_SetConfig+0x120>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <TIM_Base_SetConfig+0x40>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a3a      	ldr	r2, [pc, #232]	; (8003bf8 <TIM_Base_SetConfig+0x124>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d108      	bne.n	8003b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a2f      	ldr	r2, [pc, #188]	; (8003be8 <TIM_Base_SetConfig+0x114>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d02b      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b34:	d027      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a2c      	ldr	r2, [pc, #176]	; (8003bec <TIM_Base_SetConfig+0x118>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d023      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2b      	ldr	r2, [pc, #172]	; (8003bf0 <TIM_Base_SetConfig+0x11c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01f      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2a      	ldr	r2, [pc, #168]	; (8003bf4 <TIM_Base_SetConfig+0x120>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01b      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a29      	ldr	r2, [pc, #164]	; (8003bf8 <TIM_Base_SetConfig+0x124>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d017      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a28      	ldr	r2, [pc, #160]	; (8003bfc <TIM_Base_SetConfig+0x128>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <TIM_Base_SetConfig+0x12c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00f      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a26      	ldr	r2, [pc, #152]	; (8003c04 <TIM_Base_SetConfig+0x130>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00b      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a25      	ldr	r2, [pc, #148]	; (8003c08 <TIM_Base_SetConfig+0x134>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d007      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a24      	ldr	r2, [pc, #144]	; (8003c0c <TIM_Base_SetConfig+0x138>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a23      	ldr	r2, [pc, #140]	; (8003c10 <TIM_Base_SetConfig+0x13c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d108      	bne.n	8003b98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a0a      	ldr	r2, [pc, #40]	; (8003be8 <TIM_Base_SetConfig+0x114>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_Base_SetConfig+0xf8>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a0c      	ldr	r2, [pc, #48]	; (8003bf8 <TIM_Base_SetConfig+0x124>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d103      	bne.n	8003bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	615a      	str	r2, [r3, #20]
}
 8003bda:	bf00      	nop
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40010000 	.word	0x40010000
 8003bec:	40000400 	.word	0x40000400
 8003bf0:	40000800 	.word	0x40000800
 8003bf4:	40000c00 	.word	0x40000c00
 8003bf8:	40010400 	.word	0x40010400
 8003bfc:	40014000 	.word	0x40014000
 8003c00:	40014400 	.word	0x40014400
 8003c04:	40014800 	.word	0x40014800
 8003c08:	40001800 	.word	0x40001800
 8003c0c:	40001c00 	.word	0x40001c00
 8003c10:	40002000 	.word	0x40002000

08003c14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f023 0201 	bic.w	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0303 	bic.w	r3, r3, #3
 8003c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f023 0302 	bic.w	r3, r3, #2
 8003c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a20      	ldr	r2, [pc, #128]	; (8003cec <TIM_OC1_SetConfig+0xd8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d003      	beq.n	8003c78 <TIM_OC1_SetConfig+0x64>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a1f      	ldr	r2, [pc, #124]	; (8003cf0 <TIM_OC1_SetConfig+0xdc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d10c      	bne.n	8003c92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f023 0308 	bic.w	r3, r3, #8
 8003c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f023 0304 	bic.w	r3, r3, #4
 8003c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a15      	ldr	r2, [pc, #84]	; (8003cec <TIM_OC1_SetConfig+0xd8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d003      	beq.n	8003ca2 <TIM_OC1_SetConfig+0x8e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a14      	ldr	r2, [pc, #80]	; (8003cf0 <TIM_OC1_SetConfig+0xdc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d111      	bne.n	8003cc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	621a      	str	r2, [r3, #32]
}
 8003ce0:	bf00      	nop
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	40010000 	.word	0x40010000
 8003cf0:	40010400 	.word	0x40010400

08003cf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f023 0210 	bic.w	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f023 0320 	bic.w	r3, r3, #32
 8003d3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a22      	ldr	r2, [pc, #136]	; (8003dd8 <TIM_OC2_SetConfig+0xe4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <TIM_OC2_SetConfig+0x68>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a21      	ldr	r2, [pc, #132]	; (8003ddc <TIM_OC2_SetConfig+0xe8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d10d      	bne.n	8003d78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <TIM_OC2_SetConfig+0xe4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_OC2_SetConfig+0x94>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a16      	ldr	r2, [pc, #88]	; (8003ddc <TIM_OC2_SetConfig+0xe8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d113      	bne.n	8003db0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40010000 	.word	0x40010000
 8003ddc:	40010400 	.word	0x40010400

08003de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0303 	bic.w	r3, r3, #3
 8003e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	021b      	lsls	r3, r3, #8
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a21      	ldr	r2, [pc, #132]	; (8003ec0 <TIM_OC3_SetConfig+0xe0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <TIM_OC3_SetConfig+0x66>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a20      	ldr	r2, [pc, #128]	; (8003ec4 <TIM_OC3_SetConfig+0xe4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d10d      	bne.n	8003e62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a16      	ldr	r2, [pc, #88]	; (8003ec0 <TIM_OC3_SetConfig+0xe0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d003      	beq.n	8003e72 <TIM_OC3_SetConfig+0x92>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a15      	ldr	r2, [pc, #84]	; (8003ec4 <TIM_OC3_SetConfig+0xe4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d113      	bne.n	8003e9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	621a      	str	r2, [r3, #32]
}
 8003eb4:	bf00      	nop
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	40010400 	.word	0x40010400

08003ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	031b      	lsls	r3, r3, #12
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a12      	ldr	r2, [pc, #72]	; (8003f6c <TIM_OC4_SetConfig+0xa4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <TIM_OC4_SetConfig+0x68>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a11      	ldr	r2, [pc, #68]	; (8003f70 <TIM_OC4_SetConfig+0xa8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d109      	bne.n	8003f44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	019b      	lsls	r3, r3, #6
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	621a      	str	r2, [r3, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40010000 	.word	0x40010000
 8003f70:	40010400 	.word	0x40010400

08003f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f023 0201 	bic.w	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f023 030a 	bic.w	r3, r3, #10
 8003fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b087      	sub	sp, #28
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f023 0210 	bic.w	r2, r3, #16
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ffc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	031b      	lsls	r3, r3, #12
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800400e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004032:	b480      	push	{r7}
 8004034:	b085      	sub	sp, #20
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	f043 0307 	orr.w	r3, r3, #7
 8004054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	609a      	str	r2, [r3, #8]
}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	021a      	lsls	r2, r3, #8
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	431a      	orrs	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4313      	orrs	r3, r2
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	609a      	str	r2, [r3, #8]
}
 800409c:	bf00      	nop
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	2201      	movs	r2, #1
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1a      	ldr	r2, [r3, #32]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	401a      	ands	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1a      	ldr	r2, [r3, #32]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	fa01 f303 	lsl.w	r3, r1, r3
 80040e0:	431a      	orrs	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	621a      	str	r2, [r3, #32]
}
 80040e6:	bf00      	nop
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004108:	2302      	movs	r3, #2
 800410a:	e05a      	b.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a21      	ldr	r2, [pc, #132]	; (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d022      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004158:	d01d      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1d      	ldr	r2, [pc, #116]	; (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d018      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1b      	ldr	r2, [pc, #108]	; (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1a      	ldr	r2, [pc, #104]	; (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00e      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d009      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a17      	ldr	r2, [pc, #92]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d004      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a15      	ldr	r2, [pc, #84]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d10c      	bne.n	80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800419c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40000400 	.word	0x40000400
 80041d8:	40000800 	.word	0x40000800
 80041dc:	40000c00 	.word	0x40000c00
 80041e0:	40010400 	.word	0x40010400
 80041e4:	40014000 	.word	0x40014000
 80041e8:	40001800 	.word	0x40001800

080041ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e03f      	b.n	80042a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fd fbd8 	bl	80019f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2224      	movs	r2, #36	; 0x24
 8004244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fba1 	bl	80049a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800426c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695a      	ldr	r2, [r3, #20]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800427c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800428c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b088      	sub	sp, #32
 80042b2:	af02      	add	r7, sp, #8
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	603b      	str	r3, [r7, #0]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	f040 8083 	bne.w	80043d6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UART_Transmit+0x2e>
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e07b      	b.n	80043d8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Transmit+0x40>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e074      	b.n	80043d8 <HAL_UART_Transmit+0x12a>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2221      	movs	r2, #33	; 0x21
 8004300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004304:	f7fd fcf2 	bl	8001cec <HAL_GetTick>
 8004308:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	88fa      	ldrh	r2, [r7, #6]
 800430e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	88fa      	ldrh	r2, [r7, #6]
 8004314:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800431e:	e042      	b.n	80043a6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004336:	d122      	bne.n	800437e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2200      	movs	r2, #0
 8004340:	2180      	movs	r1, #128	; 0x80
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f9c0 	bl	80046c8 <UART_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e042      	b.n	80043d8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004364:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	3302      	adds	r3, #2
 8004372:	60bb      	str	r3, [r7, #8]
 8004374:	e017      	b.n	80043a6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	3301      	adds	r3, #1
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	e013      	b.n	80043a6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2200      	movs	r2, #0
 8004386:	2180      	movs	r1, #128	; 0x80
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f99d 	bl	80046c8 <UART_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e01f      	b.n	80043d8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	60ba      	str	r2, [r7, #8]
 800439e:	781a      	ldrb	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1b7      	bne.n	8004320 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2200      	movs	r2, #0
 80043b8:	2140      	movs	r1, #64	; 0x40
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f984 	bl	80046c8 <UART_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e006      	b.n	80043d8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e000      	b.n	80043d8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
  }
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	4613      	mov	r3, r2
 80043ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b20      	cmp	r3, #32
 80043f8:	d140      	bne.n	800447c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <HAL_UART_Receive_IT+0x26>
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e039      	b.n	800447e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_UART_Receive_IT+0x38>
 8004414:	2302      	movs	r3, #2
 8004416:	e032      	b.n	800447e <HAL_UART_Receive_IT+0x9e>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	88fa      	ldrh	r2, [r7, #6]
 800442a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	88fa      	ldrh	r2, [r7, #6]
 8004430:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2222      	movs	r2, #34	; 0x22
 800443c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004456:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0220 	orr.w	r2, r2, #32
 8004476:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	e000      	b.n	800447e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800447c:	2302      	movs	r3, #2
  }
}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10d      	bne.n	80044de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <HAL_UART_IRQHandler+0x52>
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f9e0 	bl	800489c <UART_Receive_IT>
      return;
 80044dc:	e0d0      	b.n	8004680 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80b0 	beq.w	8004646 <HAL_UART_IRQHandler+0x1ba>
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d105      	bne.n	80044fc <HAL_UART_IRQHandler+0x70>
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80a5 	beq.w	8004646 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_UART_IRQHandler+0x90>
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004514:	f043 0201 	orr.w	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 0304 	and.w	r3, r3, #4
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_UART_IRQHandler+0xb0>
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004534:	f043 0202 	orr.w	r2, r3, #2
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <HAL_UART_IRQHandler+0xd0>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004554:	f043 0204 	orr.w	r2, r3, #4
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00f      	beq.n	8004586 <HAL_UART_IRQHandler+0xfa>
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d104      	bne.n	800457a <HAL_UART_IRQHandler+0xee>
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	f043 0208 	orr.w	r2, r3, #8
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	2b00      	cmp	r3, #0
 800458c:	d077      	beq.n	800467e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	f003 0320 	and.w	r3, r3, #32
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <HAL_UART_IRQHandler+0x11c>
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f97a 	bl	800489c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	2b40      	cmp	r3, #64	; 0x40
 80045b4:	bf0c      	ite	eq
 80045b6:	2301      	moveq	r3, #1
 80045b8:	2300      	movne	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d102      	bne.n	80045d0 <HAL_UART_IRQHandler+0x144>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d031      	beq.n	8004634 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f8c3 	bl	800475c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d123      	bne.n	800462c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695a      	ldr	r2, [r3, #20]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d013      	beq.n	8004624 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004600:	4a21      	ldr	r2, [pc, #132]	; (8004688 <HAL_UART_IRQHandler+0x1fc>)
 8004602:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004608:	4618      	mov	r0, r3
 800460a:	f7fd fd93 	bl	8002134 <HAL_DMA_Abort_IT>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d016      	beq.n	8004642 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800461e:	4610      	mov	r0, r2
 8004620:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004622:	e00e      	b.n	8004642 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f845 	bl	80046b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462a:	e00a      	b.n	8004642 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f841 	bl	80046b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004632:	e006      	b.n	8004642 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f83d 	bl	80046b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004640:	e01d      	b.n	800467e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004642:	bf00      	nop
    return;
 8004644:	e01b      	b.n	800467e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_UART_IRQHandler+0x1d6>
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f8b0 	bl	80047c0 <UART_Transmit_IT>
    return;
 8004660:	e00e      	b.n	8004680 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d009      	beq.n	8004680 <HAL_UART_IRQHandler+0x1f4>
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d004      	beq.n	8004680 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f8f8 	bl	800486c <UART_EndTransmit_IT>
    return;
 800467c:	e000      	b.n	8004680 <HAL_UART_IRQHandler+0x1f4>
    return;
 800467e:	bf00      	nop
  }
}
 8004680:	3720      	adds	r7, #32
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	08004799 	.word	0x08004799

0800468c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	4613      	mov	r3, r2
 80046d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d8:	e02c      	b.n	8004734 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d028      	beq.n	8004734 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80046e8:	f7fd fb00 	bl	8001cec <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d21d      	bcs.n	8004734 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004706:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695a      	ldr	r2, [r3, #20]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0201 	bic.w	r2, r2, #1
 8004716:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e00f      	b.n	8004754 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4013      	ands	r3, r2
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	429a      	cmp	r2, r3
 8004742:	bf0c      	ite	eq
 8004744:	2301      	moveq	r3, #1
 8004746:	2300      	movne	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	429a      	cmp	r2, r3
 8004750:	d0c3      	beq.n	80046da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004772:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f7ff ff7e 	bl	80046b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b21      	cmp	r3, #33	; 0x21
 80047d2:	d144      	bne.n	800485e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047dc:	d11a      	bne.n	8004814 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	461a      	mov	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d105      	bne.n	8004808 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	1c9a      	adds	r2, r3, #2
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	621a      	str	r2, [r3, #32]
 8004806:	e00e      	b.n	8004826 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	621a      	str	r2, [r3, #32]
 8004812:	e008      	b.n	8004826 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	1c59      	adds	r1, r3, #1
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6211      	str	r1, [r2, #32]
 800481e:	781a      	ldrb	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29b      	uxth	r3, r3
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4619      	mov	r1, r3
 8004834:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10f      	bne.n	800485a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004848:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004858:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	e000      	b.n	8004860 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800485e:	2302      	movs	r3, #2
  }
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004882:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff fefd 	bl	800468c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b22      	cmp	r3, #34	; 0x22
 80048ae:	d171      	bne.n	8004994 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b8:	d123      	bne.n	8004902 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10e      	bne.n	80048e6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	1c9a      	adds	r2, r3, #2
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	629a      	str	r2, [r3, #40]	; 0x28
 80048e4:	e029      	b.n	800493a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004900:	e01b      	b.n	800493a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10a      	bne.n	8004920 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6858      	ldr	r0, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004914:	1c59      	adds	r1, r3, #1
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6291      	str	r1, [r2, #40]	; 0x28
 800491a:	b2c2      	uxtb	r2, r0
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	e00c      	b.n	800493a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	b2da      	uxtb	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	1c58      	adds	r0, r3, #1
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	6288      	str	r0, [r1, #40]	; 0x28
 8004932:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29b      	uxth	r3, r3
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	4619      	mov	r1, r3
 8004948:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800494a:	2b00      	cmp	r3, #0
 800494c:	d120      	bne.n	8004990 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0220 	bic.w	r2, r2, #32
 800495c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800496c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695a      	ldr	r2, [r3, #20]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0201 	bic.w	r2, r2, #1
 800497c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff fe8a 	bl	80046a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	e002      	b.n	8004996 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	e000      	b.n	8004996 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004994:	2302      	movs	r3, #2
  }
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049be:	68d9      	ldr	r1, [r3, #12]
 80049c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	ea40 0301 	orr.w	r3, r0, r1
 80049ca:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	431a      	orrs	r2, r3
 80049da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80049ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049fa:	f021 010c 	bic.w	r1, r1, #12
 80049fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a1c:	6999      	ldr	r1, [r3, #24]
 8004a1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	ea40 0301 	orr.w	r3, r0, r1
 8004a28:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a34:	f040 824a 	bne.w	8004ecc <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b96      	ldr	r3, [pc, #600]	; (8004c98 <UART_SetConfig+0x2f8>)
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d006      	beq.n	8004a52 <UART_SetConfig+0xb2>
 8004a44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b94      	ldr	r3, [pc, #592]	; (8004c9c <UART_SetConfig+0x2fc>)
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	f040 8129 	bne.w	8004ca4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a52:	f7fe fc2b 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 8004a56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004a64:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004a68:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004a6c:	4622      	mov	r2, r4
 8004a6e:	462b      	mov	r3, r5
 8004a70:	1891      	adds	r1, r2, r2
 8004a72:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004a76:	415b      	adcs	r3, r3
 8004a78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004a7c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004a80:	4621      	mov	r1, r4
 8004a82:	1851      	adds	r1, r2, r1
 8004a84:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004a88:	4629      	mov	r1, r5
 8004a8a:	414b      	adcs	r3, r1
 8004a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	00cb      	lsls	r3, r1, #3
 8004aa0:	4641      	mov	r1, r8
 8004aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aa6:	4641      	mov	r1, r8
 8004aa8:	00ca      	lsls	r2, r1, #3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4619      	mov	r1, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	189b      	adds	r3, r3, r2
 8004ab4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004ab8:	462b      	mov	r3, r5
 8004aba:	460a      	mov	r2, r1
 8004abc:	eb42 0303 	adc.w	r3, r2, r3
 8004ac0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004ac4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004ad0:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004ad4:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	18db      	adds	r3, r3, r3
 8004adc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	eb42 0303 	adc.w	r3, r2, r3
 8004ae6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004aea:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004aee:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004af2:	f7fb fbd5 	bl	80002a0 <__aeabi_uldivmod>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4b69      	ldr	r3, [pc, #420]	; (8004ca0 <UART_SetConfig+0x300>)
 8004afc:	fba3 2302 	umull	r2, r3, r3, r2
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	011c      	lsls	r4, r3, #4
 8004b04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004b0e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004b12:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8004b16:	4642      	mov	r2, r8
 8004b18:	464b      	mov	r3, r9
 8004b1a:	1891      	adds	r1, r2, r2
 8004b1c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004b20:	415b      	adcs	r3, r3
 8004b22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004b26:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	1851      	adds	r1, r2, r1
 8004b2e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8004b32:	4649      	mov	r1, r9
 8004b34:	414b      	adcs	r3, r1
 8004b36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8004b46:	4659      	mov	r1, fp
 8004b48:	00cb      	lsls	r3, r1, #3
 8004b4a:	4651      	mov	r1, sl
 8004b4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b50:	4651      	mov	r1, sl
 8004b52:	00ca      	lsls	r2, r1, #3
 8004b54:	4610      	mov	r0, r2
 8004b56:	4619      	mov	r1, r3
 8004b58:	4603      	mov	r3, r0
 8004b5a:	4642      	mov	r2, r8
 8004b5c:	189b      	adds	r3, r3, r2
 8004b5e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004b62:	464b      	mov	r3, r9
 8004b64:	460a      	mov	r2, r1
 8004b66:	eb42 0303 	adc.w	r3, r2, r3
 8004b6a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8004b6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004b7a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8004b7e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8004b82:	460b      	mov	r3, r1
 8004b84:	18db      	adds	r3, r3, r3
 8004b86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	eb42 0303 	adc.w	r3, r2, r3
 8004b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b94:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004b98:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004b9c:	f7fb fb80 	bl	80002a0 <__aeabi_uldivmod>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	4b3e      	ldr	r3, [pc, #248]	; (8004ca0 <UART_SetConfig+0x300>)
 8004ba8:	fba3 2301 	umull	r2, r3, r3, r1
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	2264      	movs	r2, #100	; 0x64
 8004bb0:	fb02 f303 	mul.w	r3, r2, r3
 8004bb4:	1acb      	subs	r3, r1, r3
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bbc:	4b38      	ldr	r3, [pc, #224]	; (8004ca0 <UART_SetConfig+0x300>)
 8004bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bca:	441c      	add	r4, r3
 8004bcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004bd6:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004bda:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8004bde:	4642      	mov	r2, r8
 8004be0:	464b      	mov	r3, r9
 8004be2:	1891      	adds	r1, r2, r2
 8004be4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004be8:	415b      	adcs	r3, r3
 8004bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004bee:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004bf2:	4641      	mov	r1, r8
 8004bf4:	1851      	adds	r1, r2, r1
 8004bf6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	414b      	adcs	r3, r1
 8004bfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8004c0e:	4659      	mov	r1, fp
 8004c10:	00cb      	lsls	r3, r1, #3
 8004c12:	4651      	mov	r1, sl
 8004c14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c18:	4651      	mov	r1, sl
 8004c1a:	00ca      	lsls	r2, r1, #3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4603      	mov	r3, r0
 8004c22:	4642      	mov	r2, r8
 8004c24:	189b      	adds	r3, r3, r2
 8004c26:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	460a      	mov	r2, r1
 8004c2e:	eb42 0303 	adc.w	r3, r2, r3
 8004c32:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004c36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8004c42:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8004c46:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	18db      	adds	r3, r3, r3
 8004c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c52:	4613      	mov	r3, r2
 8004c54:	eb42 0303 	adc.w	r3, r2, r3
 8004c58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c5c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004c60:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004c64:	f7fb fb1c 	bl	80002a0 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <UART_SetConfig+0x300>)
 8004c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2164      	movs	r1, #100	; 0x64
 8004c76:	fb01 f303 	mul.w	r3, r1, r3
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	3332      	adds	r3, #50	; 0x32
 8004c80:	4a07      	ldr	r2, [pc, #28]	; (8004ca0 <UART_SetConfig+0x300>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	f003 0207 	and.w	r2, r3, #7
 8004c8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4422      	add	r2, r4
 8004c94:	609a      	str	r2, [r3, #8]
 8004c96:	e349      	b.n	800532c <UART_SetConfig+0x98c>
 8004c98:	40011000 	.word	0x40011000
 8004c9c:	40011400 	.word	0x40011400
 8004ca0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ca4:	f7fe faee 	bl	8003284 <HAL_RCC_GetPCLK1Freq>
 8004ca8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004cb6:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8004cba:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	462b      	mov	r3, r5
 8004cc2:	1891      	adds	r1, r2, r2
 8004cc4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004cc8:	415b      	adcs	r3, r3
 8004cca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004cce:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	eb12 0a01 	adds.w	sl, r2, r1
 8004cd8:	4629      	mov	r1, r5
 8004cda:	eb43 0b01 	adc.w	fp, r3, r1
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cf2:	4692      	mov	sl, r2
 8004cf4:	469b      	mov	fp, r3
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	eb1a 0303 	adds.w	r3, sl, r3
 8004cfc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004d00:	462b      	mov	r3, r5
 8004d02:	eb4b 0303 	adc.w	r3, fp, r3
 8004d06:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004d0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8004d16:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004d1a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004d1e:	460b      	mov	r3, r1
 8004d20:	18db      	adds	r3, r3, r3
 8004d22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d26:	4613      	mov	r3, r2
 8004d28:	eb42 0303 	adc.w	r3, r2, r3
 8004d2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d30:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004d34:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004d38:	f7fb fab2 	bl	80002a0 <__aeabi_uldivmod>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4b61      	ldr	r3, [pc, #388]	; (8004ec8 <UART_SetConfig+0x528>)
 8004d42:	fba3 2302 	umull	r2, r3, r3, r2
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	011c      	lsls	r4, r3, #4
 8004d4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004d54:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004d58:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	464b      	mov	r3, r9
 8004d60:	1891      	adds	r1, r2, r2
 8004d62:	67b9      	str	r1, [r7, #120]	; 0x78
 8004d64:	415b      	adcs	r3, r3
 8004d66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d68:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	1851      	adds	r1, r2, r1
 8004d70:	6739      	str	r1, [r7, #112]	; 0x70
 8004d72:	4649      	mov	r1, r9
 8004d74:	414b      	adcs	r3, r1
 8004d76:	677b      	str	r3, [r7, #116]	; 0x74
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004d84:	4659      	mov	r1, fp
 8004d86:	00cb      	lsls	r3, r1, #3
 8004d88:	4651      	mov	r1, sl
 8004d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d8e:	4651      	mov	r1, sl
 8004d90:	00ca      	lsls	r2, r1, #3
 8004d92:	4610      	mov	r0, r2
 8004d94:	4619      	mov	r1, r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	4642      	mov	r2, r8
 8004d9a:	189b      	adds	r3, r3, r2
 8004d9c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004da0:	464b      	mov	r3, r9
 8004da2:	460a      	mov	r2, r1
 8004da4:	eb42 0303 	adc.w	r3, r2, r3
 8004da8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004dac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004db8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004dbc:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	18db      	adds	r3, r3, r3
 8004dc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	eb42 0303 	adc.w	r3, r2, r3
 8004dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004dd2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004dd6:	f7fb fa63 	bl	80002a0 <__aeabi_uldivmod>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4611      	mov	r1, r2
 8004de0:	4b39      	ldr	r3, [pc, #228]	; (8004ec8 <UART_SetConfig+0x528>)
 8004de2:	fba3 2301 	umull	r2, r3, r3, r1
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	2264      	movs	r2, #100	; 0x64
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	1acb      	subs	r3, r1, r3
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004df6:	4b34      	ldr	r3, [pc, #208]	; (8004ec8 <UART_SetConfig+0x528>)
 8004df8:	fba3 2302 	umull	r2, r3, r3, r2
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e04:	441c      	add	r4, r3
 8004e06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004e10:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004e14:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	1891      	adds	r1, r2, r2
 8004e1e:	6639      	str	r1, [r7, #96]	; 0x60
 8004e20:	415b      	adcs	r3, r3
 8004e22:	667b      	str	r3, [r7, #100]	; 0x64
 8004e24:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004e28:	4641      	mov	r1, r8
 8004e2a:	1851      	adds	r1, r2, r1
 8004e2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e2e:	4649      	mov	r1, r9
 8004e30:	414b      	adcs	r3, r1
 8004e32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004e40:	4659      	mov	r1, fp
 8004e42:	00cb      	lsls	r3, r1, #3
 8004e44:	4651      	mov	r1, sl
 8004e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e4a:	4651      	mov	r1, sl
 8004e4c:	00ca      	lsls	r2, r1, #3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	4619      	mov	r1, r3
 8004e52:	4603      	mov	r3, r0
 8004e54:	4642      	mov	r2, r8
 8004e56:	189b      	adds	r3, r3, r2
 8004e58:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	460a      	mov	r2, r1
 8004e60:	eb42 0303 	adc.w	r3, r2, r3
 8004e64:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004e68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004e74:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004e78:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	18db      	adds	r3, r3, r3
 8004e80:	653b      	str	r3, [r7, #80]	; 0x50
 8004e82:	4613      	mov	r3, r2
 8004e84:	eb42 0303 	adc.w	r3, r2, r3
 8004e88:	657b      	str	r3, [r7, #84]	; 0x54
 8004e8a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e8e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004e92:	f7fb fa05 	bl	80002a0 <__aeabi_uldivmod>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <UART_SetConfig+0x528>)
 8004e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	2164      	movs	r1, #100	; 0x64
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	3332      	adds	r3, #50	; 0x32
 8004eae:	4a06      	ldr	r2, [pc, #24]	; (8004ec8 <UART_SetConfig+0x528>)
 8004eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	f003 0207 	and.w	r2, r3, #7
 8004eba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4422      	add	r2, r4
 8004ec2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004ec4:	e232      	b.n	800532c <UART_SetConfig+0x98c>
 8004ec6:	bf00      	nop
 8004ec8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ecc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4b8d      	ldr	r3, [pc, #564]	; (8005108 <UART_SetConfig+0x768>)
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d006      	beq.n	8004ee6 <UART_SetConfig+0x546>
 8004ed8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b8b      	ldr	r3, [pc, #556]	; (800510c <UART_SetConfig+0x76c>)
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	f040 8117 	bne.w	8005114 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ee6:	f7fe f9e1 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 8004eea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004ef8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004efc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004f00:	4622      	mov	r2, r4
 8004f02:	462b      	mov	r3, r5
 8004f04:	1891      	adds	r1, r2, r2
 8004f06:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f08:	415b      	adcs	r3, r3
 8004f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f10:	4621      	mov	r1, r4
 8004f12:	eb12 0801 	adds.w	r8, r2, r1
 8004f16:	4629      	mov	r1, r5
 8004f18:	eb43 0901 	adc.w	r9, r3, r1
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f30:	4690      	mov	r8, r2
 8004f32:	4699      	mov	r9, r3
 8004f34:	4623      	mov	r3, r4
 8004f36:	eb18 0303 	adds.w	r3, r8, r3
 8004f3a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004f3e:	462b      	mov	r3, r5
 8004f40:	eb49 0303 	adc.w	r3, r9, r3
 8004f44:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004f48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004f54:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004f64:	4629      	mov	r1, r5
 8004f66:	008b      	lsls	r3, r1, #2
 8004f68:	4621      	mov	r1, r4
 8004f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f6e:	4621      	mov	r1, r4
 8004f70:	008a      	lsls	r2, r1, #2
 8004f72:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8004f76:	f7fb f993 	bl	80002a0 <__aeabi_uldivmod>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4b64      	ldr	r3, [pc, #400]	; (8005110 <UART_SetConfig+0x770>)
 8004f80:	fba3 2302 	umull	r2, r3, r3, r2
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	011c      	lsls	r4, r3, #4
 8004f88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004f92:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004f96:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004f9a:	4642      	mov	r2, r8
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	1891      	adds	r1, r2, r2
 8004fa0:	6439      	str	r1, [r7, #64]	; 0x40
 8004fa2:	415b      	adcs	r3, r3
 8004fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8004fa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004faa:	4641      	mov	r1, r8
 8004fac:	1851      	adds	r1, r2, r1
 8004fae:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fb0:	4649      	mov	r1, r9
 8004fb2:	414b      	adcs	r3, r1
 8004fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8004fc2:	4659      	mov	r1, fp
 8004fc4:	00cb      	lsls	r3, r1, #3
 8004fc6:	4651      	mov	r1, sl
 8004fc8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fcc:	4651      	mov	r1, sl
 8004fce:	00ca      	lsls	r2, r1, #3
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	4642      	mov	r2, r8
 8004fd8:	189b      	adds	r3, r3, r2
 8004fda:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004fde:	464b      	mov	r3, r9
 8004fe0:	460a      	mov	r2, r1
 8004fe2:	eb42 0303 	adc.w	r3, r2, r3
 8004fe6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004fea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004ff6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	f04f 0300 	mov.w	r3, #0
 8005002:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8005006:	4649      	mov	r1, r9
 8005008:	008b      	lsls	r3, r1, #2
 800500a:	4641      	mov	r1, r8
 800500c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005010:	4641      	mov	r1, r8
 8005012:	008a      	lsls	r2, r1, #2
 8005014:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8005018:	f7fb f942 	bl	80002a0 <__aeabi_uldivmod>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4b3b      	ldr	r3, [pc, #236]	; (8005110 <UART_SetConfig+0x770>)
 8005022:	fba3 1302 	umull	r1, r3, r3, r2
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	2164      	movs	r1, #100	; 0x64
 800502a:	fb01 f303 	mul.w	r3, r1, r3
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	3332      	adds	r3, #50	; 0x32
 8005034:	4a36      	ldr	r2, [pc, #216]	; (8005110 <UART_SetConfig+0x770>)
 8005036:	fba2 2303 	umull	r2, r3, r2, r3
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005040:	441c      	add	r4, r3
 8005042:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005046:	2200      	movs	r2, #0
 8005048:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800504c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8005050:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8005054:	4642      	mov	r2, r8
 8005056:	464b      	mov	r3, r9
 8005058:	1891      	adds	r1, r2, r2
 800505a:	6339      	str	r1, [r7, #48]	; 0x30
 800505c:	415b      	adcs	r3, r3
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
 8005060:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005064:	4641      	mov	r1, r8
 8005066:	1851      	adds	r1, r2, r1
 8005068:	62b9      	str	r1, [r7, #40]	; 0x28
 800506a:	4649      	mov	r1, r9
 800506c:	414b      	adcs	r3, r1
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800507c:	4659      	mov	r1, fp
 800507e:	00cb      	lsls	r3, r1, #3
 8005080:	4651      	mov	r1, sl
 8005082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005086:	4651      	mov	r1, sl
 8005088:	00ca      	lsls	r2, r1, #3
 800508a:	4610      	mov	r0, r2
 800508c:	4619      	mov	r1, r3
 800508e:	4603      	mov	r3, r0
 8005090:	4642      	mov	r2, r8
 8005092:	189b      	adds	r3, r3, r2
 8005094:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005098:	464b      	mov	r3, r9
 800509a:	460a      	mov	r2, r1
 800509c:	eb42 0303 	adc.w	r3, r2, r3
 80050a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80050a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80050b0:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80050c0:	4649      	mov	r1, r9
 80050c2:	008b      	lsls	r3, r1, #2
 80050c4:	4641      	mov	r1, r8
 80050c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ca:	4641      	mov	r1, r8
 80050cc:	008a      	lsls	r2, r1, #2
 80050ce:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80050d2:	f7fb f8e5 	bl	80002a0 <__aeabi_uldivmod>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4b0d      	ldr	r3, [pc, #52]	; (8005110 <UART_SetConfig+0x770>)
 80050dc:	fba3 1302 	umull	r1, r3, r3, r2
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	2164      	movs	r1, #100	; 0x64
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	3332      	adds	r3, #50	; 0x32
 80050ee:	4a08      	ldr	r2, [pc, #32]	; (8005110 <UART_SetConfig+0x770>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	f003 020f 	and.w	r2, r3, #15
 80050fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4422      	add	r2, r4
 8005102:	609a      	str	r2, [r3, #8]
 8005104:	e112      	b.n	800532c <UART_SetConfig+0x98c>
 8005106:	bf00      	nop
 8005108:	40011000 	.word	0x40011000
 800510c:	40011400 	.word	0x40011400
 8005110:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8005114:	f7fe f8b6 	bl	8003284 <HAL_RCC_GetPCLK1Freq>
 8005118:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800511c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005120:	2200      	movs	r2, #0
 8005122:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005126:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800512a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800512e:	4642      	mov	r2, r8
 8005130:	464b      	mov	r3, r9
 8005132:	1891      	adds	r1, r2, r2
 8005134:	6239      	str	r1, [r7, #32]
 8005136:	415b      	adcs	r3, r3
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
 800513a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800513e:	4641      	mov	r1, r8
 8005140:	1854      	adds	r4, r2, r1
 8005142:	4649      	mov	r1, r9
 8005144:	eb43 0501 	adc.w	r5, r3, r1
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	00eb      	lsls	r3, r5, #3
 8005152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005156:	00e2      	lsls	r2, r4, #3
 8005158:	4614      	mov	r4, r2
 800515a:	461d      	mov	r5, r3
 800515c:	4643      	mov	r3, r8
 800515e:	18e3      	adds	r3, r4, r3
 8005160:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005164:	464b      	mov	r3, r9
 8005166:	eb45 0303 	adc.w	r3, r5, r3
 800516a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800516e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800517a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800518a:	4629      	mov	r1, r5
 800518c:	008b      	lsls	r3, r1, #2
 800518e:	4621      	mov	r1, r4
 8005190:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005194:	4621      	mov	r1, r4
 8005196:	008a      	lsls	r2, r1, #2
 8005198:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800519c:	f7fb f880 	bl	80002a0 <__aeabi_uldivmod>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4b64      	ldr	r3, [pc, #400]	; (8005338 <UART_SetConfig+0x998>)
 80051a6:	fba3 2302 	umull	r2, r3, r3, r2
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	011c      	lsls	r4, r3, #4
 80051ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80051b2:	2200      	movs	r2, #0
 80051b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051b8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80051bc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80051c0:	4642      	mov	r2, r8
 80051c2:	464b      	mov	r3, r9
 80051c4:	1891      	adds	r1, r2, r2
 80051c6:	61b9      	str	r1, [r7, #24]
 80051c8:	415b      	adcs	r3, r3
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051d0:	4641      	mov	r1, r8
 80051d2:	1851      	adds	r1, r2, r1
 80051d4:	6139      	str	r1, [r7, #16]
 80051d6:	4649      	mov	r1, r9
 80051d8:	414b      	adcs	r3, r1
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051e8:	4659      	mov	r1, fp
 80051ea:	00cb      	lsls	r3, r1, #3
 80051ec:	4651      	mov	r1, sl
 80051ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051f2:	4651      	mov	r1, sl
 80051f4:	00ca      	lsls	r2, r1, #3
 80051f6:	4610      	mov	r0, r2
 80051f8:	4619      	mov	r1, r3
 80051fa:	4603      	mov	r3, r0
 80051fc:	4642      	mov	r2, r8
 80051fe:	189b      	adds	r3, r3, r2
 8005200:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005204:	464b      	mov	r3, r9
 8005206:	460a      	mov	r2, r1
 8005208:	eb42 0303 	adc.w	r3, r2, r3
 800520c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005210:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800521c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800522c:	4649      	mov	r1, r9
 800522e:	008b      	lsls	r3, r1, #2
 8005230:	4641      	mov	r1, r8
 8005232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005236:	4641      	mov	r1, r8
 8005238:	008a      	lsls	r2, r1, #2
 800523a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800523e:	f7fb f82f 	bl	80002a0 <__aeabi_uldivmod>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4b3c      	ldr	r3, [pc, #240]	; (8005338 <UART_SetConfig+0x998>)
 8005248:	fba3 1302 	umull	r1, r3, r3, r2
 800524c:	095b      	lsrs	r3, r3, #5
 800524e:	2164      	movs	r1, #100	; 0x64
 8005250:	fb01 f303 	mul.w	r3, r1, r3
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	3332      	adds	r3, #50	; 0x32
 800525a:	4a37      	ldr	r2, [pc, #220]	; (8005338 <UART_SetConfig+0x998>)
 800525c:	fba2 2303 	umull	r2, r3, r2, r3
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005266:	441c      	add	r4, r3
 8005268:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800526c:	2200      	movs	r2, #0
 800526e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005272:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005276:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800527a:	4642      	mov	r2, r8
 800527c:	464b      	mov	r3, r9
 800527e:	1891      	adds	r1, r2, r2
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	415b      	adcs	r3, r3
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800528a:	4641      	mov	r1, r8
 800528c:	1851      	adds	r1, r2, r1
 800528e:	6039      	str	r1, [r7, #0]
 8005290:	4649      	mov	r1, r9
 8005292:	414b      	adcs	r3, r1
 8005294:	607b      	str	r3, [r7, #4]
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052a2:	4659      	mov	r1, fp
 80052a4:	00cb      	lsls	r3, r1, #3
 80052a6:	4651      	mov	r1, sl
 80052a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ac:	4651      	mov	r1, sl
 80052ae:	00ca      	lsls	r2, r1, #3
 80052b0:	4610      	mov	r0, r2
 80052b2:	4619      	mov	r1, r3
 80052b4:	4603      	mov	r3, r0
 80052b6:	4642      	mov	r2, r8
 80052b8:	189b      	adds	r3, r3, r2
 80052ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052be:	464b      	mov	r3, r9
 80052c0:	460a      	mov	r2, r1
 80052c2:	eb42 0303 	adc.w	r3, r2, r3
 80052c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80052e6:	4649      	mov	r1, r9
 80052e8:	008b      	lsls	r3, r1, #2
 80052ea:	4641      	mov	r1, r8
 80052ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052f0:	4641      	mov	r1, r8
 80052f2:	008a      	lsls	r2, r1, #2
 80052f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052f8:	f7fa ffd2 	bl	80002a0 <__aeabi_uldivmod>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <UART_SetConfig+0x998>)
 8005302:	fba3 1302 	umull	r1, r3, r3, r2
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	2164      	movs	r1, #100	; 0x64
 800530a:	fb01 f303 	mul.w	r3, r1, r3
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	3332      	adds	r3, #50	; 0x32
 8005314:	4a08      	ldr	r2, [pc, #32]	; (8005338 <UART_SetConfig+0x998>)
 8005316:	fba2 2303 	umull	r2, r3, r2, r3
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	f003 020f 	and.w	r2, r3, #15
 8005320:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4422      	add	r2, r4
 8005328:	609a      	str	r2, [r3, #8]
}
 800532a:	e7ff      	b.n	800532c <UART_SetConfig+0x98c>
 800532c:	bf00      	nop
 800532e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005332:	46bd      	mov	sp, r7
 8005334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005338:	51eb851f 	.word	0x51eb851f

0800533c <atoi>:
 800533c:	220a      	movs	r2, #10
 800533e:	2100      	movs	r1, #0
 8005340:	f000 bc5e 	b.w	8005c00 <strtol>

08005344 <__errno>:
 8005344:	4b01      	ldr	r3, [pc, #4]	; (800534c <__errno+0x8>)
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000188 	.word	0x20000188

08005350 <__sflush_r>:
 8005350:	898a      	ldrh	r2, [r1, #12]
 8005352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005356:	4605      	mov	r5, r0
 8005358:	0710      	lsls	r0, r2, #28
 800535a:	460c      	mov	r4, r1
 800535c:	d458      	bmi.n	8005410 <__sflush_r+0xc0>
 800535e:	684b      	ldr	r3, [r1, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	dc05      	bgt.n	8005370 <__sflush_r+0x20>
 8005364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	dc02      	bgt.n	8005370 <__sflush_r+0x20>
 800536a:	2000      	movs	r0, #0
 800536c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005372:	2e00      	cmp	r6, #0
 8005374:	d0f9      	beq.n	800536a <__sflush_r+0x1a>
 8005376:	2300      	movs	r3, #0
 8005378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800537c:	682f      	ldr	r7, [r5, #0]
 800537e:	602b      	str	r3, [r5, #0]
 8005380:	d032      	beq.n	80053e8 <__sflush_r+0x98>
 8005382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	075a      	lsls	r2, r3, #29
 8005388:	d505      	bpl.n	8005396 <__sflush_r+0x46>
 800538a:	6863      	ldr	r3, [r4, #4]
 800538c:	1ac0      	subs	r0, r0, r3
 800538e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005390:	b10b      	cbz	r3, 8005396 <__sflush_r+0x46>
 8005392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005394:	1ac0      	subs	r0, r0, r3
 8005396:	2300      	movs	r3, #0
 8005398:	4602      	mov	r2, r0
 800539a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800539c:	6a21      	ldr	r1, [r4, #32]
 800539e:	4628      	mov	r0, r5
 80053a0:	47b0      	blx	r6
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	d106      	bne.n	80053b6 <__sflush_r+0x66>
 80053a8:	6829      	ldr	r1, [r5, #0]
 80053aa:	291d      	cmp	r1, #29
 80053ac:	d82c      	bhi.n	8005408 <__sflush_r+0xb8>
 80053ae:	4a2a      	ldr	r2, [pc, #168]	; (8005458 <__sflush_r+0x108>)
 80053b0:	40ca      	lsrs	r2, r1
 80053b2:	07d6      	lsls	r6, r2, #31
 80053b4:	d528      	bpl.n	8005408 <__sflush_r+0xb8>
 80053b6:	2200      	movs	r2, #0
 80053b8:	6062      	str	r2, [r4, #4]
 80053ba:	04d9      	lsls	r1, r3, #19
 80053bc:	6922      	ldr	r2, [r4, #16]
 80053be:	6022      	str	r2, [r4, #0]
 80053c0:	d504      	bpl.n	80053cc <__sflush_r+0x7c>
 80053c2:	1c42      	adds	r2, r0, #1
 80053c4:	d101      	bne.n	80053ca <__sflush_r+0x7a>
 80053c6:	682b      	ldr	r3, [r5, #0]
 80053c8:	b903      	cbnz	r3, 80053cc <__sflush_r+0x7c>
 80053ca:	6560      	str	r0, [r4, #84]	; 0x54
 80053cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053ce:	602f      	str	r7, [r5, #0]
 80053d0:	2900      	cmp	r1, #0
 80053d2:	d0ca      	beq.n	800536a <__sflush_r+0x1a>
 80053d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053d8:	4299      	cmp	r1, r3
 80053da:	d002      	beq.n	80053e2 <__sflush_r+0x92>
 80053dc:	4628      	mov	r0, r5
 80053de:	f000 f9bf 	bl	8005760 <_free_r>
 80053e2:	2000      	movs	r0, #0
 80053e4:	6360      	str	r0, [r4, #52]	; 0x34
 80053e6:	e7c1      	b.n	800536c <__sflush_r+0x1c>
 80053e8:	6a21      	ldr	r1, [r4, #32]
 80053ea:	2301      	movs	r3, #1
 80053ec:	4628      	mov	r0, r5
 80053ee:	47b0      	blx	r6
 80053f0:	1c41      	adds	r1, r0, #1
 80053f2:	d1c7      	bne.n	8005384 <__sflush_r+0x34>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0c4      	beq.n	8005384 <__sflush_r+0x34>
 80053fa:	2b1d      	cmp	r3, #29
 80053fc:	d001      	beq.n	8005402 <__sflush_r+0xb2>
 80053fe:	2b16      	cmp	r3, #22
 8005400:	d101      	bne.n	8005406 <__sflush_r+0xb6>
 8005402:	602f      	str	r7, [r5, #0]
 8005404:	e7b1      	b.n	800536a <__sflush_r+0x1a>
 8005406:	89a3      	ldrh	r3, [r4, #12]
 8005408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800540c:	81a3      	strh	r3, [r4, #12]
 800540e:	e7ad      	b.n	800536c <__sflush_r+0x1c>
 8005410:	690f      	ldr	r7, [r1, #16]
 8005412:	2f00      	cmp	r7, #0
 8005414:	d0a9      	beq.n	800536a <__sflush_r+0x1a>
 8005416:	0793      	lsls	r3, r2, #30
 8005418:	680e      	ldr	r6, [r1, #0]
 800541a:	bf08      	it	eq
 800541c:	694b      	ldreq	r3, [r1, #20]
 800541e:	600f      	str	r7, [r1, #0]
 8005420:	bf18      	it	ne
 8005422:	2300      	movne	r3, #0
 8005424:	eba6 0807 	sub.w	r8, r6, r7
 8005428:	608b      	str	r3, [r1, #8]
 800542a:	f1b8 0f00 	cmp.w	r8, #0
 800542e:	dd9c      	ble.n	800536a <__sflush_r+0x1a>
 8005430:	6a21      	ldr	r1, [r4, #32]
 8005432:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005434:	4643      	mov	r3, r8
 8005436:	463a      	mov	r2, r7
 8005438:	4628      	mov	r0, r5
 800543a:	47b0      	blx	r6
 800543c:	2800      	cmp	r0, #0
 800543e:	dc06      	bgt.n	800544e <__sflush_r+0xfe>
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005446:	81a3      	strh	r3, [r4, #12]
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	e78e      	b.n	800536c <__sflush_r+0x1c>
 800544e:	4407      	add	r7, r0
 8005450:	eba8 0800 	sub.w	r8, r8, r0
 8005454:	e7e9      	b.n	800542a <__sflush_r+0xda>
 8005456:	bf00      	nop
 8005458:	20400001 	.word	0x20400001

0800545c <_fflush_r>:
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	690b      	ldr	r3, [r1, #16]
 8005460:	4605      	mov	r5, r0
 8005462:	460c      	mov	r4, r1
 8005464:	b913      	cbnz	r3, 800546c <_fflush_r+0x10>
 8005466:	2500      	movs	r5, #0
 8005468:	4628      	mov	r0, r5
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	b118      	cbz	r0, 8005476 <_fflush_r+0x1a>
 800546e:	6983      	ldr	r3, [r0, #24]
 8005470:	b90b      	cbnz	r3, 8005476 <_fflush_r+0x1a>
 8005472:	f000 f899 	bl	80055a8 <__sinit>
 8005476:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <_fflush_r+0x6c>)
 8005478:	429c      	cmp	r4, r3
 800547a:	d11b      	bne.n	80054b4 <_fflush_r+0x58>
 800547c:	686c      	ldr	r4, [r5, #4]
 800547e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0ef      	beq.n	8005466 <_fflush_r+0xa>
 8005486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005488:	07d0      	lsls	r0, r2, #31
 800548a:	d404      	bmi.n	8005496 <_fflush_r+0x3a>
 800548c:	0599      	lsls	r1, r3, #22
 800548e:	d402      	bmi.n	8005496 <_fflush_r+0x3a>
 8005490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005492:	f000 f94c 	bl	800572e <__retarget_lock_acquire_recursive>
 8005496:	4628      	mov	r0, r5
 8005498:	4621      	mov	r1, r4
 800549a:	f7ff ff59 	bl	8005350 <__sflush_r>
 800549e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054a0:	07da      	lsls	r2, r3, #31
 80054a2:	4605      	mov	r5, r0
 80054a4:	d4e0      	bmi.n	8005468 <_fflush_r+0xc>
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	059b      	lsls	r3, r3, #22
 80054aa:	d4dd      	bmi.n	8005468 <_fflush_r+0xc>
 80054ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054ae:	f000 f93f 	bl	8005730 <__retarget_lock_release_recursive>
 80054b2:	e7d9      	b.n	8005468 <_fflush_r+0xc>
 80054b4:	4b05      	ldr	r3, [pc, #20]	; (80054cc <_fflush_r+0x70>)
 80054b6:	429c      	cmp	r4, r3
 80054b8:	d101      	bne.n	80054be <_fflush_r+0x62>
 80054ba:	68ac      	ldr	r4, [r5, #8]
 80054bc:	e7df      	b.n	800547e <_fflush_r+0x22>
 80054be:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <_fflush_r+0x74>)
 80054c0:	429c      	cmp	r4, r3
 80054c2:	bf08      	it	eq
 80054c4:	68ec      	ldreq	r4, [r5, #12]
 80054c6:	e7da      	b.n	800547e <_fflush_r+0x22>
 80054c8:	08007e24 	.word	0x08007e24
 80054cc:	08007e44 	.word	0x08007e44
 80054d0:	08007e04 	.word	0x08007e04

080054d4 <fflush>:
 80054d4:	4601      	mov	r1, r0
 80054d6:	b920      	cbnz	r0, 80054e2 <fflush+0xe>
 80054d8:	4b04      	ldr	r3, [pc, #16]	; (80054ec <fflush+0x18>)
 80054da:	4905      	ldr	r1, [pc, #20]	; (80054f0 <fflush+0x1c>)
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	f000 b8e1 	b.w	80056a4 <_fwalk_reent>
 80054e2:	4b04      	ldr	r3, [pc, #16]	; (80054f4 <fflush+0x20>)
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	f7ff bfb9 	b.w	800545c <_fflush_r>
 80054ea:	bf00      	nop
 80054ec:	08007e64 	.word	0x08007e64
 80054f0:	0800545d 	.word	0x0800545d
 80054f4:	20000188 	.word	0x20000188

080054f8 <std>:
 80054f8:	2300      	movs	r3, #0
 80054fa:	b510      	push	{r4, lr}
 80054fc:	4604      	mov	r4, r0
 80054fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005506:	6083      	str	r3, [r0, #8]
 8005508:	8181      	strh	r1, [r0, #12]
 800550a:	6643      	str	r3, [r0, #100]	; 0x64
 800550c:	81c2      	strh	r2, [r0, #14]
 800550e:	6183      	str	r3, [r0, #24]
 8005510:	4619      	mov	r1, r3
 8005512:	2208      	movs	r2, #8
 8005514:	305c      	adds	r0, #92	; 0x5c
 8005516:	f000 f91a 	bl	800574e <memset>
 800551a:	4b05      	ldr	r3, [pc, #20]	; (8005530 <std+0x38>)
 800551c:	6263      	str	r3, [r4, #36]	; 0x24
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <std+0x3c>)
 8005520:	62a3      	str	r3, [r4, #40]	; 0x28
 8005522:	4b05      	ldr	r3, [pc, #20]	; (8005538 <std+0x40>)
 8005524:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005526:	4b05      	ldr	r3, [pc, #20]	; (800553c <std+0x44>)
 8005528:	6224      	str	r4, [r4, #32]
 800552a:	6323      	str	r3, [r4, #48]	; 0x30
 800552c:	bd10      	pop	{r4, pc}
 800552e:	bf00      	nop
 8005530:	08005971 	.word	0x08005971
 8005534:	08005993 	.word	0x08005993
 8005538:	080059cb 	.word	0x080059cb
 800553c:	080059ef 	.word	0x080059ef

08005540 <_cleanup_r>:
 8005540:	4901      	ldr	r1, [pc, #4]	; (8005548 <_cleanup_r+0x8>)
 8005542:	f000 b8af 	b.w	80056a4 <_fwalk_reent>
 8005546:	bf00      	nop
 8005548:	0800545d 	.word	0x0800545d

0800554c <__sfmoreglue>:
 800554c:	b570      	push	{r4, r5, r6, lr}
 800554e:	2268      	movs	r2, #104	; 0x68
 8005550:	1e4d      	subs	r5, r1, #1
 8005552:	4355      	muls	r5, r2
 8005554:	460e      	mov	r6, r1
 8005556:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800555a:	f000 f96d 	bl	8005838 <_malloc_r>
 800555e:	4604      	mov	r4, r0
 8005560:	b140      	cbz	r0, 8005574 <__sfmoreglue+0x28>
 8005562:	2100      	movs	r1, #0
 8005564:	e9c0 1600 	strd	r1, r6, [r0]
 8005568:	300c      	adds	r0, #12
 800556a:	60a0      	str	r0, [r4, #8]
 800556c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005570:	f000 f8ed 	bl	800574e <memset>
 8005574:	4620      	mov	r0, r4
 8005576:	bd70      	pop	{r4, r5, r6, pc}

08005578 <__sfp_lock_acquire>:
 8005578:	4801      	ldr	r0, [pc, #4]	; (8005580 <__sfp_lock_acquire+0x8>)
 800557a:	f000 b8d8 	b.w	800572e <__retarget_lock_acquire_recursive>
 800557e:	bf00      	nop
 8005580:	200134d9 	.word	0x200134d9

08005584 <__sfp_lock_release>:
 8005584:	4801      	ldr	r0, [pc, #4]	; (800558c <__sfp_lock_release+0x8>)
 8005586:	f000 b8d3 	b.w	8005730 <__retarget_lock_release_recursive>
 800558a:	bf00      	nop
 800558c:	200134d9 	.word	0x200134d9

08005590 <__sinit_lock_acquire>:
 8005590:	4801      	ldr	r0, [pc, #4]	; (8005598 <__sinit_lock_acquire+0x8>)
 8005592:	f000 b8cc 	b.w	800572e <__retarget_lock_acquire_recursive>
 8005596:	bf00      	nop
 8005598:	200134da 	.word	0x200134da

0800559c <__sinit_lock_release>:
 800559c:	4801      	ldr	r0, [pc, #4]	; (80055a4 <__sinit_lock_release+0x8>)
 800559e:	f000 b8c7 	b.w	8005730 <__retarget_lock_release_recursive>
 80055a2:	bf00      	nop
 80055a4:	200134da 	.word	0x200134da

080055a8 <__sinit>:
 80055a8:	b510      	push	{r4, lr}
 80055aa:	4604      	mov	r4, r0
 80055ac:	f7ff fff0 	bl	8005590 <__sinit_lock_acquire>
 80055b0:	69a3      	ldr	r3, [r4, #24]
 80055b2:	b11b      	cbz	r3, 80055bc <__sinit+0x14>
 80055b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b8:	f7ff bff0 	b.w	800559c <__sinit_lock_release>
 80055bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055c0:	6523      	str	r3, [r4, #80]	; 0x50
 80055c2:	4b13      	ldr	r3, [pc, #76]	; (8005610 <__sinit+0x68>)
 80055c4:	4a13      	ldr	r2, [pc, #76]	; (8005614 <__sinit+0x6c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80055ca:	42a3      	cmp	r3, r4
 80055cc:	bf04      	itt	eq
 80055ce:	2301      	moveq	r3, #1
 80055d0:	61a3      	streq	r3, [r4, #24]
 80055d2:	4620      	mov	r0, r4
 80055d4:	f000 f820 	bl	8005618 <__sfp>
 80055d8:	6060      	str	r0, [r4, #4]
 80055da:	4620      	mov	r0, r4
 80055dc:	f000 f81c 	bl	8005618 <__sfp>
 80055e0:	60a0      	str	r0, [r4, #8]
 80055e2:	4620      	mov	r0, r4
 80055e4:	f000 f818 	bl	8005618 <__sfp>
 80055e8:	2200      	movs	r2, #0
 80055ea:	60e0      	str	r0, [r4, #12]
 80055ec:	2104      	movs	r1, #4
 80055ee:	6860      	ldr	r0, [r4, #4]
 80055f0:	f7ff ff82 	bl	80054f8 <std>
 80055f4:	68a0      	ldr	r0, [r4, #8]
 80055f6:	2201      	movs	r2, #1
 80055f8:	2109      	movs	r1, #9
 80055fa:	f7ff ff7d 	bl	80054f8 <std>
 80055fe:	68e0      	ldr	r0, [r4, #12]
 8005600:	2202      	movs	r2, #2
 8005602:	2112      	movs	r1, #18
 8005604:	f7ff ff78 	bl	80054f8 <std>
 8005608:	2301      	movs	r3, #1
 800560a:	61a3      	str	r3, [r4, #24]
 800560c:	e7d2      	b.n	80055b4 <__sinit+0xc>
 800560e:	bf00      	nop
 8005610:	08007e64 	.word	0x08007e64
 8005614:	08005541 	.word	0x08005541

08005618 <__sfp>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	4607      	mov	r7, r0
 800561c:	f7ff ffac 	bl	8005578 <__sfp_lock_acquire>
 8005620:	4b1e      	ldr	r3, [pc, #120]	; (800569c <__sfp+0x84>)
 8005622:	681e      	ldr	r6, [r3, #0]
 8005624:	69b3      	ldr	r3, [r6, #24]
 8005626:	b913      	cbnz	r3, 800562e <__sfp+0x16>
 8005628:	4630      	mov	r0, r6
 800562a:	f7ff ffbd 	bl	80055a8 <__sinit>
 800562e:	3648      	adds	r6, #72	; 0x48
 8005630:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005634:	3b01      	subs	r3, #1
 8005636:	d503      	bpl.n	8005640 <__sfp+0x28>
 8005638:	6833      	ldr	r3, [r6, #0]
 800563a:	b30b      	cbz	r3, 8005680 <__sfp+0x68>
 800563c:	6836      	ldr	r6, [r6, #0]
 800563e:	e7f7      	b.n	8005630 <__sfp+0x18>
 8005640:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005644:	b9d5      	cbnz	r5, 800567c <__sfp+0x64>
 8005646:	4b16      	ldr	r3, [pc, #88]	; (80056a0 <__sfp+0x88>)
 8005648:	60e3      	str	r3, [r4, #12]
 800564a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800564e:	6665      	str	r5, [r4, #100]	; 0x64
 8005650:	f000 f86c 	bl	800572c <__retarget_lock_init_recursive>
 8005654:	f7ff ff96 	bl	8005584 <__sfp_lock_release>
 8005658:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800565c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005660:	6025      	str	r5, [r4, #0]
 8005662:	61a5      	str	r5, [r4, #24]
 8005664:	2208      	movs	r2, #8
 8005666:	4629      	mov	r1, r5
 8005668:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800566c:	f000 f86f 	bl	800574e <memset>
 8005670:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005674:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005678:	4620      	mov	r0, r4
 800567a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800567c:	3468      	adds	r4, #104	; 0x68
 800567e:	e7d9      	b.n	8005634 <__sfp+0x1c>
 8005680:	2104      	movs	r1, #4
 8005682:	4638      	mov	r0, r7
 8005684:	f7ff ff62 	bl	800554c <__sfmoreglue>
 8005688:	4604      	mov	r4, r0
 800568a:	6030      	str	r0, [r6, #0]
 800568c:	2800      	cmp	r0, #0
 800568e:	d1d5      	bne.n	800563c <__sfp+0x24>
 8005690:	f7ff ff78 	bl	8005584 <__sfp_lock_release>
 8005694:	230c      	movs	r3, #12
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	e7ee      	b.n	8005678 <__sfp+0x60>
 800569a:	bf00      	nop
 800569c:	08007e64 	.word	0x08007e64
 80056a0:	ffff0001 	.word	0xffff0001

080056a4 <_fwalk_reent>:
 80056a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056a8:	4606      	mov	r6, r0
 80056aa:	4688      	mov	r8, r1
 80056ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056b0:	2700      	movs	r7, #0
 80056b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056b6:	f1b9 0901 	subs.w	r9, r9, #1
 80056ba:	d505      	bpl.n	80056c8 <_fwalk_reent+0x24>
 80056bc:	6824      	ldr	r4, [r4, #0]
 80056be:	2c00      	cmp	r4, #0
 80056c0:	d1f7      	bne.n	80056b2 <_fwalk_reent+0xe>
 80056c2:	4638      	mov	r0, r7
 80056c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056c8:	89ab      	ldrh	r3, [r5, #12]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d907      	bls.n	80056de <_fwalk_reent+0x3a>
 80056ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056d2:	3301      	adds	r3, #1
 80056d4:	d003      	beq.n	80056de <_fwalk_reent+0x3a>
 80056d6:	4629      	mov	r1, r5
 80056d8:	4630      	mov	r0, r6
 80056da:	47c0      	blx	r8
 80056dc:	4307      	orrs	r7, r0
 80056de:	3568      	adds	r5, #104	; 0x68
 80056e0:	e7e9      	b.n	80056b6 <_fwalk_reent+0x12>
	...

080056e4 <__libc_init_array>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	4d0d      	ldr	r5, [pc, #52]	; (800571c <__libc_init_array+0x38>)
 80056e8:	4c0d      	ldr	r4, [pc, #52]	; (8005720 <__libc_init_array+0x3c>)
 80056ea:	1b64      	subs	r4, r4, r5
 80056ec:	10a4      	asrs	r4, r4, #2
 80056ee:	2600      	movs	r6, #0
 80056f0:	42a6      	cmp	r6, r4
 80056f2:	d109      	bne.n	8005708 <__libc_init_array+0x24>
 80056f4:	4d0b      	ldr	r5, [pc, #44]	; (8005724 <__libc_init_array+0x40>)
 80056f6:	4c0c      	ldr	r4, [pc, #48]	; (8005728 <__libc_init_array+0x44>)
 80056f8:	f000 ff96 	bl	8006628 <_init>
 80056fc:	1b64      	subs	r4, r4, r5
 80056fe:	10a4      	asrs	r4, r4, #2
 8005700:	2600      	movs	r6, #0
 8005702:	42a6      	cmp	r6, r4
 8005704:	d105      	bne.n	8005712 <__libc_init_array+0x2e>
 8005706:	bd70      	pop	{r4, r5, r6, pc}
 8005708:	f855 3b04 	ldr.w	r3, [r5], #4
 800570c:	4798      	blx	r3
 800570e:	3601      	adds	r6, #1
 8005710:	e7ee      	b.n	80056f0 <__libc_init_array+0xc>
 8005712:	f855 3b04 	ldr.w	r3, [r5], #4
 8005716:	4798      	blx	r3
 8005718:	3601      	adds	r6, #1
 800571a:	e7f2      	b.n	8005702 <__libc_init_array+0x1e>
 800571c:	08008054 	.word	0x08008054
 8005720:	08008054 	.word	0x08008054
 8005724:	08008054 	.word	0x08008054
 8005728:	08008058 	.word	0x08008058

0800572c <__retarget_lock_init_recursive>:
 800572c:	4770      	bx	lr

0800572e <__retarget_lock_acquire_recursive>:
 800572e:	4770      	bx	lr

08005730 <__retarget_lock_release_recursive>:
 8005730:	4770      	bx	lr

08005732 <memcpy>:
 8005732:	440a      	add	r2, r1
 8005734:	4291      	cmp	r1, r2
 8005736:	f100 33ff 	add.w	r3, r0, #4294967295
 800573a:	d100      	bne.n	800573e <memcpy+0xc>
 800573c:	4770      	bx	lr
 800573e:	b510      	push	{r4, lr}
 8005740:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005748:	4291      	cmp	r1, r2
 800574a:	d1f9      	bne.n	8005740 <memcpy+0xe>
 800574c:	bd10      	pop	{r4, pc}

0800574e <memset>:
 800574e:	4402      	add	r2, r0
 8005750:	4603      	mov	r3, r0
 8005752:	4293      	cmp	r3, r2
 8005754:	d100      	bne.n	8005758 <memset+0xa>
 8005756:	4770      	bx	lr
 8005758:	f803 1b01 	strb.w	r1, [r3], #1
 800575c:	e7f9      	b.n	8005752 <memset+0x4>
	...

08005760 <_free_r>:
 8005760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005762:	2900      	cmp	r1, #0
 8005764:	d044      	beq.n	80057f0 <_free_r+0x90>
 8005766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800576a:	9001      	str	r0, [sp, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f1a1 0404 	sub.w	r4, r1, #4
 8005772:	bfb8      	it	lt
 8005774:	18e4      	addlt	r4, r4, r3
 8005776:	f000 fab9 	bl	8005cec <__malloc_lock>
 800577a:	4a1e      	ldr	r2, [pc, #120]	; (80057f4 <_free_r+0x94>)
 800577c:	9801      	ldr	r0, [sp, #4]
 800577e:	6813      	ldr	r3, [r2, #0]
 8005780:	b933      	cbnz	r3, 8005790 <_free_r+0x30>
 8005782:	6063      	str	r3, [r4, #4]
 8005784:	6014      	str	r4, [r2, #0]
 8005786:	b003      	add	sp, #12
 8005788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800578c:	f000 bab4 	b.w	8005cf8 <__malloc_unlock>
 8005790:	42a3      	cmp	r3, r4
 8005792:	d908      	bls.n	80057a6 <_free_r+0x46>
 8005794:	6825      	ldr	r5, [r4, #0]
 8005796:	1961      	adds	r1, r4, r5
 8005798:	428b      	cmp	r3, r1
 800579a:	bf01      	itttt	eq
 800579c:	6819      	ldreq	r1, [r3, #0]
 800579e:	685b      	ldreq	r3, [r3, #4]
 80057a0:	1949      	addeq	r1, r1, r5
 80057a2:	6021      	streq	r1, [r4, #0]
 80057a4:	e7ed      	b.n	8005782 <_free_r+0x22>
 80057a6:	461a      	mov	r2, r3
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	b10b      	cbz	r3, 80057b0 <_free_r+0x50>
 80057ac:	42a3      	cmp	r3, r4
 80057ae:	d9fa      	bls.n	80057a6 <_free_r+0x46>
 80057b0:	6811      	ldr	r1, [r2, #0]
 80057b2:	1855      	adds	r5, r2, r1
 80057b4:	42a5      	cmp	r5, r4
 80057b6:	d10b      	bne.n	80057d0 <_free_r+0x70>
 80057b8:	6824      	ldr	r4, [r4, #0]
 80057ba:	4421      	add	r1, r4
 80057bc:	1854      	adds	r4, r2, r1
 80057be:	42a3      	cmp	r3, r4
 80057c0:	6011      	str	r1, [r2, #0]
 80057c2:	d1e0      	bne.n	8005786 <_free_r+0x26>
 80057c4:	681c      	ldr	r4, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	6053      	str	r3, [r2, #4]
 80057ca:	4421      	add	r1, r4
 80057cc:	6011      	str	r1, [r2, #0]
 80057ce:	e7da      	b.n	8005786 <_free_r+0x26>
 80057d0:	d902      	bls.n	80057d8 <_free_r+0x78>
 80057d2:	230c      	movs	r3, #12
 80057d4:	6003      	str	r3, [r0, #0]
 80057d6:	e7d6      	b.n	8005786 <_free_r+0x26>
 80057d8:	6825      	ldr	r5, [r4, #0]
 80057da:	1961      	adds	r1, r4, r5
 80057dc:	428b      	cmp	r3, r1
 80057de:	bf04      	itt	eq
 80057e0:	6819      	ldreq	r1, [r3, #0]
 80057e2:	685b      	ldreq	r3, [r3, #4]
 80057e4:	6063      	str	r3, [r4, #4]
 80057e6:	bf04      	itt	eq
 80057e8:	1949      	addeq	r1, r1, r5
 80057ea:	6021      	streq	r1, [r4, #0]
 80057ec:	6054      	str	r4, [r2, #4]
 80057ee:	e7ca      	b.n	8005786 <_free_r+0x26>
 80057f0:	b003      	add	sp, #12
 80057f2:	bd30      	pop	{r4, r5, pc}
 80057f4:	200134dc 	.word	0x200134dc

080057f8 <sbrk_aligned>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	4e0e      	ldr	r6, [pc, #56]	; (8005834 <sbrk_aligned+0x3c>)
 80057fc:	460c      	mov	r4, r1
 80057fe:	6831      	ldr	r1, [r6, #0]
 8005800:	4605      	mov	r5, r0
 8005802:	b911      	cbnz	r1, 800580a <sbrk_aligned+0x12>
 8005804:	f000 f8a4 	bl	8005950 <_sbrk_r>
 8005808:	6030      	str	r0, [r6, #0]
 800580a:	4621      	mov	r1, r4
 800580c:	4628      	mov	r0, r5
 800580e:	f000 f89f 	bl	8005950 <_sbrk_r>
 8005812:	1c43      	adds	r3, r0, #1
 8005814:	d00a      	beq.n	800582c <sbrk_aligned+0x34>
 8005816:	1cc4      	adds	r4, r0, #3
 8005818:	f024 0403 	bic.w	r4, r4, #3
 800581c:	42a0      	cmp	r0, r4
 800581e:	d007      	beq.n	8005830 <sbrk_aligned+0x38>
 8005820:	1a21      	subs	r1, r4, r0
 8005822:	4628      	mov	r0, r5
 8005824:	f000 f894 	bl	8005950 <_sbrk_r>
 8005828:	3001      	adds	r0, #1
 800582a:	d101      	bne.n	8005830 <sbrk_aligned+0x38>
 800582c:	f04f 34ff 	mov.w	r4, #4294967295
 8005830:	4620      	mov	r0, r4
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	200134e0 	.word	0x200134e0

08005838 <_malloc_r>:
 8005838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800583c:	1ccd      	adds	r5, r1, #3
 800583e:	f025 0503 	bic.w	r5, r5, #3
 8005842:	3508      	adds	r5, #8
 8005844:	2d0c      	cmp	r5, #12
 8005846:	bf38      	it	cc
 8005848:	250c      	movcc	r5, #12
 800584a:	2d00      	cmp	r5, #0
 800584c:	4607      	mov	r7, r0
 800584e:	db01      	blt.n	8005854 <_malloc_r+0x1c>
 8005850:	42a9      	cmp	r1, r5
 8005852:	d905      	bls.n	8005860 <_malloc_r+0x28>
 8005854:	230c      	movs	r3, #12
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	2600      	movs	r6, #0
 800585a:	4630      	mov	r0, r6
 800585c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005860:	4e2e      	ldr	r6, [pc, #184]	; (800591c <_malloc_r+0xe4>)
 8005862:	f000 fa43 	bl	8005cec <__malloc_lock>
 8005866:	6833      	ldr	r3, [r6, #0]
 8005868:	461c      	mov	r4, r3
 800586a:	bb34      	cbnz	r4, 80058ba <_malloc_r+0x82>
 800586c:	4629      	mov	r1, r5
 800586e:	4638      	mov	r0, r7
 8005870:	f7ff ffc2 	bl	80057f8 <sbrk_aligned>
 8005874:	1c43      	adds	r3, r0, #1
 8005876:	4604      	mov	r4, r0
 8005878:	d14d      	bne.n	8005916 <_malloc_r+0xde>
 800587a:	6834      	ldr	r4, [r6, #0]
 800587c:	4626      	mov	r6, r4
 800587e:	2e00      	cmp	r6, #0
 8005880:	d140      	bne.n	8005904 <_malloc_r+0xcc>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	4631      	mov	r1, r6
 8005886:	4638      	mov	r0, r7
 8005888:	eb04 0803 	add.w	r8, r4, r3
 800588c:	f000 f860 	bl	8005950 <_sbrk_r>
 8005890:	4580      	cmp	r8, r0
 8005892:	d13a      	bne.n	800590a <_malloc_r+0xd2>
 8005894:	6821      	ldr	r1, [r4, #0]
 8005896:	3503      	adds	r5, #3
 8005898:	1a6d      	subs	r5, r5, r1
 800589a:	f025 0503 	bic.w	r5, r5, #3
 800589e:	3508      	adds	r5, #8
 80058a0:	2d0c      	cmp	r5, #12
 80058a2:	bf38      	it	cc
 80058a4:	250c      	movcc	r5, #12
 80058a6:	4629      	mov	r1, r5
 80058a8:	4638      	mov	r0, r7
 80058aa:	f7ff ffa5 	bl	80057f8 <sbrk_aligned>
 80058ae:	3001      	adds	r0, #1
 80058b0:	d02b      	beq.n	800590a <_malloc_r+0xd2>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	442b      	add	r3, r5
 80058b6:	6023      	str	r3, [r4, #0]
 80058b8:	e00e      	b.n	80058d8 <_malloc_r+0xa0>
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	1b52      	subs	r2, r2, r5
 80058be:	d41e      	bmi.n	80058fe <_malloc_r+0xc6>
 80058c0:	2a0b      	cmp	r2, #11
 80058c2:	d916      	bls.n	80058f2 <_malloc_r+0xba>
 80058c4:	1961      	adds	r1, r4, r5
 80058c6:	42a3      	cmp	r3, r4
 80058c8:	6025      	str	r5, [r4, #0]
 80058ca:	bf18      	it	ne
 80058cc:	6059      	strne	r1, [r3, #4]
 80058ce:	6863      	ldr	r3, [r4, #4]
 80058d0:	bf08      	it	eq
 80058d2:	6031      	streq	r1, [r6, #0]
 80058d4:	5162      	str	r2, [r4, r5]
 80058d6:	604b      	str	r3, [r1, #4]
 80058d8:	4638      	mov	r0, r7
 80058da:	f104 060b 	add.w	r6, r4, #11
 80058de:	f000 fa0b 	bl	8005cf8 <__malloc_unlock>
 80058e2:	f026 0607 	bic.w	r6, r6, #7
 80058e6:	1d23      	adds	r3, r4, #4
 80058e8:	1af2      	subs	r2, r6, r3
 80058ea:	d0b6      	beq.n	800585a <_malloc_r+0x22>
 80058ec:	1b9b      	subs	r3, r3, r6
 80058ee:	50a3      	str	r3, [r4, r2]
 80058f0:	e7b3      	b.n	800585a <_malloc_r+0x22>
 80058f2:	6862      	ldr	r2, [r4, #4]
 80058f4:	42a3      	cmp	r3, r4
 80058f6:	bf0c      	ite	eq
 80058f8:	6032      	streq	r2, [r6, #0]
 80058fa:	605a      	strne	r2, [r3, #4]
 80058fc:	e7ec      	b.n	80058d8 <_malloc_r+0xa0>
 80058fe:	4623      	mov	r3, r4
 8005900:	6864      	ldr	r4, [r4, #4]
 8005902:	e7b2      	b.n	800586a <_malloc_r+0x32>
 8005904:	4634      	mov	r4, r6
 8005906:	6876      	ldr	r6, [r6, #4]
 8005908:	e7b9      	b.n	800587e <_malloc_r+0x46>
 800590a:	230c      	movs	r3, #12
 800590c:	603b      	str	r3, [r7, #0]
 800590e:	4638      	mov	r0, r7
 8005910:	f000 f9f2 	bl	8005cf8 <__malloc_unlock>
 8005914:	e7a1      	b.n	800585a <_malloc_r+0x22>
 8005916:	6025      	str	r5, [r4, #0]
 8005918:	e7de      	b.n	80058d8 <_malloc_r+0xa0>
 800591a:	bf00      	nop
 800591c:	200134dc 	.word	0x200134dc

08005920 <iprintf>:
 8005920:	b40f      	push	{r0, r1, r2, r3}
 8005922:	4b0a      	ldr	r3, [pc, #40]	; (800594c <iprintf+0x2c>)
 8005924:	b513      	push	{r0, r1, r4, lr}
 8005926:	681c      	ldr	r4, [r3, #0]
 8005928:	b124      	cbz	r4, 8005934 <iprintf+0x14>
 800592a:	69a3      	ldr	r3, [r4, #24]
 800592c:	b913      	cbnz	r3, 8005934 <iprintf+0x14>
 800592e:	4620      	mov	r0, r4
 8005930:	f7ff fe3a 	bl	80055a8 <__sinit>
 8005934:	ab05      	add	r3, sp, #20
 8005936:	9a04      	ldr	r2, [sp, #16]
 8005938:	68a1      	ldr	r1, [r4, #8]
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	4620      	mov	r0, r4
 800593e:	f000 fa0b 	bl	8005d58 <_vfiprintf_r>
 8005942:	b002      	add	sp, #8
 8005944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005948:	b004      	add	sp, #16
 800594a:	4770      	bx	lr
 800594c:	20000188 	.word	0x20000188

08005950 <_sbrk_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	4d06      	ldr	r5, [pc, #24]	; (800596c <_sbrk_r+0x1c>)
 8005954:	2300      	movs	r3, #0
 8005956:	4604      	mov	r4, r0
 8005958:	4608      	mov	r0, r1
 800595a:	602b      	str	r3, [r5, #0]
 800595c:	f7fb fe74 	bl	8001648 <_sbrk>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_sbrk_r+0x1a>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_sbrk_r+0x1a>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	200134e4 	.word	0x200134e4

08005970 <__sread>:
 8005970:	b510      	push	{r4, lr}
 8005972:	460c      	mov	r4, r1
 8005974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005978:	f000 fcb2 	bl	80062e0 <_read_r>
 800597c:	2800      	cmp	r0, #0
 800597e:	bfab      	itete	ge
 8005980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005982:	89a3      	ldrhlt	r3, [r4, #12]
 8005984:	181b      	addge	r3, r3, r0
 8005986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800598a:	bfac      	ite	ge
 800598c:	6563      	strge	r3, [r4, #84]	; 0x54
 800598e:	81a3      	strhlt	r3, [r4, #12]
 8005990:	bd10      	pop	{r4, pc}

08005992 <__swrite>:
 8005992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005996:	461f      	mov	r7, r3
 8005998:	898b      	ldrh	r3, [r1, #12]
 800599a:	05db      	lsls	r3, r3, #23
 800599c:	4605      	mov	r5, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	4616      	mov	r6, r2
 80059a2:	d505      	bpl.n	80059b0 <__swrite+0x1e>
 80059a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a8:	2302      	movs	r3, #2
 80059aa:	2200      	movs	r2, #0
 80059ac:	f000 f984 	bl	8005cb8 <_lseek_r>
 80059b0:	89a3      	ldrh	r3, [r4, #12]
 80059b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ba:	81a3      	strh	r3, [r4, #12]
 80059bc:	4632      	mov	r2, r6
 80059be:	463b      	mov	r3, r7
 80059c0:	4628      	mov	r0, r5
 80059c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059c6:	f000 b925 	b.w	8005c14 <_write_r>

080059ca <__sseek>:
 80059ca:	b510      	push	{r4, lr}
 80059cc:	460c      	mov	r4, r1
 80059ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d2:	f000 f971 	bl	8005cb8 <_lseek_r>
 80059d6:	1c43      	adds	r3, r0, #1
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	bf15      	itete	ne
 80059dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80059de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059e6:	81a3      	strheq	r3, [r4, #12]
 80059e8:	bf18      	it	ne
 80059ea:	81a3      	strhne	r3, [r4, #12]
 80059ec:	bd10      	pop	{r4, pc}

080059ee <__sclose>:
 80059ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f2:	f000 b93f 	b.w	8005c74 <_close_r>

080059f6 <strncmp>:
 80059f6:	b510      	push	{r4, lr}
 80059f8:	b17a      	cbz	r2, 8005a1a <strncmp+0x24>
 80059fa:	4603      	mov	r3, r0
 80059fc:	3901      	subs	r1, #1
 80059fe:	1884      	adds	r4, r0, r2
 8005a00:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005a04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005a08:	4290      	cmp	r0, r2
 8005a0a:	d101      	bne.n	8005a10 <strncmp+0x1a>
 8005a0c:	42a3      	cmp	r3, r4
 8005a0e:	d101      	bne.n	8005a14 <strncmp+0x1e>
 8005a10:	1a80      	subs	r0, r0, r2
 8005a12:	bd10      	pop	{r4, pc}
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d1f3      	bne.n	8005a00 <strncmp+0xa>
 8005a18:	e7fa      	b.n	8005a10 <strncmp+0x1a>
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	e7f9      	b.n	8005a12 <strncmp+0x1c>

08005a1e <strncpy>:
 8005a1e:	b510      	push	{r4, lr}
 8005a20:	3901      	subs	r1, #1
 8005a22:	4603      	mov	r3, r0
 8005a24:	b132      	cbz	r2, 8005a34 <strncpy+0x16>
 8005a26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005a2a:	f803 4b01 	strb.w	r4, [r3], #1
 8005a2e:	3a01      	subs	r2, #1
 8005a30:	2c00      	cmp	r4, #0
 8005a32:	d1f7      	bne.n	8005a24 <strncpy+0x6>
 8005a34:	441a      	add	r2, r3
 8005a36:	2100      	movs	r1, #0
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d100      	bne.n	8005a3e <strncpy+0x20>
 8005a3c:	bd10      	pop	{r4, pc}
 8005a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a42:	e7f9      	b.n	8005a38 <strncpy+0x1a>

08005a44 <strtok>:
 8005a44:	4b16      	ldr	r3, [pc, #88]	; (8005aa0 <strtok+0x5c>)
 8005a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a48:	681e      	ldr	r6, [r3, #0]
 8005a4a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005a4c:	4605      	mov	r5, r0
 8005a4e:	b9fc      	cbnz	r4, 8005a90 <strtok+0x4c>
 8005a50:	2050      	movs	r0, #80	; 0x50
 8005a52:	9101      	str	r1, [sp, #4]
 8005a54:	f000 f942 	bl	8005cdc <malloc>
 8005a58:	9901      	ldr	r1, [sp, #4]
 8005a5a:	65b0      	str	r0, [r6, #88]	; 0x58
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	b920      	cbnz	r0, 8005a6a <strtok+0x26>
 8005a60:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <strtok+0x60>)
 8005a62:	4811      	ldr	r0, [pc, #68]	; (8005aa8 <strtok+0x64>)
 8005a64:	2157      	movs	r1, #87	; 0x57
 8005a66:	f000 f8e7 	bl	8005c38 <__assert_func>
 8005a6a:	e9c0 4400 	strd	r4, r4, [r0]
 8005a6e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005a72:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005a76:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005a7a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005a7e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005a82:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005a86:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005a8a:	6184      	str	r4, [r0, #24]
 8005a8c:	7704      	strb	r4, [r0, #28]
 8005a8e:	6244      	str	r4, [r0, #36]	; 0x24
 8005a90:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005a92:	2301      	movs	r3, #1
 8005a94:	4628      	mov	r0, r5
 8005a96:	b002      	add	sp, #8
 8005a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a9c:	f000 b806 	b.w	8005aac <__strtok_r>
 8005aa0:	20000188 	.word	0x20000188
 8005aa4:	08007e68 	.word	0x08007e68
 8005aa8:	08007e7f 	.word	0x08007e7f

08005aac <__strtok_r>:
 8005aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aae:	b908      	cbnz	r0, 8005ab4 <__strtok_r+0x8>
 8005ab0:	6810      	ldr	r0, [r2, #0]
 8005ab2:	b188      	cbz	r0, 8005ad8 <__strtok_r+0x2c>
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005abc:	460f      	mov	r7, r1
 8005abe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005ac2:	b91e      	cbnz	r6, 8005acc <__strtok_r+0x20>
 8005ac4:	b965      	cbnz	r5, 8005ae0 <__strtok_r+0x34>
 8005ac6:	6015      	str	r5, [r2, #0]
 8005ac8:	4628      	mov	r0, r5
 8005aca:	e005      	b.n	8005ad8 <__strtok_r+0x2c>
 8005acc:	42b5      	cmp	r5, r6
 8005ace:	d1f6      	bne.n	8005abe <__strtok_r+0x12>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1f0      	bne.n	8005ab6 <__strtok_r+0xa>
 8005ad4:	6014      	str	r4, [r2, #0]
 8005ad6:	7003      	strb	r3, [r0, #0]
 8005ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ada:	461c      	mov	r4, r3
 8005adc:	e00c      	b.n	8005af8 <__strtok_r+0x4c>
 8005ade:	b915      	cbnz	r5, 8005ae6 <__strtok_r+0x3a>
 8005ae0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ae4:	460e      	mov	r6, r1
 8005ae6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005aea:	42ab      	cmp	r3, r5
 8005aec:	d1f7      	bne.n	8005ade <__strtok_r+0x32>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0f3      	beq.n	8005ada <__strtok_r+0x2e>
 8005af2:	2300      	movs	r3, #0
 8005af4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005af8:	6014      	str	r4, [r2, #0]
 8005afa:	e7ed      	b.n	8005ad8 <__strtok_r+0x2c>

08005afc <_strtol_l.constprop.0>:
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b02:	d001      	beq.n	8005b08 <_strtol_l.constprop.0+0xc>
 8005b04:	2b24      	cmp	r3, #36	; 0x24
 8005b06:	d906      	bls.n	8005b16 <_strtol_l.constprop.0+0x1a>
 8005b08:	f7ff fc1c 	bl	8005344 <__errno>
 8005b0c:	2316      	movs	r3, #22
 8005b0e:	6003      	str	r3, [r0, #0]
 8005b10:	2000      	movs	r0, #0
 8005b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b16:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005bfc <_strtol_l.constprop.0+0x100>
 8005b1a:	460d      	mov	r5, r1
 8005b1c:	462e      	mov	r6, r5
 8005b1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b22:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005b26:	f017 0708 	ands.w	r7, r7, #8
 8005b2a:	d1f7      	bne.n	8005b1c <_strtol_l.constprop.0+0x20>
 8005b2c:	2c2d      	cmp	r4, #45	; 0x2d
 8005b2e:	d132      	bne.n	8005b96 <_strtol_l.constprop.0+0x9a>
 8005b30:	782c      	ldrb	r4, [r5, #0]
 8005b32:	2701      	movs	r7, #1
 8005b34:	1cb5      	adds	r5, r6, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d05b      	beq.n	8005bf2 <_strtol_l.constprop.0+0xf6>
 8005b3a:	2b10      	cmp	r3, #16
 8005b3c:	d109      	bne.n	8005b52 <_strtol_l.constprop.0+0x56>
 8005b3e:	2c30      	cmp	r4, #48	; 0x30
 8005b40:	d107      	bne.n	8005b52 <_strtol_l.constprop.0+0x56>
 8005b42:	782c      	ldrb	r4, [r5, #0]
 8005b44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005b48:	2c58      	cmp	r4, #88	; 0x58
 8005b4a:	d14d      	bne.n	8005be8 <_strtol_l.constprop.0+0xec>
 8005b4c:	786c      	ldrb	r4, [r5, #1]
 8005b4e:	2310      	movs	r3, #16
 8005b50:	3502      	adds	r5, #2
 8005b52:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005b56:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b5a:	f04f 0c00 	mov.w	ip, #0
 8005b5e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005b62:	4666      	mov	r6, ip
 8005b64:	fb03 8a19 	mls	sl, r3, r9, r8
 8005b68:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005b6c:	f1be 0f09 	cmp.w	lr, #9
 8005b70:	d816      	bhi.n	8005ba0 <_strtol_l.constprop.0+0xa4>
 8005b72:	4674      	mov	r4, lr
 8005b74:	42a3      	cmp	r3, r4
 8005b76:	dd24      	ble.n	8005bc2 <_strtol_l.constprop.0+0xc6>
 8005b78:	f1bc 0f00 	cmp.w	ip, #0
 8005b7c:	db1e      	blt.n	8005bbc <_strtol_l.constprop.0+0xc0>
 8005b7e:	45b1      	cmp	r9, r6
 8005b80:	d31c      	bcc.n	8005bbc <_strtol_l.constprop.0+0xc0>
 8005b82:	d101      	bne.n	8005b88 <_strtol_l.constprop.0+0x8c>
 8005b84:	45a2      	cmp	sl, r4
 8005b86:	db19      	blt.n	8005bbc <_strtol_l.constprop.0+0xc0>
 8005b88:	fb06 4603 	mla	r6, r6, r3, r4
 8005b8c:	f04f 0c01 	mov.w	ip, #1
 8005b90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b94:	e7e8      	b.n	8005b68 <_strtol_l.constprop.0+0x6c>
 8005b96:	2c2b      	cmp	r4, #43	; 0x2b
 8005b98:	bf04      	itt	eq
 8005b9a:	782c      	ldrbeq	r4, [r5, #0]
 8005b9c:	1cb5      	addeq	r5, r6, #2
 8005b9e:	e7ca      	b.n	8005b36 <_strtol_l.constprop.0+0x3a>
 8005ba0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005ba4:	f1be 0f19 	cmp.w	lr, #25
 8005ba8:	d801      	bhi.n	8005bae <_strtol_l.constprop.0+0xb2>
 8005baa:	3c37      	subs	r4, #55	; 0x37
 8005bac:	e7e2      	b.n	8005b74 <_strtol_l.constprop.0+0x78>
 8005bae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005bb2:	f1be 0f19 	cmp.w	lr, #25
 8005bb6:	d804      	bhi.n	8005bc2 <_strtol_l.constprop.0+0xc6>
 8005bb8:	3c57      	subs	r4, #87	; 0x57
 8005bba:	e7db      	b.n	8005b74 <_strtol_l.constprop.0+0x78>
 8005bbc:	f04f 3cff 	mov.w	ip, #4294967295
 8005bc0:	e7e6      	b.n	8005b90 <_strtol_l.constprop.0+0x94>
 8005bc2:	f1bc 0f00 	cmp.w	ip, #0
 8005bc6:	da05      	bge.n	8005bd4 <_strtol_l.constprop.0+0xd8>
 8005bc8:	2322      	movs	r3, #34	; 0x22
 8005bca:	6003      	str	r3, [r0, #0]
 8005bcc:	4646      	mov	r6, r8
 8005bce:	b942      	cbnz	r2, 8005be2 <_strtol_l.constprop.0+0xe6>
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	e79e      	b.n	8005b12 <_strtol_l.constprop.0+0x16>
 8005bd4:	b107      	cbz	r7, 8005bd8 <_strtol_l.constprop.0+0xdc>
 8005bd6:	4276      	negs	r6, r6
 8005bd8:	2a00      	cmp	r2, #0
 8005bda:	d0f9      	beq.n	8005bd0 <_strtol_l.constprop.0+0xd4>
 8005bdc:	f1bc 0f00 	cmp.w	ip, #0
 8005be0:	d000      	beq.n	8005be4 <_strtol_l.constprop.0+0xe8>
 8005be2:	1e69      	subs	r1, r5, #1
 8005be4:	6011      	str	r1, [r2, #0]
 8005be6:	e7f3      	b.n	8005bd0 <_strtol_l.constprop.0+0xd4>
 8005be8:	2430      	movs	r4, #48	; 0x30
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1b1      	bne.n	8005b52 <_strtol_l.constprop.0+0x56>
 8005bee:	2308      	movs	r3, #8
 8005bf0:	e7af      	b.n	8005b52 <_strtol_l.constprop.0+0x56>
 8005bf2:	2c30      	cmp	r4, #48	; 0x30
 8005bf4:	d0a5      	beq.n	8005b42 <_strtol_l.constprop.0+0x46>
 8005bf6:	230a      	movs	r3, #10
 8005bf8:	e7ab      	b.n	8005b52 <_strtol_l.constprop.0+0x56>
 8005bfa:	bf00      	nop
 8005bfc:	08007f19 	.word	0x08007f19

08005c00 <strtol>:
 8005c00:	4613      	mov	r3, r2
 8005c02:	460a      	mov	r2, r1
 8005c04:	4601      	mov	r1, r0
 8005c06:	4802      	ldr	r0, [pc, #8]	; (8005c10 <strtol+0x10>)
 8005c08:	6800      	ldr	r0, [r0, #0]
 8005c0a:	f7ff bf77 	b.w	8005afc <_strtol_l.constprop.0>
 8005c0e:	bf00      	nop
 8005c10:	20000188 	.word	0x20000188

08005c14 <_write_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4d07      	ldr	r5, [pc, #28]	; (8005c34 <_write_r+0x20>)
 8005c18:	4604      	mov	r4, r0
 8005c1a:	4608      	mov	r0, r1
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	2200      	movs	r2, #0
 8005c20:	602a      	str	r2, [r5, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	f7fb fcbf 	bl	80015a6 <_write>
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	d102      	bne.n	8005c32 <_write_r+0x1e>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	b103      	cbz	r3, 8005c32 <_write_r+0x1e>
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	bd38      	pop	{r3, r4, r5, pc}
 8005c34:	200134e4 	.word	0x200134e4

08005c38 <__assert_func>:
 8005c38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c3a:	4614      	mov	r4, r2
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <__assert_func+0x2c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4605      	mov	r5, r0
 8005c44:	68d8      	ldr	r0, [r3, #12]
 8005c46:	b14c      	cbz	r4, 8005c5c <__assert_func+0x24>
 8005c48:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <__assert_func+0x30>)
 8005c4a:	9100      	str	r1, [sp, #0]
 8005c4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c50:	4906      	ldr	r1, [pc, #24]	; (8005c6c <__assert_func+0x34>)
 8005c52:	462b      	mov	r3, r5
 8005c54:	f000 f81e 	bl	8005c94 <fiprintf>
 8005c58:	f000 fc14 	bl	8006484 <abort>
 8005c5c:	4b04      	ldr	r3, [pc, #16]	; (8005c70 <__assert_func+0x38>)
 8005c5e:	461c      	mov	r4, r3
 8005c60:	e7f3      	b.n	8005c4a <__assert_func+0x12>
 8005c62:	bf00      	nop
 8005c64:	20000188 	.word	0x20000188
 8005c68:	08007edc 	.word	0x08007edc
 8005c6c:	08007ee9 	.word	0x08007ee9
 8005c70:	08007f17 	.word	0x08007f17

08005c74 <_close_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4d06      	ldr	r5, [pc, #24]	; (8005c90 <_close_r+0x1c>)
 8005c78:	2300      	movs	r3, #0
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	602b      	str	r3, [r5, #0]
 8005c80:	f7fb fcad 	bl	80015de <_close>
 8005c84:	1c43      	adds	r3, r0, #1
 8005c86:	d102      	bne.n	8005c8e <_close_r+0x1a>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	b103      	cbz	r3, 8005c8e <_close_r+0x1a>
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	bd38      	pop	{r3, r4, r5, pc}
 8005c90:	200134e4 	.word	0x200134e4

08005c94 <fiprintf>:
 8005c94:	b40e      	push	{r1, r2, r3}
 8005c96:	b503      	push	{r0, r1, lr}
 8005c98:	4601      	mov	r1, r0
 8005c9a:	ab03      	add	r3, sp, #12
 8005c9c:	4805      	ldr	r0, [pc, #20]	; (8005cb4 <fiprintf+0x20>)
 8005c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ca2:	6800      	ldr	r0, [r0, #0]
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	f000 f857 	bl	8005d58 <_vfiprintf_r>
 8005caa:	b002      	add	sp, #8
 8005cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cb0:	b003      	add	sp, #12
 8005cb2:	4770      	bx	lr
 8005cb4:	20000188 	.word	0x20000188

08005cb8 <_lseek_r>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	4d07      	ldr	r5, [pc, #28]	; (8005cd8 <_lseek_r+0x20>)
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	4608      	mov	r0, r1
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	602a      	str	r2, [r5, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f7fb fcb0 	bl	800162c <_lseek>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d102      	bne.n	8005cd6 <_lseek_r+0x1e>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	b103      	cbz	r3, 8005cd6 <_lseek_r+0x1e>
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	200134e4 	.word	0x200134e4

08005cdc <malloc>:
 8005cdc:	4b02      	ldr	r3, [pc, #8]	; (8005ce8 <malloc+0xc>)
 8005cde:	4601      	mov	r1, r0
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	f7ff bda9 	b.w	8005838 <_malloc_r>
 8005ce6:	bf00      	nop
 8005ce8:	20000188 	.word	0x20000188

08005cec <__malloc_lock>:
 8005cec:	4801      	ldr	r0, [pc, #4]	; (8005cf4 <__malloc_lock+0x8>)
 8005cee:	f7ff bd1e 	b.w	800572e <__retarget_lock_acquire_recursive>
 8005cf2:	bf00      	nop
 8005cf4:	200134d8 	.word	0x200134d8

08005cf8 <__malloc_unlock>:
 8005cf8:	4801      	ldr	r0, [pc, #4]	; (8005d00 <__malloc_unlock+0x8>)
 8005cfa:	f7ff bd19 	b.w	8005730 <__retarget_lock_release_recursive>
 8005cfe:	bf00      	nop
 8005d00:	200134d8 	.word	0x200134d8

08005d04 <__sfputc_r>:
 8005d04:	6893      	ldr	r3, [r2, #8]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	b410      	push	{r4}
 8005d0c:	6093      	str	r3, [r2, #8]
 8005d0e:	da08      	bge.n	8005d22 <__sfputc_r+0x1e>
 8005d10:	6994      	ldr	r4, [r2, #24]
 8005d12:	42a3      	cmp	r3, r4
 8005d14:	db01      	blt.n	8005d1a <__sfputc_r+0x16>
 8005d16:	290a      	cmp	r1, #10
 8005d18:	d103      	bne.n	8005d22 <__sfputc_r+0x1e>
 8005d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d1e:	f000 baf1 	b.w	8006304 <__swbuf_r>
 8005d22:	6813      	ldr	r3, [r2, #0]
 8005d24:	1c58      	adds	r0, r3, #1
 8005d26:	6010      	str	r0, [r2, #0]
 8005d28:	7019      	strb	r1, [r3, #0]
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <__sfputs_r>:
 8005d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d34:	4606      	mov	r6, r0
 8005d36:	460f      	mov	r7, r1
 8005d38:	4614      	mov	r4, r2
 8005d3a:	18d5      	adds	r5, r2, r3
 8005d3c:	42ac      	cmp	r4, r5
 8005d3e:	d101      	bne.n	8005d44 <__sfputs_r+0x12>
 8005d40:	2000      	movs	r0, #0
 8005d42:	e007      	b.n	8005d54 <__sfputs_r+0x22>
 8005d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d48:	463a      	mov	r2, r7
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f7ff ffda 	bl	8005d04 <__sfputc_r>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d1f3      	bne.n	8005d3c <__sfputs_r+0xa>
 8005d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d58 <_vfiprintf_r>:
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	460d      	mov	r5, r1
 8005d5e:	b09d      	sub	sp, #116	; 0x74
 8005d60:	4614      	mov	r4, r2
 8005d62:	4698      	mov	r8, r3
 8005d64:	4606      	mov	r6, r0
 8005d66:	b118      	cbz	r0, 8005d70 <_vfiprintf_r+0x18>
 8005d68:	6983      	ldr	r3, [r0, #24]
 8005d6a:	b90b      	cbnz	r3, 8005d70 <_vfiprintf_r+0x18>
 8005d6c:	f7ff fc1c 	bl	80055a8 <__sinit>
 8005d70:	4b89      	ldr	r3, [pc, #548]	; (8005f98 <_vfiprintf_r+0x240>)
 8005d72:	429d      	cmp	r5, r3
 8005d74:	d11b      	bne.n	8005dae <_vfiprintf_r+0x56>
 8005d76:	6875      	ldr	r5, [r6, #4]
 8005d78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d7a:	07d9      	lsls	r1, r3, #31
 8005d7c:	d405      	bmi.n	8005d8a <_vfiprintf_r+0x32>
 8005d7e:	89ab      	ldrh	r3, [r5, #12]
 8005d80:	059a      	lsls	r2, r3, #22
 8005d82:	d402      	bmi.n	8005d8a <_vfiprintf_r+0x32>
 8005d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d86:	f7ff fcd2 	bl	800572e <__retarget_lock_acquire_recursive>
 8005d8a:	89ab      	ldrh	r3, [r5, #12]
 8005d8c:	071b      	lsls	r3, r3, #28
 8005d8e:	d501      	bpl.n	8005d94 <_vfiprintf_r+0x3c>
 8005d90:	692b      	ldr	r3, [r5, #16]
 8005d92:	b9eb      	cbnz	r3, 8005dd0 <_vfiprintf_r+0x78>
 8005d94:	4629      	mov	r1, r5
 8005d96:	4630      	mov	r0, r6
 8005d98:	f000 fb06 	bl	80063a8 <__swsetup_r>
 8005d9c:	b1c0      	cbz	r0, 8005dd0 <_vfiprintf_r+0x78>
 8005d9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da0:	07dc      	lsls	r4, r3, #31
 8005da2:	d50e      	bpl.n	8005dc2 <_vfiprintf_r+0x6a>
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	b01d      	add	sp, #116	; 0x74
 8005daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dae:	4b7b      	ldr	r3, [pc, #492]	; (8005f9c <_vfiprintf_r+0x244>)
 8005db0:	429d      	cmp	r5, r3
 8005db2:	d101      	bne.n	8005db8 <_vfiprintf_r+0x60>
 8005db4:	68b5      	ldr	r5, [r6, #8]
 8005db6:	e7df      	b.n	8005d78 <_vfiprintf_r+0x20>
 8005db8:	4b79      	ldr	r3, [pc, #484]	; (8005fa0 <_vfiprintf_r+0x248>)
 8005dba:	429d      	cmp	r5, r3
 8005dbc:	bf08      	it	eq
 8005dbe:	68f5      	ldreq	r5, [r6, #12]
 8005dc0:	e7da      	b.n	8005d78 <_vfiprintf_r+0x20>
 8005dc2:	89ab      	ldrh	r3, [r5, #12]
 8005dc4:	0598      	lsls	r0, r3, #22
 8005dc6:	d4ed      	bmi.n	8005da4 <_vfiprintf_r+0x4c>
 8005dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dca:	f7ff fcb1 	bl	8005730 <__retarget_lock_release_recursive>
 8005dce:	e7e9      	b.n	8005da4 <_vfiprintf_r+0x4c>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8005dd4:	2320      	movs	r3, #32
 8005dd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dda:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dde:	2330      	movs	r3, #48	; 0x30
 8005de0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005fa4 <_vfiprintf_r+0x24c>
 8005de4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005de8:	f04f 0901 	mov.w	r9, #1
 8005dec:	4623      	mov	r3, r4
 8005dee:	469a      	mov	sl, r3
 8005df0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005df4:	b10a      	cbz	r2, 8005dfa <_vfiprintf_r+0xa2>
 8005df6:	2a25      	cmp	r2, #37	; 0x25
 8005df8:	d1f9      	bne.n	8005dee <_vfiprintf_r+0x96>
 8005dfa:	ebba 0b04 	subs.w	fp, sl, r4
 8005dfe:	d00b      	beq.n	8005e18 <_vfiprintf_r+0xc0>
 8005e00:	465b      	mov	r3, fp
 8005e02:	4622      	mov	r2, r4
 8005e04:	4629      	mov	r1, r5
 8005e06:	4630      	mov	r0, r6
 8005e08:	f7ff ff93 	bl	8005d32 <__sfputs_r>
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	f000 80aa 	beq.w	8005f66 <_vfiprintf_r+0x20e>
 8005e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e14:	445a      	add	r2, fp
 8005e16:	9209      	str	r2, [sp, #36]	; 0x24
 8005e18:	f89a 3000 	ldrb.w	r3, [sl]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80a2 	beq.w	8005f66 <_vfiprintf_r+0x20e>
 8005e22:	2300      	movs	r3, #0
 8005e24:	f04f 32ff 	mov.w	r2, #4294967295
 8005e28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e2c:	f10a 0a01 	add.w	sl, sl, #1
 8005e30:	9304      	str	r3, [sp, #16]
 8005e32:	9307      	str	r3, [sp, #28]
 8005e34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e38:	931a      	str	r3, [sp, #104]	; 0x68
 8005e3a:	4654      	mov	r4, sl
 8005e3c:	2205      	movs	r2, #5
 8005e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e42:	4858      	ldr	r0, [pc, #352]	; (8005fa4 <_vfiprintf_r+0x24c>)
 8005e44:	f7fa f9dc 	bl	8000200 <memchr>
 8005e48:	9a04      	ldr	r2, [sp, #16]
 8005e4a:	b9d8      	cbnz	r0, 8005e84 <_vfiprintf_r+0x12c>
 8005e4c:	06d1      	lsls	r1, r2, #27
 8005e4e:	bf44      	itt	mi
 8005e50:	2320      	movmi	r3, #32
 8005e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e56:	0713      	lsls	r3, r2, #28
 8005e58:	bf44      	itt	mi
 8005e5a:	232b      	movmi	r3, #43	; 0x2b
 8005e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e60:	f89a 3000 	ldrb.w	r3, [sl]
 8005e64:	2b2a      	cmp	r3, #42	; 0x2a
 8005e66:	d015      	beq.n	8005e94 <_vfiprintf_r+0x13c>
 8005e68:	9a07      	ldr	r2, [sp, #28]
 8005e6a:	4654      	mov	r4, sl
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	f04f 0c0a 	mov.w	ip, #10
 8005e72:	4621      	mov	r1, r4
 8005e74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e78:	3b30      	subs	r3, #48	; 0x30
 8005e7a:	2b09      	cmp	r3, #9
 8005e7c:	d94e      	bls.n	8005f1c <_vfiprintf_r+0x1c4>
 8005e7e:	b1b0      	cbz	r0, 8005eae <_vfiprintf_r+0x156>
 8005e80:	9207      	str	r2, [sp, #28]
 8005e82:	e014      	b.n	8005eae <_vfiprintf_r+0x156>
 8005e84:	eba0 0308 	sub.w	r3, r0, r8
 8005e88:	fa09 f303 	lsl.w	r3, r9, r3
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	9304      	str	r3, [sp, #16]
 8005e90:	46a2      	mov	sl, r4
 8005e92:	e7d2      	b.n	8005e3a <_vfiprintf_r+0xe2>
 8005e94:	9b03      	ldr	r3, [sp, #12]
 8005e96:	1d19      	adds	r1, r3, #4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	9103      	str	r1, [sp, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bfbb      	ittet	lt
 8005ea0:	425b      	neglt	r3, r3
 8005ea2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ea6:	9307      	strge	r3, [sp, #28]
 8005ea8:	9307      	strlt	r3, [sp, #28]
 8005eaa:	bfb8      	it	lt
 8005eac:	9204      	strlt	r2, [sp, #16]
 8005eae:	7823      	ldrb	r3, [r4, #0]
 8005eb0:	2b2e      	cmp	r3, #46	; 0x2e
 8005eb2:	d10c      	bne.n	8005ece <_vfiprintf_r+0x176>
 8005eb4:	7863      	ldrb	r3, [r4, #1]
 8005eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8005eb8:	d135      	bne.n	8005f26 <_vfiprintf_r+0x1ce>
 8005eba:	9b03      	ldr	r3, [sp, #12]
 8005ebc:	1d1a      	adds	r2, r3, #4
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	9203      	str	r2, [sp, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bfb8      	it	lt
 8005ec6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005eca:	3402      	adds	r4, #2
 8005ecc:	9305      	str	r3, [sp, #20]
 8005ece:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005fb4 <_vfiprintf_r+0x25c>
 8005ed2:	7821      	ldrb	r1, [r4, #0]
 8005ed4:	2203      	movs	r2, #3
 8005ed6:	4650      	mov	r0, sl
 8005ed8:	f7fa f992 	bl	8000200 <memchr>
 8005edc:	b140      	cbz	r0, 8005ef0 <_vfiprintf_r+0x198>
 8005ede:	2340      	movs	r3, #64	; 0x40
 8005ee0:	eba0 000a 	sub.w	r0, r0, sl
 8005ee4:	fa03 f000 	lsl.w	r0, r3, r0
 8005ee8:	9b04      	ldr	r3, [sp, #16]
 8005eea:	4303      	orrs	r3, r0
 8005eec:	3401      	adds	r4, #1
 8005eee:	9304      	str	r3, [sp, #16]
 8005ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef4:	482c      	ldr	r0, [pc, #176]	; (8005fa8 <_vfiprintf_r+0x250>)
 8005ef6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005efa:	2206      	movs	r2, #6
 8005efc:	f7fa f980 	bl	8000200 <memchr>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d03f      	beq.n	8005f84 <_vfiprintf_r+0x22c>
 8005f04:	4b29      	ldr	r3, [pc, #164]	; (8005fac <_vfiprintf_r+0x254>)
 8005f06:	bb1b      	cbnz	r3, 8005f50 <_vfiprintf_r+0x1f8>
 8005f08:	9b03      	ldr	r3, [sp, #12]
 8005f0a:	3307      	adds	r3, #7
 8005f0c:	f023 0307 	bic.w	r3, r3, #7
 8005f10:	3308      	adds	r3, #8
 8005f12:	9303      	str	r3, [sp, #12]
 8005f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f16:	443b      	add	r3, r7
 8005f18:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1a:	e767      	b.n	8005dec <_vfiprintf_r+0x94>
 8005f1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f20:	460c      	mov	r4, r1
 8005f22:	2001      	movs	r0, #1
 8005f24:	e7a5      	b.n	8005e72 <_vfiprintf_r+0x11a>
 8005f26:	2300      	movs	r3, #0
 8005f28:	3401      	adds	r4, #1
 8005f2a:	9305      	str	r3, [sp, #20]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	f04f 0c0a 	mov.w	ip, #10
 8005f32:	4620      	mov	r0, r4
 8005f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f38:	3a30      	subs	r2, #48	; 0x30
 8005f3a:	2a09      	cmp	r2, #9
 8005f3c:	d903      	bls.n	8005f46 <_vfiprintf_r+0x1ee>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0c5      	beq.n	8005ece <_vfiprintf_r+0x176>
 8005f42:	9105      	str	r1, [sp, #20]
 8005f44:	e7c3      	b.n	8005ece <_vfiprintf_r+0x176>
 8005f46:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e7f0      	b.n	8005f32 <_vfiprintf_r+0x1da>
 8005f50:	ab03      	add	r3, sp, #12
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	462a      	mov	r2, r5
 8005f56:	4b16      	ldr	r3, [pc, #88]	; (8005fb0 <_vfiprintf_r+0x258>)
 8005f58:	a904      	add	r1, sp, #16
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	f3af 8000 	nop.w
 8005f60:	4607      	mov	r7, r0
 8005f62:	1c78      	adds	r0, r7, #1
 8005f64:	d1d6      	bne.n	8005f14 <_vfiprintf_r+0x1bc>
 8005f66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f68:	07d9      	lsls	r1, r3, #31
 8005f6a:	d405      	bmi.n	8005f78 <_vfiprintf_r+0x220>
 8005f6c:	89ab      	ldrh	r3, [r5, #12]
 8005f6e:	059a      	lsls	r2, r3, #22
 8005f70:	d402      	bmi.n	8005f78 <_vfiprintf_r+0x220>
 8005f72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f74:	f7ff fbdc 	bl	8005730 <__retarget_lock_release_recursive>
 8005f78:	89ab      	ldrh	r3, [r5, #12]
 8005f7a:	065b      	lsls	r3, r3, #25
 8005f7c:	f53f af12 	bmi.w	8005da4 <_vfiprintf_r+0x4c>
 8005f80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f82:	e711      	b.n	8005da8 <_vfiprintf_r+0x50>
 8005f84:	ab03      	add	r3, sp, #12
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	462a      	mov	r2, r5
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <_vfiprintf_r+0x258>)
 8005f8c:	a904      	add	r1, sp, #16
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f000 f880 	bl	8006094 <_printf_i>
 8005f94:	e7e4      	b.n	8005f60 <_vfiprintf_r+0x208>
 8005f96:	bf00      	nop
 8005f98:	08007e24 	.word	0x08007e24
 8005f9c:	08007e44 	.word	0x08007e44
 8005fa0:	08007e04 	.word	0x08007e04
 8005fa4:	08008019 	.word	0x08008019
 8005fa8:	08008023 	.word	0x08008023
 8005fac:	00000000 	.word	0x00000000
 8005fb0:	08005d33 	.word	0x08005d33
 8005fb4:	0800801f 	.word	0x0800801f

08005fb8 <_printf_common>:
 8005fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	4699      	mov	r9, r3
 8005fc0:	688a      	ldr	r2, [r1, #8]
 8005fc2:	690b      	ldr	r3, [r1, #16]
 8005fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	bfb8      	it	lt
 8005fcc:	4613      	movlt	r3, r2
 8005fce:	6033      	str	r3, [r6, #0]
 8005fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	b10a      	cbz	r2, 8005fde <_printf_common+0x26>
 8005fda:	3301      	adds	r3, #1
 8005fdc:	6033      	str	r3, [r6, #0]
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	0699      	lsls	r1, r3, #26
 8005fe2:	bf42      	ittt	mi
 8005fe4:	6833      	ldrmi	r3, [r6, #0]
 8005fe6:	3302      	addmi	r3, #2
 8005fe8:	6033      	strmi	r3, [r6, #0]
 8005fea:	6825      	ldr	r5, [r4, #0]
 8005fec:	f015 0506 	ands.w	r5, r5, #6
 8005ff0:	d106      	bne.n	8006000 <_printf_common+0x48>
 8005ff2:	f104 0a19 	add.w	sl, r4, #25
 8005ff6:	68e3      	ldr	r3, [r4, #12]
 8005ff8:	6832      	ldr	r2, [r6, #0]
 8005ffa:	1a9b      	subs	r3, r3, r2
 8005ffc:	42ab      	cmp	r3, r5
 8005ffe:	dc26      	bgt.n	800604e <_printf_common+0x96>
 8006000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006004:	1e13      	subs	r3, r2, #0
 8006006:	6822      	ldr	r2, [r4, #0]
 8006008:	bf18      	it	ne
 800600a:	2301      	movne	r3, #1
 800600c:	0692      	lsls	r2, r2, #26
 800600e:	d42b      	bmi.n	8006068 <_printf_common+0xb0>
 8006010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006014:	4649      	mov	r1, r9
 8006016:	4638      	mov	r0, r7
 8006018:	47c0      	blx	r8
 800601a:	3001      	adds	r0, #1
 800601c:	d01e      	beq.n	800605c <_printf_common+0xa4>
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	68e5      	ldr	r5, [r4, #12]
 8006022:	6832      	ldr	r2, [r6, #0]
 8006024:	f003 0306 	and.w	r3, r3, #6
 8006028:	2b04      	cmp	r3, #4
 800602a:	bf08      	it	eq
 800602c:	1aad      	subeq	r5, r5, r2
 800602e:	68a3      	ldr	r3, [r4, #8]
 8006030:	6922      	ldr	r2, [r4, #16]
 8006032:	bf0c      	ite	eq
 8006034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006038:	2500      	movne	r5, #0
 800603a:	4293      	cmp	r3, r2
 800603c:	bfc4      	itt	gt
 800603e:	1a9b      	subgt	r3, r3, r2
 8006040:	18ed      	addgt	r5, r5, r3
 8006042:	2600      	movs	r6, #0
 8006044:	341a      	adds	r4, #26
 8006046:	42b5      	cmp	r5, r6
 8006048:	d11a      	bne.n	8006080 <_printf_common+0xc8>
 800604a:	2000      	movs	r0, #0
 800604c:	e008      	b.n	8006060 <_printf_common+0xa8>
 800604e:	2301      	movs	r3, #1
 8006050:	4652      	mov	r2, sl
 8006052:	4649      	mov	r1, r9
 8006054:	4638      	mov	r0, r7
 8006056:	47c0      	blx	r8
 8006058:	3001      	adds	r0, #1
 800605a:	d103      	bne.n	8006064 <_printf_common+0xac>
 800605c:	f04f 30ff 	mov.w	r0, #4294967295
 8006060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006064:	3501      	adds	r5, #1
 8006066:	e7c6      	b.n	8005ff6 <_printf_common+0x3e>
 8006068:	18e1      	adds	r1, r4, r3
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	2030      	movs	r0, #48	; 0x30
 800606e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006072:	4422      	add	r2, r4
 8006074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800607c:	3302      	adds	r3, #2
 800607e:	e7c7      	b.n	8006010 <_printf_common+0x58>
 8006080:	2301      	movs	r3, #1
 8006082:	4622      	mov	r2, r4
 8006084:	4649      	mov	r1, r9
 8006086:	4638      	mov	r0, r7
 8006088:	47c0      	blx	r8
 800608a:	3001      	adds	r0, #1
 800608c:	d0e6      	beq.n	800605c <_printf_common+0xa4>
 800608e:	3601      	adds	r6, #1
 8006090:	e7d9      	b.n	8006046 <_printf_common+0x8e>
	...

08006094 <_printf_i>:
 8006094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	7e0f      	ldrb	r7, [r1, #24]
 800609a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800609c:	2f78      	cmp	r7, #120	; 0x78
 800609e:	4691      	mov	r9, r2
 80060a0:	4680      	mov	r8, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	469a      	mov	sl, r3
 80060a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060aa:	d807      	bhi.n	80060bc <_printf_i+0x28>
 80060ac:	2f62      	cmp	r7, #98	; 0x62
 80060ae:	d80a      	bhi.n	80060c6 <_printf_i+0x32>
 80060b0:	2f00      	cmp	r7, #0
 80060b2:	f000 80d8 	beq.w	8006266 <_printf_i+0x1d2>
 80060b6:	2f58      	cmp	r7, #88	; 0x58
 80060b8:	f000 80a3 	beq.w	8006202 <_printf_i+0x16e>
 80060bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060c4:	e03a      	b.n	800613c <_printf_i+0xa8>
 80060c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060ca:	2b15      	cmp	r3, #21
 80060cc:	d8f6      	bhi.n	80060bc <_printf_i+0x28>
 80060ce:	a101      	add	r1, pc, #4	; (adr r1, 80060d4 <_printf_i+0x40>)
 80060d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	08006141 	.word	0x08006141
 80060dc:	080060bd 	.word	0x080060bd
 80060e0:	080060bd 	.word	0x080060bd
 80060e4:	080060bd 	.word	0x080060bd
 80060e8:	080060bd 	.word	0x080060bd
 80060ec:	08006141 	.word	0x08006141
 80060f0:	080060bd 	.word	0x080060bd
 80060f4:	080060bd 	.word	0x080060bd
 80060f8:	080060bd 	.word	0x080060bd
 80060fc:	080060bd 	.word	0x080060bd
 8006100:	0800624d 	.word	0x0800624d
 8006104:	08006171 	.word	0x08006171
 8006108:	0800622f 	.word	0x0800622f
 800610c:	080060bd 	.word	0x080060bd
 8006110:	080060bd 	.word	0x080060bd
 8006114:	0800626f 	.word	0x0800626f
 8006118:	080060bd 	.word	0x080060bd
 800611c:	08006171 	.word	0x08006171
 8006120:	080060bd 	.word	0x080060bd
 8006124:	080060bd 	.word	0x080060bd
 8006128:	08006237 	.word	0x08006237
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	1d1a      	adds	r2, r3, #4
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	602a      	str	r2, [r5, #0]
 8006134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800613c:	2301      	movs	r3, #1
 800613e:	e0a3      	b.n	8006288 <_printf_i+0x1f4>
 8006140:	6820      	ldr	r0, [r4, #0]
 8006142:	6829      	ldr	r1, [r5, #0]
 8006144:	0606      	lsls	r6, r0, #24
 8006146:	f101 0304 	add.w	r3, r1, #4
 800614a:	d50a      	bpl.n	8006162 <_printf_i+0xce>
 800614c:	680e      	ldr	r6, [r1, #0]
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	2e00      	cmp	r6, #0
 8006152:	da03      	bge.n	800615c <_printf_i+0xc8>
 8006154:	232d      	movs	r3, #45	; 0x2d
 8006156:	4276      	negs	r6, r6
 8006158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800615c:	485e      	ldr	r0, [pc, #376]	; (80062d8 <_printf_i+0x244>)
 800615e:	230a      	movs	r3, #10
 8006160:	e019      	b.n	8006196 <_printf_i+0x102>
 8006162:	680e      	ldr	r6, [r1, #0]
 8006164:	602b      	str	r3, [r5, #0]
 8006166:	f010 0f40 	tst.w	r0, #64	; 0x40
 800616a:	bf18      	it	ne
 800616c:	b236      	sxthne	r6, r6
 800616e:	e7ef      	b.n	8006150 <_printf_i+0xbc>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	6820      	ldr	r0, [r4, #0]
 8006174:	1d19      	adds	r1, r3, #4
 8006176:	6029      	str	r1, [r5, #0]
 8006178:	0601      	lsls	r1, r0, #24
 800617a:	d501      	bpl.n	8006180 <_printf_i+0xec>
 800617c:	681e      	ldr	r6, [r3, #0]
 800617e:	e002      	b.n	8006186 <_printf_i+0xf2>
 8006180:	0646      	lsls	r6, r0, #25
 8006182:	d5fb      	bpl.n	800617c <_printf_i+0xe8>
 8006184:	881e      	ldrh	r6, [r3, #0]
 8006186:	4854      	ldr	r0, [pc, #336]	; (80062d8 <_printf_i+0x244>)
 8006188:	2f6f      	cmp	r7, #111	; 0x6f
 800618a:	bf0c      	ite	eq
 800618c:	2308      	moveq	r3, #8
 800618e:	230a      	movne	r3, #10
 8006190:	2100      	movs	r1, #0
 8006192:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006196:	6865      	ldr	r5, [r4, #4]
 8006198:	60a5      	str	r5, [r4, #8]
 800619a:	2d00      	cmp	r5, #0
 800619c:	bfa2      	ittt	ge
 800619e:	6821      	ldrge	r1, [r4, #0]
 80061a0:	f021 0104 	bicge.w	r1, r1, #4
 80061a4:	6021      	strge	r1, [r4, #0]
 80061a6:	b90e      	cbnz	r6, 80061ac <_printf_i+0x118>
 80061a8:	2d00      	cmp	r5, #0
 80061aa:	d04d      	beq.n	8006248 <_printf_i+0x1b4>
 80061ac:	4615      	mov	r5, r2
 80061ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80061b2:	fb03 6711 	mls	r7, r3, r1, r6
 80061b6:	5dc7      	ldrb	r7, [r0, r7]
 80061b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061bc:	4637      	mov	r7, r6
 80061be:	42bb      	cmp	r3, r7
 80061c0:	460e      	mov	r6, r1
 80061c2:	d9f4      	bls.n	80061ae <_printf_i+0x11a>
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d10b      	bne.n	80061e0 <_printf_i+0x14c>
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	07de      	lsls	r6, r3, #31
 80061cc:	d508      	bpl.n	80061e0 <_printf_i+0x14c>
 80061ce:	6923      	ldr	r3, [r4, #16]
 80061d0:	6861      	ldr	r1, [r4, #4]
 80061d2:	4299      	cmp	r1, r3
 80061d4:	bfde      	ittt	le
 80061d6:	2330      	movle	r3, #48	; 0x30
 80061d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061e0:	1b52      	subs	r2, r2, r5
 80061e2:	6122      	str	r2, [r4, #16]
 80061e4:	f8cd a000 	str.w	sl, [sp]
 80061e8:	464b      	mov	r3, r9
 80061ea:	aa03      	add	r2, sp, #12
 80061ec:	4621      	mov	r1, r4
 80061ee:	4640      	mov	r0, r8
 80061f0:	f7ff fee2 	bl	8005fb8 <_printf_common>
 80061f4:	3001      	adds	r0, #1
 80061f6:	d14c      	bne.n	8006292 <_printf_i+0x1fe>
 80061f8:	f04f 30ff 	mov.w	r0, #4294967295
 80061fc:	b004      	add	sp, #16
 80061fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006202:	4835      	ldr	r0, [pc, #212]	; (80062d8 <_printf_i+0x244>)
 8006204:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006208:	6829      	ldr	r1, [r5, #0]
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006210:	6029      	str	r1, [r5, #0]
 8006212:	061d      	lsls	r5, r3, #24
 8006214:	d514      	bpl.n	8006240 <_printf_i+0x1ac>
 8006216:	07df      	lsls	r7, r3, #31
 8006218:	bf44      	itt	mi
 800621a:	f043 0320 	orrmi.w	r3, r3, #32
 800621e:	6023      	strmi	r3, [r4, #0]
 8006220:	b91e      	cbnz	r6, 800622a <_printf_i+0x196>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	f023 0320 	bic.w	r3, r3, #32
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	2310      	movs	r3, #16
 800622c:	e7b0      	b.n	8006190 <_printf_i+0xfc>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	f043 0320 	orr.w	r3, r3, #32
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	2378      	movs	r3, #120	; 0x78
 8006238:	4828      	ldr	r0, [pc, #160]	; (80062dc <_printf_i+0x248>)
 800623a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800623e:	e7e3      	b.n	8006208 <_printf_i+0x174>
 8006240:	0659      	lsls	r1, r3, #25
 8006242:	bf48      	it	mi
 8006244:	b2b6      	uxthmi	r6, r6
 8006246:	e7e6      	b.n	8006216 <_printf_i+0x182>
 8006248:	4615      	mov	r5, r2
 800624a:	e7bb      	b.n	80061c4 <_printf_i+0x130>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	6826      	ldr	r6, [r4, #0]
 8006250:	6961      	ldr	r1, [r4, #20]
 8006252:	1d18      	adds	r0, r3, #4
 8006254:	6028      	str	r0, [r5, #0]
 8006256:	0635      	lsls	r5, r6, #24
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	d501      	bpl.n	8006260 <_printf_i+0x1cc>
 800625c:	6019      	str	r1, [r3, #0]
 800625e:	e002      	b.n	8006266 <_printf_i+0x1d2>
 8006260:	0670      	lsls	r0, r6, #25
 8006262:	d5fb      	bpl.n	800625c <_printf_i+0x1c8>
 8006264:	8019      	strh	r1, [r3, #0]
 8006266:	2300      	movs	r3, #0
 8006268:	6123      	str	r3, [r4, #16]
 800626a:	4615      	mov	r5, r2
 800626c:	e7ba      	b.n	80061e4 <_printf_i+0x150>
 800626e:	682b      	ldr	r3, [r5, #0]
 8006270:	1d1a      	adds	r2, r3, #4
 8006272:	602a      	str	r2, [r5, #0]
 8006274:	681d      	ldr	r5, [r3, #0]
 8006276:	6862      	ldr	r2, [r4, #4]
 8006278:	2100      	movs	r1, #0
 800627a:	4628      	mov	r0, r5
 800627c:	f7f9 ffc0 	bl	8000200 <memchr>
 8006280:	b108      	cbz	r0, 8006286 <_printf_i+0x1f2>
 8006282:	1b40      	subs	r0, r0, r5
 8006284:	6060      	str	r0, [r4, #4]
 8006286:	6863      	ldr	r3, [r4, #4]
 8006288:	6123      	str	r3, [r4, #16]
 800628a:	2300      	movs	r3, #0
 800628c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006290:	e7a8      	b.n	80061e4 <_printf_i+0x150>
 8006292:	6923      	ldr	r3, [r4, #16]
 8006294:	462a      	mov	r2, r5
 8006296:	4649      	mov	r1, r9
 8006298:	4640      	mov	r0, r8
 800629a:	47d0      	blx	sl
 800629c:	3001      	adds	r0, #1
 800629e:	d0ab      	beq.n	80061f8 <_printf_i+0x164>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	079b      	lsls	r3, r3, #30
 80062a4:	d413      	bmi.n	80062ce <_printf_i+0x23a>
 80062a6:	68e0      	ldr	r0, [r4, #12]
 80062a8:	9b03      	ldr	r3, [sp, #12]
 80062aa:	4298      	cmp	r0, r3
 80062ac:	bfb8      	it	lt
 80062ae:	4618      	movlt	r0, r3
 80062b0:	e7a4      	b.n	80061fc <_printf_i+0x168>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4632      	mov	r2, r6
 80062b6:	4649      	mov	r1, r9
 80062b8:	4640      	mov	r0, r8
 80062ba:	47d0      	blx	sl
 80062bc:	3001      	adds	r0, #1
 80062be:	d09b      	beq.n	80061f8 <_printf_i+0x164>
 80062c0:	3501      	adds	r5, #1
 80062c2:	68e3      	ldr	r3, [r4, #12]
 80062c4:	9903      	ldr	r1, [sp, #12]
 80062c6:	1a5b      	subs	r3, r3, r1
 80062c8:	42ab      	cmp	r3, r5
 80062ca:	dcf2      	bgt.n	80062b2 <_printf_i+0x21e>
 80062cc:	e7eb      	b.n	80062a6 <_printf_i+0x212>
 80062ce:	2500      	movs	r5, #0
 80062d0:	f104 0619 	add.w	r6, r4, #25
 80062d4:	e7f5      	b.n	80062c2 <_printf_i+0x22e>
 80062d6:	bf00      	nop
 80062d8:	0800802a 	.word	0x0800802a
 80062dc:	0800803b 	.word	0x0800803b

080062e0 <_read_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4d07      	ldr	r5, [pc, #28]	; (8006300 <_read_r+0x20>)
 80062e4:	4604      	mov	r4, r0
 80062e6:	4608      	mov	r0, r1
 80062e8:	4611      	mov	r1, r2
 80062ea:	2200      	movs	r2, #0
 80062ec:	602a      	str	r2, [r5, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f7fb f93c 	bl	800156c <_read>
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	d102      	bne.n	80062fe <_read_r+0x1e>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	b103      	cbz	r3, 80062fe <_read_r+0x1e>
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	bd38      	pop	{r3, r4, r5, pc}
 8006300:	200134e4 	.word	0x200134e4

08006304 <__swbuf_r>:
 8006304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006306:	460e      	mov	r6, r1
 8006308:	4614      	mov	r4, r2
 800630a:	4605      	mov	r5, r0
 800630c:	b118      	cbz	r0, 8006316 <__swbuf_r+0x12>
 800630e:	6983      	ldr	r3, [r0, #24]
 8006310:	b90b      	cbnz	r3, 8006316 <__swbuf_r+0x12>
 8006312:	f7ff f949 	bl	80055a8 <__sinit>
 8006316:	4b21      	ldr	r3, [pc, #132]	; (800639c <__swbuf_r+0x98>)
 8006318:	429c      	cmp	r4, r3
 800631a:	d12b      	bne.n	8006374 <__swbuf_r+0x70>
 800631c:	686c      	ldr	r4, [r5, #4]
 800631e:	69a3      	ldr	r3, [r4, #24]
 8006320:	60a3      	str	r3, [r4, #8]
 8006322:	89a3      	ldrh	r3, [r4, #12]
 8006324:	071a      	lsls	r2, r3, #28
 8006326:	d52f      	bpl.n	8006388 <__swbuf_r+0x84>
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	b36b      	cbz	r3, 8006388 <__swbuf_r+0x84>
 800632c:	6923      	ldr	r3, [r4, #16]
 800632e:	6820      	ldr	r0, [r4, #0]
 8006330:	1ac0      	subs	r0, r0, r3
 8006332:	6963      	ldr	r3, [r4, #20]
 8006334:	b2f6      	uxtb	r6, r6
 8006336:	4283      	cmp	r3, r0
 8006338:	4637      	mov	r7, r6
 800633a:	dc04      	bgt.n	8006346 <__swbuf_r+0x42>
 800633c:	4621      	mov	r1, r4
 800633e:	4628      	mov	r0, r5
 8006340:	f7ff f88c 	bl	800545c <_fflush_r>
 8006344:	bb30      	cbnz	r0, 8006394 <__swbuf_r+0x90>
 8006346:	68a3      	ldr	r3, [r4, #8]
 8006348:	3b01      	subs	r3, #1
 800634a:	60a3      	str	r3, [r4, #8]
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	6022      	str	r2, [r4, #0]
 8006352:	701e      	strb	r6, [r3, #0]
 8006354:	6963      	ldr	r3, [r4, #20]
 8006356:	3001      	adds	r0, #1
 8006358:	4283      	cmp	r3, r0
 800635a:	d004      	beq.n	8006366 <__swbuf_r+0x62>
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	07db      	lsls	r3, r3, #31
 8006360:	d506      	bpl.n	8006370 <__swbuf_r+0x6c>
 8006362:	2e0a      	cmp	r6, #10
 8006364:	d104      	bne.n	8006370 <__swbuf_r+0x6c>
 8006366:	4621      	mov	r1, r4
 8006368:	4628      	mov	r0, r5
 800636a:	f7ff f877 	bl	800545c <_fflush_r>
 800636e:	b988      	cbnz	r0, 8006394 <__swbuf_r+0x90>
 8006370:	4638      	mov	r0, r7
 8006372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006374:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <__swbuf_r+0x9c>)
 8006376:	429c      	cmp	r4, r3
 8006378:	d101      	bne.n	800637e <__swbuf_r+0x7a>
 800637a:	68ac      	ldr	r4, [r5, #8]
 800637c:	e7cf      	b.n	800631e <__swbuf_r+0x1a>
 800637e:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <__swbuf_r+0xa0>)
 8006380:	429c      	cmp	r4, r3
 8006382:	bf08      	it	eq
 8006384:	68ec      	ldreq	r4, [r5, #12]
 8006386:	e7ca      	b.n	800631e <__swbuf_r+0x1a>
 8006388:	4621      	mov	r1, r4
 800638a:	4628      	mov	r0, r5
 800638c:	f000 f80c 	bl	80063a8 <__swsetup_r>
 8006390:	2800      	cmp	r0, #0
 8006392:	d0cb      	beq.n	800632c <__swbuf_r+0x28>
 8006394:	f04f 37ff 	mov.w	r7, #4294967295
 8006398:	e7ea      	b.n	8006370 <__swbuf_r+0x6c>
 800639a:	bf00      	nop
 800639c:	08007e24 	.word	0x08007e24
 80063a0:	08007e44 	.word	0x08007e44
 80063a4:	08007e04 	.word	0x08007e04

080063a8 <__swsetup_r>:
 80063a8:	4b32      	ldr	r3, [pc, #200]	; (8006474 <__swsetup_r+0xcc>)
 80063aa:	b570      	push	{r4, r5, r6, lr}
 80063ac:	681d      	ldr	r5, [r3, #0]
 80063ae:	4606      	mov	r6, r0
 80063b0:	460c      	mov	r4, r1
 80063b2:	b125      	cbz	r5, 80063be <__swsetup_r+0x16>
 80063b4:	69ab      	ldr	r3, [r5, #24]
 80063b6:	b913      	cbnz	r3, 80063be <__swsetup_r+0x16>
 80063b8:	4628      	mov	r0, r5
 80063ba:	f7ff f8f5 	bl	80055a8 <__sinit>
 80063be:	4b2e      	ldr	r3, [pc, #184]	; (8006478 <__swsetup_r+0xd0>)
 80063c0:	429c      	cmp	r4, r3
 80063c2:	d10f      	bne.n	80063e4 <__swsetup_r+0x3c>
 80063c4:	686c      	ldr	r4, [r5, #4]
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063cc:	0719      	lsls	r1, r3, #28
 80063ce:	d42c      	bmi.n	800642a <__swsetup_r+0x82>
 80063d0:	06dd      	lsls	r5, r3, #27
 80063d2:	d411      	bmi.n	80063f8 <__swsetup_r+0x50>
 80063d4:	2309      	movs	r3, #9
 80063d6:	6033      	str	r3, [r6, #0]
 80063d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063dc:	81a3      	strh	r3, [r4, #12]
 80063de:	f04f 30ff 	mov.w	r0, #4294967295
 80063e2:	e03e      	b.n	8006462 <__swsetup_r+0xba>
 80063e4:	4b25      	ldr	r3, [pc, #148]	; (800647c <__swsetup_r+0xd4>)
 80063e6:	429c      	cmp	r4, r3
 80063e8:	d101      	bne.n	80063ee <__swsetup_r+0x46>
 80063ea:	68ac      	ldr	r4, [r5, #8]
 80063ec:	e7eb      	b.n	80063c6 <__swsetup_r+0x1e>
 80063ee:	4b24      	ldr	r3, [pc, #144]	; (8006480 <__swsetup_r+0xd8>)
 80063f0:	429c      	cmp	r4, r3
 80063f2:	bf08      	it	eq
 80063f4:	68ec      	ldreq	r4, [r5, #12]
 80063f6:	e7e6      	b.n	80063c6 <__swsetup_r+0x1e>
 80063f8:	0758      	lsls	r0, r3, #29
 80063fa:	d512      	bpl.n	8006422 <__swsetup_r+0x7a>
 80063fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063fe:	b141      	cbz	r1, 8006412 <__swsetup_r+0x6a>
 8006400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006404:	4299      	cmp	r1, r3
 8006406:	d002      	beq.n	800640e <__swsetup_r+0x66>
 8006408:	4630      	mov	r0, r6
 800640a:	f7ff f9a9 	bl	8005760 <_free_r>
 800640e:	2300      	movs	r3, #0
 8006410:	6363      	str	r3, [r4, #52]	; 0x34
 8006412:	89a3      	ldrh	r3, [r4, #12]
 8006414:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006418:	81a3      	strh	r3, [r4, #12]
 800641a:	2300      	movs	r3, #0
 800641c:	6063      	str	r3, [r4, #4]
 800641e:	6923      	ldr	r3, [r4, #16]
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	f043 0308 	orr.w	r3, r3, #8
 8006428:	81a3      	strh	r3, [r4, #12]
 800642a:	6923      	ldr	r3, [r4, #16]
 800642c:	b94b      	cbnz	r3, 8006442 <__swsetup_r+0x9a>
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006438:	d003      	beq.n	8006442 <__swsetup_r+0x9a>
 800643a:	4621      	mov	r1, r4
 800643c:	4630      	mov	r0, r6
 800643e:	f000 f84d 	bl	80064dc <__smakebuf_r>
 8006442:	89a0      	ldrh	r0, [r4, #12]
 8006444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006448:	f010 0301 	ands.w	r3, r0, #1
 800644c:	d00a      	beq.n	8006464 <__swsetup_r+0xbc>
 800644e:	2300      	movs	r3, #0
 8006450:	60a3      	str	r3, [r4, #8]
 8006452:	6963      	ldr	r3, [r4, #20]
 8006454:	425b      	negs	r3, r3
 8006456:	61a3      	str	r3, [r4, #24]
 8006458:	6923      	ldr	r3, [r4, #16]
 800645a:	b943      	cbnz	r3, 800646e <__swsetup_r+0xc6>
 800645c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006460:	d1ba      	bne.n	80063d8 <__swsetup_r+0x30>
 8006462:	bd70      	pop	{r4, r5, r6, pc}
 8006464:	0781      	lsls	r1, r0, #30
 8006466:	bf58      	it	pl
 8006468:	6963      	ldrpl	r3, [r4, #20]
 800646a:	60a3      	str	r3, [r4, #8]
 800646c:	e7f4      	b.n	8006458 <__swsetup_r+0xb0>
 800646e:	2000      	movs	r0, #0
 8006470:	e7f7      	b.n	8006462 <__swsetup_r+0xba>
 8006472:	bf00      	nop
 8006474:	20000188 	.word	0x20000188
 8006478:	08007e24 	.word	0x08007e24
 800647c:	08007e44 	.word	0x08007e44
 8006480:	08007e04 	.word	0x08007e04

08006484 <abort>:
 8006484:	b508      	push	{r3, lr}
 8006486:	2006      	movs	r0, #6
 8006488:	f000 f890 	bl	80065ac <raise>
 800648c:	2001      	movs	r0, #1
 800648e:	f7fb f863 	bl	8001558 <_exit>

08006492 <__swhatbuf_r>:
 8006492:	b570      	push	{r4, r5, r6, lr}
 8006494:	460e      	mov	r6, r1
 8006496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800649a:	2900      	cmp	r1, #0
 800649c:	b096      	sub	sp, #88	; 0x58
 800649e:	4614      	mov	r4, r2
 80064a0:	461d      	mov	r5, r3
 80064a2:	da08      	bge.n	80064b6 <__swhatbuf_r+0x24>
 80064a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	602a      	str	r2, [r5, #0]
 80064ac:	061a      	lsls	r2, r3, #24
 80064ae:	d410      	bmi.n	80064d2 <__swhatbuf_r+0x40>
 80064b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064b4:	e00e      	b.n	80064d4 <__swhatbuf_r+0x42>
 80064b6:	466a      	mov	r2, sp
 80064b8:	f000 f894 	bl	80065e4 <_fstat_r>
 80064bc:	2800      	cmp	r0, #0
 80064be:	dbf1      	blt.n	80064a4 <__swhatbuf_r+0x12>
 80064c0:	9a01      	ldr	r2, [sp, #4]
 80064c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064ca:	425a      	negs	r2, r3
 80064cc:	415a      	adcs	r2, r3
 80064ce:	602a      	str	r2, [r5, #0]
 80064d0:	e7ee      	b.n	80064b0 <__swhatbuf_r+0x1e>
 80064d2:	2340      	movs	r3, #64	; 0x40
 80064d4:	2000      	movs	r0, #0
 80064d6:	6023      	str	r3, [r4, #0]
 80064d8:	b016      	add	sp, #88	; 0x58
 80064da:	bd70      	pop	{r4, r5, r6, pc}

080064dc <__smakebuf_r>:
 80064dc:	898b      	ldrh	r3, [r1, #12]
 80064de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064e0:	079d      	lsls	r5, r3, #30
 80064e2:	4606      	mov	r6, r0
 80064e4:	460c      	mov	r4, r1
 80064e6:	d507      	bpl.n	80064f8 <__smakebuf_r+0x1c>
 80064e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	6123      	str	r3, [r4, #16]
 80064f0:	2301      	movs	r3, #1
 80064f2:	6163      	str	r3, [r4, #20]
 80064f4:	b002      	add	sp, #8
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	ab01      	add	r3, sp, #4
 80064fa:	466a      	mov	r2, sp
 80064fc:	f7ff ffc9 	bl	8006492 <__swhatbuf_r>
 8006500:	9900      	ldr	r1, [sp, #0]
 8006502:	4605      	mov	r5, r0
 8006504:	4630      	mov	r0, r6
 8006506:	f7ff f997 	bl	8005838 <_malloc_r>
 800650a:	b948      	cbnz	r0, 8006520 <__smakebuf_r+0x44>
 800650c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006510:	059a      	lsls	r2, r3, #22
 8006512:	d4ef      	bmi.n	80064f4 <__smakebuf_r+0x18>
 8006514:	f023 0303 	bic.w	r3, r3, #3
 8006518:	f043 0302 	orr.w	r3, r3, #2
 800651c:	81a3      	strh	r3, [r4, #12]
 800651e:	e7e3      	b.n	80064e8 <__smakebuf_r+0xc>
 8006520:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <__smakebuf_r+0x7c>)
 8006522:	62b3      	str	r3, [r6, #40]	; 0x28
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	6020      	str	r0, [r4, #0]
 8006528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652c:	81a3      	strh	r3, [r4, #12]
 800652e:	9b00      	ldr	r3, [sp, #0]
 8006530:	6163      	str	r3, [r4, #20]
 8006532:	9b01      	ldr	r3, [sp, #4]
 8006534:	6120      	str	r0, [r4, #16]
 8006536:	b15b      	cbz	r3, 8006550 <__smakebuf_r+0x74>
 8006538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800653c:	4630      	mov	r0, r6
 800653e:	f000 f863 	bl	8006608 <_isatty_r>
 8006542:	b128      	cbz	r0, 8006550 <__smakebuf_r+0x74>
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	f023 0303 	bic.w	r3, r3, #3
 800654a:	f043 0301 	orr.w	r3, r3, #1
 800654e:	81a3      	strh	r3, [r4, #12]
 8006550:	89a0      	ldrh	r0, [r4, #12]
 8006552:	4305      	orrs	r5, r0
 8006554:	81a5      	strh	r5, [r4, #12]
 8006556:	e7cd      	b.n	80064f4 <__smakebuf_r+0x18>
 8006558:	08005541 	.word	0x08005541

0800655c <_raise_r>:
 800655c:	291f      	cmp	r1, #31
 800655e:	b538      	push	{r3, r4, r5, lr}
 8006560:	4604      	mov	r4, r0
 8006562:	460d      	mov	r5, r1
 8006564:	d904      	bls.n	8006570 <_raise_r+0x14>
 8006566:	2316      	movs	r3, #22
 8006568:	6003      	str	r3, [r0, #0]
 800656a:	f04f 30ff 	mov.w	r0, #4294967295
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006572:	b112      	cbz	r2, 800657a <_raise_r+0x1e>
 8006574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006578:	b94b      	cbnz	r3, 800658e <_raise_r+0x32>
 800657a:	4620      	mov	r0, r4
 800657c:	f000 f830 	bl	80065e0 <_getpid_r>
 8006580:	462a      	mov	r2, r5
 8006582:	4601      	mov	r1, r0
 8006584:	4620      	mov	r0, r4
 8006586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800658a:	f000 b817 	b.w	80065bc <_kill_r>
 800658e:	2b01      	cmp	r3, #1
 8006590:	d00a      	beq.n	80065a8 <_raise_r+0x4c>
 8006592:	1c59      	adds	r1, r3, #1
 8006594:	d103      	bne.n	800659e <_raise_r+0x42>
 8006596:	2316      	movs	r3, #22
 8006598:	6003      	str	r3, [r0, #0]
 800659a:	2001      	movs	r0, #1
 800659c:	e7e7      	b.n	800656e <_raise_r+0x12>
 800659e:	2400      	movs	r4, #0
 80065a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80065a4:	4628      	mov	r0, r5
 80065a6:	4798      	blx	r3
 80065a8:	2000      	movs	r0, #0
 80065aa:	e7e0      	b.n	800656e <_raise_r+0x12>

080065ac <raise>:
 80065ac:	4b02      	ldr	r3, [pc, #8]	; (80065b8 <raise+0xc>)
 80065ae:	4601      	mov	r1, r0
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	f7ff bfd3 	b.w	800655c <_raise_r>
 80065b6:	bf00      	nop
 80065b8:	20000188 	.word	0x20000188

080065bc <_kill_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	4d07      	ldr	r5, [pc, #28]	; (80065dc <_kill_r+0x20>)
 80065c0:	2300      	movs	r3, #0
 80065c2:	4604      	mov	r4, r0
 80065c4:	4608      	mov	r0, r1
 80065c6:	4611      	mov	r1, r2
 80065c8:	602b      	str	r3, [r5, #0]
 80065ca:	f7fa ffb5 	bl	8001538 <_kill>
 80065ce:	1c43      	adds	r3, r0, #1
 80065d0:	d102      	bne.n	80065d8 <_kill_r+0x1c>
 80065d2:	682b      	ldr	r3, [r5, #0]
 80065d4:	b103      	cbz	r3, 80065d8 <_kill_r+0x1c>
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	bd38      	pop	{r3, r4, r5, pc}
 80065da:	bf00      	nop
 80065dc:	200134e4 	.word	0x200134e4

080065e0 <_getpid_r>:
 80065e0:	f7fa bfa2 	b.w	8001528 <_getpid>

080065e4 <_fstat_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4d07      	ldr	r5, [pc, #28]	; (8006604 <_fstat_r+0x20>)
 80065e8:	2300      	movs	r3, #0
 80065ea:	4604      	mov	r4, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	4611      	mov	r1, r2
 80065f0:	602b      	str	r3, [r5, #0]
 80065f2:	f7fb f800 	bl	80015f6 <_fstat>
 80065f6:	1c43      	adds	r3, r0, #1
 80065f8:	d102      	bne.n	8006600 <_fstat_r+0x1c>
 80065fa:	682b      	ldr	r3, [r5, #0]
 80065fc:	b103      	cbz	r3, 8006600 <_fstat_r+0x1c>
 80065fe:	6023      	str	r3, [r4, #0]
 8006600:	bd38      	pop	{r3, r4, r5, pc}
 8006602:	bf00      	nop
 8006604:	200134e4 	.word	0x200134e4

08006608 <_isatty_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	4d06      	ldr	r5, [pc, #24]	; (8006624 <_isatty_r+0x1c>)
 800660c:	2300      	movs	r3, #0
 800660e:	4604      	mov	r4, r0
 8006610:	4608      	mov	r0, r1
 8006612:	602b      	str	r3, [r5, #0]
 8006614:	f7fa ffff 	bl	8001616 <_isatty>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_isatty_r+0x1a>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	b103      	cbz	r3, 8006622 <_isatty_r+0x1a>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	200134e4 	.word	0x200134e4

08006628 <_init>:
 8006628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662a:	bf00      	nop
 800662c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662e:	bc08      	pop	{r3}
 8006630:	469e      	mov	lr, r3
 8006632:	4770      	bx	lr

08006634 <_fini>:
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006636:	bf00      	nop
 8006638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663a:	bc08      	pop	{r3}
 800663c:	469e      	mov	lr, r3
 800663e:	4770      	bx	lr
