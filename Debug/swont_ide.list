
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000568c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800581c  0800581c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058e8  080058e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058f0  080058f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058f0  080058f0  000158f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058f4  080058f4  000158f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080058f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013260  20000070  08005968  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200132d0  08005968  000232d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1f0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000249c  00000000  00000000  0002d290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  0002f730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00030450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232d3  00000000  00000000  00031038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5ce  00000000  00000000  0005430b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb4bf  00000000  00000000  000638d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ed98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d08  00000000  00000000  0012ede8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005804 	.word	0x08005804

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005804 	.word	0x08005804

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <MX_DMA_Init+0x3c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <MX_DMA_Init+0x3c>)
 8000584:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <MX_DMA_Init+0x3c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	2044      	movs	r0, #68	; 0x44
 800059c:	f000 ff31 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80005a0:	2044      	movs	r0, #68	; 0x44
 80005a2:	f000 ff4a 	bl	800143a <HAL_NVIC_EnableIRQ>

}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023800 	.word	0x40023800

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b32      	ldr	r3, [pc, #200]	; (8000698 <MX_GPIO_Init+0xe4>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a31      	ldr	r2, [pc, #196]	; (8000698 <MX_GPIO_Init+0xe4>)
 80005d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b2f      	ldr	r3, [pc, #188]	; (8000698 <MX_GPIO_Init+0xe4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <MX_GPIO_Init+0xe4>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a2a      	ldr	r2, [pc, #168]	; (8000698 <MX_GPIO_Init+0xe4>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b28      	ldr	r3, [pc, #160]	; (8000698 <MX_GPIO_Init+0xe4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <MX_GPIO_Init+0xe4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a23      	ldr	r2, [pc, #140]	; (8000698 <MX_GPIO_Init+0xe4>)
 800060c:	f043 0310 	orr.w	r3, r3, #16
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_GPIO_Init+0xe4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0310 	and.w	r3, r3, #16
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_GPIO_Init+0xe4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <MX_GPIO_Init+0xe4>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_GPIO_Init+0xe4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000640:	4816      	ldr	r0, [pc, #88]	; (800069c <MX_GPIO_Init+0xe8>)
 8000642:	f001 fc43 	bl	8001ecc <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064c:	4814      	ldr	r0, [pc, #80]	; (80006a0 <MX_GPIO_Init+0xec>)
 800064e:	f001 fc3d 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000652:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000656:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000660:	2303      	movs	r3, #3
 8000662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	480c      	ldr	r0, [pc, #48]	; (800069c <MX_GPIO_Init+0xe8>)
 800066c:	f001 fa92 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067e:	2303      	movs	r3, #3
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_GPIO_Init+0xec>)
 800068a:	f001 fa83 	bl	8001b94 <HAL_GPIO_Init>

}
 800068e:	bf00      	nop
 8000690:	3728      	adds	r7, #40	; 0x28
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40021000 	.word	0x40021000
 80006a0:	40020400 	.word	0x40020400

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006aa:	f000 fd5d 	bl	8001168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ae:	f000 f85d 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b2:	f7ff ff7f 	bl	80005b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006b6:	f7ff ff5d 	bl	8000574 <MX_DMA_Init>
  MX_TIM1_Init();
 80006ba:	f000 faab 	bl	8000c14 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006be:	f000 faf9 	bl	8000cb4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80006c2:	f000 fc0f 	bl	8000ee4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 80006c6:	f000 fcb1 	bl	800102c <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f000 fd00 	bl	80010d0 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 80006d0:	220a      	movs	r2, #10
 80006d2:	210a      	movs	r1, #10
 80006d4:	200a      	movs	r0, #10
 80006d6:	f000 fd1f 	bl	8001118 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 fd1a 	bl	8001118 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2100      	movs	r1, #0
 80006e8:	f240 103f 	movw	r0, #319	; 0x13f
 80006ec:	f000 fd14 	bl	8001118 <UB_VGA_SetPixel>

  int i;

  for(i = 0; i < LINE_BUFLEN; i++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	e008      	b.n	8000708 <main+0x64>
	  input.line_rx_buffer[i] = 0;
 80006f6:	4a1a      	ldr	r2, [pc, #104]	; (8000760 <main+0xbc>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4413      	add	r3, r2
 80006fc:	3301      	adds	r3, #1
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3301      	adds	r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800070e:	dbf2      	blt.n	80006f6 <main+0x52>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <main+0xbc>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <main+0xbc>)
 8000718:	2200      	movs	r2, #0
 800071a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <main+0xbc>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000726:	2201      	movs	r2, #1
 8000728:	490d      	ldr	r1, [pc, #52]	; (8000760 <main+0xbc>)
 800072a:	480e      	ldr	r0, [pc, #56]	; (8000764 <main+0xc0>)
 800072c:	f003 f8fc 	bl	8003928 <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 8000730:	23ff      	movs	r3, #255	; 0xff
 8000732:	70fb      	strb	r3, [r7, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == TRUE)
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <main+0xbc>)
 8000736:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800073a:	2bff      	cmp	r3, #255	; 0xff
 800073c:	d1fa      	bne.n	8000734 <main+0x90>
	  {
		  // Do some stuff
		  //input.command_execute_flag = test;
		  //printf("yes\n");
		  printf("\n De byte buffer is",input.byte_buffer_rx);
 800073e:	4908      	ldr	r1, [pc, #32]	; (8000760 <main+0xbc>)
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <main+0xc4>)
 8000742:	f004 f8d1 	bl	80048e8 <iprintf>
		  colorTest = ~colorTest; // Toggle screen color
 8000746:	78fb      	ldrb	r3, [r7, #3]
 8000748:	43db      	mvns	r3, r3
 800074a:	70fb      	strb	r3, [r7, #3]
		  UB_VGA_FillScreen(colorTest);
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fcbe 	bl	80010d0 <UB_VGA_FillScreen>

		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 8000754:	4b02      	ldr	r3, [pc, #8]	; (8000760 <main+0xbc>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 800075c:	e7ea      	b.n	8000734 <main+0x90>
 800075e:	bf00      	nop
 8000760:	2000008c 	.word	0x2000008c
 8000764:	20000580 	.word	0x20000580
 8000768:	0800581c 	.word	0x0800581c

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	; 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2230      	movs	r2, #48	; 0x30
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f004 f8ac 	bl	80048d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	4b28      	ldr	r3, [pc, #160]	; (8000838 <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a27      	ldr	r2, [pc, #156]	; (8000838 <SystemClock_Config+0xcc>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <SystemClock_Config+0xcc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <SystemClock_Config+0xd0>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <SystemClock_Config+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c8:	2301      	movs	r3, #1
 80007ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007e0:	23a8      	movs	r3, #168	; 0xa8
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e8:	2304      	movs	r3, #4
 80007ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fb85 	bl	8001f00 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007fc:	f000 f832 	bl	8000864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2302      	movs	r3, #2
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2105      	movs	r1, #5
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fddc 	bl	80023dc <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800082a:	f000 f81b 	bl	8000864 <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3750      	adds	r7, #80	; 0x50
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000848:	1d39      	adds	r1, r7, #4
 800084a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800084e:	2201      	movs	r2, #1
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <__io_putchar+0x20>)
 8000852:	f002 ffd0 	bl	80037f6 <HAL_UART_Transmit>
	return ch;												//Return the character
 8000856:	687b      	ldr	r3, [r7, #4]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000580 	.word	0x20000580

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <HAL_MspInit+0x4c>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000918:	f000 fc78 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000924:	4828      	ldr	r0, [pc, #160]	; (80009c8 <TIM2_IRQHandler+0xa8>)
 8000926:	f002 f8b5 	bl	8002a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 800092a:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <TIM2_IRQHandler+0xa8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f06f 0208 	mvn.w	r2, #8
 8000932:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000934:	4b25      	ldr	r3, [pc, #148]	; (80009cc <TIM2_IRQHandler+0xac>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	b29a      	uxth	r2, r3
 800093c:	4b23      	ldr	r3, [pc, #140]	; (80009cc <TIM2_IRQHandler+0xac>)
 800093e:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <TIM2_IRQHandler+0xac>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000948:	d905      	bls.n	8000956 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <TIM2_IRQHandler+0xac>)
 800094c:	2200      	movs	r2, #0
 800094e:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000950:	4a1f      	ldr	r2, [pc, #124]	; (80009d0 <TIM2_IRQHandler+0xb0>)
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <TIM2_IRQHandler+0xac>)
 8000954:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <TIM2_IRQHandler+0xac>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d802      	bhi.n	8000964 <TIM2_IRQHandler+0x44>
 800095e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000962:	e001      	b.n	8000968 <TIM2_IRQHandler+0x48>
 8000964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000968:	4a1a      	ldr	r2, [pc, #104]	; (80009d4 <TIM2_IRQHandler+0xb4>)
 800096a:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <TIM2_IRQHandler+0xac>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	2b23      	cmp	r3, #35	; 0x23
 8000972:	d927      	bls.n	80009c4 <TIM2_IRQHandler+0xa4>
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <TIM2_IRQHandler+0xac>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	f240 2202 	movw	r2, #514	; 0x202
 800097c:	4293      	cmp	r3, r2
 800097e:	d821      	bhi.n	80009c4 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000980:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <TIM2_IRQHandler+0xb8>)
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <TIM2_IRQHandler+0xac>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000988:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <TIM2_IRQHandler+0xb8>)
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <TIM2_IRQHandler+0xac>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <TIM2_IRQHandler+0xbc>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a11      	ldr	r2, [pc, #68]	; (80009dc <TIM2_IRQHandler+0xbc>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <TIM2_IRQHandler+0xc0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <TIM2_IRQHandler+0xc0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f042 0201 	orr.w	r2, r2, #1
 80009aa:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <TIM2_IRQHandler+0xac>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d005      	beq.n	80009c4 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <TIM2_IRQHandler+0xac>)
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f203 1341 	addw	r3, r3, #321	; 0x141
 80009c0:	4a02      	ldr	r2, [pc, #8]	; (80009cc <TIM2_IRQHandler+0xac>)
 80009c2:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200004e0 	.word	0x200004e0
 80009cc:	200132b0 	.word	0x200132b0
 80009d0:	200005c0 	.word	0x200005c0
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40026488 	.word	0x40026488
 80009dc:	40010000 	.word	0x40010000
 80009e0:	20000520 	.word	0x20000520

080009e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <USART2_IRQHandler+0x70>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	2b0a      	cmp	r3, #10
 80009f4:	d026      	beq.n	8000a44 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b0d      	cmp	r3, #13
 80009fa:	d002      	beq.n	8000a02 <USART2_IRQHandler+0x1e>
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2b2e      	cmp	r3, #46	; 0x2e
 8000a00:	d10e      	bne.n	8000a20 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <USART2_IRQHandler+0x74>)
 8000a04:	22ff      	movs	r2, #255	; 0xff
 8000a06:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <USART2_IRQHandler+0x74>)
 8000a0c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a10:	4a11      	ldr	r2, [pc, #68]	; (8000a58 <USART2_IRQHandler+0x74>)
 8000a12:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <USART2_IRQHandler+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000a1e:	e011      	b.n	8000a44 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <USART2_IRQHandler+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <USART2_IRQHandler+0x74>)
 8000a2a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <USART2_IRQHandler+0x74>)
 8000a30:	4413      	add	r3, r2
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <USART2_IRQHandler+0x74>)
 8000a38:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <USART2_IRQHandler+0x74>)
 8000a40:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <USART2_IRQHandler+0x78>)
 8000a46:	f002 ffc5 	bl	80039d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40004400 	.word	0x40004400
 8000a58:	2000008c 	.word	0x2000008c
 8000a5c:	20000580 	.word	0x20000580

08000a60 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <DMA2_Stream5_IRQHandler+0x48>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6a1a      	ldr	r2, [r3, #32]
 8000a6a:	f241 1311 	movw	r3, #4369	; 0x1111
 8000a6e:	4013      	ands	r3, r2
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d10f      	bne.n	8000a94 <DMA2_Stream5_IRQHandler+0x34>
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <DMA2_Stream5_IRQHandler+0x48>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6a1a      	ldr	r2, [r3, #32]
 8000a7a:	f240 4344 	movw	r3, #1092	; 0x444
 8000a7e:	4013      	ands	r3, r2
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d107      	bne.n	8000a94 <DMA2_Stream5_IRQHandler+0x34>
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <DMA2_Stream5_IRQHandler+0x48>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <DMA2_Stream5_IRQHandler+0x48>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f022 0201 	bic.w	r2, r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <DMA2_Stream5_IRQHandler+0x4c>)
 8000a96:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000a9a:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <DMA2_Stream5_IRQHandler+0x50>)
 8000a9e:	f000 fe0f 	bl	80016c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200004a0 	.word	0x200004a0
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	20000520 	.word	0x20000520

08000ab4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	e00a      	b.n	8000adc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ac6:	f3af 8000 	nop.w
 8000aca:	4601      	mov	r1, r0
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	60ba      	str	r2, [r7, #8]
 8000ad2:	b2ca      	uxtb	r2, r1
 8000ad4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbf0      	blt.n	8000ac6 <_read+0x12>
	}

return len;
 8000ae4:	687b      	ldr	r3, [r7, #4]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e009      	b.n	8000b14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fe99 	bl	8000840 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf1      	blt.n	8000b00 <_write+0x12>
	}
	return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_close>:

int _close(int file)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_isatty>:

int _isatty(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
	return 1;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <_sbrk+0x50>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <_sbrk+0x16>
		heap_end = &end;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <_sbrk+0x50>)
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <_sbrk+0x54>)
 8000ba4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <_sbrk+0x50>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <_sbrk+0x50>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	466a      	mov	r2, sp
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d907      	bls.n	8000bca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000bba:	f003 fe63 	bl	8004884 <__errno>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	220c      	movs	r2, #12
 8000bc2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	e006      	b.n	8000bd8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <_sbrk+0x50>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a03      	ldr	r2, [pc, #12]	; (8000be0 <_sbrk+0x50>)
 8000bd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000049c 	.word	0x2000049c
 8000be4:	200132d0 	.word	0x200132d0

08000be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <SystemInit+0x28>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf2:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <SystemInit+0x28>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <SystemInit+0x28>)
 8000bfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c02:	609a      	str	r2, [r3, #8]
#endif
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c32:	4a1f      	ldr	r2, [pc, #124]	; (8000cb0 <MX_TIM1_Init+0x9c>)
 8000c34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c44:	220b      	movs	r2, #11
 8000c46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c5a:	4814      	ldr	r0, [pc, #80]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c5c:	f001 fdde 	bl	800281c <HAL_TIM_Base_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000c66:	f7ff fdfd 	bl	8000864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	4619      	mov	r1, r3
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c78:	f002 f8da 	bl	8002e30 <HAL_TIM_ConfigClockSource>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000c82:	f7ff fdef 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4619      	mov	r1, r3
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <MX_TIM1_Init+0x98>)
 8000c94:	f002 fcd2 	bl	800363c <HAL_TIMEx_MasterConfigSynchronization>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000c9e:	f7ff fde1 	bl	8000864 <Error_Handler>
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200004a0 	.word	0x200004a0
 8000cb0:	40010000 	.word	0x40010000

08000cb4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cba:	f107 0320 	add.w	r3, r7, #32
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
 8000cd2:	615a      	str	r2, [r3, #20]
 8000cd4:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <MX_TIM2_Init+0xcc>)
 8000cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <MX_TIM2_Init+0xcc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_TIM2_Init+0xcc>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <MX_TIM2_Init+0xcc>)
 8000cec:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000cf0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <MX_TIM2_Init+0xcc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf8:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <MX_TIM2_Init+0xcc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cfe:	4820      	ldr	r0, [pc, #128]	; (8000d80 <MX_TIM2_Init+0xcc>)
 8000d00:	f001 fddb 	bl	80028ba <HAL_TIM_PWM_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d0a:	f7ff fdab 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d16:	f107 0320 	add.w	r3, r7, #32
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4818      	ldr	r0, [pc, #96]	; (8000d80 <MX_TIM2_Init+0xcc>)
 8000d1e:	f002 fc8d 	bl	800363c <HAL_TIMEx_MasterConfigSynchronization>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d28:	f7ff fd9c 	bl	8000864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d2c:	2360      	movs	r3, #96	; 0x60
 8000d2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000d30:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000d34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000d36:	2302      	movs	r3, #2
 8000d38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2208      	movs	r2, #8
 8000d42:	4619      	mov	r1, r3
 8000d44:	480e      	ldr	r0, [pc, #56]	; (8000d80 <MX_TIM2_Init+0xcc>)
 8000d46:	f001 ffad 	bl	8002ca4 <HAL_TIM_PWM_ConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000d50:	f7ff fd88 	bl	8000864 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000d54:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	220c      	movs	r2, #12
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4807      	ldr	r0, [pc, #28]	; (8000d80 <MX_TIM2_Init+0xcc>)
 8000d62:	f001 ff9f 	bl	8002ca4 <HAL_TIM_PWM_ConfigChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000d6c:	f7ff fd7a 	bl	8000864 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <MX_TIM2_Init+0xcc>)
 8000d72:	f000 f87f 	bl	8000e74 <HAL_TIM_MspPostInit>

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200004e0 	.word	0x200004e0

08000d84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a21      	ldr	r2, [pc, #132]	; (8000e18 <HAL_TIM_Base_MspInit+0x94>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d13c      	bne.n	8000e10 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <HAL_TIM_Base_MspInit+0x98>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a1f      	ldr	r2, [pc, #124]	; (8000e1c <HAL_TIM_Base_MspInit+0x98>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <HAL_TIM_Base_MspInit+0x98>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <HAL_TIM_Base_MspInit+0x9c>)
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <HAL_TIM_Base_MspInit+0xa0>)
 8000db6:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_TIM_Base_MspInit+0x9c>)
 8000dba:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000dbe:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_TIM_Base_MspInit+0x9c>)
 8000dc2:	2240      	movs	r2, #64	; 0x40
 8000dc4:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc6:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_TIM_Base_MspInit+0x9c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_TIM_Base_MspInit+0x9c>)
 8000dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd2:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_TIM_Base_MspInit+0x9c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_TIM_Base_MspInit+0x9c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_TIM_Base_MspInit+0x9c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_TIM_Base_MspInit+0x9c>)
 8000de8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dec:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_TIM_Base_MspInit+0x9c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <HAL_TIM_Base_MspInit+0x9c>)
 8000df6:	f000 fb3b 	bl	8001470 <HAL_DMA_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000e00:	f7ff fd30 	bl	8000864 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <HAL_TIM_Base_MspInit+0x9c>)
 8000e08:	621a      	str	r2, [r3, #32]
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <HAL_TIM_Base_MspInit+0x9c>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40010000 	.word	0x40010000
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	20000520 	.word	0x20000520
 8000e24:	40026488 	.word	0x40026488

08000e28 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e38:	d115      	bne.n	8000e66 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_TIM_PWM_MspInit+0x48>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <HAL_TIM_PWM_MspInit+0x48>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_TIM_PWM_MspInit+0x48>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	201c      	movs	r0, #28
 8000e5c:	f000 fad1 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e60:	201c      	movs	r0, #28
 8000e62:	f000 faea 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800

08000e74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e94:	d11e      	bne.n	8000ed4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_TIM_MspPostInit+0x68>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <HAL_TIM_MspPostInit+0x68>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_TIM_MspPostInit+0x68>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8000eb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <HAL_TIM_MspPostInit+0x6c>)
 8000ed0:	f000 fe60 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_USART2_UART_Init+0x50>)
 8000eec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000ef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f1c:	f002 fc1e 	bl	800375c <HAL_UART_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f26:	f7ff fc9d 	bl	8000864 <Error_Handler>
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000580 	.word	0x20000580
 8000f34:	40004400 	.word	0x40004400

08000f38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <HAL_UART_MspInit+0x94>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d133      	bne.n	8000fc2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <HAL_UART_MspInit+0x98>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a1b      	ldr	r2, [pc, #108]	; (8000fd0 <HAL_UART_MspInit+0x98>)
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <HAL_UART_MspInit+0x98>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_UART_MspInit+0x98>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <HAL_UART_MspInit+0x98>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_UART_MspInit+0x98>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f92:	230c      	movs	r3, #12
 8000f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <HAL_UART_MspInit+0x9c>)
 8000fae:	f000 fdf1 	bl	8001b94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2026      	movs	r0, #38	; 0x26
 8000fb8:	f000 fa23 	bl	8001402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fbc:	2026      	movs	r0, #38	; 0x26
 8000fbe:	f000 fa3c 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40004400 	.word	0x40004400
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000

08000fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001010 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fde:	e003      	b.n	8000fe8 <LoopCopyDataInit>

08000fe0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fe2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fe4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fe6:	3104      	adds	r1, #4

08000fe8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ff0:	d3f6      	bcc.n	8000fe0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ff4:	e002      	b.n	8000ffc <LoopFillZerobss>

08000ff6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ff6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ff8:	f842 3b04 	str.w	r3, [r2], #4

08000ffc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ffe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001000:	d3f9      	bcc.n	8000ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001002:	f7ff fdf1 	bl	8000be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001006:	f003 fc43 	bl	8004890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100a:	f7ff fb4b 	bl	80006a4 <main>
  bx  lr    
 800100e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001010:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001014:	080058f8 	.word	0x080058f8
  ldr  r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800101c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001020:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001024:	200132d0 	.word	0x200132d0

08001028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC_IRQHandler>
	...

0800102c <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <UB_VGA_Screen_Init+0x84>)
 8001032:	2200      	movs	r2, #0
 8001034:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001036:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <UB_VGA_Screen_Init+0x84>)
 8001038:	2200      	movs	r2, #0
 800103a:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 800103c:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <UB_VGA_Screen_Init+0x84>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <UB_VGA_Screen_Init+0x88>)
 8001044:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001048:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 800104a:	481b      	ldr	r0, [pc, #108]	; (80010b8 <UB_VGA_Screen_Init+0x8c>)
 800104c:	f001 fc11 	bl	8002872 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001050:	210c      	movs	r1, #12
 8001052:	4819      	ldr	r0, [pc, #100]	; (80010b8 <UB_VGA_Screen_Init+0x8c>)
 8001054:	f001 fc5c 	bl	8002910 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001058:	2108      	movs	r1, #8
 800105a:	4817      	ldr	r0, [pc, #92]	; (80010b8 <UB_VGA_Screen_Init+0x8c>)
 800105c:	f001 fc96 	bl	800298c <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <UB_VGA_Screen_Init+0x90>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <UB_VGA_Screen_Init+0x90>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800106e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <UB_VGA_Screen_Init+0x90>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <UB_VGA_Screen_Init+0x90>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0201 	orr.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001080:	490f      	ldr	r1, [pc, #60]	; (80010c0 <UB_VGA_Screen_Init+0x94>)
 8001082:	f240 1341 	movw	r3, #321	; 0x141
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <UB_VGA_Screen_Init+0x98>)
 8001088:	480f      	ldr	r0, [pc, #60]	; (80010c8 <UB_VGA_Screen_Init+0x9c>)
 800108a:	f000 fa9f 	bl	80015cc <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <UB_VGA_Screen_Init+0x9c>)
 8001090:	f000 f9ee 	bl	8001470 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <UB_VGA_Screen_Init+0x9c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <UB_VGA_Screen_Init+0x9c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0210 	orr.w	r2, r2, #16
 80010a2:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <UB_VGA_Screen_Init+0xa0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a01      	ldr	r2, [pc, #4]	; (80010b0 <UB_VGA_Screen_Init+0x84>)
 80010aa:	6093      	str	r3, [r2, #8]
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200132b0 	.word	0x200132b0
 80010b4:	40020400 	.word	0x40020400
 80010b8:	200004e0 	.word	0x200004e0
 80010bc:	200004a0 	.word	0x200004a0
 80010c0:	200005c0 	.word	0x200005c0
 80010c4:	40021015 	.word	0x40021015
 80010c8:	20000520 	.word	0x20000520
 80010cc:	40026488 	.word	0x40026488

080010d0 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	81bb      	strh	r3, [r7, #12]
 80010de:	e012      	b.n	8001106 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	81fb      	strh	r3, [r7, #14]
 80010e4:	e008      	b.n	80010f8 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	89b9      	ldrh	r1, [r7, #12]
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f813 	bl	8001118 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80010f2:	89fb      	ldrh	r3, [r7, #14]
 80010f4:	3301      	adds	r3, #1
 80010f6:	81fb      	strh	r3, [r7, #14]
 80010f8:	89fb      	ldrh	r3, [r7, #14]
 80010fa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80010fe:	d3f2      	bcc.n	80010e6 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001100:	89bb      	ldrh	r3, [r7, #12]
 8001102:	3301      	adds	r3, #1
 8001104:	81bb      	strh	r3, [r7, #12]
 8001106:	89bb      	ldrh	r3, [r7, #12]
 8001108:	2bef      	cmp	r3, #239	; 0xef
 800110a:	d9e9      	bls.n	80010e0 <UB_VGA_FillScreen+0x10>
    }
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
 8001122:	460b      	mov	r3, r1
 8001124:	80bb      	strh	r3, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001130:	d301      	bcc.n	8001136 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	2bef      	cmp	r3, #239	; 0xef
 800113a:	d901      	bls.n	8001140 <UB_VGA_SetPixel+0x28>
    yp = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001140:	88ba      	ldrh	r2, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	019b      	lsls	r3, r3, #6
 800114a:	441a      	add	r2, r3
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	4413      	add	r3, r2
 8001150:	4904      	ldr	r1, [pc, #16]	; (8001164 <UB_VGA_SetPixel+0x4c>)
 8001152:	78fa      	ldrb	r2, [r7, #3]
 8001154:	54ca      	strb	r2, [r1, r3]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	200005c0 	.word	0x200005c0

08001168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <HAL_Init+0x40>)
 8001172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <HAL_Init+0x40>)
 800117e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <HAL_Init+0x40>)
 800118a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f92b 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001196:	2000      	movs	r0, #0
 8001198:	f000 f808 	bl	80011ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800119c:	f7ff fb6a 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023c00 	.word	0x40023c00

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_InitTick+0x54>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x58>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f943 	bl	8001456 <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00e      	b.n	80011f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d80a      	bhi.n	80011f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e0:	2200      	movs	r2, #0
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f000 f90b 	bl	8001402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <HAL_InitTick+0x5c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000000 	.word	0x20000000
 8001204:	20000008 	.word	0x20000008
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x20>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x24>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <HAL_IncTick+0x24>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008
 8001230:	200132bc 	.word	0x200132bc

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200132bc 	.word	0x200132bc

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db0b      	blt.n	80012da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	f003 021f 	and.w	r2, r3, #31
 80012c8:	4907      	ldr	r1, [pc, #28]	; (80012e8 <__NVIC_EnableIRQ+0x38>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	2001      	movs	r0, #1
 80012d2:	fa00 f202 	lsl.w	r2, r0, r2
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e100 	.word	0xe000e100

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db0a      	blt.n	8001316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <__NVIC_SetPriority+0x4c>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	440b      	add	r3, r1
 8001310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001314:	e00a      	b.n	800132c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4908      	ldr	r1, [pc, #32]	; (800133c <__NVIC_SetPriority+0x50>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	440b      	add	r3, r1
 800132a:	761a      	strb	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf28      	it	cs
 800135e:	2304      	movcs	r3, #4
 8001360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3304      	adds	r3, #4
 8001366:	2b06      	cmp	r3, #6
 8001368:	d902      	bls.n	8001370 <NVIC_EncodePriority+0x30>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3b03      	subs	r3, #3
 800136e:	e000      	b.n	8001372 <NVIC_EncodePriority+0x32>
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	f04f 31ff 	mov.w	r1, #4294967295
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f7ff ff8e 	bl	80012ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff29 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff3e 	bl	8001294 <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff8e 	bl	8001340 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5d 	bl	80012ec <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff31 	bl	80012b0 <__NVIC_EnableIRQ>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffa2 	bl	80013a8 <SysTick_Config>
 8001464:	4603      	mov	r3, r0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff feda 	bl	8001234 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e099      	b.n	80015c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0201 	bic.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ac:	e00f      	b.n	80014ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ae:	f7ff fec1 	bl	8001234 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d908      	bls.n	80014ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2220      	movs	r2, #32
 80014c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2203      	movs	r2, #3
 80014c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e078      	b.n	80015c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1e8      	bne.n	80014ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <HAL_DMA_Init+0x158>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001506:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001512:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	4313      	orrs	r3, r2
 800151e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	2b04      	cmp	r3, #4
 8001526:	d107      	bne.n	8001538 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	4313      	orrs	r3, r2
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4313      	orrs	r3, r2
 8001536:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f023 0307 	bic.w	r3, r3, #7
 800154e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	4313      	orrs	r3, r2
 8001558:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	2b04      	cmp	r3, #4
 8001560:	d117      	bne.n	8001592 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4313      	orrs	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00e      	beq.n	8001592 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 fa91 	bl	8001a9c <DMA_CheckFifoParam>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2240      	movs	r2, #64	; 0x40
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800158e:	2301      	movs	r3, #1
 8001590:	e016      	b.n	80015c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fa48 	bl	8001a30 <DMA_CalcBaseAndBitshift>
 80015a0:	4603      	mov	r3, r0
 80015a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a8:	223f      	movs	r2, #63	; 0x3f
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	f010803f 	.word	0xf010803f

080015cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_DMA_Start_IT+0x26>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e040      	b.n	8001674 <HAL_DMA_Start_IT+0xa8>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d12f      	bne.n	8001666 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2202      	movs	r2, #2
 800160a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f9da 	bl	80019d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001624:	223f      	movs	r2, #63	; 0x3f
 8001626:	409a      	lsls	r2, r3
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0216 	orr.w	r2, r2, #22
 800163a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	2b00      	cmp	r3, #0
 8001642:	d007      	beq.n	8001654 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0208 	orr.w	r2, r2, #8
 8001652:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e005      	b.n	8001672 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800166e:	2302      	movs	r3, #2
 8001670:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001672:	7dfb      	ldrb	r3, [r7, #23]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d004      	beq.n	800169a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2280      	movs	r2, #128	; 0x80
 8001694:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e00c      	b.n	80016b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2205      	movs	r2, #5
 800169e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0201 	bic.w	r2, r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016cc:	4b8e      	ldr	r3, [pc, #568]	; (8001908 <HAL_DMA_IRQHandler+0x248>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a8e      	ldr	r2, [pc, #568]	; (800190c <HAL_DMA_IRQHandler+0x24c>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	0a9b      	lsrs	r3, r3, #10
 80016d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ea:	2208      	movs	r2, #8
 80016ec:	409a      	lsls	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d01a      	beq.n	800172c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d013      	beq.n	800172c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0204 	bic.w	r2, r2, #4
 8001712:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001718:	2208      	movs	r2, #8
 800171a:	409a      	lsls	r2, r3
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001730:	2201      	movs	r2, #1
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d012      	beq.n	8001762 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174e:	2201      	movs	r2, #1
 8001750:	409a      	lsls	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175a:	f043 0202 	orr.w	r2, r3, #2
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	2204      	movs	r2, #4
 8001768:	409a      	lsls	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d012      	beq.n	8001798 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00b      	beq.n	8001798 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001784:	2204      	movs	r2, #4
 8001786:	409a      	lsls	r2, r3
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001790:	f043 0204 	orr.w	r2, r3, #4
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179c:	2210      	movs	r2, #16
 800179e:	409a      	lsls	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d043      	beq.n	8001830 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d03c      	beq.n	8001830 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ba:	2210      	movs	r2, #16
 80017bc:	409a      	lsls	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d018      	beq.n	8001802 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d108      	bne.n	80017f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d024      	beq.n	8001830 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	4798      	blx	r3
 80017ee:	e01f      	b.n	8001830 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d01b      	beq.n	8001830 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	4798      	blx	r3
 8001800:	e016      	b.n	8001830 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180c:	2b00      	cmp	r3, #0
 800180e:	d107      	bne.n	8001820 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0208 	bic.w	r2, r2, #8
 800181e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001834:	2220      	movs	r2, #32
 8001836:	409a      	lsls	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 808f 	beq.w	8001960 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 8087 	beq.w	8001960 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001856:	2220      	movs	r2, #32
 8001858:	409a      	lsls	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b05      	cmp	r3, #5
 8001868:	d136      	bne.n	80018d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0216 	bic.w	r2, r2, #22
 8001878:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	695a      	ldr	r2, [r3, #20]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001888:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d103      	bne.n	800189a <HAL_DMA_IRQHandler+0x1da>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0208 	bic.w	r2, r2, #8
 80018a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ae:	223f      	movs	r2, #63	; 0x3f
 80018b0:	409a      	lsls	r2, r3
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d07e      	beq.n	80019cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	4798      	blx	r3
        }
        return;
 80018d6:	e079      	b.n	80019cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d01d      	beq.n	8001922 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10d      	bne.n	8001910 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d031      	beq.n	8001960 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	4798      	blx	r3
 8001904:	e02c      	b.n	8001960 <HAL_DMA_IRQHandler+0x2a0>
 8001906:	bf00      	nop
 8001908:	20000000 	.word	0x20000000
 800190c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001914:	2b00      	cmp	r3, #0
 8001916:	d023      	beq.n	8001960 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	4798      	blx	r3
 8001920:	e01e      	b.n	8001960 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10f      	bne.n	8001950 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0210 	bic.w	r2, r2, #16
 800193e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001964:	2b00      	cmp	r3, #0
 8001966:	d032      	beq.n	80019ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d022      	beq.n	80019ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2205      	movs	r2, #5
 8001978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	3301      	adds	r3, #1
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	429a      	cmp	r2, r3
 8001996:	d307      	bcc.n	80019a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f2      	bne.n	800198c <HAL_DMA_IRQHandler+0x2cc>
 80019a6:	e000      	b.n	80019aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019a8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	4798      	blx	r3
 80019ca:	e000      	b.n	80019ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80019cc:	bf00      	nop
    }
  }
}
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b40      	cmp	r3, #64	; 0x40
 8001a00:	d108      	bne.n	8001a14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a12:	e007      	b.n	8001a24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	60da      	str	r2, [r3, #12]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	3b10      	subs	r3, #16
 8001a40:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <DMA_CalcBaseAndBitshift+0x64>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a4a:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <DMA_CalcBaseAndBitshift+0x68>)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d909      	bls.n	8001a72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a66:	f023 0303 	bic.w	r3, r3, #3
 8001a6a:	1d1a      	adds	r2, r3, #4
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a70:	e007      	b.n	8001a82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a7a:	f023 0303 	bic.w	r3, r3, #3
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	aaaaaaab 	.word	0xaaaaaaab
 8001a98:	08005848 	.word	0x08005848

08001a9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d11f      	bne.n	8001af6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d856      	bhi.n	8001b6a <DMA_CheckFifoParam+0xce>
 8001abc:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <DMA_CheckFifoParam+0x28>)
 8001abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac2:	bf00      	nop
 8001ac4:	08001ad5 	.word	0x08001ad5
 8001ac8:	08001ae7 	.word	0x08001ae7
 8001acc:	08001ad5 	.word	0x08001ad5
 8001ad0:	08001b6b 	.word	0x08001b6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d046      	beq.n	8001b6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ae4:	e043      	b.n	8001b6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aee:	d140      	bne.n	8001b72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001af4:	e03d      	b.n	8001b72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001afe:	d121      	bne.n	8001b44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d837      	bhi.n	8001b76 <DMA_CheckFifoParam+0xda>
 8001b06:	a201      	add	r2, pc, #4	; (adr r2, 8001b0c <DMA_CheckFifoParam+0x70>)
 8001b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0c:	08001b1d 	.word	0x08001b1d
 8001b10:	08001b23 	.word	0x08001b23
 8001b14:	08001b1d 	.word	0x08001b1d
 8001b18:	08001b35 	.word	0x08001b35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b20:	e030      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d025      	beq.n	8001b7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b32:	e022      	b.n	8001b7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b3c:	d11f      	bne.n	8001b7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b42:	e01c      	b.n	8001b7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d903      	bls.n	8001b52 <DMA_CheckFifoParam+0xb6>
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d003      	beq.n	8001b58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b50:	e018      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
      break;
 8001b56:	e015      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00e      	beq.n	8001b82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
      break;
 8001b68:	e00b      	b.n	8001b82 <DMA_CheckFifoParam+0xe6>
      break;
 8001b6a:	bf00      	nop
 8001b6c:	e00a      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      break;
 8001b6e:	bf00      	nop
 8001b70:	e008      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      break;
 8001b72:	bf00      	nop
 8001b74:	e006      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      break;
 8001b76:	bf00      	nop
 8001b78:	e004      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      break;
 8001b7a:	bf00      	nop
 8001b7c:	e002      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b7e:	bf00      	nop
 8001b80:	e000      	b.n	8001b84 <DMA_CheckFifoParam+0xe8>
      break;
 8001b82:	bf00      	nop
    }
  } 
  
  return status; 
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	; 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	e16b      	b.n	8001e88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f040 815a 	bne.w	8001e82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d00b      	beq.n	8001bee <HAL_GPIO_Init+0x5a>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d007      	beq.n	8001bee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be2:	2b11      	cmp	r3, #17
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b12      	cmp	r3, #18
 8001bec:	d130      	bne.n	8001c50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c24:	2201      	movs	r2, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 0201 	and.w	r2, r3, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0xfc>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b12      	cmp	r3, #18
 8001c8e:	d123      	bne.n	8001cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3208      	adds	r2, #8
 8001c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	69b9      	ldr	r1, [r7, #24]
 8001cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80b4 	beq.w	8001e82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b60      	ldr	r3, [pc, #384]	; (8001ea0 <HAL_GPIO_Init+0x30c>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	4a5f      	ldr	r2, [pc, #380]	; (8001ea0 <HAL_GPIO_Init+0x30c>)
 8001d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d28:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ea0 <HAL_GPIO_Init+0x30c>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d36:	4a5b      	ldr	r2, [pc, #364]	; (8001ea4 <HAL_GPIO_Init+0x310>)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a52      	ldr	r2, [pc, #328]	; (8001ea8 <HAL_GPIO_Init+0x314>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d02b      	beq.n	8001dba <HAL_GPIO_Init+0x226>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a51      	ldr	r2, [pc, #324]	; (8001eac <HAL_GPIO_Init+0x318>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d025      	beq.n	8001db6 <HAL_GPIO_Init+0x222>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a50      	ldr	r2, [pc, #320]	; (8001eb0 <HAL_GPIO_Init+0x31c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01f      	beq.n	8001db2 <HAL_GPIO_Init+0x21e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4f      	ldr	r2, [pc, #316]	; (8001eb4 <HAL_GPIO_Init+0x320>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d019      	beq.n	8001dae <HAL_GPIO_Init+0x21a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4e      	ldr	r2, [pc, #312]	; (8001eb8 <HAL_GPIO_Init+0x324>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d013      	beq.n	8001daa <HAL_GPIO_Init+0x216>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4d      	ldr	r2, [pc, #308]	; (8001ebc <HAL_GPIO_Init+0x328>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00d      	beq.n	8001da6 <HAL_GPIO_Init+0x212>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4c      	ldr	r2, [pc, #304]	; (8001ec0 <HAL_GPIO_Init+0x32c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d007      	beq.n	8001da2 <HAL_GPIO_Init+0x20e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4b      	ldr	r2, [pc, #300]	; (8001ec4 <HAL_GPIO_Init+0x330>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_GPIO_Init+0x20a>
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	e00e      	b.n	8001dbc <HAL_GPIO_Init+0x228>
 8001d9e:	2308      	movs	r3, #8
 8001da0:	e00c      	b.n	8001dbc <HAL_GPIO_Init+0x228>
 8001da2:	2306      	movs	r3, #6
 8001da4:	e00a      	b.n	8001dbc <HAL_GPIO_Init+0x228>
 8001da6:	2305      	movs	r3, #5
 8001da8:	e008      	b.n	8001dbc <HAL_GPIO_Init+0x228>
 8001daa:	2304      	movs	r3, #4
 8001dac:	e006      	b.n	8001dbc <HAL_GPIO_Init+0x228>
 8001dae:	2303      	movs	r3, #3
 8001db0:	e004      	b.n	8001dbc <HAL_GPIO_Init+0x228>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e002      	b.n	8001dbc <HAL_GPIO_Init+0x228>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_GPIO_Init+0x228>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	69fa      	ldr	r2, [r7, #28]
 8001dbe:	f002 0203 	and.w	r2, r2, #3
 8001dc2:	0092      	lsls	r2, r2, #2
 8001dc4:	4093      	lsls	r3, r2
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dcc:	4935      	ldr	r1, [pc, #212]	; (8001ea4 <HAL_GPIO_Init+0x310>)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	089b      	lsrs	r3, r3, #2
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dda:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <HAL_GPIO_Init+0x334>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dfe:	4a32      	ldr	r2, [pc, #200]	; (8001ec8 <HAL_GPIO_Init+0x334>)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e04:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <HAL_GPIO_Init+0x334>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e28:	4a27      	ldr	r2, [pc, #156]	; (8001ec8 <HAL_GPIO_Init+0x334>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e2e:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <HAL_GPIO_Init+0x334>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e52:	4a1d      	ldr	r2, [pc, #116]	; (8001ec8 <HAL_GPIO_Init+0x334>)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_GPIO_Init+0x334>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e7c:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <HAL_GPIO_Init+0x334>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3301      	adds	r3, #1
 8001e86:	61fb      	str	r3, [r7, #28]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	2b0f      	cmp	r3, #15
 8001e8c:	f67f ae90 	bls.w	8001bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3724      	adds	r7, #36	; 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40013800 	.word	0x40013800
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	40020400 	.word	0x40020400
 8001eb0:	40020800 	.word	0x40020800
 8001eb4:	40020c00 	.word	0x40020c00
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40021400 	.word	0x40021400
 8001ec0:	40021800 	.word	0x40021800
 8001ec4:	40021c00 	.word	0x40021c00
 8001ec8:	40013c00 	.word	0x40013c00

08001ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001edc:	787b      	ldrb	r3, [r7, #1]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ee8:	e003      	b.n	8001ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	041a      	lsls	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	619a      	str	r2, [r3, #24]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e25e      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d075      	beq.n	800200a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1e:	4b88      	ldr	r3, [pc, #544]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d00c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2a:	4b85      	ldr	r3, [pc, #532]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d112      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f36:	4b82      	ldr	r3, [pc, #520]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f42:	d10b      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	4b7e      	ldr	r3, [pc, #504]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d05b      	beq.n	8002008 <HAL_RCC_OscConfig+0x108>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d157      	bne.n	8002008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e239      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d106      	bne.n	8001f74 <HAL_RCC_OscConfig+0x74>
 8001f66:	4b76      	ldr	r3, [pc, #472]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a75      	ldr	r2, [pc, #468]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xb0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x98>
 8001f7e:	4b70      	ldr	r3, [pc, #448]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a6f      	ldr	r2, [pc, #444]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b6d      	ldr	r3, [pc, #436]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6c      	ldr	r2, [pc, #432]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xb0>
 8001f98:	4b69      	ldr	r3, [pc, #420]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a68      	ldr	r2, [pc, #416]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b66      	ldr	r3, [pc, #408]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a65      	ldr	r2, [pc, #404]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff f93c 	bl	8001234 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff f938 	bl	8001234 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e1fe      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xc0>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff f928 	bl	8001234 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff f924 	bl	8001234 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1ea      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b51      	ldr	r3, [pc, #324]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xe8>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d063      	beq.n	80020de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002016:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202e:	4b44      	ldr	r3, [pc, #272]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x152>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1be      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4937      	ldr	r1, [pc, #220]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e03a      	b.n	80020de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b34      	ldr	r3, [pc, #208]	; (8002144 <HAL_RCC_OscConfig+0x244>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff f8dd 	bl	8001234 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff f8d9 	bl	8001234 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e19f      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b28      	ldr	r3, [pc, #160]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4925      	ldr	r1, [pc, #148]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_RCC_OscConfig+0x244>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff f8bc 	bl	8001234 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c0:	f7ff f8b8 	bl	8001234 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e17e      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d036      	beq.n	8002158 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_RCC_OscConfig+0x248>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff f89c 	bl	8001234 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002100:	f7ff f898 	bl	8001234 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e15e      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_OscConfig+0x240>)
 8002114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x200>
 800211e:	e01b      	b.n	8002158 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_OscConfig+0x248>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7ff f885 	bl	8001234 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212c:	e00e      	b.n	800214c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212e:	f7ff f881 	bl	8001234 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d907      	bls.n	800214c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e147      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
 8002140:	40023800 	.word	0x40023800
 8002144:	42470000 	.word	0x42470000
 8002148:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	4b88      	ldr	r3, [pc, #544]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800214e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ea      	bne.n	800212e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8097 	beq.w	8002294 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216a:	4b81      	ldr	r3, [pc, #516]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10f      	bne.n	8002196 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b7d      	ldr	r3, [pc, #500]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a7c      	ldr	r2, [pc, #496]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b7a      	ldr	r3, [pc, #488]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002192:	2301      	movs	r3, #1
 8002194:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b77      	ldr	r3, [pc, #476]	; (8002374 <HAL_RCC_OscConfig+0x474>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d118      	bne.n	80021d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a2:	4b74      	ldr	r3, [pc, #464]	; (8002374 <HAL_RCC_OscConfig+0x474>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a73      	ldr	r2, [pc, #460]	; (8002374 <HAL_RCC_OscConfig+0x474>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7ff f841 	bl	8001234 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b6:	f7ff f83d 	bl	8001234 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e103      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <HAL_RCC_OscConfig+0x474>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x2ea>
 80021dc:	4b64      	ldr	r3, [pc, #400]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e0:	4a63      	ldr	r2, [pc, #396]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6713      	str	r3, [r2, #112]	; 0x70
 80021e8:	e01c      	b.n	8002224 <HAL_RCC_OscConfig+0x324>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x30c>
 80021f2:	4b5f      	ldr	r3, [pc, #380]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	4a5e      	ldr	r2, [pc, #376]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	6713      	str	r3, [r2, #112]	; 0x70
 80021fe:	4b5c      	ldr	r3, [pc, #368]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	4a5b      	ldr	r2, [pc, #364]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6713      	str	r3, [r2, #112]	; 0x70
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0x324>
 800220c:	4b58      	ldr	r3, [pc, #352]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	4a57      	ldr	r2, [pc, #348]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	6713      	str	r3, [r2, #112]	; 0x70
 8002218:	4b55      	ldr	r3, [pc, #340]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	4a54      	ldr	r2, [pc, #336]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800221e:	f023 0304 	bic.w	r3, r3, #4
 8002222:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d015      	beq.n	8002258 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7ff f802 	bl	8001234 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7fe fffe 	bl	8001234 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0c2      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224a:	4b49      	ldr	r3, [pc, #292]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0ee      	beq.n	8002234 <HAL_RCC_OscConfig+0x334>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7fe ffec 	bl	8001234 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7fe ffe8 	bl	8001234 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0ac      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002276:	4b3e      	ldr	r3, [pc, #248]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ee      	bne.n	8002260 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002282:	7dfb      	ldrb	r3, [r7, #23]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002288:	4b39      	ldr	r3, [pc, #228]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	4a38      	ldr	r2, [pc, #224]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800228e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002292:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8098 	beq.w	80023ce <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229e:	4b34      	ldr	r3, [pc, #208]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d05c      	beq.n	8002364 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d141      	bne.n	8002336 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b2:	4b31      	ldr	r3, [pc, #196]	; (8002378 <HAL_RCC_OscConfig+0x478>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7fe ffbc 	bl	8001234 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe ffb8 	bl	8001234 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e07e      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	3b01      	subs	r3, #1
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	491b      	ldr	r1, [pc, #108]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <HAL_RCC_OscConfig+0x478>)
 800230a:	2201      	movs	r2, #1
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7fe ff91 	bl	8001234 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002316:	f7fe ff8d 	bl	8001234 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e053      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x416>
 8002334:	e04b      	b.n	80023ce <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_RCC_OscConfig+0x478>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7fe ff7a 	bl	8001234 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002344:	f7fe ff76 	bl	8001234 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e03c      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_RCC_OscConfig+0x470>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x444>
 8002362:	e034      	b.n	80023ce <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d107      	bne.n	800237c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e02f      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
 8002370:	40023800 	.word	0x40023800
 8002374:	40007000 	.word	0x40007000
 8002378:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_RCC_OscConfig+0x4d8>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	429a      	cmp	r2, r3
 800238e:	d11c      	bne.n	80023ca <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	429a      	cmp	r2, r3
 800239c:	d115      	bne.n	80023ca <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023a4:	4013      	ands	r3, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10d      	bne.n	80023ca <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40023800 	.word	0x40023800

080023dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0cc      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d90c      	bls.n	8002418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b63      	ldr	r3, [pc, #396]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0b8      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d020      	beq.n	8002466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002430:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	4a58      	ldr	r2, [pc, #352]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800243a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b50      	ldr	r3, [pc, #320]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	494d      	ldr	r1, [pc, #308]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d044      	beq.n	80024fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d119      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e07f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d003      	beq.n	800249a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002496:	2b03      	cmp	r3, #3
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e06f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e067      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b37      	ldr	r3, [pc, #220]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4934      	ldr	r1, [pc, #208]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024cc:	f7fe feb2 	bl	8001234 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7fe feae 	bl	8001234 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e04f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 020c 	and.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1eb      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d20c      	bcs.n	8002524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e032      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4916      	ldr	r1, [pc, #88]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	490e      	ldr	r1, [pc, #56]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002562:	f000 f821 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8002566:	4602      	mov	r2, r0
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	490a      	ldr	r1, [pc, #40]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	5ccb      	ldrb	r3, [r1, r3]
 8002576:	fa22 f303 	lsr.w	r3, r2, r3
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fe12 	bl	80011ac <HAL_InitTick>

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00
 8002598:	40023800 	.word	0x40023800
 800259c:	08005830 	.word	0x08005830
 80025a0:	20000000 	.word	0x20000000
 80025a4:	20000004 	.word	0x20000004

080025a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ac:	b094      	sub	sp, #80	; 0x50
 80025ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	647b      	str	r3, [r7, #68]	; 0x44
 80025b4:	2300      	movs	r3, #0
 80025b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025b8:	2300      	movs	r3, #0
 80025ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025c0:	4b79      	ldr	r3, [pc, #484]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d00d      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x40>
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	f200 80e1 	bhi.w	8002794 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x34>
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025da:	e0db      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025dc:	4b73      	ldr	r3, [pc, #460]	; (80027ac <HAL_RCC_GetSysClockFreq+0x204>)
 80025de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025e0:	e0db      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025e2:	4b73      	ldr	r3, [pc, #460]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80025e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025e6:	e0d8      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e8:	4b6f      	ldr	r3, [pc, #444]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025f2:	4b6d      	ldr	r3, [pc, #436]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d063      	beq.n	80026c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025fe:	4b6a      	ldr	r3, [pc, #424]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	099b      	lsrs	r3, r3, #6
 8002604:	2200      	movs	r2, #0
 8002606:	63bb      	str	r3, [r7, #56]	; 0x38
 8002608:	63fa      	str	r2, [r7, #60]	; 0x3c
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002610:	633b      	str	r3, [r7, #48]	; 0x30
 8002612:	2300      	movs	r3, #0
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
 8002616:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800261a:	4622      	mov	r2, r4
 800261c:	462b      	mov	r3, r5
 800261e:	f04f 0000 	mov.w	r0, #0
 8002622:	f04f 0100 	mov.w	r1, #0
 8002626:	0159      	lsls	r1, r3, #5
 8002628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800262c:	0150      	lsls	r0, r2, #5
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4621      	mov	r1, r4
 8002634:	1a51      	subs	r1, r2, r1
 8002636:	6139      	str	r1, [r7, #16]
 8002638:	4629      	mov	r1, r5
 800263a:	eb63 0301 	sbc.w	r3, r3, r1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800264c:	4659      	mov	r1, fp
 800264e:	018b      	lsls	r3, r1, #6
 8002650:	4651      	mov	r1, sl
 8002652:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002656:	4651      	mov	r1, sl
 8002658:	018a      	lsls	r2, r1, #6
 800265a:	4651      	mov	r1, sl
 800265c:	ebb2 0801 	subs.w	r8, r2, r1
 8002660:	4659      	mov	r1, fp
 8002662:	eb63 0901 	sbc.w	r9, r3, r1
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800267a:	4690      	mov	r8, r2
 800267c:	4699      	mov	r9, r3
 800267e:	4623      	mov	r3, r4
 8002680:	eb18 0303 	adds.w	r3, r8, r3
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	462b      	mov	r3, r5
 8002688:	eb49 0303 	adc.w	r3, r9, r3
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800269a:	4629      	mov	r1, r5
 800269c:	024b      	lsls	r3, r1, #9
 800269e:	4621      	mov	r1, r4
 80026a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026a4:	4621      	mov	r1, r4
 80026a6:	024a      	lsls	r2, r1, #9
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ae:	2200      	movs	r2, #0
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026b8:	f7fd fdda 	bl	8000270 <__aeabi_uldivmod>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4613      	mov	r3, r2
 80026c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c4:	e058      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c6:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	2200      	movs	r2, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	4611      	mov	r1, r2
 80026d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026d6:	623b      	str	r3, [r7, #32]
 80026d8:	2300      	movs	r3, #0
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
 80026dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026e0:	4642      	mov	r2, r8
 80026e2:	464b      	mov	r3, r9
 80026e4:	f04f 0000 	mov.w	r0, #0
 80026e8:	f04f 0100 	mov.w	r1, #0
 80026ec:	0159      	lsls	r1, r3, #5
 80026ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f2:	0150      	lsls	r0, r2, #5
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4641      	mov	r1, r8
 80026fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80026fe:	4649      	mov	r1, r9
 8002700:	eb63 0b01 	sbc.w	fp, r3, r1
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002710:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002714:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002718:	ebb2 040a 	subs.w	r4, r2, sl
 800271c:	eb63 050b 	sbc.w	r5, r3, fp
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	00eb      	lsls	r3, r5, #3
 800272a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800272e:	00e2      	lsls	r2, r4, #3
 8002730:	4614      	mov	r4, r2
 8002732:	461d      	mov	r5, r3
 8002734:	4643      	mov	r3, r8
 8002736:	18e3      	adds	r3, r4, r3
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	464b      	mov	r3, r9
 800273c:	eb45 0303 	adc.w	r3, r5, r3
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800274e:	4629      	mov	r1, r5
 8002750:	028b      	lsls	r3, r1, #10
 8002752:	4621      	mov	r1, r4
 8002754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002758:	4621      	mov	r1, r4
 800275a:	028a      	lsls	r2, r1, #10
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002762:	2200      	movs	r2, #0
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	61fa      	str	r2, [r7, #28]
 8002768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800276c:	f7fd fd80 	bl	8000270 <__aeabi_uldivmod>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4613      	mov	r3, r2
 8002776:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	3301      	adds	r3, #1
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002788:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800278a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002792:	e002      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_RCC_GetSysClockFreq+0x204>)
 8002796:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800279c:	4618      	mov	r0, r3
 800279e:	3750      	adds	r7, #80	; 0x50
 80027a0:	46bd      	mov	sp, r7
 80027a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	00f42400 	.word	0x00f42400
 80027b0:	007a1200 	.word	0x007a1200

080027b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000000 	.word	0x20000000

080027cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027d0:	f7ff fff0 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	0a9b      	lsrs	r3, r3, #10
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4903      	ldr	r1, [pc, #12]	; (80027f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40023800 	.word	0x40023800
 80027f0:	08005840 	.word	0x08005840

080027f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027f8:	f7ff ffdc 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	0b5b      	lsrs	r3, r3, #13
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4903      	ldr	r1, [pc, #12]	; (8002818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	08005840 	.word	0x08005840

0800281c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e01d      	b.n	800286a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe fa9e 	bl	8000d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3304      	adds	r3, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f000 fbde 	bl	800301c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002872:	b480      	push	{r7}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b06      	cmp	r3, #6
 8002892:	d007      	beq.n	80028a4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e01d      	b.n	8002908 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d106      	bne.n	80028e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7fe faa1 	bl	8000e28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2202      	movs	r2, #2
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3304      	adds	r3, #4
 80028f6:	4619      	mov	r1, r3
 80028f8:	4610      	mov	r0, r2
 80028fa:	f000 fb8f 	bl	800301c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2201      	movs	r2, #1
 8002920:	6839      	ldr	r1, [r7, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fe64 	bl	80035f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a15      	ldr	r2, [pc, #84]	; (8002984 <HAL_TIM_PWM_Start+0x74>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d004      	beq.n	800293c <HAL_TIM_PWM_Start+0x2c>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a14      	ldr	r2, [pc, #80]	; (8002988 <HAL_TIM_PWM_Start+0x78>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d101      	bne.n	8002940 <HAL_TIM_PWM_Start+0x30>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_TIM_PWM_Start+0x32>
 8002940:	2300      	movs	r3, #0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d007      	beq.n	8002956 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002954:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b06      	cmp	r3, #6
 8002966:	d007      	beq.n	8002978 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40010000 	.word	0x40010000
 8002988:	40010400 	.word	0x40010400

0800298c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b0c      	cmp	r3, #12
 800299a:	d841      	bhi.n	8002a20 <HAL_TIM_PWM_Start_IT+0x94>
 800299c:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <HAL_TIM_PWM_Start_IT+0x18>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029d9 	.word	0x080029d9
 80029a8:	08002a21 	.word	0x08002a21
 80029ac:	08002a21 	.word	0x08002a21
 80029b0:	08002a21 	.word	0x08002a21
 80029b4:	080029eb 	.word	0x080029eb
 80029b8:	08002a21 	.word	0x08002a21
 80029bc:	08002a21 	.word	0x08002a21
 80029c0:	08002a21 	.word	0x08002a21
 80029c4:	080029fd 	.word	0x080029fd
 80029c8:	08002a21 	.word	0x08002a21
 80029cc:	08002a21 	.word	0x08002a21
 80029d0:	08002a21 	.word	0x08002a21
 80029d4:	08002a0f 	.word	0x08002a0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0202 	orr.w	r2, r2, #2
 80029e6:	60da      	str	r2, [r3, #12]
      break;
 80029e8:	e01b      	b.n	8002a22 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0204 	orr.w	r2, r2, #4
 80029f8:	60da      	str	r2, [r3, #12]
      break;
 80029fa:	e012      	b.n	8002a22 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0208 	orr.w	r2, r2, #8
 8002a0a:	60da      	str	r2, [r3, #12]
      break;
 8002a0c:	e009      	b.n	8002a22 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0210 	orr.w	r2, r2, #16
 8002a1c:	60da      	str	r2, [r3, #12]
      break;
 8002a1e:	e000      	b.n	8002a22 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002a20:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2201      	movs	r2, #1
 8002a28:	6839      	ldr	r1, [r7, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fde0 	bl	80035f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <HAL_TIM_PWM_Start_IT+0x100>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d004      	beq.n	8002a44 <HAL_TIM_PWM_Start_IT+0xb8>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <HAL_TIM_PWM_Start_IT+0x104>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d101      	bne.n	8002a48 <HAL_TIM_PWM_Start_IT+0xbc>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_TIM_PWM_Start_IT+0xbe>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b06      	cmp	r3, #6
 8002a6e:	d007      	beq.n	8002a80 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	40010400 	.word	0x40010400

08002a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d122      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d11b      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0202 	mvn.w	r2, #2
 8002ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fa82 	bl	8002fe0 <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa74 	bl	8002fcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fa85 	bl	8002ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d122      	bne.n	8002b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0204 	mvn.w	r2, #4
 8002b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fa58 	bl	8002fe0 <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fa4a 	bl	8002fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fa5b 	bl	8002ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0208 	mvn.w	r2, #8
 8002b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fa2e 	bl	8002fe0 <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa20 	bl	8002fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fa31 	bl	8002ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0210 	mvn.w	r2, #16
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fa04 	bl	8002fe0 <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f9f6 	bl	8002fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fa07 	bl	8002ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d10e      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d107      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0201 	mvn.w	r2, #1
 8002c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f9d0 	bl	8002fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	d10e      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c30:	2b80      	cmp	r3, #128	; 0x80
 8002c32:	d107      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fd82 	bl	8003748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b40      	cmp	r3, #64	; 0x40
 8002c50:	d10e      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	2b40      	cmp	r3, #64	; 0x40
 8002c5e:	d107      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f9cc 	bl	8003008 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d10e      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d107      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0220 	mvn.w	r2, #32
 8002c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fd4c 	bl	8003734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e0b4      	b.n	8002e28 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	f200 809f 	bhi.w	8002e14 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002cd6:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cdc:	08002d11 	.word	0x08002d11
 8002ce0:	08002e15 	.word	0x08002e15
 8002ce4:	08002e15 	.word	0x08002e15
 8002ce8:	08002e15 	.word	0x08002e15
 8002cec:	08002d51 	.word	0x08002d51
 8002cf0:	08002e15 	.word	0x08002e15
 8002cf4:	08002e15 	.word	0x08002e15
 8002cf8:	08002e15 	.word	0x08002e15
 8002cfc:	08002d93 	.word	0x08002d93
 8002d00:	08002e15 	.word	0x08002e15
 8002d04:	08002e15 	.word	0x08002e15
 8002d08:	08002e15 	.word	0x08002e15
 8002d0c:	08002dd3 	.word	0x08002dd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fa20 	bl	800315c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0208 	orr.w	r2, r2, #8
 8002d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0204 	bic.w	r2, r2, #4
 8002d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6999      	ldr	r1, [r3, #24]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	619a      	str	r2, [r3, #24]
      break;
 8002d4e:	e062      	b.n	8002e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fa70 	bl	800323c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6999      	ldr	r1, [r3, #24]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	021a      	lsls	r2, r3, #8
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	619a      	str	r2, [r3, #24]
      break;
 8002d90:	e041      	b.n	8002e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fac5 	bl	8003328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69da      	ldr	r2, [r3, #28]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0208 	orr.w	r2, r2, #8
 8002dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0204 	bic.w	r2, r2, #4
 8002dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69d9      	ldr	r1, [r3, #28]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	61da      	str	r2, [r3, #28]
      break;
 8002dd0:	e021      	b.n	8002e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fb19 	bl	8003410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69d9      	ldr	r1, [r3, #28]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	021a      	lsls	r2, r3, #8
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	61da      	str	r2, [r3, #28]
      break;
 8002e12:	e000      	b.n	8002e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002e14:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_TIM_ConfigClockSource+0x18>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e0b3      	b.n	8002fb0 <HAL_TIM_ConfigClockSource+0x180>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e80:	d03e      	beq.n	8002f00 <HAL_TIM_ConfigClockSource+0xd0>
 8002e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e86:	f200 8087 	bhi.w	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8e:	f000 8085 	beq.w	8002f9c <HAL_TIM_ConfigClockSource+0x16c>
 8002e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e96:	d87f      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002e98:	2b70      	cmp	r3, #112	; 0x70
 8002e9a:	d01a      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0xa2>
 8002e9c:	2b70      	cmp	r3, #112	; 0x70
 8002e9e:	d87b      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002ea0:	2b60      	cmp	r3, #96	; 0x60
 8002ea2:	d050      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x116>
 8002ea4:	2b60      	cmp	r3, #96	; 0x60
 8002ea6:	d877      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002ea8:	2b50      	cmp	r3, #80	; 0x50
 8002eaa:	d03c      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0xf6>
 8002eac:	2b50      	cmp	r3, #80	; 0x50
 8002eae:	d873      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	d058      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x136>
 8002eb4:	2b40      	cmp	r3, #64	; 0x40
 8002eb6:	d86f      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002eb8:	2b30      	cmp	r3, #48	; 0x30
 8002eba:	d064      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x156>
 8002ebc:	2b30      	cmp	r3, #48	; 0x30
 8002ebe:	d86b      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d060      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x156>
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d867      	bhi.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d05c      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x156>
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d05a      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ed0:	e062      	b.n	8002f98 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	6899      	ldr	r1, [r3, #8]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f000 fb65 	bl	80035b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ef4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	609a      	str	r2, [r3, #8]
      break;
 8002efe:	e04e      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6899      	ldr	r1, [r3, #8]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f000 fb4e 	bl	80035b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f22:	609a      	str	r2, [r3, #8]
      break;
 8002f24:	e03b      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	461a      	mov	r2, r3
 8002f34:	f000 fac2 	bl	80034bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2150      	movs	r1, #80	; 0x50
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fb1b 	bl	800357a <TIM_ITRx_SetConfig>
      break;
 8002f44:	e02b      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f000 fae1 	bl	800351a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2160      	movs	r1, #96	; 0x60
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fb0b 	bl	800357a <TIM_ITRx_SetConfig>
      break;
 8002f64:	e01b      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f000 faa2 	bl	80034bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2140      	movs	r1, #64	; 0x40
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fafb 	bl	800357a <TIM_ITRx_SetConfig>
      break;
 8002f84:	e00b      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4610      	mov	r0, r2
 8002f92:	f000 faf2 	bl	800357a <TIM_ITRx_SetConfig>
      break;
 8002f96:	e002      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f98:	bf00      	nop
 8002f9a:	e000      	b.n	8002f9e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a40      	ldr	r2, [pc, #256]	; (8003130 <TIM_Base_SetConfig+0x114>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d013      	beq.n	800305c <TIM_Base_SetConfig+0x40>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303a:	d00f      	beq.n	800305c <TIM_Base_SetConfig+0x40>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a3d      	ldr	r2, [pc, #244]	; (8003134 <TIM_Base_SetConfig+0x118>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00b      	beq.n	800305c <TIM_Base_SetConfig+0x40>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a3c      	ldr	r2, [pc, #240]	; (8003138 <TIM_Base_SetConfig+0x11c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d007      	beq.n	800305c <TIM_Base_SetConfig+0x40>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a3b      	ldr	r2, [pc, #236]	; (800313c <TIM_Base_SetConfig+0x120>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d003      	beq.n	800305c <TIM_Base_SetConfig+0x40>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a3a      	ldr	r2, [pc, #232]	; (8003140 <TIM_Base_SetConfig+0x124>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d108      	bne.n	800306e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a2f      	ldr	r2, [pc, #188]	; (8003130 <TIM_Base_SetConfig+0x114>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d02b      	beq.n	80030ce <TIM_Base_SetConfig+0xb2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307c:	d027      	beq.n	80030ce <TIM_Base_SetConfig+0xb2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a2c      	ldr	r2, [pc, #176]	; (8003134 <TIM_Base_SetConfig+0x118>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d023      	beq.n	80030ce <TIM_Base_SetConfig+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a2b      	ldr	r2, [pc, #172]	; (8003138 <TIM_Base_SetConfig+0x11c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d01f      	beq.n	80030ce <TIM_Base_SetConfig+0xb2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a2a      	ldr	r2, [pc, #168]	; (800313c <TIM_Base_SetConfig+0x120>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d01b      	beq.n	80030ce <TIM_Base_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a29      	ldr	r2, [pc, #164]	; (8003140 <TIM_Base_SetConfig+0x124>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d017      	beq.n	80030ce <TIM_Base_SetConfig+0xb2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a28      	ldr	r2, [pc, #160]	; (8003144 <TIM_Base_SetConfig+0x128>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <TIM_Base_SetConfig+0xb2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a27      	ldr	r2, [pc, #156]	; (8003148 <TIM_Base_SetConfig+0x12c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00f      	beq.n	80030ce <TIM_Base_SetConfig+0xb2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a26      	ldr	r2, [pc, #152]	; (800314c <TIM_Base_SetConfig+0x130>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00b      	beq.n	80030ce <TIM_Base_SetConfig+0xb2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a25      	ldr	r2, [pc, #148]	; (8003150 <TIM_Base_SetConfig+0x134>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <TIM_Base_SetConfig+0xb2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a24      	ldr	r2, [pc, #144]	; (8003154 <TIM_Base_SetConfig+0x138>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d003      	beq.n	80030ce <TIM_Base_SetConfig+0xb2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a23      	ldr	r2, [pc, #140]	; (8003158 <TIM_Base_SetConfig+0x13c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d108      	bne.n	80030e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <TIM_Base_SetConfig+0x114>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d003      	beq.n	8003114 <TIM_Base_SetConfig+0xf8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a0c      	ldr	r2, [pc, #48]	; (8003140 <TIM_Base_SetConfig+0x124>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d103      	bne.n	800311c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	615a      	str	r2, [r3, #20]
}
 8003122:	bf00      	nop
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40010000 	.word	0x40010000
 8003134:	40000400 	.word	0x40000400
 8003138:	40000800 	.word	0x40000800
 800313c:	40000c00 	.word	0x40000c00
 8003140:	40010400 	.word	0x40010400
 8003144:	40014000 	.word	0x40014000
 8003148:	40014400 	.word	0x40014400
 800314c:	40014800 	.word	0x40014800
 8003150:	40001800 	.word	0x40001800
 8003154:	40001c00 	.word	0x40001c00
 8003158:	40002000 	.word	0x40002000

0800315c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f023 0201 	bic.w	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0303 	bic.w	r3, r3, #3
 8003192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f023 0302 	bic.w	r3, r3, #2
 80031a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a20      	ldr	r2, [pc, #128]	; (8003234 <TIM_OC1_SetConfig+0xd8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d003      	beq.n	80031c0 <TIM_OC1_SetConfig+0x64>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a1f      	ldr	r2, [pc, #124]	; (8003238 <TIM_OC1_SetConfig+0xdc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d10c      	bne.n	80031da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0308 	bic.w	r3, r3, #8
 80031c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a15      	ldr	r2, [pc, #84]	; (8003234 <TIM_OC1_SetConfig+0xd8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d003      	beq.n	80031ea <TIM_OC1_SetConfig+0x8e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a14      	ldr	r2, [pc, #80]	; (8003238 <TIM_OC1_SetConfig+0xdc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d111      	bne.n	800320e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	621a      	str	r2, [r3, #32]
}
 8003228:	bf00      	nop
 800322a:	371c      	adds	r7, #28
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40010000 	.word	0x40010000
 8003238:	40010400 	.word	0x40010400

0800323c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	f023 0210 	bic.w	r2, r3, #16
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f023 0320 	bic.w	r3, r3, #32
 8003286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a22      	ldr	r2, [pc, #136]	; (8003320 <TIM_OC2_SetConfig+0xe4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d003      	beq.n	80032a4 <TIM_OC2_SetConfig+0x68>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a21      	ldr	r2, [pc, #132]	; (8003324 <TIM_OC2_SetConfig+0xe8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d10d      	bne.n	80032c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a17      	ldr	r2, [pc, #92]	; (8003320 <TIM_OC2_SetConfig+0xe4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_OC2_SetConfig+0x94>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a16      	ldr	r2, [pc, #88]	; (8003324 <TIM_OC2_SetConfig+0xe8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d113      	bne.n	80032f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40010000 	.word	0x40010000
 8003324:	40010400 	.word	0x40010400

08003328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0303 	bic.w	r3, r3, #3
 800335e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a21      	ldr	r2, [pc, #132]	; (8003408 <TIM_OC3_SetConfig+0xe0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d003      	beq.n	800338e <TIM_OC3_SetConfig+0x66>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a20      	ldr	r2, [pc, #128]	; (800340c <TIM_OC3_SetConfig+0xe4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d10d      	bne.n	80033aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a16      	ldr	r2, [pc, #88]	; (8003408 <TIM_OC3_SetConfig+0xe0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d003      	beq.n	80033ba <TIM_OC3_SetConfig+0x92>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a15      	ldr	r2, [pc, #84]	; (800340c <TIM_OC3_SetConfig+0xe4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d113      	bne.n	80033e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	621a      	str	r2, [r3, #32]
}
 80033fc:	bf00      	nop
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	40010000 	.word	0x40010000
 800340c:	40010400 	.word	0x40010400

08003410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800343e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	021b      	lsls	r3, r3, #8
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800345a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	031b      	lsls	r3, r3, #12
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <TIM_OC4_SetConfig+0xa4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d003      	beq.n	8003478 <TIM_OC4_SetConfig+0x68>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a11      	ldr	r2, [pc, #68]	; (80034b8 <TIM_OC4_SetConfig+0xa8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d109      	bne.n	800348c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800347e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	019b      	lsls	r3, r3, #6
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	621a      	str	r2, [r3, #32]
}
 80034a6:	bf00      	nop
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40010000 	.word	0x40010000
 80034b8:	40010400 	.word	0x40010400

080034bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	f023 0201 	bic.w	r2, r3, #1
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f023 030a 	bic.w	r3, r3, #10
 80034f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	621a      	str	r2, [r3, #32]
}
 800350e:	bf00      	nop
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800351a:	b480      	push	{r7}
 800351c:	b087      	sub	sp, #28
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f023 0210 	bic.w	r2, r3, #16
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003544:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	031b      	lsls	r3, r3, #12
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003556:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	621a      	str	r2, [r3, #32]
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	f043 0307 	orr.w	r3, r3, #7
 800359c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	609a      	str	r2, [r3, #8]
}
 80035a4:	bf00      	nop
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	021a      	lsls	r2, r3, #8
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	609a      	str	r2, [r3, #8]
}
 80035e4:	bf00      	nop
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	2201      	movs	r2, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a1a      	ldr	r2, [r3, #32]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	43db      	mvns	r3, r3
 8003612:	401a      	ands	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a1a      	ldr	r2, [r3, #32]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	431a      	orrs	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	621a      	str	r2, [r3, #32]
}
 800362e:	bf00      	nop
 8003630:	371c      	adds	r7, #28
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003650:	2302      	movs	r3, #2
 8003652:	e05a      	b.n	800370a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a21      	ldr	r2, [pc, #132]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d022      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a0:	d01d      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1d      	ldr	r2, [pc, #116]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d018      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1a      	ldr	r2, [pc, #104]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d009      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a17      	ldr	r2, [pc, #92]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a15      	ldr	r2, [pc, #84]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d10c      	bne.n	80036f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40010000 	.word	0x40010000
 800371c:	40000400 	.word	0x40000400
 8003720:	40000800 	.word	0x40000800
 8003724:	40000c00 	.word	0x40000c00
 8003728:	40010400 	.word	0x40010400
 800372c:	40014000 	.word	0x40014000
 8003730:	40001800 	.word	0x40001800

08003734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e03f      	b.n	80037ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd fbd8 	bl	8000f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	; 0x24
 800378c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800379e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fba1 	bl	8003ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b088      	sub	sp, #32
 80037fa:	af02      	add	r7, sp, #8
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4613      	mov	r3, r2
 8003804:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b20      	cmp	r3, #32
 8003814:	f040 8083 	bne.w	800391e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_UART_Transmit+0x2e>
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e07b      	b.n	8003920 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_UART_Transmit+0x40>
 8003832:	2302      	movs	r3, #2
 8003834:	e074      	b.n	8003920 <HAL_UART_Transmit+0x12a>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2221      	movs	r2, #33	; 0x21
 8003848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800384c:	f7fd fcf2 	bl	8001234 <HAL_GetTick>
 8003850:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	88fa      	ldrh	r2, [r7, #6]
 8003856:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003866:	e042      	b.n	80038ee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387e:	d122      	bne.n	80038c6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2200      	movs	r2, #0
 8003888:	2180      	movs	r1, #128	; 0x80
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f9c0 	bl	8003c10 <UART_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e042      	b.n	8003920 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d103      	bne.n	80038be <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	3302      	adds	r3, #2
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	e017      	b.n	80038ee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	3301      	adds	r3, #1
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	e013      	b.n	80038ee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2200      	movs	r2, #0
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f99d 	bl	8003c10 <UART_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e01f      	b.n	8003920 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	60ba      	str	r2, [r7, #8]
 80038e6:	781a      	ldrb	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1b7      	bne.n	8003868 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2200      	movs	r2, #0
 8003900:	2140      	movs	r1, #64	; 0x40
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f984 	bl	8003c10 <UART_WaitOnFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e006      	b.n	8003920 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800391e:	2302      	movs	r3, #2
  }
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b20      	cmp	r3, #32
 8003940:	d140      	bne.n	80039c4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_UART_Receive_IT+0x26>
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e039      	b.n	80039c6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_UART_Receive_IT+0x38>
 800395c:	2302      	movs	r3, #2
 800395e:	e032      	b.n	80039c6 <HAL_UART_Receive_IT+0x9e>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	88fa      	ldrh	r2, [r7, #6]
 8003972:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2222      	movs	r2, #34	; 0x22
 8003984:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800399e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0220 	orr.w	r2, r2, #32
 80039be:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e000      	b.n	80039c6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
  }
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10d      	bne.n	8003a26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_UART_IRQHandler+0x52>
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f9e0 	bl	8003de4 <UART_Receive_IT>
      return;
 8003a24:	e0d0      	b.n	8003bc8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80b0 	beq.w	8003b8e <HAL_UART_IRQHandler+0x1ba>
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <HAL_UART_IRQHandler+0x70>
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 80a5 	beq.w	8003b8e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_UART_IRQHandler+0x90>
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5c:	f043 0201 	orr.w	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_UART_IRQHandler+0xb0>
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	f043 0202 	orr.w	r2, r3, #2
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_UART_IRQHandler+0xd0>
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	f043 0204 	orr.w	r2, r3, #4
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00f      	beq.n	8003ace <HAL_UART_IRQHandler+0xfa>
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d104      	bne.n	8003ac2 <HAL_UART_IRQHandler+0xee>
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac6:	f043 0208 	orr.w	r2, r3, #8
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d077      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_UART_IRQHandler+0x11c>
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f97a 	bl	8003de4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afa:	2b40      	cmp	r3, #64	; 0x40
 8003afc:	bf0c      	ite	eq
 8003afe:	2301      	moveq	r3, #1
 8003b00:	2300      	movne	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d102      	bne.n	8003b18 <HAL_UART_IRQHandler+0x144>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d031      	beq.n	8003b7c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f8c3 	bl	8003ca4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	d123      	bne.n	8003b74 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d013      	beq.n	8003b6c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b48:	4a21      	ldr	r2, [pc, #132]	; (8003bd0 <HAL_UART_IRQHandler+0x1fc>)
 8003b4a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fd fd93 	bl	800167c <HAL_DMA_Abort_IT>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d016      	beq.n	8003b8a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b66:	4610      	mov	r0, r2
 8003b68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6a:	e00e      	b.n	8003b8a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f845 	bl	8003bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b72:	e00a      	b.n	8003b8a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f841 	bl	8003bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7a:	e006      	b.n	8003b8a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f83d 	bl	8003bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003b88:	e01d      	b.n	8003bc6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8a:	bf00      	nop
    return;
 8003b8c:	e01b      	b.n	8003bc6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_UART_IRQHandler+0x1d6>
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f8b0 	bl	8003d08 <UART_Transmit_IT>
    return;
 8003ba8:	e00e      	b.n	8003bc8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <HAL_UART_IRQHandler+0x1f4>
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f8f8 	bl	8003db4 <UART_EndTransmit_IT>
    return;
 8003bc4:	e000      	b.n	8003bc8 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003bc6:	bf00      	nop
  }
}
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	08003ce1 	.word	0x08003ce1

08003bd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c20:	e02c      	b.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d028      	beq.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c30:	f7fd fb00 	bl	8001234 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d21d      	bcs.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e00f      	b.n	8003c9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4013      	ands	r3, r2
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d0c3      	beq.n	8003c22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7ff ff7e 	bl	8003bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b21      	cmp	r3, #33	; 0x21
 8003d1a:	d144      	bne.n	8003da6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d24:	d11a      	bne.n	8003d5c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d3a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	1c9a      	adds	r2, r3, #2
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	621a      	str	r2, [r3, #32]
 8003d4e:	e00e      	b.n	8003d6e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	621a      	str	r2, [r3, #32]
 8003d5a:	e008      	b.n	8003d6e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	1c59      	adds	r1, r3, #1
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6211      	str	r1, [r2, #32]
 8003d66:	781a      	ldrb	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10f      	bne.n	8003da2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e000      	b.n	8003da8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003da6:	2302      	movs	r3, #2
  }
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff fefd 	bl	8003bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b22      	cmp	r3, #34	; 0x22
 8003df6:	d171      	bne.n	8003edc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e00:	d123      	bne.n	8003e4a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10e      	bne.n	8003e2e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	1c9a      	adds	r2, r3, #2
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e2c:	e029      	b.n	8003e82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28
 8003e48:	e01b      	b.n	8003e82 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6858      	ldr	r0, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	1c59      	adds	r1, r3, #1
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6291      	str	r1, [r2, #40]	; 0x28
 8003e62:	b2c2      	uxtb	r2, r0
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	e00c      	b.n	8003e82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	1c58      	adds	r0, r3, #1
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	6288      	str	r0, [r1, #40]	; 0x28
 8003e7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d120      	bne.n	8003ed8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0220 	bic.w	r2, r2, #32
 8003ea4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
 8003ec4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fe8a 	bl	8003be8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e002      	b.n	8003ede <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eec:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f06:	68d9      	ldr	r1, [r3, #12]
 8003f08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	ea40 0301 	orr.w	r3, r0, r1
 8003f12:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8003f36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f42:	f021 010c 	bic.w	r1, r1, #12
 8003f46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003f50:	430b      	orrs	r3, r1
 8003f52:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f64:	6999      	ldr	r1, [r3, #24]
 8003f66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	ea40 0301 	orr.w	r3, r0, r1
 8003f70:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7c:	f040 824a 	bne.w	8004414 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4b96      	ldr	r3, [pc, #600]	; (80041e0 <UART_SetConfig+0x2f8>)
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d006      	beq.n	8003f9a <UART_SetConfig+0xb2>
 8003f8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4b94      	ldr	r3, [pc, #592]	; (80041e4 <UART_SetConfig+0x2fc>)
 8003f94:	429a      	cmp	r2, r3
 8003f96:	f040 8129 	bne.w	80041ec <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f9a:	f7fe fc2b 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8003f9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fa2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8003fac:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8003fb0:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	462b      	mov	r3, r5
 8003fb8:	1891      	adds	r1, r2, r2
 8003fba:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003fbe:	415b      	adcs	r3, r3
 8003fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003fc4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003fc8:	4621      	mov	r1, r4
 8003fca:	1851      	adds	r1, r2, r1
 8003fcc:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	414b      	adcs	r3, r1
 8003fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	00cb      	lsls	r3, r1, #3
 8003fe8:	4641      	mov	r1, r8
 8003fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fee:	4641      	mov	r1, r8
 8003ff0:	00ca      	lsls	r2, r1, #3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4622      	mov	r2, r4
 8003ffa:	189b      	adds	r3, r3, r2
 8003ffc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004000:	462b      	mov	r3, r5
 8004002:	460a      	mov	r2, r1
 8004004:	eb42 0303 	adc.w	r3, r2, r3
 8004008:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800400c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004018:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 800401c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004020:	460b      	mov	r3, r1
 8004022:	18db      	adds	r3, r3, r3
 8004024:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004028:	4613      	mov	r3, r2
 800402a:	eb42 0303 	adc.w	r3, r2, r3
 800402e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004032:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004036:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800403a:	f7fc f919 	bl	8000270 <__aeabi_uldivmod>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4b69      	ldr	r3, [pc, #420]	; (80041e8 <UART_SetConfig+0x300>)
 8004044:	fba3 2302 	umull	r2, r3, r3, r2
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	011c      	lsls	r4, r3, #4
 800404c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004050:	2200      	movs	r2, #0
 8004052:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004056:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800405a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800405e:	4642      	mov	r2, r8
 8004060:	464b      	mov	r3, r9
 8004062:	1891      	adds	r1, r2, r2
 8004064:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004068:	415b      	adcs	r3, r3
 800406a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800406e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004072:	4641      	mov	r1, r8
 8004074:	1851      	adds	r1, r2, r1
 8004076:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800407a:	4649      	mov	r1, r9
 800407c:	414b      	adcs	r3, r1
 800407e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800408e:	4659      	mov	r1, fp
 8004090:	00cb      	lsls	r3, r1, #3
 8004092:	4651      	mov	r1, sl
 8004094:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004098:	4651      	mov	r1, sl
 800409a:	00ca      	lsls	r2, r1, #3
 800409c:	4610      	mov	r0, r2
 800409e:	4619      	mov	r1, r3
 80040a0:	4603      	mov	r3, r0
 80040a2:	4642      	mov	r2, r8
 80040a4:	189b      	adds	r3, r3, r2
 80040a6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80040aa:	464b      	mov	r3, r9
 80040ac:	460a      	mov	r2, r1
 80040ae:	eb42 0303 	adc.w	r3, r2, r3
 80040b2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80040b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80040c2:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80040c6:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80040ca:	460b      	mov	r3, r1
 80040cc:	18db      	adds	r3, r3, r3
 80040ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040d2:	4613      	mov	r3, r2
 80040d4:	eb42 0303 	adc.w	r3, r2, r3
 80040d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040dc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80040e0:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80040e4:	f7fc f8c4 	bl	8000270 <__aeabi_uldivmod>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4611      	mov	r1, r2
 80040ee:	4b3e      	ldr	r3, [pc, #248]	; (80041e8 <UART_SetConfig+0x300>)
 80040f0:	fba3 2301 	umull	r2, r3, r3, r1
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	2264      	movs	r2, #100	; 0x64
 80040f8:	fb02 f303 	mul.w	r3, r2, r3
 80040fc:	1acb      	subs	r3, r1, r3
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004104:	4b38      	ldr	r3, [pc, #224]	; (80041e8 <UART_SetConfig+0x300>)
 8004106:	fba3 2302 	umull	r2, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004112:	441c      	add	r4, r3
 8004114:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004118:	2200      	movs	r2, #0
 800411a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800411e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004122:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8004126:	4642      	mov	r2, r8
 8004128:	464b      	mov	r3, r9
 800412a:	1891      	adds	r1, r2, r2
 800412c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004130:	415b      	adcs	r3, r3
 8004132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004136:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800413a:	4641      	mov	r1, r8
 800413c:	1851      	adds	r1, r2, r1
 800413e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004142:	4649      	mov	r1, r9
 8004144:	414b      	adcs	r3, r1
 8004146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8004156:	4659      	mov	r1, fp
 8004158:	00cb      	lsls	r3, r1, #3
 800415a:	4651      	mov	r1, sl
 800415c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004160:	4651      	mov	r1, sl
 8004162:	00ca      	lsls	r2, r1, #3
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	4603      	mov	r3, r0
 800416a:	4642      	mov	r2, r8
 800416c:	189b      	adds	r3, r3, r2
 800416e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004172:	464b      	mov	r3, r9
 8004174:	460a      	mov	r2, r1
 8004176:	eb42 0303 	adc.w	r3, r2, r3
 800417a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800417e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800418a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800418e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8004192:	460b      	mov	r3, r1
 8004194:	18db      	adds	r3, r3, r3
 8004196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800419a:	4613      	mov	r3, r2
 800419c:	eb42 0303 	adc.w	r3, r2, r3
 80041a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041a4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80041a8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80041ac:	f7fc f860 	bl	8000270 <__aeabi_uldivmod>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <UART_SetConfig+0x300>)
 80041b6:	fba3 1302 	umull	r1, r3, r3, r2
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	2164      	movs	r1, #100	; 0x64
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	3332      	adds	r3, #50	; 0x32
 80041c8:	4a07      	ldr	r2, [pc, #28]	; (80041e8 <UART_SetConfig+0x300>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	f003 0207 	and.w	r2, r3, #7
 80041d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4422      	add	r2, r4
 80041dc:	609a      	str	r2, [r3, #8]
 80041de:	e349      	b.n	8004874 <UART_SetConfig+0x98c>
 80041e0:	40011000 	.word	0x40011000
 80041e4:	40011400 	.word	0x40011400
 80041e8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ec:	f7fe faee 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 80041f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041f8:	2200      	movs	r2, #0
 80041fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80041fe:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8004202:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8004206:	4622      	mov	r2, r4
 8004208:	462b      	mov	r3, r5
 800420a:	1891      	adds	r1, r2, r2
 800420c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004210:	415b      	adcs	r3, r3
 8004212:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004216:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800421a:	4621      	mov	r1, r4
 800421c:	eb12 0a01 	adds.w	sl, r2, r1
 8004220:	4629      	mov	r1, r5
 8004222:	eb43 0b01 	adc.w	fp, r3, r1
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004232:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004236:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800423a:	4692      	mov	sl, r2
 800423c:	469b      	mov	fp, r3
 800423e:	4623      	mov	r3, r4
 8004240:	eb1a 0303 	adds.w	r3, sl, r3
 8004244:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004248:	462b      	mov	r3, r5
 800424a:	eb4b 0303 	adc.w	r3, fp, r3
 800424e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004252:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800425e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004262:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004266:	460b      	mov	r3, r1
 8004268:	18db      	adds	r3, r3, r3
 800426a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800426e:	4613      	mov	r3, r2
 8004270:	eb42 0303 	adc.w	r3, r2, r3
 8004274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004278:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800427c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004280:	f7fb fff6 	bl	8000270 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4b61      	ldr	r3, [pc, #388]	; (8004410 <UART_SetConfig+0x528>)
 800428a:	fba3 2302 	umull	r2, r3, r3, r2
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	011c      	lsls	r4, r3, #4
 8004292:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004296:	2200      	movs	r2, #0
 8004298:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800429c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80042a0:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80042a4:	4642      	mov	r2, r8
 80042a6:	464b      	mov	r3, r9
 80042a8:	1891      	adds	r1, r2, r2
 80042aa:	67b9      	str	r1, [r7, #120]	; 0x78
 80042ac:	415b      	adcs	r3, r3
 80042ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042b0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80042b4:	4641      	mov	r1, r8
 80042b6:	1851      	adds	r1, r2, r1
 80042b8:	6739      	str	r1, [r7, #112]	; 0x70
 80042ba:	4649      	mov	r1, r9
 80042bc:	414b      	adcs	r3, r1
 80042be:	677b      	str	r3, [r7, #116]	; 0x74
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80042cc:	4659      	mov	r1, fp
 80042ce:	00cb      	lsls	r3, r1, #3
 80042d0:	4651      	mov	r1, sl
 80042d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042d6:	4651      	mov	r1, sl
 80042d8:	00ca      	lsls	r2, r1, #3
 80042da:	4610      	mov	r0, r2
 80042dc:	4619      	mov	r1, r3
 80042de:	4603      	mov	r3, r0
 80042e0:	4642      	mov	r2, r8
 80042e2:	189b      	adds	r3, r3, r2
 80042e4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80042e8:	464b      	mov	r3, r9
 80042ea:	460a      	mov	r2, r1
 80042ec:	eb42 0303 	adc.w	r3, r2, r3
 80042f0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80042f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004300:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004304:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8004308:	460b      	mov	r3, r1
 800430a:	18db      	adds	r3, r3, r3
 800430c:	66bb      	str	r3, [r7, #104]	; 0x68
 800430e:	4613      	mov	r3, r2
 8004310:	eb42 0303 	adc.w	r3, r2, r3
 8004314:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004316:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800431a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800431e:	f7fb ffa7 	bl	8000270 <__aeabi_uldivmod>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4611      	mov	r1, r2
 8004328:	4b39      	ldr	r3, [pc, #228]	; (8004410 <UART_SetConfig+0x528>)
 800432a:	fba3 2301 	umull	r2, r3, r3, r1
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	2264      	movs	r2, #100	; 0x64
 8004332:	fb02 f303 	mul.w	r3, r2, r3
 8004336:	1acb      	subs	r3, r1, r3
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800433e:	4b34      	ldr	r3, [pc, #208]	; (8004410 <UART_SetConfig+0x528>)
 8004340:	fba3 2302 	umull	r2, r3, r3, r2
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800434c:	441c      	add	r4, r3
 800434e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004352:	2200      	movs	r2, #0
 8004354:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004358:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800435c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	1891      	adds	r1, r2, r2
 8004366:	6639      	str	r1, [r7, #96]	; 0x60
 8004368:	415b      	adcs	r3, r3
 800436a:	667b      	str	r3, [r7, #100]	; 0x64
 800436c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004370:	4641      	mov	r1, r8
 8004372:	1851      	adds	r1, r2, r1
 8004374:	65b9      	str	r1, [r7, #88]	; 0x58
 8004376:	4649      	mov	r1, r9
 8004378:	414b      	adcs	r3, r1
 800437a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004388:	4659      	mov	r1, fp
 800438a:	00cb      	lsls	r3, r1, #3
 800438c:	4651      	mov	r1, sl
 800438e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004392:	4651      	mov	r1, sl
 8004394:	00ca      	lsls	r2, r1, #3
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	4603      	mov	r3, r0
 800439c:	4642      	mov	r2, r8
 800439e:	189b      	adds	r3, r3, r2
 80043a0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80043a4:	464b      	mov	r3, r9
 80043a6:	460a      	mov	r2, r1
 80043a8:	eb42 0303 	adc.w	r3, r2, r3
 80043ac:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80043b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80043bc:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80043c0:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80043c4:	460b      	mov	r3, r1
 80043c6:	18db      	adds	r3, r3, r3
 80043c8:	653b      	str	r3, [r7, #80]	; 0x50
 80043ca:	4613      	mov	r3, r2
 80043cc:	eb42 0303 	adc.w	r3, r2, r3
 80043d0:	657b      	str	r3, [r7, #84]	; 0x54
 80043d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043d6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80043da:	f7fb ff49 	bl	8000270 <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <UART_SetConfig+0x528>)
 80043e4:	fba3 1302 	umull	r1, r3, r3, r2
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	2164      	movs	r1, #100	; 0x64
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	3332      	adds	r3, #50	; 0x32
 80043f6:	4a06      	ldr	r2, [pc, #24]	; (8004410 <UART_SetConfig+0x528>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	f003 0207 	and.w	r2, r3, #7
 8004402:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4422      	add	r2, r4
 800440a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800440c:	e232      	b.n	8004874 <UART_SetConfig+0x98c>
 800440e:	bf00      	nop
 8004410:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004414:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b8d      	ldr	r3, [pc, #564]	; (8004650 <UART_SetConfig+0x768>)
 800441c:	429a      	cmp	r2, r3
 800441e:	d006      	beq.n	800442e <UART_SetConfig+0x546>
 8004420:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4b8b      	ldr	r3, [pc, #556]	; (8004654 <UART_SetConfig+0x76c>)
 8004428:	429a      	cmp	r2, r3
 800442a:	f040 8117 	bne.w	800465c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800442e:	f7fe f9e1 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8004432:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004436:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800443a:	2200      	movs	r2, #0
 800443c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004440:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004444:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004448:	4622      	mov	r2, r4
 800444a:	462b      	mov	r3, r5
 800444c:	1891      	adds	r1, r2, r2
 800444e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004450:	415b      	adcs	r3, r3
 8004452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004454:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004458:	4621      	mov	r1, r4
 800445a:	eb12 0801 	adds.w	r8, r2, r1
 800445e:	4629      	mov	r1, r5
 8004460:	eb43 0901 	adc.w	r9, r3, r1
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004470:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004474:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004478:	4690      	mov	r8, r2
 800447a:	4699      	mov	r9, r3
 800447c:	4623      	mov	r3, r4
 800447e:	eb18 0303 	adds.w	r3, r8, r3
 8004482:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004486:	462b      	mov	r3, r5
 8004488:	eb49 0303 	adc.w	r3, r9, r3
 800448c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004490:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800449c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80044ac:	4629      	mov	r1, r5
 80044ae:	008b      	lsls	r3, r1, #2
 80044b0:	4621      	mov	r1, r4
 80044b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b6:	4621      	mov	r1, r4
 80044b8:	008a      	lsls	r2, r1, #2
 80044ba:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80044be:	f7fb fed7 	bl	8000270 <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4b64      	ldr	r3, [pc, #400]	; (8004658 <UART_SetConfig+0x770>)
 80044c8:	fba3 2302 	umull	r2, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	011c      	lsls	r4, r3, #4
 80044d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80044da:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80044de:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80044e2:	4642      	mov	r2, r8
 80044e4:	464b      	mov	r3, r9
 80044e6:	1891      	adds	r1, r2, r2
 80044e8:	6439      	str	r1, [r7, #64]	; 0x40
 80044ea:	415b      	adcs	r3, r3
 80044ec:	647b      	str	r3, [r7, #68]	; 0x44
 80044ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044f2:	4641      	mov	r1, r8
 80044f4:	1851      	adds	r1, r2, r1
 80044f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80044f8:	4649      	mov	r1, r9
 80044fa:	414b      	adcs	r3, r1
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800450a:	4659      	mov	r1, fp
 800450c:	00cb      	lsls	r3, r1, #3
 800450e:	4651      	mov	r1, sl
 8004510:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004514:	4651      	mov	r1, sl
 8004516:	00ca      	lsls	r2, r1, #3
 8004518:	4610      	mov	r0, r2
 800451a:	4619      	mov	r1, r3
 800451c:	4603      	mov	r3, r0
 800451e:	4642      	mov	r2, r8
 8004520:	189b      	adds	r3, r3, r2
 8004522:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004526:	464b      	mov	r3, r9
 8004528:	460a      	mov	r2, r1
 800452a:	eb42 0303 	adc.w	r3, r2, r3
 800452e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004532:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800453e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800454e:	4649      	mov	r1, r9
 8004550:	008b      	lsls	r3, r1, #2
 8004552:	4641      	mov	r1, r8
 8004554:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004558:	4641      	mov	r1, r8
 800455a:	008a      	lsls	r2, r1, #2
 800455c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004560:	f7fb fe86 	bl	8000270 <__aeabi_uldivmod>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4b3b      	ldr	r3, [pc, #236]	; (8004658 <UART_SetConfig+0x770>)
 800456a:	fba3 1302 	umull	r1, r3, r3, r2
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2164      	movs	r1, #100	; 0x64
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	3332      	adds	r3, #50	; 0x32
 800457c:	4a36      	ldr	r2, [pc, #216]	; (8004658 <UART_SetConfig+0x770>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004588:	441c      	add	r4, r3
 800458a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800458e:	2200      	movs	r2, #0
 8004590:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004594:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004598:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800459c:	4642      	mov	r2, r8
 800459e:	464b      	mov	r3, r9
 80045a0:	1891      	adds	r1, r2, r2
 80045a2:	6339      	str	r1, [r7, #48]	; 0x30
 80045a4:	415b      	adcs	r3, r3
 80045a6:	637b      	str	r3, [r7, #52]	; 0x34
 80045a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045ac:	4641      	mov	r1, r8
 80045ae:	1851      	adds	r1, r2, r1
 80045b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80045b2:	4649      	mov	r1, r9
 80045b4:	414b      	adcs	r3, r1
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80045c4:	4659      	mov	r1, fp
 80045c6:	00cb      	lsls	r3, r1, #3
 80045c8:	4651      	mov	r1, sl
 80045ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ce:	4651      	mov	r1, sl
 80045d0:	00ca      	lsls	r2, r1, #3
 80045d2:	4610      	mov	r0, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	4603      	mov	r3, r0
 80045d8:	4642      	mov	r2, r8
 80045da:	189b      	adds	r3, r3, r2
 80045dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80045e0:	464b      	mov	r3, r9
 80045e2:	460a      	mov	r2, r1
 80045e4:	eb42 0303 	adc.w	r3, r2, r3
 80045e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80045ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80045f8:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8004608:	4649      	mov	r1, r9
 800460a:	008b      	lsls	r3, r1, #2
 800460c:	4641      	mov	r1, r8
 800460e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004612:	4641      	mov	r1, r8
 8004614:	008a      	lsls	r2, r1, #2
 8004616:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800461a:	f7fb fe29 	bl	8000270 <__aeabi_uldivmod>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <UART_SetConfig+0x770>)
 8004624:	fba3 1302 	umull	r1, r3, r3, r2
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	2164      	movs	r1, #100	; 0x64
 800462c:	fb01 f303 	mul.w	r3, r1, r3
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	3332      	adds	r3, #50	; 0x32
 8004636:	4a08      	ldr	r2, [pc, #32]	; (8004658 <UART_SetConfig+0x770>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	095b      	lsrs	r3, r3, #5
 800463e:	f003 020f 	and.w	r2, r3, #15
 8004642:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4422      	add	r2, r4
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	e112      	b.n	8004874 <UART_SetConfig+0x98c>
 800464e:	bf00      	nop
 8004650:	40011000 	.word	0x40011000
 8004654:	40011400 	.word	0x40011400
 8004658:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800465c:	f7fe f8b6 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8004660:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004664:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004668:	2200      	movs	r2, #0
 800466a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800466e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004672:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004676:	4642      	mov	r2, r8
 8004678:	464b      	mov	r3, r9
 800467a:	1891      	adds	r1, r2, r2
 800467c:	6239      	str	r1, [r7, #32]
 800467e:	415b      	adcs	r3, r3
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
 8004682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004686:	4641      	mov	r1, r8
 8004688:	1854      	adds	r4, r2, r1
 800468a:	4649      	mov	r1, r9
 800468c:	eb43 0501 	adc.w	r5, r3, r1
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	00eb      	lsls	r3, r5, #3
 800469a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800469e:	00e2      	lsls	r2, r4, #3
 80046a0:	4614      	mov	r4, r2
 80046a2:	461d      	mov	r5, r3
 80046a4:	4643      	mov	r3, r8
 80046a6:	18e3      	adds	r3, r4, r3
 80046a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80046ac:	464b      	mov	r3, r9
 80046ae:	eb45 0303 	adc.w	r3, r5, r3
 80046b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80046b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80046c2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80046d2:	4629      	mov	r1, r5
 80046d4:	008b      	lsls	r3, r1, #2
 80046d6:	4621      	mov	r1, r4
 80046d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046dc:	4621      	mov	r1, r4
 80046de:	008a      	lsls	r2, r1, #2
 80046e0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80046e4:	f7fb fdc4 	bl	8000270 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4b64      	ldr	r3, [pc, #400]	; (8004880 <UART_SetConfig+0x998>)
 80046ee:	fba3 2302 	umull	r2, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	011c      	lsls	r4, r3, #4
 80046f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004700:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004704:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004708:	4642      	mov	r2, r8
 800470a:	464b      	mov	r3, r9
 800470c:	1891      	adds	r1, r2, r2
 800470e:	61b9      	str	r1, [r7, #24]
 8004710:	415b      	adcs	r3, r3
 8004712:	61fb      	str	r3, [r7, #28]
 8004714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004718:	4641      	mov	r1, r8
 800471a:	1851      	adds	r1, r2, r1
 800471c:	6139      	str	r1, [r7, #16]
 800471e:	4649      	mov	r1, r9
 8004720:	414b      	adcs	r3, r1
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004730:	4659      	mov	r1, fp
 8004732:	00cb      	lsls	r3, r1, #3
 8004734:	4651      	mov	r1, sl
 8004736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800473a:	4651      	mov	r1, sl
 800473c:	00ca      	lsls	r2, r1, #3
 800473e:	4610      	mov	r0, r2
 8004740:	4619      	mov	r1, r3
 8004742:	4603      	mov	r3, r0
 8004744:	4642      	mov	r2, r8
 8004746:	189b      	adds	r3, r3, r2
 8004748:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800474c:	464b      	mov	r3, r9
 800474e:	460a      	mov	r2, r1
 8004750:	eb42 0303 	adc.w	r3, r2, r3
 8004754:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004758:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004764:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004774:	4649      	mov	r1, r9
 8004776:	008b      	lsls	r3, r1, #2
 8004778:	4641      	mov	r1, r8
 800477a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800477e:	4641      	mov	r1, r8
 8004780:	008a      	lsls	r2, r1, #2
 8004782:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004786:	f7fb fd73 	bl	8000270 <__aeabi_uldivmod>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	4b3c      	ldr	r3, [pc, #240]	; (8004880 <UART_SetConfig+0x998>)
 8004790:	fba3 1302 	umull	r1, r3, r3, r2
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	2164      	movs	r1, #100	; 0x64
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	3332      	adds	r3, #50	; 0x32
 80047a2:	4a37      	ldr	r2, [pc, #220]	; (8004880 <UART_SetConfig+0x998>)
 80047a4:	fba2 2303 	umull	r2, r3, r2, r3
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ae:	441c      	add	r4, r3
 80047b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047b4:	2200      	movs	r2, #0
 80047b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047be:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80047c2:	4642      	mov	r2, r8
 80047c4:	464b      	mov	r3, r9
 80047c6:	1891      	adds	r1, r2, r2
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	415b      	adcs	r3, r3
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047d2:	4641      	mov	r1, r8
 80047d4:	1851      	adds	r1, r2, r1
 80047d6:	6039      	str	r1, [r7, #0]
 80047d8:	4649      	mov	r1, r9
 80047da:	414b      	adcs	r3, r1
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047ea:	4659      	mov	r1, fp
 80047ec:	00cb      	lsls	r3, r1, #3
 80047ee:	4651      	mov	r1, sl
 80047f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047f4:	4651      	mov	r1, sl
 80047f6:	00ca      	lsls	r2, r1, #3
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	4603      	mov	r3, r0
 80047fe:	4642      	mov	r2, r8
 8004800:	189b      	adds	r3, r3, r2
 8004802:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004806:	464b      	mov	r3, r9
 8004808:	460a      	mov	r2, r1
 800480a:	eb42 0303 	adc.w	r3, r2, r3
 800480e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004812:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800481e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800482e:	4649      	mov	r1, r9
 8004830:	008b      	lsls	r3, r1, #2
 8004832:	4641      	mov	r1, r8
 8004834:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004838:	4641      	mov	r1, r8
 800483a:	008a      	lsls	r2, r1, #2
 800483c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004840:	f7fb fd16 	bl	8000270 <__aeabi_uldivmod>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <UART_SetConfig+0x998>)
 800484a:	fba3 1302 	umull	r1, r3, r3, r2
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	2164      	movs	r1, #100	; 0x64
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	3332      	adds	r3, #50	; 0x32
 800485c:	4a08      	ldr	r2, [pc, #32]	; (8004880 <UART_SetConfig+0x998>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	f003 020f 	and.w	r2, r3, #15
 8004868:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4422      	add	r2, r4
 8004870:	609a      	str	r2, [r3, #8]
}
 8004872:	e7ff      	b.n	8004874 <UART_SetConfig+0x98c>
 8004874:	bf00      	nop
 8004876:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800487a:	46bd      	mov	sp, r7
 800487c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004880:	51eb851f 	.word	0x51eb851f

08004884 <__errno>:
 8004884:	4b01      	ldr	r3, [pc, #4]	; (800488c <__errno+0x8>)
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	2000000c 	.word	0x2000000c

08004890 <__libc_init_array>:
 8004890:	b570      	push	{r4, r5, r6, lr}
 8004892:	4d0d      	ldr	r5, [pc, #52]	; (80048c8 <__libc_init_array+0x38>)
 8004894:	4c0d      	ldr	r4, [pc, #52]	; (80048cc <__libc_init_array+0x3c>)
 8004896:	1b64      	subs	r4, r4, r5
 8004898:	10a4      	asrs	r4, r4, #2
 800489a:	2600      	movs	r6, #0
 800489c:	42a6      	cmp	r6, r4
 800489e:	d109      	bne.n	80048b4 <__libc_init_array+0x24>
 80048a0:	4d0b      	ldr	r5, [pc, #44]	; (80048d0 <__libc_init_array+0x40>)
 80048a2:	4c0c      	ldr	r4, [pc, #48]	; (80048d4 <__libc_init_array+0x44>)
 80048a4:	f000 ffae 	bl	8005804 <_init>
 80048a8:	1b64      	subs	r4, r4, r5
 80048aa:	10a4      	asrs	r4, r4, #2
 80048ac:	2600      	movs	r6, #0
 80048ae:	42a6      	cmp	r6, r4
 80048b0:	d105      	bne.n	80048be <__libc_init_array+0x2e>
 80048b2:	bd70      	pop	{r4, r5, r6, pc}
 80048b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b8:	4798      	blx	r3
 80048ba:	3601      	adds	r6, #1
 80048bc:	e7ee      	b.n	800489c <__libc_init_array+0xc>
 80048be:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c2:	4798      	blx	r3
 80048c4:	3601      	adds	r6, #1
 80048c6:	e7f2      	b.n	80048ae <__libc_init_array+0x1e>
 80048c8:	080058f0 	.word	0x080058f0
 80048cc:	080058f0 	.word	0x080058f0
 80048d0:	080058f0 	.word	0x080058f0
 80048d4:	080058f4 	.word	0x080058f4

080048d8 <memset>:
 80048d8:	4402      	add	r2, r0
 80048da:	4603      	mov	r3, r0
 80048dc:	4293      	cmp	r3, r2
 80048de:	d100      	bne.n	80048e2 <memset+0xa>
 80048e0:	4770      	bx	lr
 80048e2:	f803 1b01 	strb.w	r1, [r3], #1
 80048e6:	e7f9      	b.n	80048dc <memset+0x4>

080048e8 <iprintf>:
 80048e8:	b40f      	push	{r0, r1, r2, r3}
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <iprintf+0x2c>)
 80048ec:	b513      	push	{r0, r1, r4, lr}
 80048ee:	681c      	ldr	r4, [r3, #0]
 80048f0:	b124      	cbz	r4, 80048fc <iprintf+0x14>
 80048f2:	69a3      	ldr	r3, [r4, #24]
 80048f4:	b913      	cbnz	r3, 80048fc <iprintf+0x14>
 80048f6:	4620      	mov	r0, r4
 80048f8:	f000 f866 	bl	80049c8 <__sinit>
 80048fc:	ab05      	add	r3, sp, #20
 80048fe:	9a04      	ldr	r2, [sp, #16]
 8004900:	68a1      	ldr	r1, [r4, #8]
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	4620      	mov	r0, r4
 8004906:	f000 f9bd 	bl	8004c84 <_vfiprintf_r>
 800490a:	b002      	add	sp, #8
 800490c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004910:	b004      	add	sp, #16
 8004912:	4770      	bx	lr
 8004914:	2000000c 	.word	0x2000000c

08004918 <std>:
 8004918:	2300      	movs	r3, #0
 800491a:	b510      	push	{r4, lr}
 800491c:	4604      	mov	r4, r0
 800491e:	e9c0 3300 	strd	r3, r3, [r0]
 8004922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004926:	6083      	str	r3, [r0, #8]
 8004928:	8181      	strh	r1, [r0, #12]
 800492a:	6643      	str	r3, [r0, #100]	; 0x64
 800492c:	81c2      	strh	r2, [r0, #14]
 800492e:	6183      	str	r3, [r0, #24]
 8004930:	4619      	mov	r1, r3
 8004932:	2208      	movs	r2, #8
 8004934:	305c      	adds	r0, #92	; 0x5c
 8004936:	f7ff ffcf 	bl	80048d8 <memset>
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <std+0x38>)
 800493c:	6263      	str	r3, [r4, #36]	; 0x24
 800493e:	4b05      	ldr	r3, [pc, #20]	; (8004954 <std+0x3c>)
 8004940:	62a3      	str	r3, [r4, #40]	; 0x28
 8004942:	4b05      	ldr	r3, [pc, #20]	; (8004958 <std+0x40>)
 8004944:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <std+0x44>)
 8004948:	6224      	str	r4, [r4, #32]
 800494a:	6323      	str	r3, [r4, #48]	; 0x30
 800494c:	bd10      	pop	{r4, pc}
 800494e:	bf00      	nop
 8004950:	0800522d 	.word	0x0800522d
 8004954:	0800524f 	.word	0x0800524f
 8004958:	08005287 	.word	0x08005287
 800495c:	080052ab 	.word	0x080052ab

08004960 <_cleanup_r>:
 8004960:	4901      	ldr	r1, [pc, #4]	; (8004968 <_cleanup_r+0x8>)
 8004962:	f000 b8af 	b.w	8004ac4 <_fwalk_reent>
 8004966:	bf00      	nop
 8004968:	08005585 	.word	0x08005585

0800496c <__sfmoreglue>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	2268      	movs	r2, #104	; 0x68
 8004970:	1e4d      	subs	r5, r1, #1
 8004972:	4355      	muls	r5, r2
 8004974:	460e      	mov	r6, r1
 8004976:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800497a:	f000 f8e5 	bl	8004b48 <_malloc_r>
 800497e:	4604      	mov	r4, r0
 8004980:	b140      	cbz	r0, 8004994 <__sfmoreglue+0x28>
 8004982:	2100      	movs	r1, #0
 8004984:	e9c0 1600 	strd	r1, r6, [r0]
 8004988:	300c      	adds	r0, #12
 800498a:	60a0      	str	r0, [r4, #8]
 800498c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004990:	f7ff ffa2 	bl	80048d8 <memset>
 8004994:	4620      	mov	r0, r4
 8004996:	bd70      	pop	{r4, r5, r6, pc}

08004998 <__sfp_lock_acquire>:
 8004998:	4801      	ldr	r0, [pc, #4]	; (80049a0 <__sfp_lock_acquire+0x8>)
 800499a:	f000 b8b3 	b.w	8004b04 <__retarget_lock_acquire_recursive>
 800499e:	bf00      	nop
 80049a0:	200132c1 	.word	0x200132c1

080049a4 <__sfp_lock_release>:
 80049a4:	4801      	ldr	r0, [pc, #4]	; (80049ac <__sfp_lock_release+0x8>)
 80049a6:	f000 b8ae 	b.w	8004b06 <__retarget_lock_release_recursive>
 80049aa:	bf00      	nop
 80049ac:	200132c1 	.word	0x200132c1

080049b0 <__sinit_lock_acquire>:
 80049b0:	4801      	ldr	r0, [pc, #4]	; (80049b8 <__sinit_lock_acquire+0x8>)
 80049b2:	f000 b8a7 	b.w	8004b04 <__retarget_lock_acquire_recursive>
 80049b6:	bf00      	nop
 80049b8:	200132c2 	.word	0x200132c2

080049bc <__sinit_lock_release>:
 80049bc:	4801      	ldr	r0, [pc, #4]	; (80049c4 <__sinit_lock_release+0x8>)
 80049be:	f000 b8a2 	b.w	8004b06 <__retarget_lock_release_recursive>
 80049c2:	bf00      	nop
 80049c4:	200132c2 	.word	0x200132c2

080049c8 <__sinit>:
 80049c8:	b510      	push	{r4, lr}
 80049ca:	4604      	mov	r4, r0
 80049cc:	f7ff fff0 	bl	80049b0 <__sinit_lock_acquire>
 80049d0:	69a3      	ldr	r3, [r4, #24]
 80049d2:	b11b      	cbz	r3, 80049dc <__sinit+0x14>
 80049d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d8:	f7ff bff0 	b.w	80049bc <__sinit_lock_release>
 80049dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049e0:	6523      	str	r3, [r4, #80]	; 0x50
 80049e2:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <__sinit+0x68>)
 80049e4:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <__sinit+0x6c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80049ea:	42a3      	cmp	r3, r4
 80049ec:	bf04      	itt	eq
 80049ee:	2301      	moveq	r3, #1
 80049f0:	61a3      	streq	r3, [r4, #24]
 80049f2:	4620      	mov	r0, r4
 80049f4:	f000 f820 	bl	8004a38 <__sfp>
 80049f8:	6060      	str	r0, [r4, #4]
 80049fa:	4620      	mov	r0, r4
 80049fc:	f000 f81c 	bl	8004a38 <__sfp>
 8004a00:	60a0      	str	r0, [r4, #8]
 8004a02:	4620      	mov	r0, r4
 8004a04:	f000 f818 	bl	8004a38 <__sfp>
 8004a08:	2200      	movs	r2, #0
 8004a0a:	60e0      	str	r0, [r4, #12]
 8004a0c:	2104      	movs	r1, #4
 8004a0e:	6860      	ldr	r0, [r4, #4]
 8004a10:	f7ff ff82 	bl	8004918 <std>
 8004a14:	68a0      	ldr	r0, [r4, #8]
 8004a16:	2201      	movs	r2, #1
 8004a18:	2109      	movs	r1, #9
 8004a1a:	f7ff ff7d 	bl	8004918 <std>
 8004a1e:	68e0      	ldr	r0, [r4, #12]
 8004a20:	2202      	movs	r2, #2
 8004a22:	2112      	movs	r1, #18
 8004a24:	f7ff ff78 	bl	8004918 <std>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	61a3      	str	r3, [r4, #24]
 8004a2c:	e7d2      	b.n	80049d4 <__sinit+0xc>
 8004a2e:	bf00      	nop
 8004a30:	08005850 	.word	0x08005850
 8004a34:	08004961 	.word	0x08004961

08004a38 <__sfp>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	4607      	mov	r7, r0
 8004a3c:	f7ff ffac 	bl	8004998 <__sfp_lock_acquire>
 8004a40:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <__sfp+0x84>)
 8004a42:	681e      	ldr	r6, [r3, #0]
 8004a44:	69b3      	ldr	r3, [r6, #24]
 8004a46:	b913      	cbnz	r3, 8004a4e <__sfp+0x16>
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f7ff ffbd 	bl	80049c8 <__sinit>
 8004a4e:	3648      	adds	r6, #72	; 0x48
 8004a50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	d503      	bpl.n	8004a60 <__sfp+0x28>
 8004a58:	6833      	ldr	r3, [r6, #0]
 8004a5a:	b30b      	cbz	r3, 8004aa0 <__sfp+0x68>
 8004a5c:	6836      	ldr	r6, [r6, #0]
 8004a5e:	e7f7      	b.n	8004a50 <__sfp+0x18>
 8004a60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a64:	b9d5      	cbnz	r5, 8004a9c <__sfp+0x64>
 8004a66:	4b16      	ldr	r3, [pc, #88]	; (8004ac0 <__sfp+0x88>)
 8004a68:	60e3      	str	r3, [r4, #12]
 8004a6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a6e:	6665      	str	r5, [r4, #100]	; 0x64
 8004a70:	f000 f847 	bl	8004b02 <__retarget_lock_init_recursive>
 8004a74:	f7ff ff96 	bl	80049a4 <__sfp_lock_release>
 8004a78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a80:	6025      	str	r5, [r4, #0]
 8004a82:	61a5      	str	r5, [r4, #24]
 8004a84:	2208      	movs	r2, #8
 8004a86:	4629      	mov	r1, r5
 8004a88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a8c:	f7ff ff24 	bl	80048d8 <memset>
 8004a90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a98:	4620      	mov	r0, r4
 8004a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a9c:	3468      	adds	r4, #104	; 0x68
 8004a9e:	e7d9      	b.n	8004a54 <__sfp+0x1c>
 8004aa0:	2104      	movs	r1, #4
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	f7ff ff62 	bl	800496c <__sfmoreglue>
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	6030      	str	r0, [r6, #0]
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d1d5      	bne.n	8004a5c <__sfp+0x24>
 8004ab0:	f7ff ff78 	bl	80049a4 <__sfp_lock_release>
 8004ab4:	230c      	movs	r3, #12
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	e7ee      	b.n	8004a98 <__sfp+0x60>
 8004aba:	bf00      	nop
 8004abc:	08005850 	.word	0x08005850
 8004ac0:	ffff0001 	.word	0xffff0001

08004ac4 <_fwalk_reent>:
 8004ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ac8:	4606      	mov	r6, r0
 8004aca:	4688      	mov	r8, r1
 8004acc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ad0:	2700      	movs	r7, #0
 8004ad2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ad6:	f1b9 0901 	subs.w	r9, r9, #1
 8004ada:	d505      	bpl.n	8004ae8 <_fwalk_reent+0x24>
 8004adc:	6824      	ldr	r4, [r4, #0]
 8004ade:	2c00      	cmp	r4, #0
 8004ae0:	d1f7      	bne.n	8004ad2 <_fwalk_reent+0xe>
 8004ae2:	4638      	mov	r0, r7
 8004ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ae8:	89ab      	ldrh	r3, [r5, #12]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d907      	bls.n	8004afe <_fwalk_reent+0x3a>
 8004aee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004af2:	3301      	adds	r3, #1
 8004af4:	d003      	beq.n	8004afe <_fwalk_reent+0x3a>
 8004af6:	4629      	mov	r1, r5
 8004af8:	4630      	mov	r0, r6
 8004afa:	47c0      	blx	r8
 8004afc:	4307      	orrs	r7, r0
 8004afe:	3568      	adds	r5, #104	; 0x68
 8004b00:	e7e9      	b.n	8004ad6 <_fwalk_reent+0x12>

08004b02 <__retarget_lock_init_recursive>:
 8004b02:	4770      	bx	lr

08004b04 <__retarget_lock_acquire_recursive>:
 8004b04:	4770      	bx	lr

08004b06 <__retarget_lock_release_recursive>:
 8004b06:	4770      	bx	lr

08004b08 <sbrk_aligned>:
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	4e0e      	ldr	r6, [pc, #56]	; (8004b44 <sbrk_aligned+0x3c>)
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	6831      	ldr	r1, [r6, #0]
 8004b10:	4605      	mov	r5, r0
 8004b12:	b911      	cbnz	r1, 8004b1a <sbrk_aligned+0x12>
 8004b14:	f000 fb7a 	bl	800520c <_sbrk_r>
 8004b18:	6030      	str	r0, [r6, #0]
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f000 fb75 	bl	800520c <_sbrk_r>
 8004b22:	1c43      	adds	r3, r0, #1
 8004b24:	d00a      	beq.n	8004b3c <sbrk_aligned+0x34>
 8004b26:	1cc4      	adds	r4, r0, #3
 8004b28:	f024 0403 	bic.w	r4, r4, #3
 8004b2c:	42a0      	cmp	r0, r4
 8004b2e:	d007      	beq.n	8004b40 <sbrk_aligned+0x38>
 8004b30:	1a21      	subs	r1, r4, r0
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 fb6a 	bl	800520c <_sbrk_r>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d101      	bne.n	8004b40 <sbrk_aligned+0x38>
 8004b3c:	f04f 34ff 	mov.w	r4, #4294967295
 8004b40:	4620      	mov	r0, r4
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
 8004b44:	200132c8 	.word	0x200132c8

08004b48 <_malloc_r>:
 8004b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b4c:	1ccd      	adds	r5, r1, #3
 8004b4e:	f025 0503 	bic.w	r5, r5, #3
 8004b52:	3508      	adds	r5, #8
 8004b54:	2d0c      	cmp	r5, #12
 8004b56:	bf38      	it	cc
 8004b58:	250c      	movcc	r5, #12
 8004b5a:	2d00      	cmp	r5, #0
 8004b5c:	4607      	mov	r7, r0
 8004b5e:	db01      	blt.n	8004b64 <_malloc_r+0x1c>
 8004b60:	42a9      	cmp	r1, r5
 8004b62:	d905      	bls.n	8004b70 <_malloc_r+0x28>
 8004b64:	230c      	movs	r3, #12
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	2600      	movs	r6, #0
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b70:	4e2e      	ldr	r6, [pc, #184]	; (8004c2c <_malloc_r+0xe4>)
 8004b72:	f000 fdbb 	bl	80056ec <__malloc_lock>
 8004b76:	6833      	ldr	r3, [r6, #0]
 8004b78:	461c      	mov	r4, r3
 8004b7a:	bb34      	cbnz	r4, 8004bca <_malloc_r+0x82>
 8004b7c:	4629      	mov	r1, r5
 8004b7e:	4638      	mov	r0, r7
 8004b80:	f7ff ffc2 	bl	8004b08 <sbrk_aligned>
 8004b84:	1c43      	adds	r3, r0, #1
 8004b86:	4604      	mov	r4, r0
 8004b88:	d14d      	bne.n	8004c26 <_malloc_r+0xde>
 8004b8a:	6834      	ldr	r4, [r6, #0]
 8004b8c:	4626      	mov	r6, r4
 8004b8e:	2e00      	cmp	r6, #0
 8004b90:	d140      	bne.n	8004c14 <_malloc_r+0xcc>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	4631      	mov	r1, r6
 8004b96:	4638      	mov	r0, r7
 8004b98:	eb04 0803 	add.w	r8, r4, r3
 8004b9c:	f000 fb36 	bl	800520c <_sbrk_r>
 8004ba0:	4580      	cmp	r8, r0
 8004ba2:	d13a      	bne.n	8004c1a <_malloc_r+0xd2>
 8004ba4:	6821      	ldr	r1, [r4, #0]
 8004ba6:	3503      	adds	r5, #3
 8004ba8:	1a6d      	subs	r5, r5, r1
 8004baa:	f025 0503 	bic.w	r5, r5, #3
 8004bae:	3508      	adds	r5, #8
 8004bb0:	2d0c      	cmp	r5, #12
 8004bb2:	bf38      	it	cc
 8004bb4:	250c      	movcc	r5, #12
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	4638      	mov	r0, r7
 8004bba:	f7ff ffa5 	bl	8004b08 <sbrk_aligned>
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	d02b      	beq.n	8004c1a <_malloc_r+0xd2>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	442b      	add	r3, r5
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	e00e      	b.n	8004be8 <_malloc_r+0xa0>
 8004bca:	6822      	ldr	r2, [r4, #0]
 8004bcc:	1b52      	subs	r2, r2, r5
 8004bce:	d41e      	bmi.n	8004c0e <_malloc_r+0xc6>
 8004bd0:	2a0b      	cmp	r2, #11
 8004bd2:	d916      	bls.n	8004c02 <_malloc_r+0xba>
 8004bd4:	1961      	adds	r1, r4, r5
 8004bd6:	42a3      	cmp	r3, r4
 8004bd8:	6025      	str	r5, [r4, #0]
 8004bda:	bf18      	it	ne
 8004bdc:	6059      	strne	r1, [r3, #4]
 8004bde:	6863      	ldr	r3, [r4, #4]
 8004be0:	bf08      	it	eq
 8004be2:	6031      	streq	r1, [r6, #0]
 8004be4:	5162      	str	r2, [r4, r5]
 8004be6:	604b      	str	r3, [r1, #4]
 8004be8:	4638      	mov	r0, r7
 8004bea:	f104 060b 	add.w	r6, r4, #11
 8004bee:	f000 fd83 	bl	80056f8 <__malloc_unlock>
 8004bf2:	f026 0607 	bic.w	r6, r6, #7
 8004bf6:	1d23      	adds	r3, r4, #4
 8004bf8:	1af2      	subs	r2, r6, r3
 8004bfa:	d0b6      	beq.n	8004b6a <_malloc_r+0x22>
 8004bfc:	1b9b      	subs	r3, r3, r6
 8004bfe:	50a3      	str	r3, [r4, r2]
 8004c00:	e7b3      	b.n	8004b6a <_malloc_r+0x22>
 8004c02:	6862      	ldr	r2, [r4, #4]
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	bf0c      	ite	eq
 8004c08:	6032      	streq	r2, [r6, #0]
 8004c0a:	605a      	strne	r2, [r3, #4]
 8004c0c:	e7ec      	b.n	8004be8 <_malloc_r+0xa0>
 8004c0e:	4623      	mov	r3, r4
 8004c10:	6864      	ldr	r4, [r4, #4]
 8004c12:	e7b2      	b.n	8004b7a <_malloc_r+0x32>
 8004c14:	4634      	mov	r4, r6
 8004c16:	6876      	ldr	r6, [r6, #4]
 8004c18:	e7b9      	b.n	8004b8e <_malloc_r+0x46>
 8004c1a:	230c      	movs	r3, #12
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	4638      	mov	r0, r7
 8004c20:	f000 fd6a 	bl	80056f8 <__malloc_unlock>
 8004c24:	e7a1      	b.n	8004b6a <_malloc_r+0x22>
 8004c26:	6025      	str	r5, [r4, #0]
 8004c28:	e7de      	b.n	8004be8 <_malloc_r+0xa0>
 8004c2a:	bf00      	nop
 8004c2c:	200132c4 	.word	0x200132c4

08004c30 <__sfputc_r>:
 8004c30:	6893      	ldr	r3, [r2, #8]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	b410      	push	{r4}
 8004c38:	6093      	str	r3, [r2, #8]
 8004c3a:	da08      	bge.n	8004c4e <__sfputc_r+0x1e>
 8004c3c:	6994      	ldr	r4, [r2, #24]
 8004c3e:	42a3      	cmp	r3, r4
 8004c40:	db01      	blt.n	8004c46 <__sfputc_r+0x16>
 8004c42:	290a      	cmp	r1, #10
 8004c44:	d103      	bne.n	8004c4e <__sfputc_r+0x1e>
 8004c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c4a:	f000 bb33 	b.w	80052b4 <__swbuf_r>
 8004c4e:	6813      	ldr	r3, [r2, #0]
 8004c50:	1c58      	adds	r0, r3, #1
 8004c52:	6010      	str	r0, [r2, #0]
 8004c54:	7019      	strb	r1, [r3, #0]
 8004c56:	4608      	mov	r0, r1
 8004c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <__sfputs_r>:
 8004c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c60:	4606      	mov	r6, r0
 8004c62:	460f      	mov	r7, r1
 8004c64:	4614      	mov	r4, r2
 8004c66:	18d5      	adds	r5, r2, r3
 8004c68:	42ac      	cmp	r4, r5
 8004c6a:	d101      	bne.n	8004c70 <__sfputs_r+0x12>
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	e007      	b.n	8004c80 <__sfputs_r+0x22>
 8004c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c74:	463a      	mov	r2, r7
 8004c76:	4630      	mov	r0, r6
 8004c78:	f7ff ffda 	bl	8004c30 <__sfputc_r>
 8004c7c:	1c43      	adds	r3, r0, #1
 8004c7e:	d1f3      	bne.n	8004c68 <__sfputs_r+0xa>
 8004c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c84 <_vfiprintf_r>:
 8004c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c88:	460d      	mov	r5, r1
 8004c8a:	b09d      	sub	sp, #116	; 0x74
 8004c8c:	4614      	mov	r4, r2
 8004c8e:	4698      	mov	r8, r3
 8004c90:	4606      	mov	r6, r0
 8004c92:	b118      	cbz	r0, 8004c9c <_vfiprintf_r+0x18>
 8004c94:	6983      	ldr	r3, [r0, #24]
 8004c96:	b90b      	cbnz	r3, 8004c9c <_vfiprintf_r+0x18>
 8004c98:	f7ff fe96 	bl	80049c8 <__sinit>
 8004c9c:	4b89      	ldr	r3, [pc, #548]	; (8004ec4 <_vfiprintf_r+0x240>)
 8004c9e:	429d      	cmp	r5, r3
 8004ca0:	d11b      	bne.n	8004cda <_vfiprintf_r+0x56>
 8004ca2:	6875      	ldr	r5, [r6, #4]
 8004ca4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ca6:	07d9      	lsls	r1, r3, #31
 8004ca8:	d405      	bmi.n	8004cb6 <_vfiprintf_r+0x32>
 8004caa:	89ab      	ldrh	r3, [r5, #12]
 8004cac:	059a      	lsls	r2, r3, #22
 8004cae:	d402      	bmi.n	8004cb6 <_vfiprintf_r+0x32>
 8004cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cb2:	f7ff ff27 	bl	8004b04 <__retarget_lock_acquire_recursive>
 8004cb6:	89ab      	ldrh	r3, [r5, #12]
 8004cb8:	071b      	lsls	r3, r3, #28
 8004cba:	d501      	bpl.n	8004cc0 <_vfiprintf_r+0x3c>
 8004cbc:	692b      	ldr	r3, [r5, #16]
 8004cbe:	b9eb      	cbnz	r3, 8004cfc <_vfiprintf_r+0x78>
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	f000 fb5a 	bl	800537c <__swsetup_r>
 8004cc8:	b1c0      	cbz	r0, 8004cfc <_vfiprintf_r+0x78>
 8004cca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ccc:	07dc      	lsls	r4, r3, #31
 8004cce:	d50e      	bpl.n	8004cee <_vfiprintf_r+0x6a>
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	b01d      	add	sp, #116	; 0x74
 8004cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cda:	4b7b      	ldr	r3, [pc, #492]	; (8004ec8 <_vfiprintf_r+0x244>)
 8004cdc:	429d      	cmp	r5, r3
 8004cde:	d101      	bne.n	8004ce4 <_vfiprintf_r+0x60>
 8004ce0:	68b5      	ldr	r5, [r6, #8]
 8004ce2:	e7df      	b.n	8004ca4 <_vfiprintf_r+0x20>
 8004ce4:	4b79      	ldr	r3, [pc, #484]	; (8004ecc <_vfiprintf_r+0x248>)
 8004ce6:	429d      	cmp	r5, r3
 8004ce8:	bf08      	it	eq
 8004cea:	68f5      	ldreq	r5, [r6, #12]
 8004cec:	e7da      	b.n	8004ca4 <_vfiprintf_r+0x20>
 8004cee:	89ab      	ldrh	r3, [r5, #12]
 8004cf0:	0598      	lsls	r0, r3, #22
 8004cf2:	d4ed      	bmi.n	8004cd0 <_vfiprintf_r+0x4c>
 8004cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cf6:	f7ff ff06 	bl	8004b06 <__retarget_lock_release_recursive>
 8004cfa:	e7e9      	b.n	8004cd0 <_vfiprintf_r+0x4c>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8004d00:	2320      	movs	r3, #32
 8004d02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d0a:	2330      	movs	r3, #48	; 0x30
 8004d0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004ed0 <_vfiprintf_r+0x24c>
 8004d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d14:	f04f 0901 	mov.w	r9, #1
 8004d18:	4623      	mov	r3, r4
 8004d1a:	469a      	mov	sl, r3
 8004d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d20:	b10a      	cbz	r2, 8004d26 <_vfiprintf_r+0xa2>
 8004d22:	2a25      	cmp	r2, #37	; 0x25
 8004d24:	d1f9      	bne.n	8004d1a <_vfiprintf_r+0x96>
 8004d26:	ebba 0b04 	subs.w	fp, sl, r4
 8004d2a:	d00b      	beq.n	8004d44 <_vfiprintf_r+0xc0>
 8004d2c:	465b      	mov	r3, fp
 8004d2e:	4622      	mov	r2, r4
 8004d30:	4629      	mov	r1, r5
 8004d32:	4630      	mov	r0, r6
 8004d34:	f7ff ff93 	bl	8004c5e <__sfputs_r>
 8004d38:	3001      	adds	r0, #1
 8004d3a:	f000 80aa 	beq.w	8004e92 <_vfiprintf_r+0x20e>
 8004d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d40:	445a      	add	r2, fp
 8004d42:	9209      	str	r2, [sp, #36]	; 0x24
 8004d44:	f89a 3000 	ldrb.w	r3, [sl]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80a2 	beq.w	8004e92 <_vfiprintf_r+0x20e>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f04f 32ff 	mov.w	r2, #4294967295
 8004d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d58:	f10a 0a01 	add.w	sl, sl, #1
 8004d5c:	9304      	str	r3, [sp, #16]
 8004d5e:	9307      	str	r3, [sp, #28]
 8004d60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d64:	931a      	str	r3, [sp, #104]	; 0x68
 8004d66:	4654      	mov	r4, sl
 8004d68:	2205      	movs	r2, #5
 8004d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d6e:	4858      	ldr	r0, [pc, #352]	; (8004ed0 <_vfiprintf_r+0x24c>)
 8004d70:	f7fb fa2e 	bl	80001d0 <memchr>
 8004d74:	9a04      	ldr	r2, [sp, #16]
 8004d76:	b9d8      	cbnz	r0, 8004db0 <_vfiprintf_r+0x12c>
 8004d78:	06d1      	lsls	r1, r2, #27
 8004d7a:	bf44      	itt	mi
 8004d7c:	2320      	movmi	r3, #32
 8004d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d82:	0713      	lsls	r3, r2, #28
 8004d84:	bf44      	itt	mi
 8004d86:	232b      	movmi	r3, #43	; 0x2b
 8004d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d90:	2b2a      	cmp	r3, #42	; 0x2a
 8004d92:	d015      	beq.n	8004dc0 <_vfiprintf_r+0x13c>
 8004d94:	9a07      	ldr	r2, [sp, #28]
 8004d96:	4654      	mov	r4, sl
 8004d98:	2000      	movs	r0, #0
 8004d9a:	f04f 0c0a 	mov.w	ip, #10
 8004d9e:	4621      	mov	r1, r4
 8004da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004da4:	3b30      	subs	r3, #48	; 0x30
 8004da6:	2b09      	cmp	r3, #9
 8004da8:	d94e      	bls.n	8004e48 <_vfiprintf_r+0x1c4>
 8004daa:	b1b0      	cbz	r0, 8004dda <_vfiprintf_r+0x156>
 8004dac:	9207      	str	r2, [sp, #28]
 8004dae:	e014      	b.n	8004dda <_vfiprintf_r+0x156>
 8004db0:	eba0 0308 	sub.w	r3, r0, r8
 8004db4:	fa09 f303 	lsl.w	r3, r9, r3
 8004db8:	4313      	orrs	r3, r2
 8004dba:	9304      	str	r3, [sp, #16]
 8004dbc:	46a2      	mov	sl, r4
 8004dbe:	e7d2      	b.n	8004d66 <_vfiprintf_r+0xe2>
 8004dc0:	9b03      	ldr	r3, [sp, #12]
 8004dc2:	1d19      	adds	r1, r3, #4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	9103      	str	r1, [sp, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bfbb      	ittet	lt
 8004dcc:	425b      	neglt	r3, r3
 8004dce:	f042 0202 	orrlt.w	r2, r2, #2
 8004dd2:	9307      	strge	r3, [sp, #28]
 8004dd4:	9307      	strlt	r3, [sp, #28]
 8004dd6:	bfb8      	it	lt
 8004dd8:	9204      	strlt	r2, [sp, #16]
 8004dda:	7823      	ldrb	r3, [r4, #0]
 8004ddc:	2b2e      	cmp	r3, #46	; 0x2e
 8004dde:	d10c      	bne.n	8004dfa <_vfiprintf_r+0x176>
 8004de0:	7863      	ldrb	r3, [r4, #1]
 8004de2:	2b2a      	cmp	r3, #42	; 0x2a
 8004de4:	d135      	bne.n	8004e52 <_vfiprintf_r+0x1ce>
 8004de6:	9b03      	ldr	r3, [sp, #12]
 8004de8:	1d1a      	adds	r2, r3, #4
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	9203      	str	r2, [sp, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bfb8      	it	lt
 8004df2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004df6:	3402      	adds	r4, #2
 8004df8:	9305      	str	r3, [sp, #20]
 8004dfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004ee0 <_vfiprintf_r+0x25c>
 8004dfe:	7821      	ldrb	r1, [r4, #0]
 8004e00:	2203      	movs	r2, #3
 8004e02:	4650      	mov	r0, sl
 8004e04:	f7fb f9e4 	bl	80001d0 <memchr>
 8004e08:	b140      	cbz	r0, 8004e1c <_vfiprintf_r+0x198>
 8004e0a:	2340      	movs	r3, #64	; 0x40
 8004e0c:	eba0 000a 	sub.w	r0, r0, sl
 8004e10:	fa03 f000 	lsl.w	r0, r3, r0
 8004e14:	9b04      	ldr	r3, [sp, #16]
 8004e16:	4303      	orrs	r3, r0
 8004e18:	3401      	adds	r4, #1
 8004e1a:	9304      	str	r3, [sp, #16]
 8004e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e20:	482c      	ldr	r0, [pc, #176]	; (8004ed4 <_vfiprintf_r+0x250>)
 8004e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e26:	2206      	movs	r2, #6
 8004e28:	f7fb f9d2 	bl	80001d0 <memchr>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d03f      	beq.n	8004eb0 <_vfiprintf_r+0x22c>
 8004e30:	4b29      	ldr	r3, [pc, #164]	; (8004ed8 <_vfiprintf_r+0x254>)
 8004e32:	bb1b      	cbnz	r3, 8004e7c <_vfiprintf_r+0x1f8>
 8004e34:	9b03      	ldr	r3, [sp, #12]
 8004e36:	3307      	adds	r3, #7
 8004e38:	f023 0307 	bic.w	r3, r3, #7
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	9303      	str	r3, [sp, #12]
 8004e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e42:	443b      	add	r3, r7
 8004e44:	9309      	str	r3, [sp, #36]	; 0x24
 8004e46:	e767      	b.n	8004d18 <_vfiprintf_r+0x94>
 8004e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	2001      	movs	r0, #1
 8004e50:	e7a5      	b.n	8004d9e <_vfiprintf_r+0x11a>
 8004e52:	2300      	movs	r3, #0
 8004e54:	3401      	adds	r4, #1
 8004e56:	9305      	str	r3, [sp, #20]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	f04f 0c0a 	mov.w	ip, #10
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e64:	3a30      	subs	r2, #48	; 0x30
 8004e66:	2a09      	cmp	r2, #9
 8004e68:	d903      	bls.n	8004e72 <_vfiprintf_r+0x1ee>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0c5      	beq.n	8004dfa <_vfiprintf_r+0x176>
 8004e6e:	9105      	str	r1, [sp, #20]
 8004e70:	e7c3      	b.n	8004dfa <_vfiprintf_r+0x176>
 8004e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e76:	4604      	mov	r4, r0
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e7f0      	b.n	8004e5e <_vfiprintf_r+0x1da>
 8004e7c:	ab03      	add	r3, sp, #12
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	462a      	mov	r2, r5
 8004e82:	4b16      	ldr	r3, [pc, #88]	; (8004edc <_vfiprintf_r+0x258>)
 8004e84:	a904      	add	r1, sp, #16
 8004e86:	4630      	mov	r0, r6
 8004e88:	f3af 8000 	nop.w
 8004e8c:	4607      	mov	r7, r0
 8004e8e:	1c78      	adds	r0, r7, #1
 8004e90:	d1d6      	bne.n	8004e40 <_vfiprintf_r+0x1bc>
 8004e92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e94:	07d9      	lsls	r1, r3, #31
 8004e96:	d405      	bmi.n	8004ea4 <_vfiprintf_r+0x220>
 8004e98:	89ab      	ldrh	r3, [r5, #12]
 8004e9a:	059a      	lsls	r2, r3, #22
 8004e9c:	d402      	bmi.n	8004ea4 <_vfiprintf_r+0x220>
 8004e9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ea0:	f7ff fe31 	bl	8004b06 <__retarget_lock_release_recursive>
 8004ea4:	89ab      	ldrh	r3, [r5, #12]
 8004ea6:	065b      	lsls	r3, r3, #25
 8004ea8:	f53f af12 	bmi.w	8004cd0 <_vfiprintf_r+0x4c>
 8004eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004eae:	e711      	b.n	8004cd4 <_vfiprintf_r+0x50>
 8004eb0:	ab03      	add	r3, sp, #12
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	462a      	mov	r2, r5
 8004eb6:	4b09      	ldr	r3, [pc, #36]	; (8004edc <_vfiprintf_r+0x258>)
 8004eb8:	a904      	add	r1, sp, #16
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f000 f880 	bl	8004fc0 <_printf_i>
 8004ec0:	e7e4      	b.n	8004e8c <_vfiprintf_r+0x208>
 8004ec2:	bf00      	nop
 8004ec4:	08005874 	.word	0x08005874
 8004ec8:	08005894 	.word	0x08005894
 8004ecc:	08005854 	.word	0x08005854
 8004ed0:	080058b4 	.word	0x080058b4
 8004ed4:	080058be 	.word	0x080058be
 8004ed8:	00000000 	.word	0x00000000
 8004edc:	08004c5f 	.word	0x08004c5f
 8004ee0:	080058ba 	.word	0x080058ba

08004ee4 <_printf_common>:
 8004ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee8:	4616      	mov	r6, r2
 8004eea:	4699      	mov	r9, r3
 8004eec:	688a      	ldr	r2, [r1, #8]
 8004eee:	690b      	ldr	r3, [r1, #16]
 8004ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	bfb8      	it	lt
 8004ef8:	4613      	movlt	r3, r2
 8004efa:	6033      	str	r3, [r6, #0]
 8004efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f00:	4607      	mov	r7, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	b10a      	cbz	r2, 8004f0a <_printf_common+0x26>
 8004f06:	3301      	adds	r3, #1
 8004f08:	6033      	str	r3, [r6, #0]
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	0699      	lsls	r1, r3, #26
 8004f0e:	bf42      	ittt	mi
 8004f10:	6833      	ldrmi	r3, [r6, #0]
 8004f12:	3302      	addmi	r3, #2
 8004f14:	6033      	strmi	r3, [r6, #0]
 8004f16:	6825      	ldr	r5, [r4, #0]
 8004f18:	f015 0506 	ands.w	r5, r5, #6
 8004f1c:	d106      	bne.n	8004f2c <_printf_common+0x48>
 8004f1e:	f104 0a19 	add.w	sl, r4, #25
 8004f22:	68e3      	ldr	r3, [r4, #12]
 8004f24:	6832      	ldr	r2, [r6, #0]
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	42ab      	cmp	r3, r5
 8004f2a:	dc26      	bgt.n	8004f7a <_printf_common+0x96>
 8004f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f30:	1e13      	subs	r3, r2, #0
 8004f32:	6822      	ldr	r2, [r4, #0]
 8004f34:	bf18      	it	ne
 8004f36:	2301      	movne	r3, #1
 8004f38:	0692      	lsls	r2, r2, #26
 8004f3a:	d42b      	bmi.n	8004f94 <_printf_common+0xb0>
 8004f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f40:	4649      	mov	r1, r9
 8004f42:	4638      	mov	r0, r7
 8004f44:	47c0      	blx	r8
 8004f46:	3001      	adds	r0, #1
 8004f48:	d01e      	beq.n	8004f88 <_printf_common+0xa4>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	68e5      	ldr	r5, [r4, #12]
 8004f4e:	6832      	ldr	r2, [r6, #0]
 8004f50:	f003 0306 	and.w	r3, r3, #6
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	bf08      	it	eq
 8004f58:	1aad      	subeq	r5, r5, r2
 8004f5a:	68a3      	ldr	r3, [r4, #8]
 8004f5c:	6922      	ldr	r2, [r4, #16]
 8004f5e:	bf0c      	ite	eq
 8004f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f64:	2500      	movne	r5, #0
 8004f66:	4293      	cmp	r3, r2
 8004f68:	bfc4      	itt	gt
 8004f6a:	1a9b      	subgt	r3, r3, r2
 8004f6c:	18ed      	addgt	r5, r5, r3
 8004f6e:	2600      	movs	r6, #0
 8004f70:	341a      	adds	r4, #26
 8004f72:	42b5      	cmp	r5, r6
 8004f74:	d11a      	bne.n	8004fac <_printf_common+0xc8>
 8004f76:	2000      	movs	r0, #0
 8004f78:	e008      	b.n	8004f8c <_printf_common+0xa8>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4652      	mov	r2, sl
 8004f7e:	4649      	mov	r1, r9
 8004f80:	4638      	mov	r0, r7
 8004f82:	47c0      	blx	r8
 8004f84:	3001      	adds	r0, #1
 8004f86:	d103      	bne.n	8004f90 <_printf_common+0xac>
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f90:	3501      	adds	r5, #1
 8004f92:	e7c6      	b.n	8004f22 <_printf_common+0x3e>
 8004f94:	18e1      	adds	r1, r4, r3
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	2030      	movs	r0, #48	; 0x30
 8004f9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f9e:	4422      	add	r2, r4
 8004fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fa8:	3302      	adds	r3, #2
 8004faa:	e7c7      	b.n	8004f3c <_printf_common+0x58>
 8004fac:	2301      	movs	r3, #1
 8004fae:	4622      	mov	r2, r4
 8004fb0:	4649      	mov	r1, r9
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	47c0      	blx	r8
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d0e6      	beq.n	8004f88 <_printf_common+0xa4>
 8004fba:	3601      	adds	r6, #1
 8004fbc:	e7d9      	b.n	8004f72 <_printf_common+0x8e>
	...

08004fc0 <_printf_i>:
 8004fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	7e0f      	ldrb	r7, [r1, #24]
 8004fc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fc8:	2f78      	cmp	r7, #120	; 0x78
 8004fca:	4691      	mov	r9, r2
 8004fcc:	4680      	mov	r8, r0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	469a      	mov	sl, r3
 8004fd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fd6:	d807      	bhi.n	8004fe8 <_printf_i+0x28>
 8004fd8:	2f62      	cmp	r7, #98	; 0x62
 8004fda:	d80a      	bhi.n	8004ff2 <_printf_i+0x32>
 8004fdc:	2f00      	cmp	r7, #0
 8004fde:	f000 80d8 	beq.w	8005192 <_printf_i+0x1d2>
 8004fe2:	2f58      	cmp	r7, #88	; 0x58
 8004fe4:	f000 80a3 	beq.w	800512e <_printf_i+0x16e>
 8004fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ff0:	e03a      	b.n	8005068 <_printf_i+0xa8>
 8004ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ff6:	2b15      	cmp	r3, #21
 8004ff8:	d8f6      	bhi.n	8004fe8 <_printf_i+0x28>
 8004ffa:	a101      	add	r1, pc, #4	; (adr r1, 8005000 <_printf_i+0x40>)
 8004ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005000:	08005059 	.word	0x08005059
 8005004:	0800506d 	.word	0x0800506d
 8005008:	08004fe9 	.word	0x08004fe9
 800500c:	08004fe9 	.word	0x08004fe9
 8005010:	08004fe9 	.word	0x08004fe9
 8005014:	08004fe9 	.word	0x08004fe9
 8005018:	0800506d 	.word	0x0800506d
 800501c:	08004fe9 	.word	0x08004fe9
 8005020:	08004fe9 	.word	0x08004fe9
 8005024:	08004fe9 	.word	0x08004fe9
 8005028:	08004fe9 	.word	0x08004fe9
 800502c:	08005179 	.word	0x08005179
 8005030:	0800509d 	.word	0x0800509d
 8005034:	0800515b 	.word	0x0800515b
 8005038:	08004fe9 	.word	0x08004fe9
 800503c:	08004fe9 	.word	0x08004fe9
 8005040:	0800519b 	.word	0x0800519b
 8005044:	08004fe9 	.word	0x08004fe9
 8005048:	0800509d 	.word	0x0800509d
 800504c:	08004fe9 	.word	0x08004fe9
 8005050:	08004fe9 	.word	0x08004fe9
 8005054:	08005163 	.word	0x08005163
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	1d1a      	adds	r2, r3, #4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	602a      	str	r2, [r5, #0]
 8005060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005068:	2301      	movs	r3, #1
 800506a:	e0a3      	b.n	80051b4 <_printf_i+0x1f4>
 800506c:	6820      	ldr	r0, [r4, #0]
 800506e:	6829      	ldr	r1, [r5, #0]
 8005070:	0606      	lsls	r6, r0, #24
 8005072:	f101 0304 	add.w	r3, r1, #4
 8005076:	d50a      	bpl.n	800508e <_printf_i+0xce>
 8005078:	680e      	ldr	r6, [r1, #0]
 800507a:	602b      	str	r3, [r5, #0]
 800507c:	2e00      	cmp	r6, #0
 800507e:	da03      	bge.n	8005088 <_printf_i+0xc8>
 8005080:	232d      	movs	r3, #45	; 0x2d
 8005082:	4276      	negs	r6, r6
 8005084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005088:	485e      	ldr	r0, [pc, #376]	; (8005204 <_printf_i+0x244>)
 800508a:	230a      	movs	r3, #10
 800508c:	e019      	b.n	80050c2 <_printf_i+0x102>
 800508e:	680e      	ldr	r6, [r1, #0]
 8005090:	602b      	str	r3, [r5, #0]
 8005092:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005096:	bf18      	it	ne
 8005098:	b236      	sxthne	r6, r6
 800509a:	e7ef      	b.n	800507c <_printf_i+0xbc>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	6820      	ldr	r0, [r4, #0]
 80050a0:	1d19      	adds	r1, r3, #4
 80050a2:	6029      	str	r1, [r5, #0]
 80050a4:	0601      	lsls	r1, r0, #24
 80050a6:	d501      	bpl.n	80050ac <_printf_i+0xec>
 80050a8:	681e      	ldr	r6, [r3, #0]
 80050aa:	e002      	b.n	80050b2 <_printf_i+0xf2>
 80050ac:	0646      	lsls	r6, r0, #25
 80050ae:	d5fb      	bpl.n	80050a8 <_printf_i+0xe8>
 80050b0:	881e      	ldrh	r6, [r3, #0]
 80050b2:	4854      	ldr	r0, [pc, #336]	; (8005204 <_printf_i+0x244>)
 80050b4:	2f6f      	cmp	r7, #111	; 0x6f
 80050b6:	bf0c      	ite	eq
 80050b8:	2308      	moveq	r3, #8
 80050ba:	230a      	movne	r3, #10
 80050bc:	2100      	movs	r1, #0
 80050be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050c2:	6865      	ldr	r5, [r4, #4]
 80050c4:	60a5      	str	r5, [r4, #8]
 80050c6:	2d00      	cmp	r5, #0
 80050c8:	bfa2      	ittt	ge
 80050ca:	6821      	ldrge	r1, [r4, #0]
 80050cc:	f021 0104 	bicge.w	r1, r1, #4
 80050d0:	6021      	strge	r1, [r4, #0]
 80050d2:	b90e      	cbnz	r6, 80050d8 <_printf_i+0x118>
 80050d4:	2d00      	cmp	r5, #0
 80050d6:	d04d      	beq.n	8005174 <_printf_i+0x1b4>
 80050d8:	4615      	mov	r5, r2
 80050da:	fbb6 f1f3 	udiv	r1, r6, r3
 80050de:	fb03 6711 	mls	r7, r3, r1, r6
 80050e2:	5dc7      	ldrb	r7, [r0, r7]
 80050e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050e8:	4637      	mov	r7, r6
 80050ea:	42bb      	cmp	r3, r7
 80050ec:	460e      	mov	r6, r1
 80050ee:	d9f4      	bls.n	80050da <_printf_i+0x11a>
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d10b      	bne.n	800510c <_printf_i+0x14c>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	07de      	lsls	r6, r3, #31
 80050f8:	d508      	bpl.n	800510c <_printf_i+0x14c>
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	6861      	ldr	r1, [r4, #4]
 80050fe:	4299      	cmp	r1, r3
 8005100:	bfde      	ittt	le
 8005102:	2330      	movle	r3, #48	; 0x30
 8005104:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005108:	f105 35ff 	addle.w	r5, r5, #4294967295
 800510c:	1b52      	subs	r2, r2, r5
 800510e:	6122      	str	r2, [r4, #16]
 8005110:	f8cd a000 	str.w	sl, [sp]
 8005114:	464b      	mov	r3, r9
 8005116:	aa03      	add	r2, sp, #12
 8005118:	4621      	mov	r1, r4
 800511a:	4640      	mov	r0, r8
 800511c:	f7ff fee2 	bl	8004ee4 <_printf_common>
 8005120:	3001      	adds	r0, #1
 8005122:	d14c      	bne.n	80051be <_printf_i+0x1fe>
 8005124:	f04f 30ff 	mov.w	r0, #4294967295
 8005128:	b004      	add	sp, #16
 800512a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512e:	4835      	ldr	r0, [pc, #212]	; (8005204 <_printf_i+0x244>)
 8005130:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005134:	6829      	ldr	r1, [r5, #0]
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	f851 6b04 	ldr.w	r6, [r1], #4
 800513c:	6029      	str	r1, [r5, #0]
 800513e:	061d      	lsls	r5, r3, #24
 8005140:	d514      	bpl.n	800516c <_printf_i+0x1ac>
 8005142:	07df      	lsls	r7, r3, #31
 8005144:	bf44      	itt	mi
 8005146:	f043 0320 	orrmi.w	r3, r3, #32
 800514a:	6023      	strmi	r3, [r4, #0]
 800514c:	b91e      	cbnz	r6, 8005156 <_printf_i+0x196>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	f023 0320 	bic.w	r3, r3, #32
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	2310      	movs	r3, #16
 8005158:	e7b0      	b.n	80050bc <_printf_i+0xfc>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	f043 0320 	orr.w	r3, r3, #32
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	2378      	movs	r3, #120	; 0x78
 8005164:	4828      	ldr	r0, [pc, #160]	; (8005208 <_printf_i+0x248>)
 8005166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800516a:	e7e3      	b.n	8005134 <_printf_i+0x174>
 800516c:	0659      	lsls	r1, r3, #25
 800516e:	bf48      	it	mi
 8005170:	b2b6      	uxthmi	r6, r6
 8005172:	e7e6      	b.n	8005142 <_printf_i+0x182>
 8005174:	4615      	mov	r5, r2
 8005176:	e7bb      	b.n	80050f0 <_printf_i+0x130>
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	6826      	ldr	r6, [r4, #0]
 800517c:	6961      	ldr	r1, [r4, #20]
 800517e:	1d18      	adds	r0, r3, #4
 8005180:	6028      	str	r0, [r5, #0]
 8005182:	0635      	lsls	r5, r6, #24
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	d501      	bpl.n	800518c <_printf_i+0x1cc>
 8005188:	6019      	str	r1, [r3, #0]
 800518a:	e002      	b.n	8005192 <_printf_i+0x1d2>
 800518c:	0670      	lsls	r0, r6, #25
 800518e:	d5fb      	bpl.n	8005188 <_printf_i+0x1c8>
 8005190:	8019      	strh	r1, [r3, #0]
 8005192:	2300      	movs	r3, #0
 8005194:	6123      	str	r3, [r4, #16]
 8005196:	4615      	mov	r5, r2
 8005198:	e7ba      	b.n	8005110 <_printf_i+0x150>
 800519a:	682b      	ldr	r3, [r5, #0]
 800519c:	1d1a      	adds	r2, r3, #4
 800519e:	602a      	str	r2, [r5, #0]
 80051a0:	681d      	ldr	r5, [r3, #0]
 80051a2:	6862      	ldr	r2, [r4, #4]
 80051a4:	2100      	movs	r1, #0
 80051a6:	4628      	mov	r0, r5
 80051a8:	f7fb f812 	bl	80001d0 <memchr>
 80051ac:	b108      	cbz	r0, 80051b2 <_printf_i+0x1f2>
 80051ae:	1b40      	subs	r0, r0, r5
 80051b0:	6060      	str	r0, [r4, #4]
 80051b2:	6863      	ldr	r3, [r4, #4]
 80051b4:	6123      	str	r3, [r4, #16]
 80051b6:	2300      	movs	r3, #0
 80051b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051bc:	e7a8      	b.n	8005110 <_printf_i+0x150>
 80051be:	6923      	ldr	r3, [r4, #16]
 80051c0:	462a      	mov	r2, r5
 80051c2:	4649      	mov	r1, r9
 80051c4:	4640      	mov	r0, r8
 80051c6:	47d0      	blx	sl
 80051c8:	3001      	adds	r0, #1
 80051ca:	d0ab      	beq.n	8005124 <_printf_i+0x164>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	079b      	lsls	r3, r3, #30
 80051d0:	d413      	bmi.n	80051fa <_printf_i+0x23a>
 80051d2:	68e0      	ldr	r0, [r4, #12]
 80051d4:	9b03      	ldr	r3, [sp, #12]
 80051d6:	4298      	cmp	r0, r3
 80051d8:	bfb8      	it	lt
 80051da:	4618      	movlt	r0, r3
 80051dc:	e7a4      	b.n	8005128 <_printf_i+0x168>
 80051de:	2301      	movs	r3, #1
 80051e0:	4632      	mov	r2, r6
 80051e2:	4649      	mov	r1, r9
 80051e4:	4640      	mov	r0, r8
 80051e6:	47d0      	blx	sl
 80051e8:	3001      	adds	r0, #1
 80051ea:	d09b      	beq.n	8005124 <_printf_i+0x164>
 80051ec:	3501      	adds	r5, #1
 80051ee:	68e3      	ldr	r3, [r4, #12]
 80051f0:	9903      	ldr	r1, [sp, #12]
 80051f2:	1a5b      	subs	r3, r3, r1
 80051f4:	42ab      	cmp	r3, r5
 80051f6:	dcf2      	bgt.n	80051de <_printf_i+0x21e>
 80051f8:	e7eb      	b.n	80051d2 <_printf_i+0x212>
 80051fa:	2500      	movs	r5, #0
 80051fc:	f104 0619 	add.w	r6, r4, #25
 8005200:	e7f5      	b.n	80051ee <_printf_i+0x22e>
 8005202:	bf00      	nop
 8005204:	080058c5 	.word	0x080058c5
 8005208:	080058d6 	.word	0x080058d6

0800520c <_sbrk_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4d06      	ldr	r5, [pc, #24]	; (8005228 <_sbrk_r+0x1c>)
 8005210:	2300      	movs	r3, #0
 8005212:	4604      	mov	r4, r0
 8005214:	4608      	mov	r0, r1
 8005216:	602b      	str	r3, [r5, #0]
 8005218:	f7fb fcba 	bl	8000b90 <_sbrk>
 800521c:	1c43      	adds	r3, r0, #1
 800521e:	d102      	bne.n	8005226 <_sbrk_r+0x1a>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	b103      	cbz	r3, 8005226 <_sbrk_r+0x1a>
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	bd38      	pop	{r3, r4, r5, pc}
 8005228:	200132cc 	.word	0x200132cc

0800522c <__sread>:
 800522c:	b510      	push	{r4, lr}
 800522e:	460c      	mov	r4, r1
 8005230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005234:	f000 fab2 	bl	800579c <_read_r>
 8005238:	2800      	cmp	r0, #0
 800523a:	bfab      	itete	ge
 800523c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800523e:	89a3      	ldrhlt	r3, [r4, #12]
 8005240:	181b      	addge	r3, r3, r0
 8005242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005246:	bfac      	ite	ge
 8005248:	6563      	strge	r3, [r4, #84]	; 0x54
 800524a:	81a3      	strhlt	r3, [r4, #12]
 800524c:	bd10      	pop	{r4, pc}

0800524e <__swrite>:
 800524e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005252:	461f      	mov	r7, r3
 8005254:	898b      	ldrh	r3, [r1, #12]
 8005256:	05db      	lsls	r3, r3, #23
 8005258:	4605      	mov	r5, r0
 800525a:	460c      	mov	r4, r1
 800525c:	4616      	mov	r6, r2
 800525e:	d505      	bpl.n	800526c <__swrite+0x1e>
 8005260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005264:	2302      	movs	r3, #2
 8005266:	2200      	movs	r2, #0
 8005268:	f000 f9c8 	bl	80055fc <_lseek_r>
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005272:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005276:	81a3      	strh	r3, [r4, #12]
 8005278:	4632      	mov	r2, r6
 800527a:	463b      	mov	r3, r7
 800527c:	4628      	mov	r0, r5
 800527e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005282:	f000 b869 	b.w	8005358 <_write_r>

08005286 <__sseek>:
 8005286:	b510      	push	{r4, lr}
 8005288:	460c      	mov	r4, r1
 800528a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528e:	f000 f9b5 	bl	80055fc <_lseek_r>
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	bf15      	itete	ne
 8005298:	6560      	strne	r0, [r4, #84]	; 0x54
 800529a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800529e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052a2:	81a3      	strheq	r3, [r4, #12]
 80052a4:	bf18      	it	ne
 80052a6:	81a3      	strhne	r3, [r4, #12]
 80052a8:	bd10      	pop	{r4, pc}

080052aa <__sclose>:
 80052aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ae:	f000 b8d3 	b.w	8005458 <_close_r>
	...

080052b4 <__swbuf_r>:
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b6:	460e      	mov	r6, r1
 80052b8:	4614      	mov	r4, r2
 80052ba:	4605      	mov	r5, r0
 80052bc:	b118      	cbz	r0, 80052c6 <__swbuf_r+0x12>
 80052be:	6983      	ldr	r3, [r0, #24]
 80052c0:	b90b      	cbnz	r3, 80052c6 <__swbuf_r+0x12>
 80052c2:	f7ff fb81 	bl	80049c8 <__sinit>
 80052c6:	4b21      	ldr	r3, [pc, #132]	; (800534c <__swbuf_r+0x98>)
 80052c8:	429c      	cmp	r4, r3
 80052ca:	d12b      	bne.n	8005324 <__swbuf_r+0x70>
 80052cc:	686c      	ldr	r4, [r5, #4]
 80052ce:	69a3      	ldr	r3, [r4, #24]
 80052d0:	60a3      	str	r3, [r4, #8]
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	071a      	lsls	r2, r3, #28
 80052d6:	d52f      	bpl.n	8005338 <__swbuf_r+0x84>
 80052d8:	6923      	ldr	r3, [r4, #16]
 80052da:	b36b      	cbz	r3, 8005338 <__swbuf_r+0x84>
 80052dc:	6923      	ldr	r3, [r4, #16]
 80052de:	6820      	ldr	r0, [r4, #0]
 80052e0:	1ac0      	subs	r0, r0, r3
 80052e2:	6963      	ldr	r3, [r4, #20]
 80052e4:	b2f6      	uxtb	r6, r6
 80052e6:	4283      	cmp	r3, r0
 80052e8:	4637      	mov	r7, r6
 80052ea:	dc04      	bgt.n	80052f6 <__swbuf_r+0x42>
 80052ec:	4621      	mov	r1, r4
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 f948 	bl	8005584 <_fflush_r>
 80052f4:	bb30      	cbnz	r0, 8005344 <__swbuf_r+0x90>
 80052f6:	68a3      	ldr	r3, [r4, #8]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	60a3      	str	r3, [r4, #8]
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	6022      	str	r2, [r4, #0]
 8005302:	701e      	strb	r6, [r3, #0]
 8005304:	6963      	ldr	r3, [r4, #20]
 8005306:	3001      	adds	r0, #1
 8005308:	4283      	cmp	r3, r0
 800530a:	d004      	beq.n	8005316 <__swbuf_r+0x62>
 800530c:	89a3      	ldrh	r3, [r4, #12]
 800530e:	07db      	lsls	r3, r3, #31
 8005310:	d506      	bpl.n	8005320 <__swbuf_r+0x6c>
 8005312:	2e0a      	cmp	r6, #10
 8005314:	d104      	bne.n	8005320 <__swbuf_r+0x6c>
 8005316:	4621      	mov	r1, r4
 8005318:	4628      	mov	r0, r5
 800531a:	f000 f933 	bl	8005584 <_fflush_r>
 800531e:	b988      	cbnz	r0, 8005344 <__swbuf_r+0x90>
 8005320:	4638      	mov	r0, r7
 8005322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005324:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <__swbuf_r+0x9c>)
 8005326:	429c      	cmp	r4, r3
 8005328:	d101      	bne.n	800532e <__swbuf_r+0x7a>
 800532a:	68ac      	ldr	r4, [r5, #8]
 800532c:	e7cf      	b.n	80052ce <__swbuf_r+0x1a>
 800532e:	4b09      	ldr	r3, [pc, #36]	; (8005354 <__swbuf_r+0xa0>)
 8005330:	429c      	cmp	r4, r3
 8005332:	bf08      	it	eq
 8005334:	68ec      	ldreq	r4, [r5, #12]
 8005336:	e7ca      	b.n	80052ce <__swbuf_r+0x1a>
 8005338:	4621      	mov	r1, r4
 800533a:	4628      	mov	r0, r5
 800533c:	f000 f81e 	bl	800537c <__swsetup_r>
 8005340:	2800      	cmp	r0, #0
 8005342:	d0cb      	beq.n	80052dc <__swbuf_r+0x28>
 8005344:	f04f 37ff 	mov.w	r7, #4294967295
 8005348:	e7ea      	b.n	8005320 <__swbuf_r+0x6c>
 800534a:	bf00      	nop
 800534c:	08005874 	.word	0x08005874
 8005350:	08005894 	.word	0x08005894
 8005354:	08005854 	.word	0x08005854

08005358 <_write_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	4d07      	ldr	r5, [pc, #28]	; (8005378 <_write_r+0x20>)
 800535c:	4604      	mov	r4, r0
 800535e:	4608      	mov	r0, r1
 8005360:	4611      	mov	r1, r2
 8005362:	2200      	movs	r2, #0
 8005364:	602a      	str	r2, [r5, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	f7fb fbc1 	bl	8000aee <_write>
 800536c:	1c43      	adds	r3, r0, #1
 800536e:	d102      	bne.n	8005376 <_write_r+0x1e>
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	b103      	cbz	r3, 8005376 <_write_r+0x1e>
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	bd38      	pop	{r3, r4, r5, pc}
 8005378:	200132cc 	.word	0x200132cc

0800537c <__swsetup_r>:
 800537c:	4b32      	ldr	r3, [pc, #200]	; (8005448 <__swsetup_r+0xcc>)
 800537e:	b570      	push	{r4, r5, r6, lr}
 8005380:	681d      	ldr	r5, [r3, #0]
 8005382:	4606      	mov	r6, r0
 8005384:	460c      	mov	r4, r1
 8005386:	b125      	cbz	r5, 8005392 <__swsetup_r+0x16>
 8005388:	69ab      	ldr	r3, [r5, #24]
 800538a:	b913      	cbnz	r3, 8005392 <__swsetup_r+0x16>
 800538c:	4628      	mov	r0, r5
 800538e:	f7ff fb1b 	bl	80049c8 <__sinit>
 8005392:	4b2e      	ldr	r3, [pc, #184]	; (800544c <__swsetup_r+0xd0>)
 8005394:	429c      	cmp	r4, r3
 8005396:	d10f      	bne.n	80053b8 <__swsetup_r+0x3c>
 8005398:	686c      	ldr	r4, [r5, #4]
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053a0:	0719      	lsls	r1, r3, #28
 80053a2:	d42c      	bmi.n	80053fe <__swsetup_r+0x82>
 80053a4:	06dd      	lsls	r5, r3, #27
 80053a6:	d411      	bmi.n	80053cc <__swsetup_r+0x50>
 80053a8:	2309      	movs	r3, #9
 80053aa:	6033      	str	r3, [r6, #0]
 80053ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053b0:	81a3      	strh	r3, [r4, #12]
 80053b2:	f04f 30ff 	mov.w	r0, #4294967295
 80053b6:	e03e      	b.n	8005436 <__swsetup_r+0xba>
 80053b8:	4b25      	ldr	r3, [pc, #148]	; (8005450 <__swsetup_r+0xd4>)
 80053ba:	429c      	cmp	r4, r3
 80053bc:	d101      	bne.n	80053c2 <__swsetup_r+0x46>
 80053be:	68ac      	ldr	r4, [r5, #8]
 80053c0:	e7eb      	b.n	800539a <__swsetup_r+0x1e>
 80053c2:	4b24      	ldr	r3, [pc, #144]	; (8005454 <__swsetup_r+0xd8>)
 80053c4:	429c      	cmp	r4, r3
 80053c6:	bf08      	it	eq
 80053c8:	68ec      	ldreq	r4, [r5, #12]
 80053ca:	e7e6      	b.n	800539a <__swsetup_r+0x1e>
 80053cc:	0758      	lsls	r0, r3, #29
 80053ce:	d512      	bpl.n	80053f6 <__swsetup_r+0x7a>
 80053d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053d2:	b141      	cbz	r1, 80053e6 <__swsetup_r+0x6a>
 80053d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053d8:	4299      	cmp	r1, r3
 80053da:	d002      	beq.n	80053e2 <__swsetup_r+0x66>
 80053dc:	4630      	mov	r0, r6
 80053de:	f000 f991 	bl	8005704 <_free_r>
 80053e2:	2300      	movs	r3, #0
 80053e4:	6363      	str	r3, [r4, #52]	; 0x34
 80053e6:	89a3      	ldrh	r3, [r4, #12]
 80053e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053ec:	81a3      	strh	r3, [r4, #12]
 80053ee:	2300      	movs	r3, #0
 80053f0:	6063      	str	r3, [r4, #4]
 80053f2:	6923      	ldr	r3, [r4, #16]
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	f043 0308 	orr.w	r3, r3, #8
 80053fc:	81a3      	strh	r3, [r4, #12]
 80053fe:	6923      	ldr	r3, [r4, #16]
 8005400:	b94b      	cbnz	r3, 8005416 <__swsetup_r+0x9a>
 8005402:	89a3      	ldrh	r3, [r4, #12]
 8005404:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800540c:	d003      	beq.n	8005416 <__swsetup_r+0x9a>
 800540e:	4621      	mov	r1, r4
 8005410:	4630      	mov	r0, r6
 8005412:	f000 f92b 	bl	800566c <__smakebuf_r>
 8005416:	89a0      	ldrh	r0, [r4, #12]
 8005418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800541c:	f010 0301 	ands.w	r3, r0, #1
 8005420:	d00a      	beq.n	8005438 <__swsetup_r+0xbc>
 8005422:	2300      	movs	r3, #0
 8005424:	60a3      	str	r3, [r4, #8]
 8005426:	6963      	ldr	r3, [r4, #20]
 8005428:	425b      	negs	r3, r3
 800542a:	61a3      	str	r3, [r4, #24]
 800542c:	6923      	ldr	r3, [r4, #16]
 800542e:	b943      	cbnz	r3, 8005442 <__swsetup_r+0xc6>
 8005430:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005434:	d1ba      	bne.n	80053ac <__swsetup_r+0x30>
 8005436:	bd70      	pop	{r4, r5, r6, pc}
 8005438:	0781      	lsls	r1, r0, #30
 800543a:	bf58      	it	pl
 800543c:	6963      	ldrpl	r3, [r4, #20]
 800543e:	60a3      	str	r3, [r4, #8]
 8005440:	e7f4      	b.n	800542c <__swsetup_r+0xb0>
 8005442:	2000      	movs	r0, #0
 8005444:	e7f7      	b.n	8005436 <__swsetup_r+0xba>
 8005446:	bf00      	nop
 8005448:	2000000c 	.word	0x2000000c
 800544c:	08005874 	.word	0x08005874
 8005450:	08005894 	.word	0x08005894
 8005454:	08005854 	.word	0x08005854

08005458 <_close_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d06      	ldr	r5, [pc, #24]	; (8005474 <_close_r+0x1c>)
 800545c:	2300      	movs	r3, #0
 800545e:	4604      	mov	r4, r0
 8005460:	4608      	mov	r0, r1
 8005462:	602b      	str	r3, [r5, #0]
 8005464:	f7fb fb5f 	bl	8000b26 <_close>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_close_r+0x1a>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_close_r+0x1a>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	200132cc 	.word	0x200132cc

08005478 <__sflush_r>:
 8005478:	898a      	ldrh	r2, [r1, #12]
 800547a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800547e:	4605      	mov	r5, r0
 8005480:	0710      	lsls	r0, r2, #28
 8005482:	460c      	mov	r4, r1
 8005484:	d458      	bmi.n	8005538 <__sflush_r+0xc0>
 8005486:	684b      	ldr	r3, [r1, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	dc05      	bgt.n	8005498 <__sflush_r+0x20>
 800548c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	dc02      	bgt.n	8005498 <__sflush_r+0x20>
 8005492:	2000      	movs	r0, #0
 8005494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800549a:	2e00      	cmp	r6, #0
 800549c:	d0f9      	beq.n	8005492 <__sflush_r+0x1a>
 800549e:	2300      	movs	r3, #0
 80054a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054a4:	682f      	ldr	r7, [r5, #0]
 80054a6:	602b      	str	r3, [r5, #0]
 80054a8:	d032      	beq.n	8005510 <__sflush_r+0x98>
 80054aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054ac:	89a3      	ldrh	r3, [r4, #12]
 80054ae:	075a      	lsls	r2, r3, #29
 80054b0:	d505      	bpl.n	80054be <__sflush_r+0x46>
 80054b2:	6863      	ldr	r3, [r4, #4]
 80054b4:	1ac0      	subs	r0, r0, r3
 80054b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054b8:	b10b      	cbz	r3, 80054be <__sflush_r+0x46>
 80054ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054bc:	1ac0      	subs	r0, r0, r3
 80054be:	2300      	movs	r3, #0
 80054c0:	4602      	mov	r2, r0
 80054c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054c4:	6a21      	ldr	r1, [r4, #32]
 80054c6:	4628      	mov	r0, r5
 80054c8:	47b0      	blx	r6
 80054ca:	1c43      	adds	r3, r0, #1
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	d106      	bne.n	80054de <__sflush_r+0x66>
 80054d0:	6829      	ldr	r1, [r5, #0]
 80054d2:	291d      	cmp	r1, #29
 80054d4:	d82c      	bhi.n	8005530 <__sflush_r+0xb8>
 80054d6:	4a2a      	ldr	r2, [pc, #168]	; (8005580 <__sflush_r+0x108>)
 80054d8:	40ca      	lsrs	r2, r1
 80054da:	07d6      	lsls	r6, r2, #31
 80054dc:	d528      	bpl.n	8005530 <__sflush_r+0xb8>
 80054de:	2200      	movs	r2, #0
 80054e0:	6062      	str	r2, [r4, #4]
 80054e2:	04d9      	lsls	r1, r3, #19
 80054e4:	6922      	ldr	r2, [r4, #16]
 80054e6:	6022      	str	r2, [r4, #0]
 80054e8:	d504      	bpl.n	80054f4 <__sflush_r+0x7c>
 80054ea:	1c42      	adds	r2, r0, #1
 80054ec:	d101      	bne.n	80054f2 <__sflush_r+0x7a>
 80054ee:	682b      	ldr	r3, [r5, #0]
 80054f0:	b903      	cbnz	r3, 80054f4 <__sflush_r+0x7c>
 80054f2:	6560      	str	r0, [r4, #84]	; 0x54
 80054f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054f6:	602f      	str	r7, [r5, #0]
 80054f8:	2900      	cmp	r1, #0
 80054fa:	d0ca      	beq.n	8005492 <__sflush_r+0x1a>
 80054fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005500:	4299      	cmp	r1, r3
 8005502:	d002      	beq.n	800550a <__sflush_r+0x92>
 8005504:	4628      	mov	r0, r5
 8005506:	f000 f8fd 	bl	8005704 <_free_r>
 800550a:	2000      	movs	r0, #0
 800550c:	6360      	str	r0, [r4, #52]	; 0x34
 800550e:	e7c1      	b.n	8005494 <__sflush_r+0x1c>
 8005510:	6a21      	ldr	r1, [r4, #32]
 8005512:	2301      	movs	r3, #1
 8005514:	4628      	mov	r0, r5
 8005516:	47b0      	blx	r6
 8005518:	1c41      	adds	r1, r0, #1
 800551a:	d1c7      	bne.n	80054ac <__sflush_r+0x34>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0c4      	beq.n	80054ac <__sflush_r+0x34>
 8005522:	2b1d      	cmp	r3, #29
 8005524:	d001      	beq.n	800552a <__sflush_r+0xb2>
 8005526:	2b16      	cmp	r3, #22
 8005528:	d101      	bne.n	800552e <__sflush_r+0xb6>
 800552a:	602f      	str	r7, [r5, #0]
 800552c:	e7b1      	b.n	8005492 <__sflush_r+0x1a>
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005534:	81a3      	strh	r3, [r4, #12]
 8005536:	e7ad      	b.n	8005494 <__sflush_r+0x1c>
 8005538:	690f      	ldr	r7, [r1, #16]
 800553a:	2f00      	cmp	r7, #0
 800553c:	d0a9      	beq.n	8005492 <__sflush_r+0x1a>
 800553e:	0793      	lsls	r3, r2, #30
 8005540:	680e      	ldr	r6, [r1, #0]
 8005542:	bf08      	it	eq
 8005544:	694b      	ldreq	r3, [r1, #20]
 8005546:	600f      	str	r7, [r1, #0]
 8005548:	bf18      	it	ne
 800554a:	2300      	movne	r3, #0
 800554c:	eba6 0807 	sub.w	r8, r6, r7
 8005550:	608b      	str	r3, [r1, #8]
 8005552:	f1b8 0f00 	cmp.w	r8, #0
 8005556:	dd9c      	ble.n	8005492 <__sflush_r+0x1a>
 8005558:	6a21      	ldr	r1, [r4, #32]
 800555a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800555c:	4643      	mov	r3, r8
 800555e:	463a      	mov	r2, r7
 8005560:	4628      	mov	r0, r5
 8005562:	47b0      	blx	r6
 8005564:	2800      	cmp	r0, #0
 8005566:	dc06      	bgt.n	8005576 <__sflush_r+0xfe>
 8005568:	89a3      	ldrh	r3, [r4, #12]
 800556a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800556e:	81a3      	strh	r3, [r4, #12]
 8005570:	f04f 30ff 	mov.w	r0, #4294967295
 8005574:	e78e      	b.n	8005494 <__sflush_r+0x1c>
 8005576:	4407      	add	r7, r0
 8005578:	eba8 0800 	sub.w	r8, r8, r0
 800557c:	e7e9      	b.n	8005552 <__sflush_r+0xda>
 800557e:	bf00      	nop
 8005580:	20400001 	.word	0x20400001

08005584 <_fflush_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	690b      	ldr	r3, [r1, #16]
 8005588:	4605      	mov	r5, r0
 800558a:	460c      	mov	r4, r1
 800558c:	b913      	cbnz	r3, 8005594 <_fflush_r+0x10>
 800558e:	2500      	movs	r5, #0
 8005590:	4628      	mov	r0, r5
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	b118      	cbz	r0, 800559e <_fflush_r+0x1a>
 8005596:	6983      	ldr	r3, [r0, #24]
 8005598:	b90b      	cbnz	r3, 800559e <_fflush_r+0x1a>
 800559a:	f7ff fa15 	bl	80049c8 <__sinit>
 800559e:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <_fflush_r+0x6c>)
 80055a0:	429c      	cmp	r4, r3
 80055a2:	d11b      	bne.n	80055dc <_fflush_r+0x58>
 80055a4:	686c      	ldr	r4, [r5, #4]
 80055a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0ef      	beq.n	800558e <_fflush_r+0xa>
 80055ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055b0:	07d0      	lsls	r0, r2, #31
 80055b2:	d404      	bmi.n	80055be <_fflush_r+0x3a>
 80055b4:	0599      	lsls	r1, r3, #22
 80055b6:	d402      	bmi.n	80055be <_fflush_r+0x3a>
 80055b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ba:	f7ff faa3 	bl	8004b04 <__retarget_lock_acquire_recursive>
 80055be:	4628      	mov	r0, r5
 80055c0:	4621      	mov	r1, r4
 80055c2:	f7ff ff59 	bl	8005478 <__sflush_r>
 80055c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055c8:	07da      	lsls	r2, r3, #31
 80055ca:	4605      	mov	r5, r0
 80055cc:	d4e0      	bmi.n	8005590 <_fflush_r+0xc>
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	059b      	lsls	r3, r3, #22
 80055d2:	d4dd      	bmi.n	8005590 <_fflush_r+0xc>
 80055d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055d6:	f7ff fa96 	bl	8004b06 <__retarget_lock_release_recursive>
 80055da:	e7d9      	b.n	8005590 <_fflush_r+0xc>
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <_fflush_r+0x70>)
 80055de:	429c      	cmp	r4, r3
 80055e0:	d101      	bne.n	80055e6 <_fflush_r+0x62>
 80055e2:	68ac      	ldr	r4, [r5, #8]
 80055e4:	e7df      	b.n	80055a6 <_fflush_r+0x22>
 80055e6:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <_fflush_r+0x74>)
 80055e8:	429c      	cmp	r4, r3
 80055ea:	bf08      	it	eq
 80055ec:	68ec      	ldreq	r4, [r5, #12]
 80055ee:	e7da      	b.n	80055a6 <_fflush_r+0x22>
 80055f0:	08005874 	.word	0x08005874
 80055f4:	08005894 	.word	0x08005894
 80055f8:	08005854 	.word	0x08005854

080055fc <_lseek_r>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	4d07      	ldr	r5, [pc, #28]	; (800561c <_lseek_r+0x20>)
 8005600:	4604      	mov	r4, r0
 8005602:	4608      	mov	r0, r1
 8005604:	4611      	mov	r1, r2
 8005606:	2200      	movs	r2, #0
 8005608:	602a      	str	r2, [r5, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	f7fb fab2 	bl	8000b74 <_lseek>
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	d102      	bne.n	800561a <_lseek_r+0x1e>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	b103      	cbz	r3, 800561a <_lseek_r+0x1e>
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	bd38      	pop	{r3, r4, r5, pc}
 800561c:	200132cc 	.word	0x200132cc

08005620 <__swhatbuf_r>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	460e      	mov	r6, r1
 8005624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005628:	2900      	cmp	r1, #0
 800562a:	b096      	sub	sp, #88	; 0x58
 800562c:	4614      	mov	r4, r2
 800562e:	461d      	mov	r5, r3
 8005630:	da08      	bge.n	8005644 <__swhatbuf_r+0x24>
 8005632:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	602a      	str	r2, [r5, #0]
 800563a:	061a      	lsls	r2, r3, #24
 800563c:	d410      	bmi.n	8005660 <__swhatbuf_r+0x40>
 800563e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005642:	e00e      	b.n	8005662 <__swhatbuf_r+0x42>
 8005644:	466a      	mov	r2, sp
 8005646:	f000 f8bb 	bl	80057c0 <_fstat_r>
 800564a:	2800      	cmp	r0, #0
 800564c:	dbf1      	blt.n	8005632 <__swhatbuf_r+0x12>
 800564e:	9a01      	ldr	r2, [sp, #4]
 8005650:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005654:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005658:	425a      	negs	r2, r3
 800565a:	415a      	adcs	r2, r3
 800565c:	602a      	str	r2, [r5, #0]
 800565e:	e7ee      	b.n	800563e <__swhatbuf_r+0x1e>
 8005660:	2340      	movs	r3, #64	; 0x40
 8005662:	2000      	movs	r0, #0
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	b016      	add	sp, #88	; 0x58
 8005668:	bd70      	pop	{r4, r5, r6, pc}
	...

0800566c <__smakebuf_r>:
 800566c:	898b      	ldrh	r3, [r1, #12]
 800566e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005670:	079d      	lsls	r5, r3, #30
 8005672:	4606      	mov	r6, r0
 8005674:	460c      	mov	r4, r1
 8005676:	d507      	bpl.n	8005688 <__smakebuf_r+0x1c>
 8005678:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	6123      	str	r3, [r4, #16]
 8005680:	2301      	movs	r3, #1
 8005682:	6163      	str	r3, [r4, #20]
 8005684:	b002      	add	sp, #8
 8005686:	bd70      	pop	{r4, r5, r6, pc}
 8005688:	ab01      	add	r3, sp, #4
 800568a:	466a      	mov	r2, sp
 800568c:	f7ff ffc8 	bl	8005620 <__swhatbuf_r>
 8005690:	9900      	ldr	r1, [sp, #0]
 8005692:	4605      	mov	r5, r0
 8005694:	4630      	mov	r0, r6
 8005696:	f7ff fa57 	bl	8004b48 <_malloc_r>
 800569a:	b948      	cbnz	r0, 80056b0 <__smakebuf_r+0x44>
 800569c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056a0:	059a      	lsls	r2, r3, #22
 80056a2:	d4ef      	bmi.n	8005684 <__smakebuf_r+0x18>
 80056a4:	f023 0303 	bic.w	r3, r3, #3
 80056a8:	f043 0302 	orr.w	r3, r3, #2
 80056ac:	81a3      	strh	r3, [r4, #12]
 80056ae:	e7e3      	b.n	8005678 <__smakebuf_r+0xc>
 80056b0:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <__smakebuf_r+0x7c>)
 80056b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	6020      	str	r0, [r4, #0]
 80056b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056bc:	81a3      	strh	r3, [r4, #12]
 80056be:	9b00      	ldr	r3, [sp, #0]
 80056c0:	6163      	str	r3, [r4, #20]
 80056c2:	9b01      	ldr	r3, [sp, #4]
 80056c4:	6120      	str	r0, [r4, #16]
 80056c6:	b15b      	cbz	r3, 80056e0 <__smakebuf_r+0x74>
 80056c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056cc:	4630      	mov	r0, r6
 80056ce:	f000 f889 	bl	80057e4 <_isatty_r>
 80056d2:	b128      	cbz	r0, 80056e0 <__smakebuf_r+0x74>
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	f023 0303 	bic.w	r3, r3, #3
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	81a3      	strh	r3, [r4, #12]
 80056e0:	89a0      	ldrh	r0, [r4, #12]
 80056e2:	4305      	orrs	r5, r0
 80056e4:	81a5      	strh	r5, [r4, #12]
 80056e6:	e7cd      	b.n	8005684 <__smakebuf_r+0x18>
 80056e8:	08004961 	.word	0x08004961

080056ec <__malloc_lock>:
 80056ec:	4801      	ldr	r0, [pc, #4]	; (80056f4 <__malloc_lock+0x8>)
 80056ee:	f7ff ba09 	b.w	8004b04 <__retarget_lock_acquire_recursive>
 80056f2:	bf00      	nop
 80056f4:	200132c0 	.word	0x200132c0

080056f8 <__malloc_unlock>:
 80056f8:	4801      	ldr	r0, [pc, #4]	; (8005700 <__malloc_unlock+0x8>)
 80056fa:	f7ff ba04 	b.w	8004b06 <__retarget_lock_release_recursive>
 80056fe:	bf00      	nop
 8005700:	200132c0 	.word	0x200132c0

08005704 <_free_r>:
 8005704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005706:	2900      	cmp	r1, #0
 8005708:	d044      	beq.n	8005794 <_free_r+0x90>
 800570a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800570e:	9001      	str	r0, [sp, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f1a1 0404 	sub.w	r4, r1, #4
 8005716:	bfb8      	it	lt
 8005718:	18e4      	addlt	r4, r4, r3
 800571a:	f7ff ffe7 	bl	80056ec <__malloc_lock>
 800571e:	4a1e      	ldr	r2, [pc, #120]	; (8005798 <_free_r+0x94>)
 8005720:	9801      	ldr	r0, [sp, #4]
 8005722:	6813      	ldr	r3, [r2, #0]
 8005724:	b933      	cbnz	r3, 8005734 <_free_r+0x30>
 8005726:	6063      	str	r3, [r4, #4]
 8005728:	6014      	str	r4, [r2, #0]
 800572a:	b003      	add	sp, #12
 800572c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005730:	f7ff bfe2 	b.w	80056f8 <__malloc_unlock>
 8005734:	42a3      	cmp	r3, r4
 8005736:	d908      	bls.n	800574a <_free_r+0x46>
 8005738:	6825      	ldr	r5, [r4, #0]
 800573a:	1961      	adds	r1, r4, r5
 800573c:	428b      	cmp	r3, r1
 800573e:	bf01      	itttt	eq
 8005740:	6819      	ldreq	r1, [r3, #0]
 8005742:	685b      	ldreq	r3, [r3, #4]
 8005744:	1949      	addeq	r1, r1, r5
 8005746:	6021      	streq	r1, [r4, #0]
 8005748:	e7ed      	b.n	8005726 <_free_r+0x22>
 800574a:	461a      	mov	r2, r3
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	b10b      	cbz	r3, 8005754 <_free_r+0x50>
 8005750:	42a3      	cmp	r3, r4
 8005752:	d9fa      	bls.n	800574a <_free_r+0x46>
 8005754:	6811      	ldr	r1, [r2, #0]
 8005756:	1855      	adds	r5, r2, r1
 8005758:	42a5      	cmp	r5, r4
 800575a:	d10b      	bne.n	8005774 <_free_r+0x70>
 800575c:	6824      	ldr	r4, [r4, #0]
 800575e:	4421      	add	r1, r4
 8005760:	1854      	adds	r4, r2, r1
 8005762:	42a3      	cmp	r3, r4
 8005764:	6011      	str	r1, [r2, #0]
 8005766:	d1e0      	bne.n	800572a <_free_r+0x26>
 8005768:	681c      	ldr	r4, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	6053      	str	r3, [r2, #4]
 800576e:	4421      	add	r1, r4
 8005770:	6011      	str	r1, [r2, #0]
 8005772:	e7da      	b.n	800572a <_free_r+0x26>
 8005774:	d902      	bls.n	800577c <_free_r+0x78>
 8005776:	230c      	movs	r3, #12
 8005778:	6003      	str	r3, [r0, #0]
 800577a:	e7d6      	b.n	800572a <_free_r+0x26>
 800577c:	6825      	ldr	r5, [r4, #0]
 800577e:	1961      	adds	r1, r4, r5
 8005780:	428b      	cmp	r3, r1
 8005782:	bf04      	itt	eq
 8005784:	6819      	ldreq	r1, [r3, #0]
 8005786:	685b      	ldreq	r3, [r3, #4]
 8005788:	6063      	str	r3, [r4, #4]
 800578a:	bf04      	itt	eq
 800578c:	1949      	addeq	r1, r1, r5
 800578e:	6021      	streq	r1, [r4, #0]
 8005790:	6054      	str	r4, [r2, #4]
 8005792:	e7ca      	b.n	800572a <_free_r+0x26>
 8005794:	b003      	add	sp, #12
 8005796:	bd30      	pop	{r4, r5, pc}
 8005798:	200132c4 	.word	0x200132c4

0800579c <_read_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	4d07      	ldr	r5, [pc, #28]	; (80057bc <_read_r+0x20>)
 80057a0:	4604      	mov	r4, r0
 80057a2:	4608      	mov	r0, r1
 80057a4:	4611      	mov	r1, r2
 80057a6:	2200      	movs	r2, #0
 80057a8:	602a      	str	r2, [r5, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	f7fb f982 	bl	8000ab4 <_read>
 80057b0:	1c43      	adds	r3, r0, #1
 80057b2:	d102      	bne.n	80057ba <_read_r+0x1e>
 80057b4:	682b      	ldr	r3, [r5, #0]
 80057b6:	b103      	cbz	r3, 80057ba <_read_r+0x1e>
 80057b8:	6023      	str	r3, [r4, #0]
 80057ba:	bd38      	pop	{r3, r4, r5, pc}
 80057bc:	200132cc 	.word	0x200132cc

080057c0 <_fstat_r>:
 80057c0:	b538      	push	{r3, r4, r5, lr}
 80057c2:	4d07      	ldr	r5, [pc, #28]	; (80057e0 <_fstat_r+0x20>)
 80057c4:	2300      	movs	r3, #0
 80057c6:	4604      	mov	r4, r0
 80057c8:	4608      	mov	r0, r1
 80057ca:	4611      	mov	r1, r2
 80057cc:	602b      	str	r3, [r5, #0]
 80057ce:	f7fb f9b6 	bl	8000b3e <_fstat>
 80057d2:	1c43      	adds	r3, r0, #1
 80057d4:	d102      	bne.n	80057dc <_fstat_r+0x1c>
 80057d6:	682b      	ldr	r3, [r5, #0]
 80057d8:	b103      	cbz	r3, 80057dc <_fstat_r+0x1c>
 80057da:	6023      	str	r3, [r4, #0]
 80057dc:	bd38      	pop	{r3, r4, r5, pc}
 80057de:	bf00      	nop
 80057e0:	200132cc 	.word	0x200132cc

080057e4 <_isatty_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	4d06      	ldr	r5, [pc, #24]	; (8005800 <_isatty_r+0x1c>)
 80057e8:	2300      	movs	r3, #0
 80057ea:	4604      	mov	r4, r0
 80057ec:	4608      	mov	r0, r1
 80057ee:	602b      	str	r3, [r5, #0]
 80057f0:	f7fb f9b5 	bl	8000b5e <_isatty>
 80057f4:	1c43      	adds	r3, r0, #1
 80057f6:	d102      	bne.n	80057fe <_isatty_r+0x1a>
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	b103      	cbz	r3, 80057fe <_isatty_r+0x1a>
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	bd38      	pop	{r3, r4, r5, pc}
 8005800:	200132cc 	.word	0x200132cc

08005804 <_init>:
 8005804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005806:	bf00      	nop
 8005808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580a:	bc08      	pop	{r3}
 800580c:	469e      	mov	lr, r3
 800580e:	4770      	bx	lr

08005810 <_fini>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	bf00      	nop
 8005814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	469e      	mov	lr, r3
 800581a:	4770      	bx	lr
