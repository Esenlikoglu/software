
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00005758  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a00  08005a00  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a00  08005a00  00015a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a08  08005a08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a08  08005a08  00015a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a0c  08005a0c  00015a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000132dc  20000070  08005a80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001334c  08005a80  0002334c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d377  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002587  00000000  00000000  0002d417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0002f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  000306e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000236b2  00000000  00000000  000312d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe2b  00000000  00000000  0005498a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb49b  00000000  00000000  000647b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012fc50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d70  00000000  00000000  0012fca0  2**2
=======
  1 .text         00005e70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800619c  0800619c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061a4  080061a4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061a8  080061a8  000161a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080061ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000132c8  20000070  0800621c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013338  0800621c  00023338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddc8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002864  00000000  00000000  0002de68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  000306d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  000314a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ed3  00000000  00000000  00032108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011404  00000000  00000000  00055fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb7b7  00000000  00000000  000673df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132b96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004210  00000000  00000000  00132be8  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001b0:	080058d0 	.word	0x080058d0
=======
 80001b0:	08005fe8 	.word	0x08005fe8
>>>>>>> Stashed changes

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
<<<<<<< Updated upstream
 80001cc:	080058d0 	.word	0x080058d0
=======
 80001cc:	08005fe8 	.word	0x08005fe8
>>>>>>> Stashed changes

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

<<<<<<< Updated upstream
08000574 <API_In_DrawLine>:
////Output: custom error message followed by colon, space, and implementation-defined error message

char errnum;

void API_In_DrawLine(UI_t commando)
{
 8000574:	b084      	sub	sp, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	af00      	add	r7, sp, #0
 800057a:	f107 0c08 	add.w	ip, r7, #8
 800057e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(commando.x_1 == 0 ){
 8000582:	8abb      	ldrh	r3, [r7, #20]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d109      	bne.n	800059c <API_In_DrawLine+0x28>
		errno = ERANGE;
 8000588:	f004 f9d4 	bl	8004934 <__errno>
 800058c:	4603      	mov	r3, r0
 800058e:	2222      	movs	r2, #34	; 0x22
 8000590:	601a      	str	r2, [r3, #0]
		show_errno(errnum);
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <API_In_DrawLine+0x34>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f808 	bl	80005ac <show_errno>
	}

}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005a4:	b004      	add	sp, #16
 80005a6:	4770      	bx	lr
 80005a8:	2000008c 	.word	0x2000008c

080005ac <show_errno>:




void show_errno(const char *err_info)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

    err_info = "unknown error";
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <show_errno+0x54>)
 80005b6:	607b      	str	r3, [r7, #4]
    switch (errno) {
 80005b8:	f004 f9bc 	bl	8004934 <__errno>
 80005bc:	4603      	mov	r3, r0
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b8a      	cmp	r3, #138	; 0x8a
 80005c2:	d00c      	beq.n	80005de <show_errno+0x32>
 80005c4:	2b8a      	cmp	r3, #138	; 0x8a
 80005c6:	dc12      	bgt.n	80005ee <show_errno+0x42>
 80005c8:	2b22      	cmp	r3, #34	; 0x22
 80005ca:	d00b      	beq.n	80005e4 <show_errno+0x38>
 80005cc:	2b22      	cmp	r3, #34	; 0x22
 80005ce:	dc0e      	bgt.n	80005ee <show_errno+0x42>
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00a      	beq.n	80005ea <show_errno+0x3e>
 80005d4:	2b21      	cmp	r3, #33	; 0x21
 80005d6:	d10a      	bne.n	80005ee <show_errno+0x42>
    case EDOM:
        err_info = "domain error";
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <show_errno+0x58>)
 80005da:	607b      	str	r3, [r7, #4]
        break;
 80005dc:	e007      	b.n	80005ee <show_errno+0x42>
    case EILSEQ:
        err_info = "illegal sequence";
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <show_errno+0x5c>)
 80005e0:	607b      	str	r3, [r7, #4]
        break;
 80005e2:	e004      	b.n	80005ee <show_errno+0x42>
    case ERANGE:
        err_info = "pole or range error";
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <show_errno+0x60>)
 80005e6:	607b      	str	r3, [r7, #4]
        break;
 80005e8:	e001      	b.n	80005ee <show_errno+0x42>
    case 0:
        err_info = "no error";
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <show_errno+0x64>)
 80005ec:	607b      	str	r3, [r7, #4]
    }
    printf("ERROR: %s \n" ,err_info);
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <show_errno+0x68>)
 80005f2:	f004 f9df 	bl	80049b4 <iprintf>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	080058e8 	.word	0x080058e8
 8000604:	080058f8 	.word	0x080058f8
 8000608:	08005908 	.word	0x08005908
 800060c:	0800591c 	.word	0x0800591c
 8000610:	08005930 	.word	0x08005930
 8000614:	0800593c 	.word	0x0800593c

08000618 <MX_DMA_Init>:
=======
08000574 <API_Getcommand>:
//--------------------------------------------------------------
//
//--------------------------------------------------------------

void API_Getcommand(void)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b09b      	sub	sp, #108	; 0x6c
 8000578:	af18      	add	r7, sp, #96	; 0x60
	int i;
	int commacounter;

	// Reset some stuff
	input.byte_buffer_rx[0] = 0;
 800057a:	4b21      	ldr	r3, [pc, #132]	; (8000600 <API_Getcommand+0x8c>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
	input.char_counter = 0;
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <API_Getcommand+0x8c>)
 8000582:	2200      	movs	r2, #0
 8000584:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	input.command_execute_flag = FALSE;
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <API_Getcommand+0x8c>)
 800058a:	2200      	movs	r2, #0
 800058c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

	//Loop in the buffer
    for (i=0;i<LINE_BUFLEN;i++)
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	e00c      	b.n	80005b0 <API_Getcommand+0x3c>
    {
    	//Checks if there is a comma in the buffer
        if(input.line_rx_buffer[i] == ',')
 8000596:	4a1a      	ldr	r2, [pc, #104]	; (8000600 <API_Getcommand+0x8c>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	3301      	adds	r3, #1
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b2c      	cmp	r3, #44	; 0x2c
 80005a2:	d102      	bne.n	80005aa <API_Getcommand+0x36>
        {
        	//Counts the amount of comma's
        	commacounter++;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	3301      	adds	r3, #1
 80005a8:	603b      	str	r3, [r7, #0]
    for (i=0;i<LINE_BUFLEN;i++)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3301      	adds	r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005b6:	dbee      	blt.n	8000596 <API_Getcommand+0x22>
        }
    }
    API_Command_Data(commando,commacounter);
 80005b8:	4c12      	ldr	r4, [pc, #72]	; (8000604 <API_Getcommand+0x90>)
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	9316      	str	r3, [sp, #88]	; 0x58
 80005be:	4668      	mov	r0, sp
 80005c0:	f104 0310 	add.w	r3, r4, #16
 80005c4:	2258      	movs	r2, #88	; 0x58
 80005c6:	4619      	mov	r1, r3
 80005c8:	f004 fc76 	bl	8004eb8 <memcpy>
 80005cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005d0:	f000 f81a 	bl	8000608 <API_Command_Data>


	//clear the buffer
	for(i = 0; i < LINE_BUFLEN; i++) input.line_rx_buffer[i] = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	e008      	b.n	80005ec <API_Getcommand+0x78>
 80005da:	4a09      	ldr	r2, [pc, #36]	; (8000600 <API_Getcommand+0x8c>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4413      	add	r3, r2
 80005e0:	3301      	adds	r3, #1
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005f2:	dbf2      	blt.n	80005da <API_Getcommand+0x66>
	commacounter = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	603b      	str	r3, [r7, #0]


}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	200000f4 	.word	0x200000f4
 8000604:	2000008c 	.word	0x2000008c

08000608 <API_Command_Data>:
//--------------------------------------------------------------
// Switching the amount of comma's and jumps into a certain function
//--------------------------------------------------------------

void API_Command_Data(UI_t commando,int counter)
{
 8000608:	b084      	sub	sp, #16
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
 800060e:	f107 0c08 	add.w	ip, r7, #8
 8000612:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	switch (counter)
 8000616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000618:	3b01      	subs	r3, #1
 800061a:	2b06      	cmp	r3, #6
 800061c:	d828      	bhi.n	8000670 <API_Command_Data+0x68>
 800061e:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <API_Command_Data+0x1c>)
 8000620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000624:	08000641 	.word	0x08000641
 8000628:	08000671 	.word	0x08000671
 800062c:	08000647 	.word	0x08000647
 8000630:	08000671 	.word	0x08000671
 8000634:	08000671 	.word	0x08000671
 8000638:	0800064d 	.word	0x0800064d
 800063c:	0800066b 	.word	0x0800066b
	{
		case CLEARSCREEN_COMMAND:
			Seperate_Clearscreen();
 8000640:	f000 f96c 	bl	800091c <Seperate_Clearscreen>
			break;
 8000644:	e019      	b.n	800067a <API_Command_Data+0x72>
		case BITMAP_COMMAND:
			Seperate_Bitmap();
 8000646:	f000 f933 	bl	80008b0 <Seperate_Bitmap>
			break;
 800064a:	e016      	b.n	800067a <API_Command_Data+0x72>
		case LINE_RECT_COMMAND:
			//Since Line command and Rectangle command have the same amount of commas
			//Checks if the returned value is a line or rectangle
			if (API_ReLi_Sep() == LINE) Seperate_line();
 800064c:	f000 f81e 	bl	800068c <API_ReLi_Sep>
 8000650:	4603      	mov	r3, r0
 8000652:	2b01      	cmp	r3, #1
 8000654:	d101      	bne.n	800065a <API_Command_Data+0x52>
 8000656:	f000 f851 	bl	80006fc <Seperate_line>
		    if (API_ReLi_Sep() == RECTANGLE) Seperate_Rectangle();
 800065a:	f000 f817 	bl	800068c <API_ReLi_Sep>
 800065e:	4603      	mov	r3, r0
 8000660:	2b02      	cmp	r3, #2
 8000662:	d109      	bne.n	8000678 <API_Command_Data+0x70>
 8000664:	f000 f896 	bl	8000794 <Seperate_Rectangle>
			break;
 8000668:	e006      	b.n	8000678 <API_Command_Data+0x70>
		case TEXT_COMMAND:
			Seperate_Text();
 800066a:	f000 f8df 	bl	800082c <Seperate_Text>
			break;
 800066e:	e004      	b.n	800067a <API_Command_Data+0x72>
		default:
			printf("Ik ben niet in de cases gegaan");
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <API_Command_Data+0x80>)
 8000672:	f004 fc37 	bl	8004ee4 <iprintf>
			break;
 8000676:	e000      	b.n	800067a <API_Command_Data+0x72>
			break;
 8000678:	bf00      	nop
	}

}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000682:	b004      	add	sp, #16
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	08006000 	.word	0x08006000

0800068c <API_ReLi_Sep>:
//--------------------------------------------------------------
// Check if the command is a line or a rectangle
// Returns 1 if line, 2 if rectangle
//--------------------------------------------------------------
int API_ReLi_Sep(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
	int cmp;
	char comp_line[LINE_TEXT];

	for(int i = 0; i<LINE_TEXT;i++)
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	e00c      	b.n	80006b2 <API_ReLi_Sep+0x26>
	{
		comp_line[i] = input.line_rx_buffer[i];
 8000698:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <API_ReLi_Sep+0x64>)
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	4413      	add	r3, r2
 800069e:	3301      	adds	r3, #1
 80006a0:	7819      	ldrb	r1, [r3, #0]
 80006a2:	1d3a      	adds	r2, r7, #4
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	4413      	add	r3, r2
 80006a8:	460a      	mov	r2, r1
 80006aa:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<LINE_TEXT;i++)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	3301      	adds	r3, #1
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2b03      	cmp	r3, #3
 80006b6:	ddef      	ble.n	8000698 <API_ReLi_Sep+0xc>
	}

	//Compare the written command with "lijn" and "rech"
	if (strncmp ( comp_line, "lijn", sizeof(comp_line)) == 0) cmp = LINE;
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2204      	movs	r2, #4
 80006bc:	490d      	ldr	r1, [pc, #52]	; (80006f4 <API_ReLi_Sep+0x68>)
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 fc28 	bl	8004f14 <strncmp>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <API_ReLi_Sep+0x42>
 80006ca:	2301      	movs	r3, #1
 80006cc:	60fb      	str	r3, [r7, #12]
	if (strncmp ( comp_line, "rech", sizeof(comp_line))== 0) cmp = RECTANGLE;
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2204      	movs	r2, #4
 80006d2:	4909      	ldr	r1, [pc, #36]	; (80006f8 <API_ReLi_Sep+0x6c>)
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 fc1d 	bl	8004f14 <strncmp>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d101      	bne.n	80006e4 <API_ReLi_Sep+0x58>
 80006e0:	2302      	movs	r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]

	//Returns 1 if line, 2 if rectangle
	return cmp;
 80006e4:	68fb      	ldr	r3, [r7, #12]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000f4 	.word	0x200000f4
 80006f4:	08006020 	.word	0x08006020
 80006f8:	08006028 	.word	0x08006028

080006fc <Seperate_line>:
//--------------------------------------------------------------
// Seperate the buffer of a line-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------
void Seperate_line(void)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b0a3      	sub	sp, #140	; 0x8c
 8000700:	af16      	add	r7, sp, #88	; 0x58
	int i = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000706:	463b      	mov	r3, r7
 8000708:	2228      	movs	r2, #40	; 0x28
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f004 fbe1 	bl	8004ed4 <memset>

	// comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000712:	491d      	ldr	r1, [pc, #116]	; (8000788 <Seperate_line+0x8c>)
 8000714:	481d      	ldr	r0, [pc, #116]	; (800078c <Seperate_line+0x90>)
 8000716:	f004 fc11 	bl	8004f3c <strtok>
 800071a:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 800071c:	e00e      	b.n	800073c <Seperate_line+0x40>
	{
		aryvul[i]= token;
 800071e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	3330      	adds	r3, #48	; 0x30
 8000724:	443b      	add	r3, r7
 8000726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000728:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 800072c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072e:	3301      	adds	r3, #1
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000732:	4915      	ldr	r1, [pc, #84]	; (8000788 <Seperate_line+0x8c>)
 8000734:	2000      	movs	r0, #0
 8000736:	f004 fc01 	bl	8004f3c <strtok>
 800073a:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 800073c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1ed      	bne.n	800071e <Seperate_line+0x22>
 8000742:	687b      	ldr	r3, [r7, #4]
	}

	//Fills the struct
	 memcpy(&commando.x_1, &aryvul[ARRAY_FIRST_lOCATION] , sizeof(commando.x_1));
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <Seperate_line+0x94>)
 8000746:	60d3      	str	r3, [r2, #12]
 8000748:	68bb      	ldr	r3, [r7, #8]
	 memcpy(&commando.y_1, &aryvul[ARRAY_SECOND_lOCATION] , sizeof(commando.x_1));
 800074a:	4a11      	ldr	r2, [pc, #68]	; (8000790 <Seperate_line+0x94>)
 800074c:	6113      	str	r3, [r2, #16]
 800074e:	68fb      	ldr	r3, [r7, #12]
	 memcpy(&commando.x_2, &aryvul[ARRAY_THIRD_lOCATION] , sizeof(commando.x_1));
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <Seperate_line+0x94>)
 8000752:	6153      	str	r3, [r2, #20]
 8000754:	693b      	ldr	r3, [r7, #16]
	 memcpy(&commando.y_2, &aryvul[ARRAY_FOURTH_lOCATION] , sizeof(commando.x_1));
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <Seperate_line+0x94>)
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	697b      	ldr	r3, [r7, #20]
	 memcpy(&commando.kleur, &aryvul[ARRAY_FIFTH_lOCATION] , sizeof(commando.x_1));
 800075c:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <Seperate_line+0x94>)
 800075e:	61d3      	str	r3, [r2, #28]
 8000760:	69bb      	ldr	r3, [r7, #24]
	 memcpy(&commando.dikte, &aryvul[ARRAY_SIXTH_lOCATION] , sizeof(commando.x_1));
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <Seperate_line+0x94>)
 8000764:	6213      	str	r3, [r2, #32]

	 //draw_line
	  API_In_DrawLine(commando);
 8000766:	4c0a      	ldr	r4, [pc, #40]	; (8000790 <Seperate_line+0x94>)
 8000768:	4668      	mov	r0, sp
 800076a:	f104 0310 	add.w	r3, r4, #16
 800076e:	2258      	movs	r2, #88	; 0x58
 8000770:	4619      	mov	r1, r3
 8000772:	f004 fba1 	bl	8004eb8 <memcpy>
 8000776:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800077a:	f000 f8ff 	bl	800097c <API_In_DrawLine>


}
 800077e:	bf00      	nop
 8000780:	3734      	adds	r7, #52	; 0x34
 8000782:	46bd      	mov	sp, r7
 8000784:	bd90      	pop	{r4, r7, pc}
 8000786:	bf00      	nop
 8000788:	08006030 	.word	0x08006030
 800078c:	200000f5 	.word	0x200000f5
 8000790:	2000008c 	.word	0x2000008c

08000794 <Seperate_Rectangle>:
//--------------------------------------------------------------
// Seperate the buffer of a rectangle-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------
void Seperate_Rectangle(void)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b0a3      	sub	sp, #140	; 0x8c
 8000798:	af16      	add	r7, sp, #88	; 0x58
	int i = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2228      	movs	r2, #40	; 0x28
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f004 fb95 	bl	8004ed4 <memset>

	// comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 80007aa:	491d      	ldr	r1, [pc, #116]	; (8000820 <Seperate_Rectangle+0x8c>)
 80007ac:	481d      	ldr	r0, [pc, #116]	; (8000824 <Seperate_Rectangle+0x90>)
 80007ae:	f004 fbc5 	bl	8004f3c <strtok>
 80007b2:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 80007b4:	e00e      	b.n	80007d4 <Seperate_Rectangle+0x40>
	{
		aryvul[i]= token;
 80007b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	3330      	adds	r3, #48	; 0x30
 80007bc:	443b      	add	r3, r7
 80007be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007c0:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 80007c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c6:	3301      	adds	r3, #1
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 80007ca:	4915      	ldr	r1, [pc, #84]	; (8000820 <Seperate_Rectangle+0x8c>)
 80007cc:	2000      	movs	r0, #0
 80007ce:	f004 fbb5 	bl	8004f3c <strtok>
 80007d2:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 80007d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1ed      	bne.n	80007b6 <Seperate_Rectangle+0x22>
 80007da:	687b      	ldr	r3, [r7, #4]
	}

	//Fills the struct
	 memcpy(&commando.x_lup, &aryvul[ARRAY_FIRST_lOCATION] , sizeof(commando.x_1));
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <Seperate_Rectangle+0x94>)
 80007de:	6253      	str	r3, [r2, #36]	; 0x24
 80007e0:	68bb      	ldr	r3, [r7, #8]
	 memcpy(&commando.y_lup, &aryvul[ARRAY_SECOND_lOCATION] , sizeof(commando.x_1));
 80007e2:	4a11      	ldr	r2, [pc, #68]	; (8000828 <Seperate_Rectangle+0x94>)
 80007e4:	6293      	str	r3, [r2, #40]	; 0x28
 80007e6:	68fb      	ldr	r3, [r7, #12]
	 memcpy(&commando.breedte, &aryvul[ARRAY_THIRD_lOCATION] , sizeof(commando.x_1));
 80007e8:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <Seperate_Rectangle+0x94>)
 80007ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ec:	693b      	ldr	r3, [r7, #16]
	 memcpy(&commando.hoogte, &aryvul[ARRAY_FOURTH_lOCATION] , sizeof(commando.x_1));
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <Seperate_Rectangle+0x94>)
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	697b      	ldr	r3, [r7, #20]
	 memcpy(&commando.rect_kleur, &aryvul[ARRAY_FIFTH_lOCATION] , sizeof(commando.x_1));
 80007f4:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <Seperate_Rectangle+0x94>)
 80007f6:	6353      	str	r3, [r2, #52]	; 0x34
 80007f8:	69bb      	ldr	r3, [r7, #24]
	 memcpy(&commando.gevuld, &aryvul[ARRAY_SIXTH_lOCATION] , sizeof(commando.x_1));
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <Seperate_Rectangle+0x94>)
 80007fc:	6393      	str	r3, [r2, #56]	; 0x38

	 API_In_DrawRect(commando);
 80007fe:	4c0a      	ldr	r4, [pc, #40]	; (8000828 <Seperate_Rectangle+0x94>)
 8000800:	4668      	mov	r0, sp
 8000802:	f104 0310 	add.w	r3, r4, #16
 8000806:	2258      	movs	r2, #88	; 0x58
 8000808:	4619      	mov	r1, r3
 800080a:	f004 fb55 	bl	8004eb8 <memcpy>
 800080e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000812:	f000 f8d0 	bl	80009b6 <API_In_DrawRect>

}
 8000816:	bf00      	nop
 8000818:	3734      	adds	r7, #52	; 0x34
 800081a:	46bd      	mov	sp, r7
 800081c:	bd90      	pop	{r4, r7, pc}
 800081e:	bf00      	nop
 8000820:	08006030 	.word	0x08006030
 8000824:	200000f5 	.word	0x200000f5
 8000828:	2000008c 	.word	0x2000008c

0800082c <Seperate_Text>:
// Seperate the buffer of a text-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------

void Seperate_Text(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
	int i = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000836:	463b      	mov	r3, r7
 8000838:	2228      	movs	r2, #40	; 0x28
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f004 fb49 	bl	8004ed4 <memset>

	//Comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000842:	4918      	ldr	r1, [pc, #96]	; (80008a4 <Seperate_Text+0x78>)
 8000844:	4818      	ldr	r0, [pc, #96]	; (80008a8 <Seperate_Text+0x7c>)
 8000846:	f004 fb79 	bl	8004f3c <strtok>
 800084a:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 800084c:	e00e      	b.n	800086c <Seperate_Text+0x40>
	{
		aryvul[i]= token;
 800084e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	3330      	adds	r3, #48	; 0x30
 8000854:	443b      	add	r3, r7
 8000856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000858:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 800085c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085e:	3301      	adds	r3, #1
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000862:	4910      	ldr	r1, [pc, #64]	; (80008a4 <Seperate_Text+0x78>)
 8000864:	2000      	movs	r0, #0
 8000866:	f004 fb69 	bl	8004f3c <strtok>
 800086a:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 800086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1ed      	bne.n	800084e <Seperate_Text+0x22>
 8000872:	687b      	ldr	r3, [r7, #4]
	}

	//Fills the struct
	 memcpy(&commando.x, &aryvul[ARRAY_FIRST_lOCATION] , sizeof(commando.x_1));
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <Seperate_Text+0x80>)
 8000876:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000878:	68bb      	ldr	r3, [r7, #8]
	 memcpy(&commando.y, &aryvul[ARRAY_SECOND_lOCATION] , sizeof(commando.x_1));
 800087a:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <Seperate_Text+0x80>)
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	68fb      	ldr	r3, [r7, #12]
	 memcpy(&commando.text_kleur, &aryvul[ARRAY_THIRD_lOCATION] , sizeof(commando.x_1));
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <Seperate_Text+0x80>)
 8000882:	6453      	str	r3, [r2, #68]	; 0x44
 8000884:	693b      	ldr	r3, [r7, #16]
	 memcpy(&commando.tekst, &aryvul[ARRAY_FOURTH_lOCATION] , sizeof(commando.x_1));
 8000886:	4a09      	ldr	r2, [pc, #36]	; (80008ac <Seperate_Text+0x80>)
 8000888:	6493      	str	r3, [r2, #72]	; 0x48
 800088a:	697b      	ldr	r3, [r7, #20]
	 memcpy(&commando.fontnaam, &aryvul[ARRAY_FIFTH_lOCATION] , sizeof(commando.x_1));
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <Seperate_Text+0x80>)
 800088e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000890:	69bb      	ldr	r3, [r7, #24]
	 memcpy(&commando.fontgrootte, &aryvul[ARRAY_SIXTH_lOCATION] , sizeof(commando.x_1));
 8000892:	4a06      	ldr	r2, [pc, #24]	; (80008ac <Seperate_Text+0x80>)
 8000894:	6513      	str	r3, [r2, #80]	; 0x50
 8000896:	69fb      	ldr	r3, [r7, #28]
	 memcpy(&commando.fontstijl, &aryvul[ARRAY_SEVENTH_lOCATION] , sizeof(commando.x_1));
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <Seperate_Text+0x80>)
 800089a:	6553      	str	r3, [r2, #84]	; 0x54

}
 800089c:	bf00      	nop
 800089e:	3730      	adds	r7, #48	; 0x30
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	08006030 	.word	0x08006030
 80008a8:	200000f5 	.word	0x200000f5
 80008ac:	2000008c 	.word	0x2000008c

080008b0 <Seperate_Bitmap>:
// Seperate the buffer of a Bitmap-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------

void Seperate_Bitmap(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	; 0x30
 80008b4:	af00      	add	r7, sp, #0
	int i = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2228      	movs	r2, #40	; 0x28
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f004 fb07 	bl	8004ed4 <memset>

	//Comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 80008c6:	4912      	ldr	r1, [pc, #72]	; (8000910 <Seperate_Bitmap+0x60>)
 80008c8:	4812      	ldr	r0, [pc, #72]	; (8000914 <Seperate_Bitmap+0x64>)
 80008ca:	f004 fb37 	bl	8004f3c <strtok>
 80008ce:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 80008d0:	e00e      	b.n	80008f0 <Seperate_Bitmap+0x40>
	{
		aryvul[i]= token;
 80008d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	3330      	adds	r3, #48	; 0x30
 80008d8:	443b      	add	r3, r7
 80008da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008dc:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 80008e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e2:	3301      	adds	r3, #1
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 80008e6:	490a      	ldr	r1, [pc, #40]	; (8000910 <Seperate_Bitmap+0x60>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f004 fb27 	bl	8004f3c <strtok>
 80008ee:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 80008f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1ed      	bne.n	80008d2 <Seperate_Bitmap+0x22>
 80008f6:	687b      	ldr	r3, [r7, #4]
	}

	//Fills the struct
	 memcpy(&commando.nr, &aryvul[ARRAY_FIRST_lOCATION] , sizeof(commando.x_1));
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <Seperate_Bitmap+0x68>)
 80008fa:	6593      	str	r3, [r2, #88]	; 0x58
 80008fc:	68bb      	ldr	r3, [r7, #8]
	 memcpy(&commando.x_lup_bitmap, &aryvul[ARRAY_SECOND_lOCATION] , sizeof(commando.x_1));
 80008fe:	4a06      	ldr	r2, [pc, #24]	; (8000918 <Seperate_Bitmap+0x68>)
 8000900:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000902:	68fb      	ldr	r3, [r7, #12]
	 memcpy(&commando.y_lup_bitmap, &aryvul[ARRAY_THIRD_lOCATION] , sizeof(commando.x_1));
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <Seperate_Bitmap+0x68>)
 8000906:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000908:	bf00      	nop
 800090a:	3730      	adds	r7, #48	; 0x30
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	08006030 	.word	0x08006030
 8000914:	200000f5 	.word	0x200000f5
 8000918:	2000008c 	.word	0x2000008c

0800091c <Seperate_Clearscreen>:
// Seperate the buffer of a Clearscreen-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------

void Seperate_Clearscreen(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
	int i = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000926:	463b      	mov	r3, r7
 8000928:	2228      	movs	r2, #40	; 0x28
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f004 fad1 	bl	8004ed4 <memset>

	//Comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000932:	490f      	ldr	r1, [pc, #60]	; (8000970 <Seperate_Clearscreen+0x54>)
 8000934:	480f      	ldr	r0, [pc, #60]	; (8000974 <Seperate_Clearscreen+0x58>)
 8000936:	f004 fb01 	bl	8004f3c <strtok>
 800093a:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 800093c:	e00e      	b.n	800095c <Seperate_Clearscreen+0x40>
	{
		aryvul[i]= token;
 800093e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	3330      	adds	r3, #48	; 0x30
 8000944:	443b      	add	r3, r7
 8000946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000948:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 800094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094e:	3301      	adds	r3, #1
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000952:	4907      	ldr	r1, [pc, #28]	; (8000970 <Seperate_Clearscreen+0x54>)
 8000954:	2000      	movs	r0, #0
 8000956:	f004 faf1 	bl	8004f3c <strtok>
 800095a:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 800095c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1ed      	bne.n	800093e <Seperate_Clearscreen+0x22>
 8000962:	687b      	ldr	r3, [r7, #4]
	}

	//Fills the struct
	memcpy(&commando.color_screen, &aryvul[ARRAY_FIRST_lOCATION] , sizeof(commando.x_1));
 8000964:	4a04      	ldr	r2, [pc, #16]	; (8000978 <Seperate_Clearscreen+0x5c>)
 8000966:	6653      	str	r3, [r2, #100]	; 0x64
}
 8000968:	bf00      	nop
 800096a:	3730      	adds	r7, #48	; 0x30
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	08006030 	.word	0x08006030
 8000974:	200000f5 	.word	0x200000f5
 8000978:	2000008c 	.word	0x2000008c

0800097c <API_In_DrawLine>:
char errnum;



void API_In_DrawLine(UI_t api_data)
{
 800097c:	b084      	sub	sp, #16
 800097e:	b590      	push	{r4, r7, lr}
 8000980:	b083      	sub	sp, #12
 8000982:	af02      	add	r7, sp, #8
 8000984:	f107 0410 	add.w	r4, r7, #16
 8000988:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//plotLine(commando.x_1, commando.y_1, commando.x_2, commando.y_2, commando.kleur, commando.dikte);
	plotLine(api_data.x_1, api_data.y_1, api_data.x_2, api_data.y_2, api_data.kleur);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	b298      	uxth	r0, r3
 8000990:	6a3b      	ldr	r3, [r7, #32]
 8000992:	b299      	uxth	r1, r3
 8000994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000996:	b29a      	uxth	r2, r3
 8000998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800099a:	b29c      	uxth	r4, r3
 800099c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	4623      	mov	r3, r4
 80009a4:	f000 f844 	bl	8000a30 <plotLine>
//	if(commando.x_1 == 0 ){
//		errno = ERANGE;
//		show_errno(errnum);
//	}

}
 80009a8:	bf00      	nop
 80009aa:	3704      	adds	r7, #4
 80009ac:	46bd      	mov	sp, r7
 80009ae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009b2:	b004      	add	sp, #16
 80009b4:	4770      	bx	lr

080009b6 <API_In_DrawRect>:

void API_In_DrawRect(UI_t api_data)
{
 80009b6:	b084      	sub	sp, #16
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af02      	add	r7, sp, #8
 80009be:	f107 0410 	add.w	r4, r7, #16
 80009c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//plotLine(commando.x_1, commando.y_1, commando.x_2, commando.y_2, commando.kleur, commando.dikte);
	plotRect(api_data.x_1, api_data.y_1, api_data.x_2, api_data.y_2, api_data.kleur);
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	b298      	uxth	r0, r3
 80009ca:	6a3b      	ldr	r3, [r7, #32]
 80009cc:	b299      	uxth	r1, r3
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d4:	b29c      	uxth	r4, r3
 80009d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	4623      	mov	r3, r4
 80009de:	f000 f88d 	bl	8000afc <plotRect>
//	if(commando.x_1 == 0 ){
//		errno = ERANGE;
//		show_errno(errnum);
//	}

}
 80009e2:	bf00      	nop
 80009e4:	3704      	adds	r7, #4
 80009e6:	46bd      	mov	sp, r7
 80009e8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009ec:	b004      	add	sp, #16
 80009ee:	4770      	bx	lr

080009f0 <MX_DMA_Init>:
>>>>>>> Stashed changes

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
<<<<<<< Updated upstream
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_DMA_Init+0x3c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <MX_DMA_Init+0x3c>)
 8000628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_DMA_Init+0x3c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
=======
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_DMA_Init+0x3c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <MX_DMA_Init+0x3c>)
 8000a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_DMA_Init+0x3c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
>>>>>>> Stashed changes

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
<<<<<<< Updated upstream
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	2044      	movs	r0, #68	; 0x44
 8000640:	f000 ff37 	bl	80014b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000644:	2044      	movs	r0, #68	; 0x44
 8000646:	f000 ff50 	bl	80014ea <HAL_NVIC_EnableIRQ>

}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800

08000658 <MX_GPIO_Init>:
=======
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2044      	movs	r0, #68	; 0x44
 8000a18:	f000 ffe3 	bl	80019e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000a1c:	2044      	movs	r0, #68	; 0x44
 8000a1e:	f000 fffc 	bl	8001a1a <HAL_NVIC_EnableIRQ>

}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <plotLine>:
 */

#include "main.h"

void plotLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,uint8_t COLOR)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4604      	mov	r4, r0
 8000a38:	4608      	mov	r0, r1
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4623      	mov	r3, r4
 8000a40:	80fb      	strh	r3, [r7, #6]
 8000a42:	4603      	mov	r3, r0
 8000a44:	80bb      	strh	r3, [r7, #4]
 8000a46:	460b      	mov	r3, r1
 8000a48:	807b      	strh	r3, [r7, #2]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	803b      	strh	r3, [r7, #0]
     int dx =  abs(x1-x0), sx = x0<x1 ? 1 : -1;
 8000a4e:	887a      	ldrh	r2, [r7, #2]
 8000a50:	88fb      	ldrh	r3, [r7, #6]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	bfb8      	it	lt
 8000a58:	425b      	neglt	r3, r3
 8000a5a:	61bb      	str	r3, [r7, #24]
 8000a5c:	88fa      	ldrh	r2, [r7, #6]
 8000a5e:	887b      	ldrh	r3, [r7, #2]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d201      	bcs.n	8000a68 <plotLine+0x38>
 8000a64:	2301      	movs	r3, #1
 8000a66:	e001      	b.n	8000a6c <plotLine+0x3c>
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	617b      	str	r3, [r7, #20]
     int dy = -abs(y1-y0), sy = y0<y1 ? 1 : -1;
 8000a6e:	883a      	ldrh	r2, [r7, #0]
 8000a70:	88bb      	ldrh	r3, [r7, #4]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	bfb8      	it	lt
 8000a78:	425b      	neglt	r3, r3
 8000a7a:	425b      	negs	r3, r3
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	88ba      	ldrh	r2, [r7, #4]
 8000a80:	883b      	ldrh	r3, [r7, #0]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d201      	bcs.n	8000a8a <plotLine+0x5a>
 8000a86:	2301      	movs	r3, #1
 8000a88:	e001      	b.n	8000a8e <plotLine+0x5e>
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	60fb      	str	r3, [r7, #12]
     int err = dx+dy, e2; /* error value e_xy */
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	4413      	add	r3, r2
 8000a96:	61fb      	str	r3, [r7, #28]

     for(;;){  /* loop */
    	 UB_VGA_SetPixel(x0,y0,COLOR);
 8000a98:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000a9c:	88b9      	ldrh	r1, [r7, #4]
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fe29 	bl	80016f8 <UB_VGA_SetPixel>
        if (x0==x1 && y0==y1) break;
 8000aa6:	88fa      	ldrh	r2, [r7, #6]
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d103      	bne.n	8000ab6 <plotLine+0x86>
 8000aae:	88ba      	ldrh	r2, [r7, #4]
 8000ab0:	883b      	ldrh	r3, [r7, #0]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d01d      	beq.n	8000af2 <plotLine+0xc2>
        e2 = 2*err;
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
        if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 8000abc:	68ba      	ldr	r2, [r7, #8]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	db08      	blt.n	8000ad6 <plotLine+0xa6>
 8000ac4:	69fa      	ldr	r2, [r7, #28]
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	4413      	add	r3, r2
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	80fb      	strh	r3, [r7, #6]
        if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	dcdc      	bgt.n	8000a98 <plotLine+0x68>
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	61fb      	str	r3, [r7, #28]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	88bb      	ldrh	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	80bb      	strh	r3, [r7, #4]
    	 UB_VGA_SetPixel(x0,y0,COLOR);
 8000af0:	e7d2      	b.n	8000a98 <plotLine+0x68>
        if (x0==x1 && y0==y1) break;
 8000af2:	bf00      	nop
    }
}
 8000af4:	bf00      	nop
 8000af6:	3724      	adds	r7, #36	; 0x24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd90      	pop	{r4, r7, pc}

08000afc <plotRect>:


void plotRect(uint16_t xp,uint16_t yp,uint16_t width,uint16_t length, uint8_t COLOR)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	4604      	mov	r4, r0
 8000b04:	4608      	mov	r0, r1
 8000b06:	4611      	mov	r1, r2
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4623      	mov	r3, r4
 8000b0c:	80fb      	strh	r3, [r7, #6]
 8000b0e:	4603      	mov	r3, r0
 8000b10:	80bb      	strh	r3, [r7, #4]
 8000b12:	460b      	mov	r3, r1
 8000b14:	807b      	strh	r3, [r7, #2]
 8000b16:	4613      	mov	r3, r2
 8000b18:	803b      	strh	r3, [r7, #0]
	plotLine(xp,yp,xp,yp+length,COLOR);
 8000b1a:	88ba      	ldrh	r2, [r7, #4]
 8000b1c:	883b      	ldrh	r3, [r7, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	b29c      	uxth	r4, r3
 8000b22:	88fa      	ldrh	r2, [r7, #6]
 8000b24:	88b9      	ldrh	r1, [r7, #4]
 8000b26:	88f8      	ldrh	r0, [r7, #6]
 8000b28:	7e3b      	ldrb	r3, [r7, #24]
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	4623      	mov	r3, r4
 8000b2e:	f7ff ff7f 	bl	8000a30 <plotLine>
	plotLine(xp,yp,xp+width,yp,COLOR);
 8000b32:	88fa      	ldrh	r2, [r7, #6]
 8000b34:	887b      	ldrh	r3, [r7, #2]
 8000b36:	4413      	add	r3, r2
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	88bc      	ldrh	r4, [r7, #4]
 8000b3c:	88b9      	ldrh	r1, [r7, #4]
 8000b3e:	88f8      	ldrh	r0, [r7, #6]
 8000b40:	7e3b      	ldrb	r3, [r7, #24]
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	4623      	mov	r3, r4
 8000b46:	f7ff ff73 	bl	8000a30 <plotLine>
	plotLine(xp+width,yp+length,xp+width,yp,COLOR);
 8000b4a:	88fa      	ldrh	r2, [r7, #6]
 8000b4c:	887b      	ldrh	r3, [r7, #2]
 8000b4e:	4413      	add	r3, r2
 8000b50:	b298      	uxth	r0, r3
 8000b52:	88ba      	ldrh	r2, [r7, #4]
 8000b54:	883b      	ldrh	r3, [r7, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	b299      	uxth	r1, r3
 8000b5a:	88fa      	ldrh	r2, [r7, #6]
 8000b5c:	887b      	ldrh	r3, [r7, #2]
 8000b5e:	4413      	add	r3, r2
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	88bc      	ldrh	r4, [r7, #4]
 8000b64:	7e3b      	ldrb	r3, [r7, #24]
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	4623      	mov	r3, r4
 8000b6a:	f7ff ff61 	bl	8000a30 <plotLine>
	plotLine(xp+width,yp+length,xp,yp+length,COLOR);
 8000b6e:	88fa      	ldrh	r2, [r7, #6]
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	4413      	add	r3, r2
 8000b74:	b298      	uxth	r0, r3
 8000b76:	88ba      	ldrh	r2, [r7, #4]
 8000b78:	883b      	ldrh	r3, [r7, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b299      	uxth	r1, r3
 8000b7e:	88ba      	ldrh	r2, [r7, #4]
 8000b80:	883b      	ldrh	r3, [r7, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	b29c      	uxth	r4, r3
 8000b86:	88fa      	ldrh	r2, [r7, #6]
 8000b88:	7e3b      	ldrb	r3, [r7, #24]
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	4623      	mov	r3, r4
 8000b8e:	f7ff ff4f 	bl	8000a30 <plotLine>

}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd90      	pop	{r4, r7, pc}
	...

08000b9c <MX_GPIO_Init>:
>>>>>>> Stashed changes
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b32      	ldr	r3, [pc, #200]	; (800073c <MX_GPIO_Init+0xe4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a31      	ldr	r2, [pc, #196]	; (800073c <MX_GPIO_Init+0xe4>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b2f      	ldr	r3, [pc, #188]	; (800073c <MX_GPIO_Init+0xe4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b2b      	ldr	r3, [pc, #172]	; (800073c <MX_GPIO_Init+0xe4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a2a      	ldr	r2, [pc, #168]	; (800073c <MX_GPIO_Init+0xe4>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b28      	ldr	r3, [pc, #160]	; (800073c <MX_GPIO_Init+0xe4>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b24      	ldr	r3, [pc, #144]	; (800073c <MX_GPIO_Init+0xe4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a23      	ldr	r2, [pc, #140]	; (800073c <MX_GPIO_Init+0xe4>)
 80006b0:	f043 0310 	orr.w	r3, r3, #16
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_GPIO_Init+0xe4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0310 	and.w	r3, r3, #16
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_GPIO_Init+0xe4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a1c      	ldr	r2, [pc, #112]	; (800073c <MX_GPIO_Init+0xe4>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_GPIO_Init+0xe4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80006e4:	4816      	ldr	r0, [pc, #88]	; (8000740 <MX_GPIO_Init+0xe8>)
 80006e6:	f001 fc49 	bl	8001f7c <HAL_GPIO_WritePin>
=======
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <MX_GPIO_Init+0xe4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <MX_GPIO_Init+0xe4>)
 8000bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <MX_GPIO_Init+0xe4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <MX_GPIO_Init+0xe4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a2a      	ldr	r2, [pc, #168]	; (8000c80 <MX_GPIO_Init+0xe4>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <MX_GPIO_Init+0xe4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <MX_GPIO_Init+0xe4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a23      	ldr	r2, [pc, #140]	; (8000c80 <MX_GPIO_Init+0xe4>)
 8000bf4:	f043 0310 	orr.w	r3, r3, #16
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <MX_GPIO_Init+0xe4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0310 	and.w	r3, r3, #16
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_GPIO_Init+0xe4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <MX_GPIO_Init+0xe4>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_GPIO_Init+0xe4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000c28:	4816      	ldr	r0, [pc, #88]	; (8000c84 <MX_GPIO_Init+0xe8>)
 8000c2a:	f001 fc3f 	bl	80024ac <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
<<<<<<< Updated upstream
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f0:	4814      	ldr	r0, [pc, #80]	; (8000744 <MX_GPIO_Init+0xec>)
 80006f2:	f001 fc43 	bl	8001f7c <HAL_GPIO_WritePin>
=======
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c34:	4814      	ldr	r0, [pc, #80]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000c36:	f001 fc39 	bl	80024ac <HAL_GPIO_WritePin>
>>>>>>> Stashed changes

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
<<<<<<< Updated upstream
 80006f6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80006fa:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000704:	2303      	movs	r3, #3
 8000706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	480c      	ldr	r0, [pc, #48]	; (8000740 <MX_GPIO_Init+0xe8>)
 8000710:	f001 fa98 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_GPIO_Init+0xec>)
 800072e:	f001 fa89 	bl	8001c44 <HAL_GPIO_Init>

}
 8000732:	bf00      	nop
 8000734:	3728      	adds	r7, #40	; 0x28
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40021000 	.word	0x40021000
 8000744:	40020400 	.word	0x40020400

08000748 <main>:
=======
 8000c3a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000c3e:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	480c      	ldr	r0, [pc, #48]	; (8000c84 <MX_GPIO_Init+0xe8>)
 8000c54:	f001 fa8e 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000c72:	f001 fa7f 	bl	8002174 <HAL_GPIO_Init>

}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40020400 	.word	0x40020400

08000c8c <main>:
>>>>>>> Stashed changes
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< Updated upstream
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b09d      	sub	sp, #116	; 0x74
 800074c:	af1a      	add	r7, sp, #104	; 0x68
=======
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 800074e:	f000 fd63 	bl	8001218 <HAL_Init>
=======
 8000c90:	f000 fd5a 	bl	8001748 <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 8000752:	f000 f863 	bl	800081c <SystemClock_Config>
=======
 8000c94:	f000 f834 	bl	8000d00 <SystemClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 8000756:	f7ff ff7f 	bl	8000658 <MX_GPIO_Init>
  MX_DMA_Init();
 800075a:	f7ff ff5d 	bl	8000618 <MX_DMA_Init>
  MX_TIM1_Init();
 800075e:	f000 fab1 	bl	8000cc4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000762:	f000 faff 	bl	8000d64 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000766:	f000 fc15 	bl	8000f94 <MX_USART2_UART_Init>
=======
 8000c98:	f7ff ff80 	bl	8000b9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c9c:	f7ff fea8 	bl	80009f0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000ca0:	f000 faa8 	bl	80011f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ca4:	f000 faf6 	bl	8001294 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ca8:	f000 fc0c 	bl	80014c4 <MX_USART2_UART_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN 2 */


  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800076a:	4b29      	ldr	r3, [pc, #164]	; (8000810 <main+0xc8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	68da      	ldr	r2, [r3, #12]
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <main+0xc8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f042 0220 	orr.w	r2, r2, #32
 8000778:	60da      	str	r2, [r3, #12]

  UB_VGA_Screen_Init(); // Init VGA-Screen
<<<<<<< Updated upstream
 800077a:	f000 fcaf 	bl	80010dc <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_RED);
 800077e:	20e0      	movs	r0, #224	; 0xe0
 8000780:	f000 fcfe 	bl	8001180 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 8000784:	220a      	movs	r2, #10
 8000786:	210a      	movs	r1, #10
 8000788:	200a      	movs	r0, #10
 800078a:	f000 fd1d 	bl	80011c8 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	2000      	movs	r0, #0
 8000794:	f000 fd18 	bl	80011c8 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	f240 103f 	movw	r0, #319	; 0x13f
 80007a0:	f000 fd12 	bl	80011c8 <UB_VGA_SetPixel>

  int i;

  for(i = 0; i < LINE_BUFLEN; i++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	e008      	b.n	80007bc <main+0x74>
	  input.line_rx_buffer[i] = 0;
 80007aa:	4a1a      	ldr	r2, [pc, #104]	; (8000814 <main+0xcc>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4413      	add	r3, r2
 80007b0:	3301      	adds	r3, #1
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3301      	adds	r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007c2:	dbf2      	blt.n	80007aa <main+0x62>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <main+0xcc>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <main+0xcc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <main+0xcc>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 80007da:	2201      	movs	r2, #1
 80007dc:	490d      	ldr	r1, [pc, #52]	; (8000814 <main+0xcc>)
 80007de:	480c      	ldr	r0, [pc, #48]	; (8000810 <main+0xc8>)
 80007e0:	f003 f8fa 	bl	80039d8 <HAL_UART_Receive_IT>


  while (1)
  {

	  if(input.command_execute_flag == TRUE)
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <main+0xcc>)
 80007e6:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80007ea:	2bff      	cmp	r3, #255	; 0xff
 80007ec:	d1fa      	bne.n	80007e4 <main+0x9c>
	  {
		  API_In_DrawLine(commando);
 80007ee:	4c0a      	ldr	r4, [pc, #40]	; (8000818 <main+0xd0>)
 80007f0:	4668      	mov	r0, sp
 80007f2:	f104 0310 	add.w	r3, r4, #16
 80007f6:	2268      	movs	r2, #104	; 0x68
 80007f8:	4619      	mov	r1, r3
 80007fa:	f004 f8c5 	bl	8004988 <memcpy>
 80007fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000802:	f7ff feb7 	bl	8000574 <API_In_DrawLine>
//		  printf("yes\n");
//		  colorTest = ~colorTest; // Toggle screen color
//		  UB_VGA_FillScreen(colorTest);
//
//		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 8000806:	4b03      	ldr	r3, [pc, #12]	; (8000814 <main+0xcc>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 800080e:	e7e9      	b.n	80007e4 <main+0x9c>
 8000810:	200005fc 	.word	0x200005fc
 8000814:	20000090 	.word	0x20000090
 8000818:	200004a0 	.word	0x200004a0

0800081c <SystemClock_Config>:
=======
 8000cac:	f000 fcae 	bl	800160c <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 fcfd 	bl	80016b0 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 8000cb6:	220a      	movs	r2, #10
 8000cb8:	210a      	movs	r1, #10
 8000cba:	200a      	movs	r0, #10
 8000cbc:	f000 fd1c 	bl	80016f8 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 fd17 	bl	80016f8 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	f240 103f 	movw	r0, #319	; 0x13f
 8000cd2:	f000 fd11 	bl	80016f8 <UB_VGA_SetPixel>

  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <main+0x6c>)
 8000cda:	4808      	ldr	r0, [pc, #32]	; (8000cfc <main+0x70>)
 8000cdc:	f003 f914 	bl	8003f08 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 if(input.command_execute_flag == TRUE)
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <main+0x6c>)
 8000ce2:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000ce6:	2bff      	cmp	r3, #255	; 0xff
 8000ce8:	d1fa      	bne.n	8000ce0 <main+0x54>
	  {
		 API_Getcommand();
 8000cea:	f7ff fc43 	bl	8000574 <API_Getcommand>

	  // When finished reset the flag
	     input.command_execute_flag = FALSE;
 8000cee:	4b02      	ldr	r3, [pc, #8]	; (8000cf8 <main+0x6c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	 if(input.command_execute_flag == TRUE)
 8000cf6:	e7f3      	b.n	8000ce0 <main+0x54>
 8000cf8:	200000f4 	.word	0x200000f4
 8000cfc:	200005e8 	.word	0x200005e8

08000d00 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	; 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2230      	movs	r2, #48	; 0x30
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f004 f8ba 	bl	80049a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
=======
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b094      	sub	sp, #80	; 0x50
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0320 	add.w	r3, r7, #32
 8000d0a:	2230      	movs	r2, #48	; 0x30
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f004 f8e0 	bl	8004ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <SystemClock_Config+0xcc>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	4a27      	ldr	r2, [pc, #156]	; (80008e8 <SystemClock_Config+0xcc>)
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084e:	6413      	str	r3, [r2, #64]	; 0x40
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <SystemClock_Config+0xcc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <SystemClock_Config+0xd0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a21      	ldr	r2, [pc, #132]	; (80008ec <SystemClock_Config+0xd0>)
 8000866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <SystemClock_Config+0xd0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]
=======
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <SystemClock_Config+0xcc>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	4a27      	ldr	r2, [pc, #156]	; (8000dcc <SystemClock_Config+0xcc>)
 8000d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d32:	6413      	str	r3, [r2, #64]	; 0x40
 8000d34:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <SystemClock_Config+0xcc>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <SystemClock_Config+0xd0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <SystemClock_Config+0xd0>)
 8000d4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <SystemClock_Config+0xd0>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
>>>>>>> Stashed changes
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< Updated upstream
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800088c:	2304      	movs	r3, #4
 800088e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000890:	23a8      	movs	r3, #168	; 0xa8
 8000892:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000894:	2302      	movs	r3, #2
 8000896:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fb85 	bl	8001fb0 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008ac:	f000 f832 	bl	8000914 <Error_Handler>
=======
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d66:	2302      	movs	r3, #2
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d70:	2304      	movs	r3, #4
 8000d72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d74:	23a8      	movs	r3, #168	; 0xa8
 8000d76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d80:	f107 0320 	add.w	r3, r7, #32
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 fbab 	bl	80024e0 <HAL_RCC_OscConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d90:	f000 f832 	bl	8000df8 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
 80008b0:	230f      	movs	r3, #15
 80008b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2105      	movs	r1, #5
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 fddc 	bl	800248c <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008da:	f000 f81b 	bl	8000914 <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3750      	adds	r7, #80	; 0x50
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <__io_putchar>:
=======
 8000d94:	230f      	movs	r3, #15
 8000d96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000da0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000da4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000daa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	2105      	movs	r1, #5
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 fe02 	bl	80029bc <HAL_RCC_ClockConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000dbe:	f000 f81b 	bl	8000df8 <Error_Handler>
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3750      	adds	r7, #80	; 0x50
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40007000 	.word	0x40007000

08000dd4 <__io_putchar>:
>>>>>>> Stashed changes
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
<<<<<<< Updated upstream
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 80008f8:	1d39      	adds	r1, r7, #4
 80008fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008fe:	2201      	movs	r2, #1
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <__io_putchar+0x20>)
 8000902:	f002 ffd0 	bl	80038a6 <HAL_UART_Transmit>
	return ch;												//Return the character
 8000906:	687b      	ldr	r3, [r7, #4]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200005fc 	.word	0x200005fc

08000914 <Error_Handler>:
=======
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000ddc:	1d39      	adds	r1, r7, #4
 8000dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000de2:	2201      	movs	r2, #1
 8000de4:	4803      	ldr	r0, [pc, #12]	; (8000df4 <__io_putchar+0x20>)
 8000de6:	f002 fff6 	bl	8003dd6 <HAL_UART_Transmit>
	return ch;												//Return the character
 8000dea:	687b      	ldr	r3, [r7, #4]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200005e8 	.word	0x200005e8

08000df8 <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
=======
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
<<<<<<< Updated upstream
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <HAL_MspInit>:
=======
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
=======
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <HAL_MspInit+0x4c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_MspInit+0x4c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
=======
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <NMI_Handler>:
=======
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800

08000e58 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
=======
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
<<<<<<< Updated upstream
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <HardFault_Handler>:
=======
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
=======
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:
=======
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
=======
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:
=======
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
=======
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:
=======
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
=======
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:
=======
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
=======
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:
=======
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
=======
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <PendSV_Handler>:
=======
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
=======
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:
=======
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
=======
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 80009c8:	f000 fc78 	bl	80012bc <HAL_IncTick>
=======
 8000eac:	f000 fc9e 	bl	80017ec <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <TIM2_IRQHandler>:
=======
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <TIM2_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< Updated upstream
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
=======
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< Updated upstream
 80009d4:	4828      	ldr	r0, [pc, #160]	; (8000a78 <TIM2_IRQHandler+0xa8>)
 80009d6:	f002 f8b5 	bl	8002b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 80009da:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <TIM2_IRQHandler+0xa8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f06f 0208 	mvn.w	r2, #8
 80009e2:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 80009e4:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <TIM2_IRQHandler+0xac>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <TIM2_IRQHandler+0xac>)
 80009ee:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <TIM2_IRQHandler+0xac>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80009f8:	d905      	bls.n	8000a06 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 80009fa:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <TIM2_IRQHandler+0xac>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000a00:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <TIM2_IRQHandler+0xb0>)
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <TIM2_IRQHandler+0xac>)
 8000a04:	605a      	str	r2, [r3, #4]
=======
 8000eb8:	4828      	ldr	r0, [pc, #160]	; (8000f5c <TIM2_IRQHandler+0xa8>)
 8000eba:	f002 f8db 	bl	8003074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <TIM2_IRQHandler+0xa8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f06f 0208 	mvn.w	r2, #8
 8000ec6:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000ec8:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <TIM2_IRQHandler+0xac>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <TIM2_IRQHandler+0xac>)
 8000ed2:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <TIM2_IRQHandler+0xac>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000edc:	d905      	bls.n	8000eea <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <TIM2_IRQHandler+0xac>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000ee4:	4a1f      	ldr	r2, [pc, #124]	; (8000f64 <TIM2_IRQHandler+0xb0>)
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <TIM2_IRQHandler+0xac>)
 8000ee8:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
<<<<<<< Updated upstream
 8000a06:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <TIM2_IRQHandler+0xac>)
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d802      	bhi.n	8000a14 <TIM2_IRQHandler+0x44>
 8000a0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a12:	e001      	b.n	8000a18 <TIM2_IRQHandler+0x48>
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	4a1a      	ldr	r2, [pc, #104]	; (8000a84 <TIM2_IRQHandler+0xb4>)
 8000a1a:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <TIM2_IRQHandler+0xac>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	2b23      	cmp	r3, #35	; 0x23
 8000a22:	d927      	bls.n	8000a74 <TIM2_IRQHandler+0xa4>
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <TIM2_IRQHandler+0xac>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	f240 2202 	movw	r2, #514	; 0x202
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d821      	bhi.n	8000a74 <TIM2_IRQHandler+0xa4>
=======
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <TIM2_IRQHandler+0xac>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d802      	bhi.n	8000ef8 <TIM2_IRQHandler+0x44>
 8000ef2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ef6:	e001      	b.n	8000efc <TIM2_IRQHandler+0x48>
 8000ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efc:	4a1a      	ldr	r2, [pc, #104]	; (8000f68 <TIM2_IRQHandler+0xb4>)
 8000efe:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <TIM2_IRQHandler+0xac>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	2b23      	cmp	r3, #35	; 0x23
 8000f06:	d927      	bls.n	8000f58 <TIM2_IRQHandler+0xa4>
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <TIM2_IRQHandler+0xac>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	f240 2202 	movw	r2, #514	; 0x202
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d821      	bhi.n	8000f58 <TIM2_IRQHandler+0xa4>
>>>>>>> Stashed changes
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
<<<<<<< Updated upstream
 8000a30:	4a15      	ldr	r2, [pc, #84]	; (8000a88 <TIM2_IRQHandler+0xb8>)
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <TIM2_IRQHandler+0xac>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000a38:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <TIM2_IRQHandler+0xb8>)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <TIM2_IRQHandler+0xac>)
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <TIM2_IRQHandler+0xbc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <TIM2_IRQHandler+0xbc>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <TIM2_IRQHandler+0xc0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <TIM2_IRQHandler+0xc0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f042 0201 	orr.w	r2, r2, #1
 8000a5a:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <TIM2_IRQHandler+0xac>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d005      	beq.n	8000a74 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <TIM2_IRQHandler+0xac>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000a70:	4a02      	ldr	r2, [pc, #8]	; (8000a7c <TIM2_IRQHandler+0xac>)
 8000a72:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000055c 	.word	0x2000055c
 8000a7c:	2001332c 	.word	0x2001332c
 8000a80:	2000063c 	.word	0x2000063c
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40026488 	.word	0x40026488
 8000a8c:	40010000 	.word	0x40010000
 8000a90:	2000059c 	.word	0x2000059c

08000a94 <USART2_IRQHandler>:
=======
 8000f14:	4a15      	ldr	r2, [pc, #84]	; (8000f6c <TIM2_IRQHandler+0xb8>)
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <TIM2_IRQHandler+0xac>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000f1c:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <TIM2_IRQHandler+0xb8>)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <TIM2_IRQHandler+0xac>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <TIM2_IRQHandler+0xbc>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a11      	ldr	r2, [pc, #68]	; (8000f70 <TIM2_IRQHandler+0xbc>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <TIM2_IRQHandler+0xc0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <TIM2_IRQHandler+0xc0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0201 	orr.w	r2, r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <TIM2_IRQHandler+0xac>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d005      	beq.n	8000f58 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <TIM2_IRQHandler+0xac>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000f54:	4a02      	ldr	r2, [pc, #8]	; (8000f60 <TIM2_IRQHandler+0xac>)
 8000f56:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000548 	.word	0x20000548
 8000f60:	20013318 	.word	0x20013318
 8000f64:	20000628 	.word	0x20000628
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40026488 	.word	0x40026488
 8000f70:	40010000 	.word	0x40010000
 8000f74:	20000588 	.word	0x20000588

08000f78 <USART2_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
=======
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
<<<<<<< Updated upstream
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <USART2_IRQHandler+0x70>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	71fb      	strb	r3, [r7, #7]

=======
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <USART2_IRQHandler+0x78>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes


//	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
<<<<<<< Updated upstream
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b0a      	cmp	r3, #10
 8000aa4:	d026      	beq.n	8000af4 <USART2_IRQHandler+0x60>
=======
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b0a      	cmp	r3, #10
 8000f88:	d026      	beq.n	8000fd8 <USART2_IRQHandler+0x60>
>>>>>>> Stashed changes
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
<<<<<<< Updated upstream
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b0d      	cmp	r3, #13
 8000aaa:	d002      	beq.n	8000ab2 <USART2_IRQHandler+0x1e>
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b2e      	cmp	r3, #46	; 0x2e
 8000ab0:	d10e      	bne.n	8000ad0 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <USART2_IRQHandler+0x74>)
 8000ab4:	22ff      	movs	r2, #255	; 0xff
 8000ab6:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <USART2_IRQHandler+0x74>)
 8000abc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000ac0:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <USART2_IRQHandler+0x74>)
 8000ac2:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <USART2_IRQHandler+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000ace:	e011      	b.n	8000af4 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
=======
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b0d      	cmp	r3, #13
 8000f8e:	d002      	beq.n	8000f96 <USART2_IRQHandler+0x1e>
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b2e      	cmp	r3, #46	; 0x2e
 8000f94:	d10e      	bne.n	8000fb4 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <USART2_IRQHandler+0x7c>)
 8000f98:	22ff      	movs	r2, #255	; 0xff
 8000f9a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <USART2_IRQHandler+0x7c>)
 8000fa0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000fa4:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <USART2_IRQHandler+0x7c>)
 8000fa6:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <USART2_IRQHandler+0x7c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000fb2:	e011      	b.n	8000fd8 <USART2_IRQHandler+0x60>

>>>>>>> Stashed changes
		}
		else
		{
			input.command_execute_flag = FALSE;
<<<<<<< Updated upstream
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <USART2_IRQHandler+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <USART2_IRQHandler+0x74>)
 8000ada:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <USART2_IRQHandler+0x74>)
 8000ae0:	4413      	add	r3, r2
 8000ae2:	79fa      	ldrb	r2, [r7, #7]
 8000ae4:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <USART2_IRQHandler+0x74>)
 8000ae8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000aec:	3301      	adds	r3, #1
 8000aee:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <USART2_IRQHandler+0x74>)
 8000af0:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
=======
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <USART2_IRQHandler+0x7c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <USART2_IRQHandler+0x7c>)
 8000fbe:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000fc2:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <USART2_IRQHandler+0x7c>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	79fa      	ldrb	r2, [r7, #7]
 8000fc8:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <USART2_IRQHandler+0x7c>)
 8000fcc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <USART2_IRQHandler+0x7c>)
 8000fd4:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
>>>>>>> Stashed changes
		}

	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< Updated upstream
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <USART2_IRQHandler+0x78>)
 8000af6:	f002 ffc5 	bl	8003a84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
//  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);

=======
 8000fd8:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <USART2_IRQHandler+0x80>)
 8000fda:	f002 ffeb 	bl	8003fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4904      	ldr	r1, [pc, #16]	; (8000ff4 <USART2_IRQHandler+0x7c>)
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <USART2_IRQHandler+0x80>)
 8000fe4:	f002 ff90 	bl	8003f08 <HAL_UART_Receive_IT>
>>>>>>> Stashed changes
  /* USER CODE END USART2_IRQn 1 */

}
<<<<<<< Updated upstream
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40004400 	.word	0x40004400
 8000b08:	20000090 	.word	0x20000090
 8000b0c:	200005fc 	.word	0x200005fc

08000b10 <DMA2_Stream5_IRQHandler>:
=======
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40004400 	.word	0x40004400
 8000ff4:	200000f4 	.word	0x200000f4
 8000ff8:	200005e8 	.word	0x200005e8

08000ffc <DMA2_Stream5_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
=======
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
<<<<<<< Updated upstream
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <DMA2_Stream5_IRQHandler+0x48>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	6a1a      	ldr	r2, [r3, #32]
 8000b1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8000b1e:	4013      	ands	r3, r2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10f      	bne.n	8000b44 <DMA2_Stream5_IRQHandler+0x34>
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <DMA2_Stream5_IRQHandler+0x48>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6a1a      	ldr	r2, [r3, #32]
 8000b2a:	f240 4344 	movw	r3, #1092	; 0x444
 8000b2e:	4013      	ands	r3, r2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d107      	bne.n	8000b44 <DMA2_Stream5_IRQHandler+0x34>
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <DMA2_Stream5_IRQHandler+0x48>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <DMA2_Stream5_IRQHandler+0x48>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f022 0201 	bic.w	r2, r2, #1
 8000b42:	601a      	str	r2, [r3, #0]
=======
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <DMA2_Stream5_IRQHandler+0x48>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6a1a      	ldr	r2, [r3, #32]
 8001006:	f241 1311 	movw	r3, #4369	; 0x1111
 800100a:	4013      	ands	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10f      	bne.n	8001030 <DMA2_Stream5_IRQHandler+0x34>
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <DMA2_Stream5_IRQHandler+0x48>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6a1a      	ldr	r2, [r3, #32]
 8001016:	f240 4344 	movw	r3, #1092	; 0x444
 800101a:	4013      	ands	r3, r2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d107      	bne.n	8001030 <DMA2_Stream5_IRQHandler+0x34>
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <DMA2_Stream5_IRQHandler+0x48>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <DMA2_Stream5_IRQHandler+0x48>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0201 	bic.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
<<<<<<< Updated upstream
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <DMA2_Stream5_IRQHandler+0x4c>)
 8000b46:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000b4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <DMA2_Stream5_IRQHandler+0x50>)
 8000b4e:	f000 fe0f 	bl	8001770 <HAL_DMA_IRQHandler>
=======
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <DMA2_Stream5_IRQHandler+0x4c>)
 8001032:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001036:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <DMA2_Stream5_IRQHandler+0x50>)
 800103a:	f000 fe31 	bl	8001ca0 <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
<<<<<<< Updated upstream
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000051c 	.word	0x2000051c
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	2000059c 	.word	0x2000059c

08000b64 <_read>:
=======
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000508 	.word	0x20000508
 8001048:	40021000 	.word	0x40021000
 800104c:	20000588 	.word	0x20000588

08001050 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	return 1;
 8001054:	2301      	movs	r3, #1
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_kill>:

int _kill(int pid, int sig)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800106a:	f003 fefb 	bl	8004e64 <__errno>
 800106e:	4603      	mov	r3, r0
 8001070:	2216      	movs	r2, #22
 8001072:	601a      	str	r2, [r3, #0]
	return -1;
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <_exit>:

void _exit (int status)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	_kill(status, -1);
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ffe7 	bl	8001060 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001092:	e7fe      	b.n	8001092 <_exit+0x12>

08001094 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< Updated upstream
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	e00a      	b.n	8000b8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b76:	f3af 8000 	nop.w
 8000b7a:	4601      	mov	r1, r0
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	60ba      	str	r2, [r7, #8]
 8000b82:	b2ca      	uxtb	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf0      	blt.n	8000b76 <_read+0x12>
	}

return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	e009      	b.n	8000bc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	60ba      	str	r2, [r7, #8]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fe99 	bl	80008f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dbf1      	blt.n	8000bb0 <_write+0x12>
	}
	return len;
 8000bcc:	687b      	ldr	r3, [r7, #4]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <_close>:

int _close(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_fstat>:
=======
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e00a      	b.n	80010bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010a6:	f3af 8000 	nop.w
 80010aa:	4601      	mov	r1, r0
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	60ba      	str	r2, [r7, #8]
 80010b2:	b2ca      	uxtb	r2, r1
 80010b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbf0      	blt.n	80010a6 <_read+0x12>
	}

return len;
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e009      	b.n	80010f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	60ba      	str	r2, [r7, #8]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fe73 	bl	8000dd4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbf1      	blt.n	80010e0 <_write+0x12>
	}
	return len;
 80010fc:	687b      	ldr	r3, [r7, #4]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_close>:

int _close(int file)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
	return -1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <_fstat>:
>>>>>>> Stashed changes


int _fstat(int file, struct stat *st)
{
<<<<<<< Updated upstream
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfe:	605a      	str	r2, [r3, #4]
	return 0;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <_isatty>:

int _isatty(int file)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
	return 1;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <_sbrk>:
=======
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112e:	605a      	str	r2, [r3, #4]
	return 0;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_isatty>:

int _isatty(int file)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	return 1;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
	return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <_sbrk>:
>>>>>>> Stashed changes
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
<<<<<<< Updated upstream
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
=======
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
<<<<<<< Updated upstream
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x50>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <_sbrk+0x16>
		heap_end = &end;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <_sbrk+0x50>)
 8000c52:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <_sbrk+0x54>)
 8000c54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <_sbrk+0x50>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <_sbrk+0x50>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4413      	add	r3, r2
 8000c64:	466a      	mov	r2, sp
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d907      	bls.n	8000c7a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c6a:	f003 fe63 	bl	8004934 <__errno>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	220c      	movs	r2, #12
 8000c72:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
 8000c78:	e006      	b.n	8000c88 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <_sbrk+0x50>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <_sbrk+0x50>)
 8000c84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c86:	68fb      	ldr	r3, [r7, #12]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000518 	.word	0x20000518
 8000c94:	20013350 	.word	0x20013350

08000c98 <SystemInit>:
=======
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <_sbrk+0x50>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_sbrk+0x16>
		heap_end = &end;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <_sbrk+0x50>)
 8001182:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <_sbrk+0x54>)
 8001184:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <_sbrk+0x50>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <_sbrk+0x50>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	466a      	mov	r2, sp
 8001196:	4293      	cmp	r3, r2
 8001198:	d907      	bls.n	80011aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800119a:	f003 fe63 	bl	8004e64 <__errno>
 800119e:	4603      	mov	r3, r0
 80011a0:	220c      	movs	r2, #12
 80011a2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	e006      	b.n	80011b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <_sbrk+0x50>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a03      	ldr	r2, [pc, #12]	; (80011c0 <_sbrk+0x50>)
 80011b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000504 	.word	0x20000504
 80011c4:	20013338 	.word	0x20013338

080011c8 <SystemInit>:
>>>>>>> Stashed changes
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <SystemInit+0x28>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <SystemInit+0x28>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <SystemInit+0x28>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d2:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <SystemInit+0x28>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
<<<<<<< Updated upstream
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SystemInit+0x28>)
 8000cae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cb2:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <MX_TIM1_Init>:
=======
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SystemInit+0x28>)
 80011de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011e2:	609a      	str	r2, [r3, #8]
#endif
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <MX_TIM1_Init>:
>>>>>>> Stashed changes
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
<<<<<<< Updated upstream
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000ce2:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <MX_TIM1_Init+0x9c>)
 8000ce4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000cf4:	220b      	movs	r2, #11
 8000cf6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d0a:	4814      	ldr	r0, [pc, #80]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000d0c:	f001 fdde 	bl	80028cc <HAL_TIM_Base_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000d16:	f7ff fdfd 	bl	8000914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	4619      	mov	r1, r3
 8000d26:	480d      	ldr	r0, [pc, #52]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000d28:	f002 f8da 	bl	8002ee0 <HAL_TIM_ConfigClockSource>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000d32:	f7ff fdef 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <MX_TIM1_Init+0x98>)
 8000d44:	f002 fcd2 	bl	80036ec <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000d4e:	f7ff fde1 	bl	8000914 <Error_Handler>
  }

}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000051c 	.word	0x2000051c
 8000d60:	40010000 	.word	0x40010000

08000d64 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6a:	f107 0320 	add.w	r3, r7, #32
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]
 8000d82:	615a      	str	r2, [r3, #20]
 8000d84:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <MX_TIM2_Init+0xcc>)
 8000d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000d8e:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <MX_TIM2_Init+0xcc>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <MX_TIM2_Init+0xcc>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000d9a:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <MX_TIM2_Init+0xcc>)
 8000d9c:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000da0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <MX_TIM2_Init+0xcc>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <MX_TIM2_Init+0xcc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dae:	4820      	ldr	r0, [pc, #128]	; (8000e30 <MX_TIM2_Init+0xcc>)
 8000db0:	f001 fddb 	bl	800296a <HAL_TIM_PWM_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000dba:	f7ff fdab 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4818      	ldr	r0, [pc, #96]	; (8000e30 <MX_TIM2_Init+0xcc>)
 8000dce:	f002 fc8d 	bl	80036ec <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000dd8:	f7ff fd9c 	bl	8000914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ddc:	2360      	movs	r3, #96	; 0x60
 8000dde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000de0:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000de4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000de6:	2302      	movs	r3, #2
 8000de8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2208      	movs	r2, #8
 8000df2:	4619      	mov	r1, r3
 8000df4:	480e      	ldr	r0, [pc, #56]	; (8000e30 <MX_TIM2_Init+0xcc>)
 8000df6:	f001 ffad 	bl	8002d54 <HAL_TIM_PWM_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e00:	f7ff fd88 	bl	8000914 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000e04:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	220c      	movs	r2, #12
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4807      	ldr	r0, [pc, #28]	; (8000e30 <MX_TIM2_Init+0xcc>)
 8000e12:	f001 ff9f 	bl	8002d54 <HAL_TIM_PWM_ConfigChannel>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000e1c:	f7ff fd7a 	bl	8000914 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000e20:	4803      	ldr	r0, [pc, #12]	; (8000e30 <MX_TIM2_Init+0xcc>)
 8000e22:	f000 f87f 	bl	8000f24 <HAL_TIM_MspPostInit>

}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000055c 	.word	0x2000055c

08000e34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <HAL_TIM_Base_MspInit+0x94>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d13c      	bne.n	8000ec0 <HAL_TIM_Base_MspInit+0x8c>
=======
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	463b      	mov	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <MX_TIM1_Init+0x98>)
 8001212:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <MX_TIM1_Init+0x9c>)
 8001214:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <MX_TIM1_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <MX_TIM1_Init+0x98>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_TIM1_Init+0x98>)
 8001224:	220b      	movs	r2, #11
 8001226:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_TIM1_Init+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_TIM1_Init+0x98>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_TIM1_Init+0x98>)
 8001236:	2200      	movs	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800123a:	4814      	ldr	r0, [pc, #80]	; (800128c <MX_TIM1_Init+0x98>)
 800123c:	f001 fdde 	bl	8002dfc <HAL_TIM_Base_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001246:	f7ff fdd7 	bl	8000df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4619      	mov	r1, r3
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <MX_TIM1_Init+0x98>)
 8001258:	f002 f8da 	bl	8003410 <HAL_TIM_ConfigClockSource>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001262:	f7ff fdc9 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	4619      	mov	r1, r3
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <MX_TIM1_Init+0x98>)
 8001274:	f002 fcd2 	bl	8003c1c <HAL_TIMEx_MasterConfigSynchronization>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800127e:	f7ff fdbb 	bl	8000df8 <Error_Handler>
  }

}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000508 	.word	0x20000508
 8001290:	40010000 	.word	0x40010000

08001294 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <MX_TIM2_Init+0xcc>)
 80012b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <MX_TIM2_Init+0xcc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <MX_TIM2_Init+0xcc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <MX_TIM2_Init+0xcc>)
 80012cc:	f640 226b 	movw	r2, #2667	; 0xa6b
 80012d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <MX_TIM2_Init+0xcc>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <MX_TIM2_Init+0xcc>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012de:	4820      	ldr	r0, [pc, #128]	; (8001360 <MX_TIM2_Init+0xcc>)
 80012e0:	f001 fddb 	bl	8002e9a <HAL_TIM_PWM_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012ea:	f7ff fd85 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	4619      	mov	r1, r3
 80012fc:	4818      	ldr	r0, [pc, #96]	; (8001360 <MX_TIM2_Init+0xcc>)
 80012fe:	f002 fc8d 	bl	8003c1c <HAL_TIMEx_MasterConfigSynchronization>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001308:	f7ff fd76 	bl	8000df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130c:	2360      	movs	r3, #96	; 0x60
 800130e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8001310:	f240 13bb 	movw	r3, #443	; 0x1bb
 8001314:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001316:	2302      	movs	r3, #2
 8001318:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2208      	movs	r2, #8
 8001322:	4619      	mov	r1, r3
 8001324:	480e      	ldr	r0, [pc, #56]	; (8001360 <MX_TIM2_Init+0xcc>)
 8001326:	f001 ffad 	bl	8003284 <HAL_TIM_PWM_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001330:	f7ff fd62 	bl	8000df8 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8001334:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	220c      	movs	r2, #12
 800133e:	4619      	mov	r1, r3
 8001340:	4807      	ldr	r0, [pc, #28]	; (8001360 <MX_TIM2_Init+0xcc>)
 8001342:	f001 ff9f 	bl	8003284 <HAL_TIM_PWM_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800134c:	f7ff fd54 	bl	8000df8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <MX_TIM2_Init+0xcc>)
 8001352:	f000 f87f 	bl	8001454 <HAL_TIM_MspPostInit>

}
 8001356:	bf00      	nop
 8001358:	3728      	adds	r7, #40	; 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000548 	.word	0x20000548

08001364 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a21      	ldr	r2, [pc, #132]	; (80013f8 <HAL_TIM_Base_MspInit+0x94>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d13c      	bne.n	80013f0 <HAL_TIM_Base_MspInit+0x8c>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< Updated upstream
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HAL_TIM_Base_MspInit+0x98>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <HAL_TIM_Base_MspInit+0x98>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_TIM_Base_MspInit+0x98>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
=======
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <HAL_TIM_Base_MspInit+0x98>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <HAL_TIM_Base_MspInit+0x98>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_TIM_Base_MspInit+0x98>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
<<<<<<< Updated upstream
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e64:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <HAL_TIM_Base_MspInit+0xa0>)
 8000e66:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e6a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000e6e:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e72:	2240      	movs	r2, #64	; 0x40
 8000e74:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e82:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e98:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e9c:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000ea4:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8000ea6:	f000 fb3b 	bl	8001520 <HAL_DMA_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000eb0:	f7ff fd30 	bl	8000914 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8000eb8:	621a      	str	r2, [r3, #32]
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6393      	str	r3, [r2, #56]	; 0x38
=======
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_TIM_Base_MspInit+0x9c>)
 8001394:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <HAL_TIM_Base_MspInit+0xa0>)
 8001396:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_TIM_Base_MspInit+0x9c>)
 800139a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800139e:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <HAL_TIM_Base_MspInit+0x9c>)
 80013a2:	2240      	movs	r2, #64	; 0x40
 80013a4:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_TIM_Base_MspInit+0x9c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <HAL_TIM_Base_MspInit+0x9c>)
 80013ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b2:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_TIM_Base_MspInit+0x9c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_TIM_Base_MspInit+0x9c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_TIM_Base_MspInit+0x9c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_TIM_Base_MspInit+0x9c>)
 80013c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013cc:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_TIM_Base_MspInit+0x9c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80013d4:	480a      	ldr	r0, [pc, #40]	; (8001400 <HAL_TIM_Base_MspInit+0x9c>)
 80013d6:	f000 fb3b 	bl	8001a50 <HAL_DMA_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 80013e0:	f7ff fd0a 	bl	8000df8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a06      	ldr	r2, [pc, #24]	; (8001400 <HAL_TIM_Base_MspInit+0x9c>)
 80013e8:	621a      	str	r2, [r3, #32]
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <HAL_TIM_Base_MspInit+0x9c>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6393      	str	r3, [r2, #56]	; 0x38
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40010000 	.word	0x40010000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	2000059c 	.word	0x2000059c
 8000ed4:	40026488 	.word	0x40026488

08000ed8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee8:	d115      	bne.n	8000f16 <HAL_TIM_PWM_MspInit+0x3e>
=======
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40010000 	.word	0x40010000
 80013fc:	40023800 	.word	0x40023800
 8001400:	20000588 	.word	0x20000588
 8001404:	40026488 	.word	0x40026488

08001408 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001418:	d115      	bne.n	8001446 <HAL_TIM_PWM_MspInit+0x3e>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< Updated upstream
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_TIM_PWM_MspInit+0x48>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <HAL_TIM_PWM_MspInit+0x48>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_TIM_PWM_MspInit+0x48>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	201c      	movs	r0, #28
 8000f0c:	f000 fad1 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f10:	201c      	movs	r0, #28
 8000f12:	f000 faea 	bl	80014ea <HAL_NVIC_EnableIRQ>
=======
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_TIM_PWM_MspInit+0x48>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <HAL_TIM_PWM_MspInit+0x48>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_TIM_PWM_MspInit+0x48>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	201c      	movs	r0, #28
 800143c:	f000 fad1 	bl	80019e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001440:	201c      	movs	r0, #28
 8001442:	f000 faea 	bl	8001a1a <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f44:	d11e      	bne.n	8000f84 <HAL_TIM_MspPostInit+0x60>
=======
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001474:	d11e      	bne.n	80014b4 <HAL_TIM_MspPostInit+0x60>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< Updated upstream
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_TIM_MspPostInit+0x68>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <HAL_TIM_MspPostInit+0x68>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <HAL_TIM_MspPostInit+0x68>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
=======
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_TIM_MspPostInit+0x68>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <HAL_TIM_MspPostInit+0x68>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_TIM_MspPostInit+0x68>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
<<<<<<< Updated upstream
 8000f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4804      	ldr	r0, [pc, #16]	; (8000f90 <HAL_TIM_MspPostInit+0x6c>)
 8000f80:	f000 fe60 	bl	8001c44 <HAL_GPIO_Init>
=======
 8001492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001496:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014a4:	2301      	movs	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4619      	mov	r1, r3
 80014ae:	4804      	ldr	r0, [pc, #16]	; (80014c0 <HAL_TIM_MspPostInit+0x6c>)
 80014b0:	f000 fe60 	bl	8002174 <HAL_GPIO_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
<<<<<<< Updated upstream
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020400 	.word	0x40020400

08000f94 <MX_USART2_UART_Init>:
=======
 80014b4:	bf00      	nop
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020400 	.word	0x40020400

080014c4 <MX_USART2_UART_Init>:
>>>>>>> Stashed changes
/* USART2 init function */



void MX_USART2_UART_Init(void)
{
<<<<<<< Updated upstream
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <MX_USART2_UART_Init+0x50>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fcc:	f002 fc1e 	bl	800380c <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fd6:	f7ff fc9d 	bl	8000914 <Error_Handler>
  }

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200005fc 	.word	0x200005fc
 8000fe4:	40004400 	.word	0x40004400

08000fe8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a1d      	ldr	r2, [pc, #116]	; (800107c <HAL_UART_MspInit+0x94>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d133      	bne.n	8001072 <HAL_UART_MspInit+0x8a>
=======
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_USART2_UART_Init+0x50>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014fc:	f002 fc1e 	bl	8003d3c <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001506:	f7ff fc77 	bl	8000df8 <Error_Handler>
  }

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200005e8 	.word	0x200005e8
 8001514:	40004400 	.word	0x40004400

08001518 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <HAL_UART_MspInit+0x94>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d133      	bne.n	80015a2 <HAL_UART_MspInit+0x8a>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< Updated upstream
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <HAL_UART_MspInit+0x98>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a1b      	ldr	r2, [pc, #108]	; (8001080 <HAL_UART_MspInit+0x98>)
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_UART_MspInit+0x98>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_UART_MspInit+0x98>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a14      	ldr	r2, [pc, #80]	; (8001080 <HAL_UART_MspInit+0x98>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_UART_MspInit+0x98>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
=======
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <HAL_UART_MspInit+0x98>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <HAL_UART_MspInit+0x98>)
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_UART_MspInit+0x98>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_UART_MspInit+0x98>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <HAL_UART_MspInit+0x98>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_UART_MspInit+0x98>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
<<<<<<< Updated upstream
 8001042:	230c      	movs	r3, #12
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001052:	2307      	movs	r3, #7
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <HAL_UART_MspInit+0x9c>)
 800105e:	f000 fdf1 	bl	8001c44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2026      	movs	r0, #38	; 0x26
 8001068:	f000 fa23 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800106c:	2026      	movs	r0, #38	; 0x26
 800106e:	f000 fa3c 	bl	80014ea <HAL_NVIC_EnableIRQ>
=======
 8001572:	230c      	movs	r3, #12
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001582:	2307      	movs	r3, #7
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4809      	ldr	r0, [pc, #36]	; (80015b4 <HAL_UART_MspInit+0x9c>)
 800158e:	f000 fdf1 	bl	8002174 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2026      	movs	r0, #38	; 0x26
 8001598:	f000 fa23 	bl	80019e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800159c:	2026      	movs	r0, #38	; 0x26
 800159e:	f000 fa3c 	bl	8001a1a <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	; 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40004400 	.word	0x40004400
 8001080:	40023800 	.word	0x40023800
 8001084:	40020000 	.word	0x40020000

08001088 <Reset_Handler>:
=======
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	; 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40004400 	.word	0x40004400
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020000 	.word	0x40020000

080015b8 <Reset_Handler>:
>>>>>>> Stashed changes

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
<<<<<<< Updated upstream
 8001088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800108c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800108e:	e003      	b.n	8001098 <LoopCopyDataInit>

08001090 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001092:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001094:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001096:	3104      	adds	r1, #4

08001098 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001098:	480b      	ldr	r0, [pc, #44]	; (80010c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800109c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800109e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010a0:	d3f6      	bcc.n	8001090 <CopyDataInit>
  ldr  r2, =_sbss
 80010a2:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010a4:	e002      	b.n	80010ac <LoopFillZerobss>

080010a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010a8:	f842 3b04 	str.w	r3, [r2], #4

080010ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010b0:	d3f9      	bcc.n	80010a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010b2:	f7ff fdf1 	bl	8000c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b6:	f003 fc43 	bl	8004940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ba:	f7ff fb45 	bl	8000748 <main>
  bx  lr    
 80010be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010c4:	08005a10 	.word	0x08005a10
  ldr  r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010cc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80010d0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80010d4:	2001334c 	.word	0x2001334c

080010d8 <ADC_IRQHandler>:
=======
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015be:	e003      	b.n	80015c8 <LoopCopyDataInit>

080015c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015c6:	3104      	adds	r1, #4

080015c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015d0:	d3f6      	bcc.n	80015c0 <CopyDataInit>
  ldr  r2, =_sbss
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015d4:	e002      	b.n	80015dc <LoopFillZerobss>

080015d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015d8:	f842 3b04 	str.w	r3, [r2], #4

080015dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015e0:	d3f9      	bcc.n	80015d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015e2:	f7ff fdf1 	bl	80011c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e6:	f003 fc43 	bl	8004e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ea:	f7ff fb4f 	bl	8000c8c <main>
  bx  lr    
 80015ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015f4:	080061ac 	.word	0x080061ac
  ldr  r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015fc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001600:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001604:	20013338 	.word	0x20013338

08001608 <ADC_IRQHandler>:
>>>>>>> Stashed changes
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< Updated upstream
 80010d8:	e7fe      	b.n	80010d8 <ADC_IRQHandler>
	...

080010dc <UB_VGA_Screen_Init>:
=======
 8001608:	e7fe      	b.n	8001608 <ADC_IRQHandler>
	...

0800160c <UB_VGA_Screen_Init>:
>>>>>>> Stashed changes
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
<<<<<<< Updated upstream
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <UB_VGA_Screen_Init+0x84>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 80010e6:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <UB_VGA_Screen_Init+0x84>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <UB_VGA_Screen_Init+0x84>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <UB_VGA_Screen_Init+0x88>)
 80010f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010f8:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 80010fa:	481b      	ldr	r0, [pc, #108]	; (8001168 <UB_VGA_Screen_Init+0x8c>)
 80010fc:	f001 fc11 	bl	8002922 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001100:	210c      	movs	r1, #12
 8001102:	4819      	ldr	r0, [pc, #100]	; (8001168 <UB_VGA_Screen_Init+0x8c>)
 8001104:	f001 fc5c 	bl	80029c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001108:	2108      	movs	r1, #8
 800110a:	4817      	ldr	r0, [pc, #92]	; (8001168 <UB_VGA_Screen_Init+0x8c>)
 800110c:	f001 fc96 	bl	8002a3c <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <UB_VGA_Screen_Init+0x90>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <UB_VGA_Screen_Init+0x90>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800111e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <UB_VGA_Screen_Init+0x90>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <UB_VGA_Screen_Init+0x90>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001130:	490f      	ldr	r1, [pc, #60]	; (8001170 <UB_VGA_Screen_Init+0x94>)
 8001132:	f240 1341 	movw	r3, #321	; 0x141
 8001136:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <UB_VGA_Screen_Init+0x98>)
 8001138:	480f      	ldr	r0, [pc, #60]	; (8001178 <UB_VGA_Screen_Init+0x9c>)
 800113a:	f000 fa9f 	bl	800167c <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 800113e:	480e      	ldr	r0, [pc, #56]	; (8001178 <UB_VGA_Screen_Init+0x9c>)
 8001140:	f000 f9ee 	bl	8001520 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <UB_VGA_Screen_Init+0x9c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <UB_VGA_Screen_Init+0x9c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0210 	orr.w	r2, r2, #16
 8001152:	601a      	str	r2, [r3, #0]
=======
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <UB_VGA_Screen_Init+0x84>)
 8001612:	2200      	movs	r2, #0
 8001614:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <UB_VGA_Screen_Init+0x84>)
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <UB_VGA_Screen_Init+0x84>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <UB_VGA_Screen_Init+0x88>)
 8001624:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001628:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 800162a:	481b      	ldr	r0, [pc, #108]	; (8001698 <UB_VGA_Screen_Init+0x8c>)
 800162c:	f001 fc11 	bl	8002e52 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001630:	210c      	movs	r1, #12
 8001632:	4819      	ldr	r0, [pc, #100]	; (8001698 <UB_VGA_Screen_Init+0x8c>)
 8001634:	f001 fc5c 	bl	8002ef0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001638:	2108      	movs	r1, #8
 800163a:	4817      	ldr	r0, [pc, #92]	; (8001698 <UB_VGA_Screen_Init+0x8c>)
 800163c:	f001 fc96 	bl	8002f6c <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <UB_VGA_Screen_Init+0x90>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <UB_VGA_Screen_Init+0x90>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800164e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <UB_VGA_Screen_Init+0x90>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <UB_VGA_Screen_Init+0x90>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001660:	490f      	ldr	r1, [pc, #60]	; (80016a0 <UB_VGA_Screen_Init+0x94>)
 8001662:	f240 1341 	movw	r3, #321	; 0x141
 8001666:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <UB_VGA_Screen_Init+0x98>)
 8001668:	480f      	ldr	r0, [pc, #60]	; (80016a8 <UB_VGA_Screen_Init+0x9c>)
 800166a:	f000 fa9f 	bl	8001bac <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 800166e:	480e      	ldr	r0, [pc, #56]	; (80016a8 <UB_VGA_Screen_Init+0x9c>)
 8001670:	f000 f9ee 	bl	8001a50 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <UB_VGA_Screen_Init+0x9c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <UB_VGA_Screen_Init+0x9c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0210 	orr.w	r2, r2, #16
 8001682:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
<<<<<<< Updated upstream
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <UB_VGA_Screen_Init+0xa0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a01      	ldr	r2, [pc, #4]	; (8001160 <UB_VGA_Screen_Init+0x84>)
 800115a:	6093      	str	r3, [r2, #8]
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2001332c 	.word	0x2001332c
 8001164:	40020400 	.word	0x40020400
 8001168:	2000055c 	.word	0x2000055c
 800116c:	2000051c 	.word	0x2000051c
 8001170:	2000063c 	.word	0x2000063c
 8001174:	40021015 	.word	0x40021015
 8001178:	2000059c 	.word	0x2000059c
 800117c:	40026488 	.word	0x40026488

08001180 <UB_VGA_FillScreen>:
=======
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <UB_VGA_Screen_Init+0xa0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a01      	ldr	r2, [pc, #4]	; (8001690 <UB_VGA_Screen_Init+0x84>)
 800168a:	6093      	str	r3, [r2, #8]
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20013318 	.word	0x20013318
 8001694:	40020400 	.word	0x40020400
 8001698:	20000548 	.word	0x20000548
 800169c:	20000508 	.word	0x20000508
 80016a0:	20000628 	.word	0x20000628
 80016a4:	40021015 	.word	0x40021015
 80016a8:	20000588 	.word	0x20000588
 80016ac:	40026488 	.word	0x40026488

080016b0 <UB_VGA_FillScreen>:
>>>>>>> Stashed changes

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
<<<<<<< Updated upstream
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800118a:	2300      	movs	r3, #0
 800118c:	81bb      	strh	r3, [r7, #12]
 800118e:	e012      	b.n	80011b6 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001190:	2300      	movs	r3, #0
 8001192:	81fb      	strh	r3, [r7, #14]
 8001194:	e008      	b.n	80011a8 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001196:	79fa      	ldrb	r2, [r7, #7]
 8001198:	89b9      	ldrh	r1, [r7, #12]
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	4618      	mov	r0, r3
 800119e:	f000 f813 	bl	80011c8 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	3301      	adds	r3, #1
 80011a6:	81fb      	strh	r3, [r7, #14]
 80011a8:	89fb      	ldrh	r3, [r7, #14]
 80011aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011ae:	d3f2      	bcc.n	8001196 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80011b0:	89bb      	ldrh	r3, [r7, #12]
 80011b2:	3301      	adds	r3, #1
 80011b4:	81bb      	strh	r3, [r7, #12]
 80011b6:	89bb      	ldrh	r3, [r7, #12]
 80011b8:	2bef      	cmp	r3, #239	; 0xef
 80011ba:	d9e9      	bls.n	8001190 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <UB_VGA_SetPixel>:
=======
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	81bb      	strh	r3, [r7, #12]
 80016be:	e012      	b.n	80016e6 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	81fb      	strh	r3, [r7, #14]
 80016c4:	e008      	b.n	80016d8 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 80016c6:	79fa      	ldrb	r2, [r7, #7]
 80016c8:	89b9      	ldrh	r1, [r7, #12]
 80016ca:	89fb      	ldrh	r3, [r7, #14]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f813 	bl	80016f8 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80016d2:	89fb      	ldrh	r3, [r7, #14]
 80016d4:	3301      	adds	r3, #1
 80016d6:	81fb      	strh	r3, [r7, #14]
 80016d8:	89fb      	ldrh	r3, [r7, #14]
 80016da:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80016de:	d3f2      	bcc.n	80016c6 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80016e0:	89bb      	ldrh	r3, [r7, #12]
 80016e2:	3301      	adds	r3, #1
 80016e4:	81bb      	strh	r3, [r7, #12]
 80016e6:	89bb      	ldrh	r3, [r7, #12]
 80016e8:	2bef      	cmp	r3, #239	; 0xef
 80016ea:	d9e9      	bls.n	80016c0 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <UB_VGA_SetPixel>:
>>>>>>> Stashed changes
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
<<<<<<< Updated upstream
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
 80011d2:	460b      	mov	r3, r1
 80011d4:	80bb      	strh	r3, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011e0:	d301      	bcc.n	80011e6 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 80011e6:	88bb      	ldrh	r3, [r7, #4]
 80011e8:	2bef      	cmp	r3, #239	; 0xef
 80011ea:	d901      	bls.n	80011f0 <UB_VGA_SetPixel+0x28>
    yp = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 80011f0:	88ba      	ldrh	r2, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	019b      	lsls	r3, r3, #6
 80011fa:	441a      	add	r2, r3
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	4413      	add	r3, r2
 8001200:	4904      	ldr	r1, [pc, #16]	; (8001214 <UB_VGA_SetPixel+0x4c>)
 8001202:	78fa      	ldrb	r2, [r7, #3]
 8001204:	54ca      	strb	r2, [r1, r3]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	2000063c 	.word	0x2000063c

08001218 <HAL_Init>:
=======
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
 8001702:	460b      	mov	r3, r1
 8001704:	80bb      	strh	r3, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001710:	d301      	bcc.n	8001716 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	2bef      	cmp	r3, #239	; 0xef
 800171a:	d901      	bls.n	8001720 <UB_VGA_SetPixel+0x28>
    yp = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001720:	88ba      	ldrh	r2, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	019b      	lsls	r3, r3, #6
 800172a:	441a      	add	r2, r3
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	4413      	add	r3, r2
 8001730:	4904      	ldr	r1, [pc, #16]	; (8001744 <UB_VGA_SetPixel+0x4c>)
 8001732:	78fa      	ldrb	r2, [r7, #3]
 8001734:	54ca      	strb	r2, [r1, r3]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000628 	.word	0x20000628

08001748 <HAL_Init>:
>>>>>>> Stashed changes
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <HAL_Init+0x40>)
 8001222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001226:	6013      	str	r3, [r2, #0]
=======
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <HAL_Init+0x40>)
 8001752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001756:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< Updated upstream
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_Init+0x40>)
 800122e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001232:	6013      	str	r3, [r2, #0]
=======
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_Init+0x40>)
 800175e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001762:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< Updated upstream
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_Init+0x40>)
 800123a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123e:	6013      	str	r3, [r2, #0]
=======
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_Init+0x40>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 8001240:	2003      	movs	r0, #3
 8001242:	f000 f92b 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f808 	bl	800125c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800124c:	f7ff fb6a 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023c00 	.word	0x40023c00

0800125c <HAL_InitTick>:
=======
 8001770:	2003      	movs	r0, #3
 8001772:	f000 f92b 	bl	80019cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f808 	bl	800178c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800177c:	f7ff fb44 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00

0800178c <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_InitTick+0x54>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x58>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001272:	fbb3 f3f1 	udiv	r3, r3, r1
 8001276:	fbb2 f3f3 	udiv	r3, r2, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f943 	bl	8001506 <HAL_SYSTICK_Config>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e00e      	b.n	80012a8 <HAL_InitTick+0x4c>
=======
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_InitTick+0x54>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x58>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f943 	bl	8001a36 <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_InitTick+0x4c>
>>>>>>> Stashed changes
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< Updated upstream
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d80a      	bhi.n	80012a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f000 f90b 	bl	80014b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800129c:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <HAL_InitTick+0x5c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
=======
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d80a      	bhi.n	80017d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f000 f90b 	bl	80019e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_InitTick+0x5c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 80012a2:	2300      	movs	r3, #0
 80012a4:	e000      	b.n	80012a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000004 	.word	0x20000004

080012bc <HAL_IncTick>:
=======
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_IncTick+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x24>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_IncTick+0x24>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000008 	.word	0x20000008
 80012e0:	20013338 	.word	0x20013338

080012e4 <HAL_GetTick>:
=======
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008
 8001810:	20013324 	.word	0x20013324

08001814 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20013338 	.word	0x20013338

080012fc <__NVIC_SetPriorityGrouping>:
=======
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20013324 	.word	0x20013324

0800182c <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_GetPriorityGrouping>:
=======
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_EnableIRQ>:
=======
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <__NVIC_GetPriorityGrouping+0x18>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 0307 	and.w	r3, r3, #7
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db0b      	blt.n	800138a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	4907      	ldr	r1, [pc, #28]	; (8001398 <__NVIC_EnableIRQ+0x38>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2001      	movs	r0, #1
 8001382:	fa00 f202 	lsl.w	r2, r0, r2
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100

0800139c <__NVIC_SetPriority>:
=======
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db0b      	blt.n	80018ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	4907      	ldr	r1, [pc, #28]	; (80018c8 <__NVIC_EnableIRQ+0x38>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	2001      	movs	r0, #1
 80018b2:	fa00 f202 	lsl.w	r2, r0, r2
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100

080018cc <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	; (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	; (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
=======
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
=======
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <SysTick_Config>:
=======
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
         );
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f7ff ff8e 	bl	800139c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
=======
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001998:	d301      	bcc.n	800199e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199a:	2301      	movs	r3, #1
 800199c:	e00f      	b.n	80019be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <SysTick_Config+0x40>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a6:	210f      	movs	r1, #15
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f7ff ff8e 	bl	80018cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SysTick_Config+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SysTick_Config+0x40>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
=======
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff29 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
=======
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff29 	bl	800182c <__NVIC_SetPriorityGrouping>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< Updated upstream
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
=======
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 80014c4:	f7ff ff3e 	bl	8001344 <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff8e 	bl	80013f0 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5d 	bl	800139c <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_EnableIRQ>:
=======
 80019f4:	f7ff ff3e 	bl	8001874 <__NVIC_GetPriorityGrouping>
 80019f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7ff ff8e 	bl	8001920 <NVIC_EncodePriority>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff5d 	bl	80018cc <__NVIC_SetPriority>
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	71fb      	strb	r3, [r7, #7]
=======
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff31 	bl	8001360 <__NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
=======
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff31 	bl	8001890 <__NVIC_EnableIRQ>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffa2 	bl	8001458 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_DMA_Init>:
=======
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffa2 	bl	8001988 <SysTick_Config>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_DMA_Init>:
>>>>>>> Stashed changes
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff feda 	bl	80012e4 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]
=======
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a5c:	f7ff feda 	bl	8001814 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]
>>>>>>> Stashed changes
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< Updated upstream
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e099      	b.n	8001670 <HAL_DMA_Init+0x150>
=======
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e099      	b.n	8001ba0 <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
<<<<<<< Updated upstream
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2202      	movs	r2, #2
 8001548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800155c:	e00f      	b.n	800157e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800155e:	f7ff fec1 	bl	80012e4 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b05      	cmp	r3, #5
 800156a:	d908      	bls.n	800157e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2220      	movs	r2, #32
 8001570:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2203      	movs	r2, #3
 8001576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e078      	b.n	8001670 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1e8      	bne.n	800155e <HAL_DMA_Init+0x3e>
=======
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2202      	movs	r2, #2
 8001a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a8c:	e00f      	b.n	8001aae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a8e:	f7ff fec1 	bl	8001814 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	d908      	bls.n	8001aae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e078      	b.n	8001ba0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1e8      	bne.n	8001a8e <HAL_DMA_Init+0x3e>
>>>>>>> Stashed changes
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< Updated upstream
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	4b38      	ldr	r3, [pc, #224]	; (8001678 <HAL_DMA_Init+0x158>)
 8001598:	4013      	ands	r3, r2
 800159a:	617b      	str	r3, [r7, #20]
=======
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <HAL_DMA_Init+0x158>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< Updated upstream
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d107      	bne.n	80015e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	4313      	orrs	r3, r2
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]
=======
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d107      	bne.n	8001b18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	4313      	orrs	r3, r2
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< Updated upstream
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f023 0307 	bic.w	r3, r3, #7
 80015fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	4313      	orrs	r3, r2
 8001608:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	2b04      	cmp	r3, #4
 8001610:	d117      	bne.n	8001642 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4313      	orrs	r3, r2
 800161a:	617b      	str	r3, [r7, #20]
=======
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f023 0307 	bic.w	r3, r3, #7
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d117      	bne.n	8001b72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< Updated upstream
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00e      	beq.n	8001642 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fa91 	bl	8001b4c <DMA_CheckFifoParam>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2240      	movs	r2, #64	; 0x40
 8001634:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800163e:	2301      	movs	r3, #1
 8001640:	e016      	b.n	8001670 <HAL_DMA_Init+0x150>
=======
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00e      	beq.n	8001b72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 fa91 	bl	800207c <DMA_CheckFifoParam>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2240      	movs	r2, #64	; 0x40
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e016      	b.n	8001ba0 <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< Updated upstream
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	615a      	str	r2, [r3, #20]
=======
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< Updated upstream
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 fa48 	bl	8001ae0 <DMA_CalcBaseAndBitshift>
 8001650:	4603      	mov	r3, r0
 8001652:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001658:	223f      	movs	r2, #63	; 0x3f
 800165a:	409a      	lsls	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	f010803f 	.word	0xf010803f

0800167c <HAL_DMA_Start_IT>:
=======
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fa48 	bl	8002010 <DMA_CalcBaseAndBitshift>
 8001b80:	4603      	mov	r3, r0
 8001b82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b88:	223f      	movs	r2, #63	; 0x3f
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	f010803f 	.word	0xf010803f

08001bac <HAL_DMA_Start_IT>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
 8001688:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	613b      	str	r3, [r7, #16]
=======
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< Updated upstream
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800169a:	2b01      	cmp	r3, #1
 800169c:	d101      	bne.n	80016a2 <HAL_DMA_Start_IT+0x26>
 800169e:	2302      	movs	r3, #2
 80016a0:	e040      	b.n	8001724 <HAL_DMA_Start_IT+0xa8>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d12f      	bne.n	8001716 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2202      	movs	r2, #2
 80016ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 f9da 	bl	8001a84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d4:	223f      	movs	r2, #63	; 0x3f
 80016d6:	409a      	lsls	r2, r3
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0216 	orr.w	r2, r2, #22
 80016ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d007      	beq.n	8001704 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0208 	orr.w	r2, r2, #8
 8001702:	601a      	str	r2, [r3, #0]
=======
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_DMA_Start_IT+0x26>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e040      	b.n	8001c54 <HAL_DMA_Start_IT+0xa8>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d12f      	bne.n	8001c46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2202      	movs	r2, #2
 8001bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f9da 	bl	8001fb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c04:	223f      	movs	r2, #63	; 0x3f
 8001c06:	409a      	lsls	r2, r3
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0216 	orr.w	r2, r2, #22
 8001c1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d007      	beq.n	8001c34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0208 	orr.w	r2, r2, #8
 8001c32:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< Updated upstream
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e005      	b.n	8001722 <HAL_DMA_Start_IT+0xa6>
=======
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	e005      	b.n	8001c52 <HAL_DMA_Start_IT+0xa6>
>>>>>>> Stashed changes
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< Updated upstream
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800171e:	2302      	movs	r3, #2
 8001720:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001722:	7dfb      	ldrb	r3, [r7, #23]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_DMA_Abort_IT>:
=======
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_DMA_Abort_IT>:
>>>>>>> Stashed changes
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d004      	beq.n	800174a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00c      	b.n	8001764 <HAL_DMA_Abort_IT+0x38>
=======
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d004      	beq.n	8001c7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2280      	movs	r2, #128	; 0x80
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00c      	b.n	8001c94 <HAL_DMA_Abort_IT+0x38>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< Updated upstream
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2205      	movs	r2, #5
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_DMA_IRQHandler>:
=======
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0201 	bic.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_DMA_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800177c:	4b8e      	ldr	r3, [pc, #568]	; (80019b8 <HAL_DMA_IRQHandler+0x248>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a8e      	ldr	r2, [pc, #568]	; (80019bc <HAL_DMA_IRQHandler+0x24c>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	0a9b      	lsrs	r3, r3, #10
 8001788:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179a:	2208      	movs	r2, #8
 800179c:	409a      	lsls	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d01a      	beq.n	80017dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0204 	bic.w	r2, r2, #4
 80017c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c8:	2208      	movs	r2, #8
 80017ca:	409a      	lsls	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cac:	4b8e      	ldr	r3, [pc, #568]	; (8001ee8 <HAL_DMA_IRQHandler+0x248>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a8e      	ldr	r2, [pc, #568]	; (8001eec <HAL_DMA_IRQHandler+0x24c>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	0a9b      	lsrs	r3, r3, #10
 8001cb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cca:	2208      	movs	r2, #8
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01a      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0204 	bic.w	r2, r2, #4
 8001cf2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	2201      	movs	r2, #1
 80017e2:	409a      	lsls	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d012      	beq.n	8001812 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fe:	2201      	movs	r2, #1
 8001800:	409a      	lsls	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180a:	f043 0202 	orr.w	r2, r3, #2
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	2201      	movs	r2, #1
 8001d12:	409a      	lsls	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d012      	beq.n	8001d42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2e:	2201      	movs	r2, #1
 8001d30:	409a      	lsls	r2, r3
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	f043 0202 	orr.w	r2, r3, #2
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001816:	2204      	movs	r2, #4
 8001818:	409a      	lsls	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d012      	beq.n	8001848 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00b      	beq.n	8001848 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001834:	2204      	movs	r2, #4
 8001836:	409a      	lsls	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001840:	f043 0204 	orr.w	r2, r3, #4
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	2204      	movs	r2, #4
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d012      	beq.n	8001d78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00b      	beq.n	8001d78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	2204      	movs	r2, #4
 8001d66:	409a      	lsls	r2, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	f043 0204 	orr.w	r2, r3, #4
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	2210      	movs	r2, #16
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d043      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d03c      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186a:	2210      	movs	r2, #16
 800186c:	409a      	lsls	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d018      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d108      	bne.n	80018a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d024      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	4798      	blx	r3
 800189e:	e01f      	b.n	80018e0 <HAL_DMA_IRQHandler+0x170>
=======
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	2210      	movs	r2, #16
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d043      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d03c      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9a:	2210      	movs	r2, #16
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d018      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d108      	bne.n	8001dd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d024      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	4798      	blx	r3
 8001dce:	e01f      	b.n	8001e10 <HAL_DMA_IRQHandler+0x170>
>>>>>>> Stashed changes
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< Updated upstream
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01b      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	4798      	blx	r3
 80018b0:	e016      	b.n	80018e0 <HAL_DMA_IRQHandler+0x170>
=======
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01b      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	4798      	blx	r3
 8001de0:	e016      	b.n	8001e10 <HAL_DMA_IRQHandler+0x170>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< Updated upstream
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d107      	bne.n	80018d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0208 	bic.w	r2, r2, #8
 80018ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4798      	blx	r3
=======
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d107      	bne.n	8001e00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0208 	bic.w	r2, r2, #8
 8001dfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	4798      	blx	r3
>>>>>>> Stashed changes
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e4:	2220      	movs	r2, #32
 80018e6:	409a      	lsls	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 808f 	beq.w	8001a10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 8087 	beq.w	8001a10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	2220      	movs	r2, #32
 8001908:	409a      	lsls	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b05      	cmp	r3, #5
 8001918:	d136      	bne.n	8001988 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0216 	bic.w	r2, r2, #22
 8001928:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001938:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	2b00      	cmp	r3, #0
 8001940:	d103      	bne.n	800194a <HAL_DMA_IRQHandler+0x1da>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0208 	bic.w	r2, r2, #8
 8001958:	601a      	str	r2, [r3, #0]
=======
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	2220      	movs	r2, #32
 8001e16:	409a      	lsls	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 808f 	beq.w	8001f40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 8087 	beq.w	8001f40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	2220      	movs	r2, #32
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	d136      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0216 	bic.w	r2, r2, #22
 8001e58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d103      	bne.n	8001e7a <HAL_DMA_IRQHandler+0x1da>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0208 	bic.w	r2, r2, #8
 8001e88:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< Updated upstream
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195e:	223f      	movs	r2, #63	; 0x3f
 8001960:	409a      	lsls	r2, r3
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800197a:	2b00      	cmp	r3, #0
 800197c:	d07e      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	4798      	blx	r3
        }
        return;
 8001986:	e079      	b.n	8001a7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d01d      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10d      	bne.n	80019c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d031      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	4798      	blx	r3
 80019b4:	e02c      	b.n	8001a10 <HAL_DMA_IRQHandler+0x2a0>
 80019b6:	bf00      	nop
 80019b8:	20000000 	.word	0x20000000
 80019bc:	1b4e81b5 	.word	0x1b4e81b5
=======
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8e:	223f      	movs	r2, #63	; 0x3f
 8001e90:	409a      	lsls	r2, r3
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d07e      	beq.n	8001fac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	4798      	blx	r3
        }
        return;
 8001eb6:	e079      	b.n	8001fac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d01d      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d031      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	4798      	blx	r3
 8001ee4:	e02c      	b.n	8001f40 <HAL_DMA_IRQHandler+0x2a0>
 8001ee6:	bf00      	nop
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> Stashed changes
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< Updated upstream
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d023      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	4798      	blx	r3
 80019d0:	e01e      	b.n	8001a10 <HAL_DMA_IRQHandler+0x2a0>
=======
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d023      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	4798      	blx	r3
 8001f00:	e01e      	b.n	8001f40 <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> Stashed changes
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< Updated upstream
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10f      	bne.n	8001a00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0210 	bic.w	r2, r2, #16
 80019ee:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	4798      	blx	r3
=======
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10f      	bne.n	8001f30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0210 	bic.w	r2, r2, #16
 8001f1e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	4798      	blx	r3
>>>>>>> Stashed changes
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< Updated upstream
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d032      	beq.n	8001a7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d022      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2205      	movs	r2, #5
 8001a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
=======
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d032      	beq.n	8001fae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d022      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2205      	movs	r2, #5
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      do
      {
        if (++count > timeout)
<<<<<<< Updated upstream
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d307      	bcc.n	8001a58 <HAL_DMA_IRQHandler+0x2e8>
=======
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d307      	bcc.n	8001f88 <HAL_DMA_IRQHandler+0x2e8>
>>>>>>> Stashed changes
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< Updated upstream
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f2      	bne.n	8001a3c <HAL_DMA_IRQHandler+0x2cc>
 8001a56:	e000      	b.n	8001a5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a58:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	4798      	blx	r3
 8001a7a:	e000      	b.n	8001a7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a7c:	bf00      	nop
    }
  }
}
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <DMA_SetConfig>:
=======
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f2      	bne.n	8001f6c <HAL_DMA_IRQHandler+0x2cc>
 8001f86:	e000      	b.n	8001f8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f88:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	4798      	blx	r3
 8001faa:	e000      	b.n	8001fae <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fac:	bf00      	nop
    }
  }
}
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <DMA_SetConfig>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b40      	cmp	r3, #64	; 0x40
 8001ab0:	d108      	bne.n	8001ac4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
=======
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b40      	cmp	r3, #64	; 0x40
 8001fe0:	d108      	bne.n	8001ff4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< Updated upstream
 8001ac2:	e007      	b.n	8001ad4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	60da      	str	r2, [r3, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <DMA_CalcBaseAndBitshift>:
=======
 8001ff2:	e007      	b.n	8002004 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	60da      	str	r2, [r3, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <DMA_CalcBaseAndBitshift>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	3b10      	subs	r3, #16
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <DMA_CalcBaseAndBitshift+0x64>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	60fb      	str	r3, [r7, #12]
=======
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	3b10      	subs	r3, #16
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <DMA_CalcBaseAndBitshift+0x64>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< Updated upstream
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <DMA_CalcBaseAndBitshift+0x68>)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d909      	bls.n	8001b22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b16:	f023 0303 	bic.w	r3, r3, #3
 8001b1a:	1d1a      	adds	r2, r3, #4
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	659a      	str	r2, [r3, #88]	; 0x58
 8001b20:	e007      	b.n	8001b32 <DMA_CalcBaseAndBitshift+0x52>
=======
 800202a:	4a13      	ldr	r2, [pc, #76]	; (8002078 <DMA_CalcBaseAndBitshift+0x68>)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d909      	bls.n	8002052 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	1d1a      	adds	r2, r3, #4
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	659a      	str	r2, [r3, #88]	; 0x58
 8002050:	e007      	b.n	8002062 <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> Stashed changes
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< Updated upstream
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b2a:	f023 0303 	bic.w	r3, r3, #3
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	aaaaaaab 	.word	0xaaaaaaab
 8001b48:	08005960 	.word	0x08005960

08001b4c <DMA_CheckFifoParam>:
=======
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800205a:	f023 0303 	bic.w	r3, r3, #3
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	aaaaaaab 	.word	0xaaaaaaab
 8002078:	0800604c 	.word	0x0800604c

0800207c <DMA_CheckFifoParam>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d11f      	bne.n	8001ba6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d856      	bhi.n	8001c1a <DMA_CheckFifoParam+0xce>
 8001b6c:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <DMA_CheckFifoParam+0x28>)
 8001b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b72:	bf00      	nop
 8001b74:	08001b85 	.word	0x08001b85
 8001b78:	08001b97 	.word	0x08001b97
 8001b7c:	08001b85 	.word	0x08001b85
 8001b80:	08001c1b 	.word	0x08001c1b
=======
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d11f      	bne.n	80020d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d856      	bhi.n	800214a <DMA_CheckFifoParam+0xce>
 800209c:	a201      	add	r2, pc, #4	; (adr r2, 80020a4 <DMA_CheckFifoParam+0x28>)
 800209e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a2:	bf00      	nop
 80020a4:	080020b5 	.word	0x080020b5
 80020a8:	080020c7 	.word	0x080020c7
 80020ac:	080020b5 	.word	0x080020b5
 80020b0:	0800214b 	.word	0x0800214b
>>>>>>> Stashed changes
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< Updated upstream
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d046      	beq.n	8001c1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b94:	e043      	b.n	8001c1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b9e:	d140      	bne.n	8001c22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba4:	e03d      	b.n	8001c22 <DMA_CheckFifoParam+0xd6>
=======
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d046      	beq.n	800214e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020c4:	e043      	b.n	800214e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020ce:	d140      	bne.n	8002152 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d4:	e03d      	b.n	8002152 <DMA_CheckFifoParam+0xd6>
>>>>>>> Stashed changes
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< Updated upstream
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bae:	d121      	bne.n	8001bf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d837      	bhi.n	8001c26 <DMA_CheckFifoParam+0xda>
 8001bb6:	a201      	add	r2, pc, #4	; (adr r2, 8001bbc <DMA_CheckFifoParam+0x70>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001bcd 	.word	0x08001bcd
 8001bc0:	08001bd3 	.word	0x08001bd3
 8001bc4:	08001bcd 	.word	0x08001bcd
 8001bc8:	08001be5 	.word	0x08001be5
=======
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020de:	d121      	bne.n	8002124 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d837      	bhi.n	8002156 <DMA_CheckFifoParam+0xda>
 80020e6:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <DMA_CheckFifoParam+0x70>)
 80020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ec:	080020fd 	.word	0x080020fd
 80020f0:	08002103 	.word	0x08002103
 80020f4:	080020fd 	.word	0x080020fd
 80020f8:	08002115 	.word	0x08002115
>>>>>>> Stashed changes
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd0:	e030      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d025      	beq.n	8001c2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001be2:	e022      	b.n	8001c2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bec:	d11f      	bne.n	8001c2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bf2:	e01c      	b.n	8001c2e <DMA_CheckFifoParam+0xe2>
=======
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002100:	e030      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d025      	beq.n	800215a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002112:	e022      	b.n	800215a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800211c:	d11f      	bne.n	800215e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002122:	e01c      	b.n	800215e <DMA_CheckFifoParam+0xe2>
>>>>>>> Stashed changes
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< Updated upstream
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d903      	bls.n	8001c02 <DMA_CheckFifoParam+0xb6>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d003      	beq.n	8001c08 <DMA_CheckFifoParam+0xbc>
=======
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d903      	bls.n	8002132 <DMA_CheckFifoParam+0xb6>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d003      	beq.n	8002138 <DMA_CheckFifoParam+0xbc>
>>>>>>> Stashed changes
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< Updated upstream
 8001c00:	e018      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
      break;
 8001c06:	e015      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00e      	beq.n	8001c32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
      break;
 8001c18:	e00b      	b.n	8001c32 <DMA_CheckFifoParam+0xe6>
      break;
 8001c1a:	bf00      	nop
 8001c1c:	e00a      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c1e:	bf00      	nop
 8001c20:	e008      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c22:	bf00      	nop
 8001c24:	e006      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c26:	bf00      	nop
 8001c28:	e004      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c2a:	bf00      	nop
 8001c2c:	e002      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c2e:	bf00      	nop
 8001c30:	e000      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c32:	bf00      	nop
=======
 8002130:	e018      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
      break;
 8002136:	e015      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00e      	beq.n	8002162 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      break;
 8002148:	e00b      	b.n	8002162 <DMA_CheckFifoParam+0xe6>
      break;
 800214a:	bf00      	nop
 800214c:	e00a      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;
 800214e:	bf00      	nop
 8002150:	e008      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;
 8002152:	bf00      	nop
 8002154:	e006      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;
 8002156:	bf00      	nop
 8002158:	e004      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;
 800215a:	bf00      	nop
 800215c:	e002      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;   
 800215e:	bf00      	nop
 8002160:	e000      	b.n	8002164 <DMA_CheckFifoParam+0xe8>
      break;
 8002162:	bf00      	nop
>>>>>>> Stashed changes
    }
  } 
  
  return status; 
<<<<<<< Updated upstream
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop

08001c44 <HAL_GPIO_Init>:
=======
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop

08002174 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
=======
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< Updated upstream
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	e16b      	b.n	8001f38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c60:	2201      	movs	r2, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f040 815a 	bne.w	8001f32 <HAL_GPIO_Init+0x2ee>
=======
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	e16b      	b.n	8002468 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002190:	2201      	movs	r2, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	f040 815a 	bne.w	8002462 <HAL_GPIO_Init+0x2ee>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< Updated upstream
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d00b      	beq.n	8001c9e <HAL_GPIO_Init+0x5a>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d007      	beq.n	8001c9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c92:	2b11      	cmp	r3, #17
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b12      	cmp	r3, #18
 8001c9c:	d130      	bne.n	8001d00 <HAL_GPIO_Init+0xbc>
=======
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d00b      	beq.n	80021ce <HAL_GPIO_Init+0x5a>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d007      	beq.n	80021ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c2:	2b11      	cmp	r3, #17
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b12      	cmp	r3, #18
 80021cc:	d130      	bne.n	8002230 <HAL_GPIO_Init+0xbc>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< Updated upstream
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 0201 	and.w	r2, r3, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	605a      	str	r2, [r3, #4]
=======
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002204:	2201      	movs	r2, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 0201 	and.w	r2, r3, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0xfc>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b12      	cmp	r3, #18
 8001d3e:	d123      	bne.n	8001d88 <HAL_GPIO_Init+0x144>
=======
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0xfc>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b12      	cmp	r3, #18
 800226e:	d123      	bne.n	80022b8 <HAL_GPIO_Init+0x144>
>>>>>>> Stashed changes
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< Updated upstream
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	08da      	lsrs	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3208      	adds	r2, #8
 8001d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	69b9      	ldr	r1, [r7, #24]
 8001d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	08da      	lsrs	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3208      	adds	r2, #8
 8002278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	220f      	movs	r2, #15
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	08da      	lsrs	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3208      	adds	r2, #8
 80022b2:	69b9      	ldr	r1, [r7, #24]
 80022b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0203 	and.w	r2, r3, #3
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	601a      	str	r2, [r3, #0]
=======
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0203 	and.w	r2, r3, #3
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< Updated upstream
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80b4 	beq.w	8001f32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <HAL_GPIO_Init+0x30c>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4a5f      	ldr	r2, [pc, #380]	; (8001f50 <HAL_GPIO_Init+0x30c>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <HAL_GPIO_Init+0x30c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de6:	4a5b      	ldr	r2, [pc, #364]	; (8001f54 <HAL_GPIO_Init+0x310>)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_GPIO_Init+0x314>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d02b      	beq.n	8001e6a <HAL_GPIO_Init+0x226>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a51      	ldr	r2, [pc, #324]	; (8001f5c <HAL_GPIO_Init+0x318>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d025      	beq.n	8001e66 <HAL_GPIO_Init+0x222>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a50      	ldr	r2, [pc, #320]	; (8001f60 <HAL_GPIO_Init+0x31c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d01f      	beq.n	8001e62 <HAL_GPIO_Init+0x21e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4f      	ldr	r2, [pc, #316]	; (8001f64 <HAL_GPIO_Init+0x320>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d019      	beq.n	8001e5e <HAL_GPIO_Init+0x21a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4e      	ldr	r2, [pc, #312]	; (8001f68 <HAL_GPIO_Init+0x324>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_GPIO_Init+0x216>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4d      	ldr	r2, [pc, #308]	; (8001f6c <HAL_GPIO_Init+0x328>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00d      	beq.n	8001e56 <HAL_GPIO_Init+0x212>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4c      	ldr	r2, [pc, #304]	; (8001f70 <HAL_GPIO_Init+0x32c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d007      	beq.n	8001e52 <HAL_GPIO_Init+0x20e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4b      	ldr	r2, [pc, #300]	; (8001f74 <HAL_GPIO_Init+0x330>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_GPIO_Init+0x20a>
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	e00e      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e4e:	2308      	movs	r3, #8
 8001e50:	e00c      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e52:	2306      	movs	r3, #6
 8001e54:	e00a      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e56:	2305      	movs	r3, #5
 8001e58:	e008      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e004      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e002      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_GPIO_Init+0x228>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	f002 0203 	and.w	r2, r2, #3
 8001e72:	0092      	lsls	r2, r2, #2
 8001e74:	4093      	lsls	r3, r2
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e7c:	4935      	ldr	r1, [pc, #212]	; (8001f54 <HAL_GPIO_Init+0x310>)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eae:	4a32      	ldr	r2, [pc, #200]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eb4:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ed8:	4a27      	ldr	r2, [pc, #156]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ede:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f02:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f2c:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3301      	adds	r3, #1
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2b0f      	cmp	r3, #15
 8001f3c:	f67f ae90 	bls.w	8001c60 <HAL_GPIO_Init+0x1c>
=======
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80b4 	beq.w	8002462 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	4b60      	ldr	r3, [pc, #384]	; (8002480 <HAL_GPIO_Init+0x30c>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4a5f      	ldr	r2, [pc, #380]	; (8002480 <HAL_GPIO_Init+0x30c>)
 8002304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002308:	6453      	str	r3, [r2, #68]	; 0x44
 800230a:	4b5d      	ldr	r3, [pc, #372]	; (8002480 <HAL_GPIO_Init+0x30c>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002316:	4a5b      	ldr	r2, [pc, #364]	; (8002484 <HAL_GPIO_Init+0x310>)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	3302      	adds	r3, #2
 800231e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	220f      	movs	r2, #15
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a52      	ldr	r2, [pc, #328]	; (8002488 <HAL_GPIO_Init+0x314>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d02b      	beq.n	800239a <HAL_GPIO_Init+0x226>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a51      	ldr	r2, [pc, #324]	; (800248c <HAL_GPIO_Init+0x318>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d025      	beq.n	8002396 <HAL_GPIO_Init+0x222>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a50      	ldr	r2, [pc, #320]	; (8002490 <HAL_GPIO_Init+0x31c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d01f      	beq.n	8002392 <HAL_GPIO_Init+0x21e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4f      	ldr	r2, [pc, #316]	; (8002494 <HAL_GPIO_Init+0x320>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d019      	beq.n	800238e <HAL_GPIO_Init+0x21a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4e      	ldr	r2, [pc, #312]	; (8002498 <HAL_GPIO_Init+0x324>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_GPIO_Init+0x216>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4d      	ldr	r2, [pc, #308]	; (800249c <HAL_GPIO_Init+0x328>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00d      	beq.n	8002386 <HAL_GPIO_Init+0x212>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4c      	ldr	r2, [pc, #304]	; (80024a0 <HAL_GPIO_Init+0x32c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <HAL_GPIO_Init+0x20e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4b      	ldr	r2, [pc, #300]	; (80024a4 <HAL_GPIO_Init+0x330>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_GPIO_Init+0x20a>
 800237a:	2307      	movs	r3, #7
 800237c:	e00e      	b.n	800239c <HAL_GPIO_Init+0x228>
 800237e:	2308      	movs	r3, #8
 8002380:	e00c      	b.n	800239c <HAL_GPIO_Init+0x228>
 8002382:	2306      	movs	r3, #6
 8002384:	e00a      	b.n	800239c <HAL_GPIO_Init+0x228>
 8002386:	2305      	movs	r3, #5
 8002388:	e008      	b.n	800239c <HAL_GPIO_Init+0x228>
 800238a:	2304      	movs	r3, #4
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x228>
 800238e:	2303      	movs	r3, #3
 8002390:	e004      	b.n	800239c <HAL_GPIO_Init+0x228>
 8002392:	2302      	movs	r3, #2
 8002394:	e002      	b.n	800239c <HAL_GPIO_Init+0x228>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_GPIO_Init+0x228>
 800239a:	2300      	movs	r3, #0
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	f002 0203 	and.w	r2, r2, #3
 80023a2:	0092      	lsls	r2, r2, #2
 80023a4:	4093      	lsls	r3, r2
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ac:	4935      	ldr	r1, [pc, #212]	; (8002484 <HAL_GPIO_Init+0x310>)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <HAL_GPIO_Init+0x334>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023de:	4a32      	ldr	r2, [pc, #200]	; (80024a8 <HAL_GPIO_Init+0x334>)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <HAL_GPIO_Init+0x334>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002408:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <HAL_GPIO_Init+0x334>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800240e:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <HAL_GPIO_Init+0x334>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002432:	4a1d      	ldr	r2, [pc, #116]	; (80024a8 <HAL_GPIO_Init+0x334>)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_GPIO_Init+0x334>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800245c:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <HAL_GPIO_Init+0x334>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3301      	adds	r3, #1
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2b0f      	cmp	r3, #15
 800246c:	f67f ae90 	bls.w	8002190 <HAL_GPIO_Init+0x1c>
>>>>>>> Stashed changes
      }
    }
  }
}
<<<<<<< Updated upstream
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40013800 	.word	0x40013800
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	40020400 	.word	0x40020400
 8001f60:	40020800 	.word	0x40020800
 8001f64:	40020c00 	.word	0x40020c00
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40021400 	.word	0x40021400
 8001f70:	40021800 	.word	0x40021800
 8001f74:	40021c00 	.word	0x40021c00
 8001f78:	40013c00 	.word	0x40013c00

08001f7c <HAL_GPIO_WritePin>:
=======
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3724      	adds	r7, #36	; 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	40013800 	.word	0x40013800
 8002488:	40020000 	.word	0x40020000
 800248c:	40020400 	.word	0x40020400
 8002490:	40020800 	.word	0x40020800
 8002494:	40020c00 	.word	0x40020c00
 8002498:	40021000 	.word	0x40021000
 800249c:	40021400 	.word	0x40021400
 80024a0:	40021800 	.word	0x40021800
 80024a4:	40021c00 	.word	0x40021c00
 80024a8:	40013c00 	.word	0x40013c00

080024ac <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
=======
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	619a      	str	r2, [r3, #24]
=======
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< Updated upstream
 8001f98:	e003      	b.n	8001fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	041a      	lsls	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	619a      	str	r2, [r3, #24]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_RCC_OscConfig>:
=======
 80024c8:	e003      	b.n	80024d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	041a      	lsls	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	619a      	str	r2, [r3, #24]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
=======
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e25e      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
=======
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e25e      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d075      	beq.n	80020ba <HAL_RCC_OscConfig+0x10a>
=======
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d075      	beq.n	80025ea <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< Updated upstream
 8001fce:	4b88      	ldr	r3, [pc, #544]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fda:	4b85      	ldr	r3, [pc, #532]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d112      	bne.n	800200c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe6:	4b82      	ldr	r3, [pc, #520]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ff2:	d10b      	bne.n	800200c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff4:	4b7e      	ldr	r3, [pc, #504]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d05b      	beq.n	80020b8 <HAL_RCC_OscConfig+0x108>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d157      	bne.n	80020b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e239      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
=======
 80024fe:	4b88      	ldr	r3, [pc, #544]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b04      	cmp	r3, #4
 8002508:	d00c      	beq.n	8002524 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250a:	4b85      	ldr	r3, [pc, #532]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002512:	2b08      	cmp	r3, #8
 8002514:	d112      	bne.n	800253c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002516:	4b82      	ldr	r3, [pc, #520]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002522:	d10b      	bne.n	800253c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	4b7e      	ldr	r3, [pc, #504]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d05b      	beq.n	80025e8 <HAL_RCC_OscConfig+0x108>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d157      	bne.n	80025e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e239      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002014:	d106      	bne.n	8002024 <HAL_RCC_OscConfig+0x74>
 8002016:	4b76      	ldr	r3, [pc, #472]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a75      	ldr	r2, [pc, #468]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e01d      	b.n	8002060 <HAL_RCC_OscConfig+0xb0>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800202c:	d10c      	bne.n	8002048 <HAL_RCC_OscConfig+0x98>
 800202e:	4b70      	ldr	r3, [pc, #448]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a6f      	ldr	r2, [pc, #444]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	4b6d      	ldr	r3, [pc, #436]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a6c      	ldr	r2, [pc, #432]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e00b      	b.n	8002060 <HAL_RCC_OscConfig+0xb0>
 8002048:	4b69      	ldr	r3, [pc, #420]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a68      	ldr	r2, [pc, #416]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 800204e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b66      	ldr	r3, [pc, #408]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a65      	ldr	r2, [pc, #404]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 800205a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d013      	beq.n	8002090 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7ff f93c 	bl	80012e4 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002070:	f7ff f938 	bl	80012e4 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	; 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e1fe      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0xc0>
 800208e:	e014      	b.n	80020ba <HAL_RCC_OscConfig+0x10a>
=======
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002544:	d106      	bne.n	8002554 <HAL_RCC_OscConfig+0x74>
 8002546:	4b76      	ldr	r3, [pc, #472]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a75      	ldr	r2, [pc, #468]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e01d      	b.n	8002590 <HAL_RCC_OscConfig+0xb0>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x98>
 800255e:	4b70      	ldr	r3, [pc, #448]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6f      	ldr	r2, [pc, #444]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b6d      	ldr	r3, [pc, #436]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a6c      	ldr	r2, [pc, #432]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e00b      	b.n	8002590 <HAL_RCC_OscConfig+0xb0>
 8002578:	4b69      	ldr	r3, [pc, #420]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a68      	ldr	r2, [pc, #416]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800257e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b66      	ldr	r3, [pc, #408]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a65      	ldr	r2, [pc, #404]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800258a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7ff f93c 	bl	8001814 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a0:	f7ff f938 	bl	8001814 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e1fe      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b5b      	ldr	r3, [pc, #364]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0xc0>
 80025be:	e014      	b.n	80025ea <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8002090:	f7ff f928 	bl	80012e4 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002098:	f7ff f924 	bl	80012e4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1ea      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020aa:	4b51      	ldr	r3, [pc, #324]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0xe8>
 80020b6:	e000      	b.n	80020ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b8:	bf00      	nop
=======
 80025c0:	f7ff f928 	bl	8001814 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c8:	f7ff f924 	bl	8001814 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1ea      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	4b51      	ldr	r3, [pc, #324]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0xe8>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d063      	beq.n	800218e <HAL_RCC_OscConfig+0x1de>
=======
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d063      	beq.n	80026be <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< Updated upstream
 80020c6:	4b4a      	ldr	r3, [pc, #296]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00b      	beq.n	80020ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020d2:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d11c      	bne.n	8002118 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020de:	4b44      	ldr	r3, [pc, #272]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d116      	bne.n	8002118 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ea:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_RCC_OscConfig+0x152>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e1be      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
=======
 80025f6:	4b4a      	ldr	r3, [pc, #296]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002602:	4b47      	ldr	r3, [pc, #284]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800260a:	2b08      	cmp	r3, #8
 800260c:	d11c      	bne.n	8002648 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260e:	4b44      	ldr	r3, [pc, #272]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d116      	bne.n	8002648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	4b41      	ldr	r3, [pc, #260]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_RCC_OscConfig+0x152>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e1be      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8002102:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4937      	ldr	r1, [pc, #220]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	e03a      	b.n	800218e <HAL_RCC_OscConfig+0x1de>
=======
 8002632:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4937      	ldr	r1, [pc, #220]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	e03a      	b.n	80026be <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< Updated upstream
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d020      	beq.n	8002162 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002120:	4b34      	ldr	r3, [pc, #208]	; (80021f4 <HAL_RCC_OscConfig+0x244>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7ff f8dd 	bl	80012e4 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800212e:	f7ff f8d9 	bl	80012e4 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e19f      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002140:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x17e>
=======
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002650:	4b34      	ldr	r3, [pc, #208]	; (8002724 <HAL_RCC_OscConfig+0x244>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7ff f8dd 	bl	8001814 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265e:	f7ff f8d9 	bl	8001814 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e19f      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x17e>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 800214c:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4925      	ldr	r1, [pc, #148]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 800215c:	4313      	orrs	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
 8002160:	e015      	b.n	800218e <HAL_RCC_OscConfig+0x1de>
=======
 800267c:	4b28      	ldr	r3, [pc, #160]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4925      	ldr	r1, [pc, #148]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	e015      	b.n	80026be <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 8002162:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_RCC_OscConfig+0x244>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7ff f8bc 	bl	80012e4 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002170:	f7ff f8b8 	bl	80012e4 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e17e      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002182:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x1c0>
=======
 8002692:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_RCC_OscConfig+0x244>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7ff f8bc 	bl	8001814 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a0:	f7ff f8b8 	bl	8001814 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e17e      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d036      	beq.n	8002208 <HAL_RCC_OscConfig+0x258>
=======
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d036      	beq.n	8002738 <HAL_RCC_OscConfig+0x258>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< Updated upstream
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d016      	beq.n	80021d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_RCC_OscConfig+0x248>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7ff f89c 	bl	80012e4 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b0:	f7ff f898 	bl	80012e4 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e15e      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_OscConfig+0x240>)
 80021c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x200>
 80021ce:	e01b      	b.n	8002208 <HAL_RCC_OscConfig+0x258>
=======
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d016      	beq.n	8002700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_RCC_OscConfig+0x248>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7ff f89c 	bl	8001814 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e0:	f7ff f898 	bl	8001814 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e15e      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCC_OscConfig+0x240>)
 80026f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x200>
 80026fe:	e01b      	b.n	8002738 <HAL_RCC_OscConfig+0x258>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RCC_OscConfig+0x248>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7ff f885 	bl	80012e4 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	e00e      	b.n	80021fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021de:	f7ff f881 	bl	80012e4 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d907      	bls.n	80021fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e147      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
 80021f0:	40023800 	.word	0x40023800
 80021f4:	42470000 	.word	0x42470000
 80021f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	4b88      	ldr	r3, [pc, #544]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80021fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ea      	bne.n	80021de <HAL_RCC_OscConfig+0x22e>
=======
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_RCC_OscConfig+0x248>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7ff f885 	bl	8001814 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270c:	e00e      	b.n	800272c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800270e:	f7ff f881 	bl	8001814 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d907      	bls.n	800272c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e147      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
 8002720:	40023800 	.word	0x40023800
 8002724:	42470000 	.word	0x42470000
 8002728:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272c:	4b88      	ldr	r3, [pc, #544]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 800272e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1ea      	bne.n	800270e <HAL_RCC_OscConfig+0x22e>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 8097 	beq.w	8002344 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
=======
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8097 	beq.w	8002874 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002746:	2300      	movs	r3, #0
 8002748:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 800221a:	4b81      	ldr	r3, [pc, #516]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10f      	bne.n	8002246 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	4b7d      	ldr	r3, [pc, #500]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a7c      	ldr	r2, [pc, #496]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b7a      	ldr	r3, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b77      	ldr	r3, [pc, #476]	; (8002424 <HAL_RCC_OscConfig+0x474>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d118      	bne.n	8002284 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002252:	4b74      	ldr	r3, [pc, #464]	; (8002424 <HAL_RCC_OscConfig+0x474>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a73      	ldr	r2, [pc, #460]	; (8002424 <HAL_RCC_OscConfig+0x474>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7ff f841 	bl	80012e4 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7ff f83d 	bl	80012e4 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e103      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	4b6a      	ldr	r3, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x474>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x2b6>
=======
 800274a:	4b81      	ldr	r3, [pc, #516]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	4b7d      	ldr	r3, [pc, #500]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a7c      	ldr	r2, [pc, #496]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 8002760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b7a      	ldr	r3, [pc, #488]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002772:	2301      	movs	r3, #1
 8002774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002776:	4b77      	ldr	r3, [pc, #476]	; (8002954 <HAL_RCC_OscConfig+0x474>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d118      	bne.n	80027b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002782:	4b74      	ldr	r3, [pc, #464]	; (8002954 <HAL_RCC_OscConfig+0x474>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a73      	ldr	r2, [pc, #460]	; (8002954 <HAL_RCC_OscConfig+0x474>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278e:	f7ff f841 	bl	8001814 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002796:	f7ff f83d 	bl	8001814 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e103      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <HAL_RCC_OscConfig+0x474>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x2b6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x2ea>
 800228c:	4b64      	ldr	r3, [pc, #400]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	4a63      	ldr	r2, [pc, #396]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6713      	str	r3, [r2, #112]	; 0x70
 8002298:	e01c      	b.n	80022d4 <HAL_RCC_OscConfig+0x324>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x30c>
 80022a2:	4b5f      	ldr	r3, [pc, #380]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	4a5e      	ldr	r2, [pc, #376]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	6713      	str	r3, [r2, #112]	; 0x70
 80022ae:	4b5c      	ldr	r3, [pc, #368]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b2:	4a5b      	ldr	r2, [pc, #364]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0x324>
 80022bc:	4b58      	ldr	r3, [pc, #352]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	4a57      	ldr	r2, [pc, #348]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6713      	str	r3, [r2, #112]	; 0x70
 80022c8:	4b55      	ldr	r3, [pc, #340]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	4a54      	ldr	r2, [pc, #336]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022ce:	f023 0304 	bic.w	r3, r3, #4
 80022d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d015      	beq.n	8002308 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7ff f802 	bl	80012e4 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7fe fffe 	bl	80012e4 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e0c2      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fa:	4b49      	ldr	r3, [pc, #292]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0ee      	beq.n	80022e4 <HAL_RCC_OscConfig+0x334>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x382>
=======
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d106      	bne.n	80027ca <HAL_RCC_OscConfig+0x2ea>
 80027bc:	4b64      	ldr	r3, [pc, #400]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	4a63      	ldr	r2, [pc, #396]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70
 80027c8:	e01c      	b.n	8002804 <HAL_RCC_OscConfig+0x324>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b05      	cmp	r3, #5
 80027d0:	d10c      	bne.n	80027ec <HAL_RCC_OscConfig+0x30c>
 80027d2:	4b5f      	ldr	r3, [pc, #380]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	4a5e      	ldr	r2, [pc, #376]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6713      	str	r3, [r2, #112]	; 0x70
 80027de:	4b5c      	ldr	r3, [pc, #368]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	4a5b      	ldr	r2, [pc, #364]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ea:	e00b      	b.n	8002804 <HAL_RCC_OscConfig+0x324>
 80027ec:	4b58      	ldr	r3, [pc, #352]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	4a57      	ldr	r2, [pc, #348]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	6713      	str	r3, [r2, #112]	; 0x70
 80027f8:	4b55      	ldr	r3, [pc, #340]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4a54      	ldr	r2, [pc, #336]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80027fe:	f023 0304 	bic.w	r3, r3, #4
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d015      	beq.n	8002838 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280c:	f7ff f802 	bl	8001814 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	e00a      	b.n	800282a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002814:	f7fe fffe 	bl	8001814 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e0c2      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282a:	4b49      	ldr	r3, [pc, #292]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0ee      	beq.n	8002814 <HAL_RCC_OscConfig+0x334>
 8002836:	e014      	b.n	8002862 <HAL_RCC_OscConfig+0x382>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8002308:	f7fe ffec 	bl	80012e4 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230e:	e00a      	b.n	8002326 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002310:	f7fe ffe8 	bl	80012e4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e0ac      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002326:	4b3e      	ldr	r3, [pc, #248]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1ee      	bne.n	8002310 <HAL_RCC_OscConfig+0x360>
=======
 8002838:	f7fe ffec 	bl	8001814 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe ffe8 	bl	8001814 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e0ac      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002856:	4b3e      	ldr	r3, [pc, #248]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1ee      	bne.n	8002840 <HAL_RCC_OscConfig+0x360>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d105      	bne.n	8002344 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002338:	4b39      	ldr	r3, [pc, #228]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	4a38      	ldr	r2, [pc, #224]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 800233e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002342:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d105      	bne.n	8002874 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002868:	4b39      	ldr	r3, [pc, #228]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	4a38      	ldr	r2, [pc, #224]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 800286e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002872:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> Stashed changes
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< Updated upstream
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8098 	beq.w	800247e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800234e:	4b34      	ldr	r3, [pc, #208]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b08      	cmp	r3, #8
 8002358:	d05c      	beq.n	8002414 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d141      	bne.n	80023e6 <HAL_RCC_OscConfig+0x436>
=======
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8098 	beq.w	80029ae <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800287e:	4b34      	ldr	r3, [pc, #208]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b08      	cmp	r3, #8
 8002888:	d05c      	beq.n	8002944 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d141      	bne.n	8002916 <HAL_RCC_OscConfig+0x436>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8002362:	4b31      	ldr	r3, [pc, #196]	; (8002428 <HAL_RCC_OscConfig+0x478>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe ffbc 	bl	80012e4 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe ffb8 	bl	80012e4 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e07e      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	4b27      	ldr	r3, [pc, #156]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x3c0>
=======
 8002892:	4b31      	ldr	r3, [pc, #196]	; (8002958 <HAL_RCC_OscConfig+0x478>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe ffbc 	bl	8001814 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe ffb8 	bl	8001814 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e07e      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	4b27      	ldr	r3, [pc, #156]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< Updated upstream
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69da      	ldr	r2, [r3, #28]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	019b      	lsls	r3, r3, #6
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	3b01      	subs	r3, #1
 80023a8:	041b      	lsls	r3, r3, #16
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	491b      	ldr	r1, [pc, #108]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
=======
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	019b      	lsls	r3, r3, #6
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	3b01      	subs	r3, #1
 80028d8:	041b      	lsls	r3, r3, #16
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	491b      	ldr	r1, [pc, #108]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_RCC_OscConfig+0x478>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe ff91 	bl	80012e4 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c6:	f7fe ff8d 	bl	80012e4 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e053      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x416>
 80023e4:	e04b      	b.n	800247e <HAL_RCC_OscConfig+0x4ce>
=======
 80028e8:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <HAL_RCC_OscConfig+0x478>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7fe ff91 	bl	8001814 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f6:	f7fe ff8d 	bl	8001814 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e053      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x416>
 8002914:	e04b      	b.n	80029ae <HAL_RCC_OscConfig+0x4ce>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_RCC_OscConfig+0x478>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe ff7a 	bl	80012e4 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f4:	f7fe ff76 	bl	80012e4 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e03c      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_RCC_OscConfig+0x470>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x444>
 8002412:	e034      	b.n	800247e <HAL_RCC_OscConfig+0x4ce>
=======
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_RCC_OscConfig+0x478>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe ff7a 	bl	8001814 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002924:	f7fe ff76 	bl	8001814 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e03c      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_OscConfig+0x470>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x444>
 8002942:	e034      	b.n	80029ae <HAL_RCC_OscConfig+0x4ce>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< Updated upstream
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d107      	bne.n	800242c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e02f      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
 8002420:	40023800 	.word	0x40023800
 8002424:	40007000 	.word	0x40007000
 8002428:	42470060 	.word	0x42470060
=======
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d107      	bne.n	800295c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e02f      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
 8002950:	40023800 	.word	0x40023800
 8002954:	40007000 	.word	0x40007000
 8002958:	42470060 	.word	0x42470060
>>>>>>> Stashed changes
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< Updated upstream
 800242c:	4b16      	ldr	r3, [pc, #88]	; (8002488 <HAL_RCC_OscConfig+0x4d8>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	429a      	cmp	r2, r3
 800243e:	d11c      	bne.n	800247a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d115      	bne.n	800247a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002454:	4013      	ands	r3, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800245a:	4293      	cmp	r3, r2
 800245c:	d10d      	bne.n	800247a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_RCC_OscConfig+0x4d0>
=======
 800295c:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	429a      	cmp	r2, r3
 800296e:	d11c      	bne.n	80029aa <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d115      	bne.n	80029aa <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800298a:	4293      	cmp	r3, r2
 800298c:	d10d      	bne.n	80029aa <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800

0800248c <HAL_RCC_ClockConfig>:
=======
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40023800 	.word	0x40023800

080029bc <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
=======
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0cc      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
=======
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0cc      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 80024a0:	4b68      	ldr	r3, [pc, #416]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d90c      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b65      	ldr	r3, [pc, #404]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]
=======
 80029d0:	4b68      	ldr	r3, [pc, #416]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d90c      	bls.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 80024b6:	4b63      	ldr	r3, [pc, #396]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0b8      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
=======
 80029e6:	4b63      	ldr	r3, [pc, #396]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0b8      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_ClockConfig+0x8a>
=======
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> Stashed changes
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e0:	4b59      	ldr	r3, [pc, #356]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a58      	ldr	r2, [pc, #352]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f8:	4b53      	ldr	r3, [pc, #332]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a52      	ldr	r2, [pc, #328]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002502:	6093      	str	r3, [r2, #8]
=======
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a10:	4b59      	ldr	r3, [pc, #356]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a58      	ldr	r2, [pc, #352]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a28:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a52      	ldr	r2, [pc, #328]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a32:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8002504:	4b50      	ldr	r3, [pc, #320]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	494d      	ldr	r1, [pc, #308]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
=======
 8002a34:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	494d      	ldr	r1, [pc, #308]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d044      	beq.n	80025ac <HAL_RCC_ClockConfig+0x120>
=======
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d044      	beq.n	8002adc <HAL_RCC_ClockConfig+0x120>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d119      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e07f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
=======
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d119      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e07f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< Updated upstream
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d003      	beq.n	800254a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002546:	2b03      	cmp	r3, #3
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254a:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e06f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
=======
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7a:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e06f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< Updated upstream
 800255a:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e067      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
=======
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e067      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 800256a:	4b37      	ldr	r3, [pc, #220]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f023 0203 	bic.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4934      	ldr	r1, [pc, #208]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800257c:	f7fe feb2 	bl	80012e4 <HAL_GetTick>
 8002580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	e00a      	b.n	800259a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002584:	f7fe feae 	bl	80012e4 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e04f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 020c 	and.w	r2, r3, #12
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d1eb      	bne.n	8002584 <HAL_RCC_ClockConfig+0xf8>
=======
 8002a9a:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4934      	ldr	r1, [pc, #208]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aac:	f7fe feb2 	bl	8001814 <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab4:	f7fe feae 	bl	8001814 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e04f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 020c 	and.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1eb      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> Stashed changes
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d20c      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]
=======
 8002adc:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d20c      	bcs.n	8002b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e032      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
=======
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e032      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4916      	ldr	r1, [pc, #88]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
=======
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4916      	ldr	r1, [pc, #88]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	490e      	ldr	r1, [pc, #56]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
=======
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	490e      	ldr	r1, [pc, #56]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< Updated upstream
 8002612:	f000 f821 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8002616:	4602      	mov	r2, r0
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	490a      	ldr	r1, [pc, #40]	; (800264c <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	5ccb      	ldrb	r3, [r1, r3]
 8002626:	fa22 f303 	lsr.w	r3, r2, r3
 800262a:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fe12 	bl	800125c <HAL_InitTick>

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023c00 	.word	0x40023c00
 8002648:	40023800 	.word	0x40023800
 800264c:	08005948 	.word	0x08005948
 8002650:	20000000 	.word	0x20000000
 8002654:	20000004 	.word	0x20000004

08002658 <HAL_RCC_GetSysClockFreq>:
=======
 8002b42:	f000 f821 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8002b46:	4602      	mov	r2, r0
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	490a      	ldr	r1, [pc, #40]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	5ccb      	ldrb	r3, [r1, r3]
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x1c8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe fe12 	bl	800178c <HAL_InitTick>

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023c00 	.word	0x40023c00
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	08006034 	.word	0x08006034
 8002b80:	20000000 	.word	0x20000000
 8002b84:	20000004 	.word	0x20000004

08002b88 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8002658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800265c:	b094      	sub	sp, #80	; 0x50
 800265e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	647b      	str	r3, [r7, #68]	; 0x44
 8002664:	2300      	movs	r3, #0
 8002666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002668:	2300      	movs	r3, #0
 800266a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002670:	4b79      	ldr	r3, [pc, #484]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b08      	cmp	r3, #8
 800267a:	d00d      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x40>
 800267c:	2b08      	cmp	r3, #8
 800267e:	f200 80e1 	bhi.w	8002844 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x34>
 8002686:	2b04      	cmp	r3, #4
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x3a>
 800268a:	e0db      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x1ec>
=======
 8002b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b8c:	b094      	sub	sp, #80	; 0x50
 8002b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	647b      	str	r3, [r7, #68]	; 0x44
 8002b94:	2300      	movs	r3, #0
 8002b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b98:	2300      	movs	r3, #0
 8002b9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba0:	4b79      	ldr	r3, [pc, #484]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 030c 	and.w	r3, r3, #12
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d00d      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	f200 80e1 	bhi.w	8002d74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x34>
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d003      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bba:	e0db      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x1ec>
>>>>>>> Stashed changes
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 800268c:	4b73      	ldr	r3, [pc, #460]	; (800285c <HAL_RCC_GetSysClockFreq+0x204>)
 800268e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002690:	e0db      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8002bbc:	4b73      	ldr	r3, [pc, #460]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002bbe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002bc0:	e0db      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< Updated upstream
 8002692:	4b73      	ldr	r3, [pc, #460]	; (8002860 <HAL_RCC_GetSysClockFreq+0x208>)
 8002694:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002696:	e0d8      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8002bc2:	4b73      	ldr	r3, [pc, #460]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bc6:	e0d8      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< Updated upstream
 8002698:	4b6f      	ldr	r3, [pc, #444]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a2:	4b6d      	ldr	r3, [pc, #436]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d063      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ae:	4b6a      	ldr	r3, [pc, #424]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	099b      	lsrs	r3, r3, #6
 80026b4:	2200      	movs	r2, #0
 80026b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c0:	633b      	str	r3, [r7, #48]	; 0x30
 80026c2:	2300      	movs	r3, #0
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
 80026c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026ca:	4622      	mov	r2, r4
 80026cc:	462b      	mov	r3, r5
 80026ce:	f04f 0000 	mov.w	r0, #0
 80026d2:	f04f 0100 	mov.w	r1, #0
 80026d6:	0159      	lsls	r1, r3, #5
 80026d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026dc:	0150      	lsls	r0, r2, #5
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4621      	mov	r1, r4
 80026e4:	1a51      	subs	r1, r2, r1
 80026e6:	6139      	str	r1, [r7, #16]
 80026e8:	4629      	mov	r1, r5
 80026ea:	eb63 0301 	sbc.w	r3, r3, r1
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026fc:	4659      	mov	r1, fp
 80026fe:	018b      	lsls	r3, r1, #6
 8002700:	4651      	mov	r1, sl
 8002702:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002706:	4651      	mov	r1, sl
 8002708:	018a      	lsls	r2, r1, #6
 800270a:	4651      	mov	r1, sl
 800270c:	ebb2 0801 	subs.w	r8, r2, r1
 8002710:	4659      	mov	r1, fp
 8002712:	eb63 0901 	sbc.w	r9, r3, r1
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800272a:	4690      	mov	r8, r2
 800272c:	4699      	mov	r9, r3
 800272e:	4623      	mov	r3, r4
 8002730:	eb18 0303 	adds.w	r3, r8, r3
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	462b      	mov	r3, r5
 8002738:	eb49 0303 	adc.w	r3, r9, r3
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800274a:	4629      	mov	r1, r5
 800274c:	024b      	lsls	r3, r1, #9
 800274e:	4621      	mov	r1, r4
 8002750:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002754:	4621      	mov	r1, r4
 8002756:	024a      	lsls	r2, r1, #9
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275e:	2200      	movs	r2, #0
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
 8002762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002764:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002768:	f7fd fd82 	bl	8000270 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4613      	mov	r3, r2
 8002772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002774:	e058      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x1d0>
=======
 8002bc8:	4b6f      	ldr	r3, [pc, #444]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bd0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bd2:	4b6d      	ldr	r3, [pc, #436]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d063      	beq.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bde:	4b6a      	ldr	r3, [pc, #424]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	099b      	lsrs	r3, r3, #6
 8002be4:	2200      	movs	r2, #0
 8002be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002be8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bfa:	4622      	mov	r2, r4
 8002bfc:	462b      	mov	r3, r5
 8002bfe:	f04f 0000 	mov.w	r0, #0
 8002c02:	f04f 0100 	mov.w	r1, #0
 8002c06:	0159      	lsls	r1, r3, #5
 8002c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c0c:	0150      	lsls	r0, r2, #5
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4621      	mov	r1, r4
 8002c14:	1a51      	subs	r1, r2, r1
 8002c16:	6139      	str	r1, [r7, #16]
 8002c18:	4629      	mov	r1, r5
 8002c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c2c:	4659      	mov	r1, fp
 8002c2e:	018b      	lsls	r3, r1, #6
 8002c30:	4651      	mov	r1, sl
 8002c32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c36:	4651      	mov	r1, sl
 8002c38:	018a      	lsls	r2, r1, #6
 8002c3a:	4651      	mov	r1, sl
 8002c3c:	ebb2 0801 	subs.w	r8, r2, r1
 8002c40:	4659      	mov	r1, fp
 8002c42:	eb63 0901 	sbc.w	r9, r3, r1
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c5a:	4690      	mov	r8, r2
 8002c5c:	4699      	mov	r9, r3
 8002c5e:	4623      	mov	r3, r4
 8002c60:	eb18 0303 	adds.w	r3, r8, r3
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	462b      	mov	r3, r5
 8002c68:	eb49 0303 	adc.w	r3, r9, r3
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	024b      	lsls	r3, r1, #9
 8002c7e:	4621      	mov	r1, r4
 8002c80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c84:	4621      	mov	r1, r4
 8002c86:	024a      	lsls	r2, r1, #9
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c8e:	2200      	movs	r2, #0
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c98:	f7fd faea 	bl	8000270 <__aeabi_uldivmod>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca4:	e058      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x1d0>
>>>>>>> Stashed changes
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< Updated upstream
 8002776:	4b38      	ldr	r3, [pc, #224]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	099b      	lsrs	r3, r3, #6
 800277c:	2200      	movs	r2, #0
 800277e:	4618      	mov	r0, r3
 8002780:	4611      	mov	r1, r2
 8002782:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002786:	623b      	str	r3, [r7, #32]
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
 800278c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002790:	4642      	mov	r2, r8
 8002792:	464b      	mov	r3, r9
 8002794:	f04f 0000 	mov.w	r0, #0
 8002798:	f04f 0100 	mov.w	r1, #0
 800279c:	0159      	lsls	r1, r3, #5
 800279e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a2:	0150      	lsls	r0, r2, #5
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4641      	mov	r1, r8
 80027aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80027ae:	4649      	mov	r1, r9
 80027b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027c8:	ebb2 040a 	subs.w	r4, r2, sl
 80027cc:	eb63 050b 	sbc.w	r5, r3, fp
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	00eb      	lsls	r3, r5, #3
 80027da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027de:	00e2      	lsls	r2, r4, #3
 80027e0:	4614      	mov	r4, r2
 80027e2:	461d      	mov	r5, r3
 80027e4:	4643      	mov	r3, r8
 80027e6:	18e3      	adds	r3, r4, r3
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	464b      	mov	r3, r9
 80027ec:	eb45 0303 	adc.w	r3, r5, r3
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027fe:	4629      	mov	r1, r5
 8002800:	028b      	lsls	r3, r1, #10
 8002802:	4621      	mov	r1, r4
 8002804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002808:	4621      	mov	r1, r4
 800280a:	028a      	lsls	r2, r1, #10
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002812:	2200      	movs	r2, #0
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	61fa      	str	r2, [r7, #28]
 8002818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800281c:	f7fd fd28 	bl	8000270 <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4613      	mov	r3, r2
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	3301      	adds	r3, #1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002838:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800283a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002842:	e002      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8002ca6:	4b38      	ldr	r3, [pc, #224]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	099b      	lsrs	r3, r3, #6
 8002cac:	2200      	movs	r2, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cb6:	623b      	str	r3, [r7, #32]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
 8002cbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cc0:	4642      	mov	r2, r8
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	f04f 0000 	mov.w	r0, #0
 8002cc8:	f04f 0100 	mov.w	r1, #0
 8002ccc:	0159      	lsls	r1, r3, #5
 8002cce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd2:	0150      	lsls	r0, r2, #5
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4641      	mov	r1, r8
 8002cda:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cde:	4649      	mov	r1, r9
 8002ce0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cf8:	ebb2 040a 	subs.w	r4, r2, sl
 8002cfc:	eb63 050b 	sbc.w	r5, r3, fp
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	00eb      	lsls	r3, r5, #3
 8002d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d0e:	00e2      	lsls	r2, r4, #3
 8002d10:	4614      	mov	r4, r2
 8002d12:	461d      	mov	r5, r3
 8002d14:	4643      	mov	r3, r8
 8002d16:	18e3      	adds	r3, r4, r3
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	464b      	mov	r3, r9
 8002d1c:	eb45 0303 	adc.w	r3, r5, r3
 8002d20:	607b      	str	r3, [r7, #4]
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d2e:	4629      	mov	r1, r5
 8002d30:	028b      	lsls	r3, r1, #10
 8002d32:	4621      	mov	r1, r4
 8002d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d38:	4621      	mov	r1, r4
 8002d3a:	028a      	lsls	r2, r1, #10
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d42:	2200      	movs	r2, #0
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	61fa      	str	r2, [r7, #28]
 8002d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d4c:	f7fd fa90 	bl	8000270 <__aeabi_uldivmod>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4613      	mov	r3, r2
 8002d56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	0c1b      	lsrs	r3, r3, #16
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	3301      	adds	r3, #1
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d72:	e002      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetSysClockFreq+0x204>)
 8002846:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800284a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800284c:	4618      	mov	r0, r3
 800284e:	3750      	adds	r7, #80	; 0x50
 8002850:	46bd      	mov	sp, r7
 8002852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	00f42400 	.word	0x00f42400
 8002860:	007a1200 	.word	0x007a1200

08002864 <HAL_RCC_GetHCLKFreq>:
=======
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3750      	adds	r7, #80	; 0x50
 8002d80:	46bd      	mov	sp, r7
 8002d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	00f42400 	.word	0x00f42400
 8002d90:	007a1200 	.word	0x007a1200

08002d94 <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <HAL_RCC_GetHCLKFreq+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000000 	.word	0x20000000

0800287c <HAL_RCC_GetPCLK1Freq>:
=======
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20000000 	.word	0x20000000

08002dac <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002880:	f7ff fff0 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0a9b      	lsrs	r3, r3, #10
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4903      	ldr	r1, [pc, #12]	; (80028a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	08005958 	.word	0x08005958

080028a4 <HAL_RCC_GetPCLK2Freq>:
=======
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002db0:	f7ff fff0 	bl	8002d94 <HAL_RCC_GetHCLKFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	0a9b      	lsrs	r3, r3, #10
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	4903      	ldr	r1, [pc, #12]	; (8002dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	08006044 	.word	0x08006044

08002dd4 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028a8:	f7ff ffdc 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	0b5b      	lsrs	r3, r3, #13
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4903      	ldr	r1, [pc, #12]	; (80028c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40023800 	.word	0x40023800
 80028c8:	08005958 	.word	0x08005958

080028cc <HAL_TIM_Base_Init>:
=======
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dd8:	f7ff ffdc 	bl	8002d94 <HAL_RCC_GetHCLKFreq>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	0b5b      	lsrs	r3, r3, #13
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	4903      	ldr	r1, [pc, #12]	; (8002df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dea:	5ccb      	ldrb	r3, [r1, r3]
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40023800 	.word	0x40023800
 8002df8:	08006044 	.word	0x08006044

08002dfc <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e01d      	b.n	800291a <HAL_TIM_Base_Init+0x4e>
=======
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e01d      	b.n	8002e4a <HAL_TIM_Base_Init+0x4e>
>>>>>>> Stashed changes
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fe fa9e 	bl	8000e34 <HAL_TIM_Base_MspInit>
=======
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fe fa9e 	bl	8001364 <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3304      	adds	r3, #4
 8002908:	4619      	mov	r1, r3
 800290a:	4610      	mov	r0, r2
 800290c:	f000 fbde 	bl	80030cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_TIM_Base_Start>:
=======
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	f000 fbde 	bl	80035fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_TIM_Base_Start>:
>>>>>>> Stashed changes
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
=======
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2202      	movs	r2, #2
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b06      	cmp	r3, #6
 8002942:	d007      	beq.n	8002954 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]
=======
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b06      	cmp	r3, #6
 8002e72:	d007      	beq.n	8002e84 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< Updated upstream
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_TIM_PWM_Init>:
=======
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_TIM_PWM_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e01d      	b.n	80029b8 <HAL_TIM_PWM_Init+0x4e>
=======
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e01d      	b.n	8002ee8 <HAL_TIM_PWM_Init+0x4e>
>>>>>>> Stashed changes
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d106      	bne.n	8002996 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< Updated upstream
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7fe faa1 	bl	8000ed8 <HAL_TIM_PWM_MspInit>
=======
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7fe faa1 	bl	8001408 <HAL_TIM_PWM_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2202      	movs	r2, #2
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3304      	adds	r3, #4
 80029a6:	4619      	mov	r1, r3
 80029a8:	4610      	mov	r0, r2
 80029aa:	f000 fb8f 	bl	80030cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_TIM_PWM_Start>:
=======
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f000 fb8f 	bl	80035fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_TIM_PWM_Start>:
>>>>>>> Stashed changes
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< Updated upstream
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
=======
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
<<<<<<< Updated upstream
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2201      	movs	r2, #1
 80029d0:	6839      	ldr	r1, [r7, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fe64 	bl	80036a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a15      	ldr	r2, [pc, #84]	; (8002a34 <HAL_TIM_PWM_Start+0x74>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d004      	beq.n	80029ec <HAL_TIM_PWM_Start+0x2c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <HAL_TIM_PWM_Start+0x78>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d101      	bne.n	80029f0 <HAL_TIM_PWM_Start+0x30>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <HAL_TIM_PWM_Start+0x32>
 80029f0:	2300      	movs	r3, #0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2201      	movs	r2, #1
 8002f00:	6839      	ldr	r1, [r7, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fe64 	bl	8003bd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <HAL_TIM_PWM_Start+0x74>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d004      	beq.n	8002f1c <HAL_TIM_PWM_Start+0x2c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <HAL_TIM_PWM_Start+0x78>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d101      	bne.n	8002f20 <HAL_TIM_PWM_Start+0x30>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <HAL_TIM_PWM_Start+0x32>
 8002f20:	2300      	movs	r3, #0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f34:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
<<<<<<< Updated upstream
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b06      	cmp	r3, #6
 8002a16:	d007      	beq.n	8002a28 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
=======
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b06      	cmp	r3, #6
 8002f46:	d007      	beq.n	8002f58 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40010000 	.word	0x40010000
 8002a38:	40010400 	.word	0x40010400

08002a3c <HAL_TIM_PWM_Start_IT>:
=======
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40010000 	.word	0x40010000
 8002f68:	40010400 	.word	0x40010400

08002f6c <HAL_TIM_PWM_Start_IT>:
>>>>>>> Stashed changes
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< Updated upstream
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
=======
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
<<<<<<< Updated upstream
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b0c      	cmp	r3, #12
 8002a4a:	d841      	bhi.n	8002ad0 <HAL_TIM_PWM_Start_IT+0x94>
 8002a4c:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <HAL_TIM_PWM_Start_IT+0x18>)
 8002a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a52:	bf00      	nop
 8002a54:	08002a89 	.word	0x08002a89
 8002a58:	08002ad1 	.word	0x08002ad1
 8002a5c:	08002ad1 	.word	0x08002ad1
 8002a60:	08002ad1 	.word	0x08002ad1
 8002a64:	08002a9b 	.word	0x08002a9b
 8002a68:	08002ad1 	.word	0x08002ad1
 8002a6c:	08002ad1 	.word	0x08002ad1
 8002a70:	08002ad1 	.word	0x08002ad1
 8002a74:	08002aad 	.word	0x08002aad
 8002a78:	08002ad1 	.word	0x08002ad1
 8002a7c:	08002ad1 	.word	0x08002ad1
 8002a80:	08002ad1 	.word	0x08002ad1
 8002a84:	08002abf 	.word	0x08002abf
=======
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b0c      	cmp	r3, #12
 8002f7a:	d841      	bhi.n	8003000 <HAL_TIM_PWM_Start_IT+0x94>
 8002f7c:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <HAL_TIM_PWM_Start_IT+0x18>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002fb9 	.word	0x08002fb9
 8002f88:	08003001 	.word	0x08003001
 8002f8c:	08003001 	.word	0x08003001
 8002f90:	08003001 	.word	0x08003001
 8002f94:	08002fcb 	.word	0x08002fcb
 8002f98:	08003001 	.word	0x08003001
 8002f9c:	08003001 	.word	0x08003001
 8002fa0:	08003001 	.word	0x08003001
 8002fa4:	08002fdd 	.word	0x08002fdd
 8002fa8:	08003001 	.word	0x08003001
 8002fac:	08003001 	.word	0x08003001
 8002fb0:	08003001 	.word	0x08003001
 8002fb4:	08002fef 	.word	0x08002fef
>>>>>>> Stashed changes
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
<<<<<<< Updated upstream
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0202 	orr.w	r2, r2, #2
 8002a96:	60da      	str	r2, [r3, #12]
      break;
 8002a98:	e01b      	b.n	8002ad2 <HAL_TIM_PWM_Start_IT+0x96>
=======
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0202 	orr.w	r2, r2, #2
 8002fc6:	60da      	str	r2, [r3, #12]
      break;
 8002fc8:	e01b      	b.n	8003002 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> Stashed changes
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
<<<<<<< Updated upstream
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0204 	orr.w	r2, r2, #4
 8002aa8:	60da      	str	r2, [r3, #12]
      break;
 8002aaa:	e012      	b.n	8002ad2 <HAL_TIM_PWM_Start_IT+0x96>
=======
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0204 	orr.w	r2, r2, #4
 8002fd8:	60da      	str	r2, [r3, #12]
      break;
 8002fda:	e012      	b.n	8003002 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> Stashed changes
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
<<<<<<< Updated upstream
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0208 	orr.w	r2, r2, #8
 8002aba:	60da      	str	r2, [r3, #12]
      break;
 8002abc:	e009      	b.n	8002ad2 <HAL_TIM_PWM_Start_IT+0x96>
=======
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0208 	orr.w	r2, r2, #8
 8002fea:	60da      	str	r2, [r3, #12]
      break;
 8002fec:	e009      	b.n	8003002 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> Stashed changes
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
<<<<<<< Updated upstream
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0210 	orr.w	r2, r2, #16
 8002acc:	60da      	str	r2, [r3, #12]
      break;
 8002ace:	e000      	b.n	8002ad2 <HAL_TIM_PWM_Start_IT+0x96>
=======
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0210 	orr.w	r2, r2, #16
 8002ffc:	60da      	str	r2, [r3, #12]
      break;
 8002ffe:	e000      	b.n	8003002 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> Stashed changes
    }

    default:
      break;
<<<<<<< Updated upstream
 8002ad0:	bf00      	nop
=======
 8003000:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
<<<<<<< Updated upstream
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fde0 	bl	80036a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a15      	ldr	r2, [pc, #84]	; (8002b3c <HAL_TIM_PWM_Start_IT+0x100>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_TIM_PWM_Start_IT+0xb8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a14      	ldr	r2, [pc, #80]	; (8002b40 <HAL_TIM_PWM_Start_IT+0x104>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_TIM_PWM_Start_IT+0xbc>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_TIM_PWM_Start_IT+0xbe>
 8002af8:	2300      	movs	r3, #0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b0c:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2201      	movs	r2, #1
 8003008:	6839      	ldr	r1, [r7, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fde0 	bl	8003bd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a15      	ldr	r2, [pc, #84]	; (800306c <HAL_TIM_PWM_Start_IT+0x100>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <HAL_TIM_PWM_Start_IT+0xb8>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a14      	ldr	r2, [pc, #80]	; (8003070 <HAL_TIM_PWM_Start_IT+0x104>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d101      	bne.n	8003028 <HAL_TIM_PWM_Start_IT+0xbc>
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <HAL_TIM_PWM_Start_IT+0xbe>
 8003028:	2300      	movs	r3, #0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
<<<<<<< Updated upstream
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b06      	cmp	r3, #6
 8002b1e:	d007      	beq.n	8002b30 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
=======
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b06      	cmp	r3, #6
 800304e:	d007      	beq.n	8003060 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40010000 	.word	0x40010000
 8002b40:	40010400 	.word	0x40010400

08002b44 <HAL_TIM_IRQHandler>:
=======
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40010000 	.word	0x40010000
 8003070:	40010400 	.word	0x40010400

08003074 <HAL_TIM_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0202 	mvn.w	r2, #2
 8002b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x4a>
=======
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b02      	cmp	r3, #2
 8003088:	d122      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b02      	cmp	r3, #2
 8003096:	d11b      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0202 	mvn.w	r2, #2
 80030a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_TIM_IRQHandler+0x4a>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa82 	bl	8003090 <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0x56>
=======
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fa82 	bl	80035c0 <HAL_TIM_IC_CaptureCallback>
 80030bc:	e005      	b.n	80030ca <HAL_TIM_IRQHandler+0x56>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa74 	bl	800307c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fa85 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
=======
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fa74 	bl	80035ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fa85 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< Updated upstream
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d122      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d11b      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0204 	mvn.w	r2, #4
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x9e>
=======
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d122      	bne.n	8003124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d11b      	bne.n	8003124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0204 	mvn.w	r2, #4
 80030f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2202      	movs	r2, #2
 80030fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fa58 	bl	8003090 <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0xaa>
=======
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fa58 	bl	80035c0 <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0xaa>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fa4a 	bl	800307c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fa5b 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
=======
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fa4a 	bl	80035ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fa5b 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< Updated upstream
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d122      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d11b      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0208 	mvn.w	r2, #8
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0xf2>
=======
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b08      	cmp	r3, #8
 8003130:	d122      	bne.n	8003178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b08      	cmp	r3, #8
 800313e:	d11b      	bne.n	8003178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0208 	mvn.w	r2, #8
 8003148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2204      	movs	r2, #4
 800314e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fa2e 	bl	8003090 <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0xfe>
=======
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fa2e 	bl	80035c0 <HAL_TIM_IC_CaptureCallback>
 8003164:	e005      	b.n	8003172 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fa20 	bl	800307c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fa31 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
=======
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fa20 	bl	80035ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fa31 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< Updated upstream
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d122      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d11b      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0210 	mvn.w	r2, #16
 8002c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2208      	movs	r2, #8
 8002c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x146>
=======
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b10      	cmp	r3, #16
 8003184:	d122      	bne.n	80031cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b10      	cmp	r3, #16
 8003192:	d11b      	bne.n	80031cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0210 	mvn.w	r2, #16
 800319c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2208      	movs	r2, #8
 80031a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_TIM_IRQHandler+0x146>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fa04 	bl	8003090 <HAL_TIM_IC_CaptureCallback>
 8002c88:	e005      	b.n	8002c96 <HAL_TIM_IRQHandler+0x152>
=======
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fa04 	bl	80035c0 <HAL_TIM_IC_CaptureCallback>
 80031b8:	e005      	b.n	80031c6 <HAL_TIM_IRQHandler+0x152>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f9f6 	bl	800307c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fa07 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	771a      	strb	r2, [r3, #28]
=======
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f9f6 	bl	80035ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fa07 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< Updated upstream
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d10e      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d107      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0201 	mvn.w	r2, #1
 8002cc0:	611a      	str	r2, [r3, #16]
=======
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d10e      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d107      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0201 	mvn.w	r2, #1
 80031f0:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< Updated upstream
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f9d0 	bl	8003068 <HAL_TIM_PeriodElapsedCallback>
=======
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f9d0 	bl	8003598 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< Updated upstream
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd2:	2b80      	cmp	r3, #128	; 0x80
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	2b80      	cmp	r3, #128	; 0x80
 8002ce2:	d107      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cec:	611a      	str	r2, [r3, #16]
=======
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003202:	2b80      	cmp	r3, #128	; 0x80
 8003204:	d10e      	bne.n	8003224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003210:	2b80      	cmp	r3, #128	; 0x80
 8003212:	d107      	bne.n	8003224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800321c:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< Updated upstream
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fd82 	bl	80037f8 <HAL_TIMEx_BreakCallback>
=======
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fd82 	bl	8003d28 <HAL_TIMEx_BreakCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< Updated upstream
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfe:	2b40      	cmp	r3, #64	; 0x40
 8002d00:	d10e      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	d107      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d18:	611a      	str	r2, [r3, #16]
=======
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d10e      	bne.n	8003250 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	d107      	bne.n	8003250 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003248:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< Updated upstream
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f9cc 	bl	80030b8 <HAL_TIM_TriggerCallback>
=======
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f9cc 	bl	80035e8 <HAL_TIM_TriggerCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< Updated upstream
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	d10e      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d107      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0220 	mvn.w	r2, #32
 8002d44:	611a      	str	r2, [r3, #16]
=======
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b20      	cmp	r3, #32
 800325c:	d10e      	bne.n	800327c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b20      	cmp	r3, #32
 800326a:	d107      	bne.n	800327c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0220 	mvn.w	r2, #32
 8003274:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< Updated upstream
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fd4c 	bl	80037e4 <HAL_TIMEx_CommutCallback>
=======
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fd4c 	bl	8003d14 <HAL_TIMEx_CommutCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_TIM_PWM_ConfigChannel>:
=======
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> Stashed changes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< Updated upstream
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
=======
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e0b4      	b.n	8002ed8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b0c      	cmp	r3, #12
 8002d82:	f200 809f 	bhi.w	8002ec4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002d86:	a201      	add	r2, pc, #4	; (adr r2, 8002d8c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8c:	08002dc1 	.word	0x08002dc1
 8002d90:	08002ec5 	.word	0x08002ec5
 8002d94:	08002ec5 	.word	0x08002ec5
 8002d98:	08002ec5 	.word	0x08002ec5
 8002d9c:	08002e01 	.word	0x08002e01
 8002da0:	08002ec5 	.word	0x08002ec5
 8002da4:	08002ec5 	.word	0x08002ec5
 8002da8:	08002ec5 	.word	0x08002ec5
 8002dac:	08002e43 	.word	0x08002e43
 8002db0:	08002ec5 	.word	0x08002ec5
 8002db4:	08002ec5 	.word	0x08002ec5
 8002db8:	08002ec5 	.word	0x08002ec5
 8002dbc:	08002e83 	.word	0x08002e83
=======
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800329a:	2302      	movs	r3, #2
 800329c:	e0b4      	b.n	8003408 <HAL_TIM_PWM_ConfigChannel+0x184>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b0c      	cmp	r3, #12
 80032b2:	f200 809f 	bhi.w	80033f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032f1 	.word	0x080032f1
 80032c0:	080033f5 	.word	0x080033f5
 80032c4:	080033f5 	.word	0x080033f5
 80032c8:	080033f5 	.word	0x080033f5
 80032cc:	08003331 	.word	0x08003331
 80032d0:	080033f5 	.word	0x080033f5
 80032d4:	080033f5 	.word	0x080033f5
 80032d8:	080033f5 	.word	0x080033f5
 80032dc:	08003373 	.word	0x08003373
 80032e0:	080033f5 	.word	0x080033f5
 80032e4:	080033f5 	.word	0x080033f5
 80032e8:	080033f5 	.word	0x080033f5
 80032ec:	080033b3 	.word	0x080033b3
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fa20 	bl	800320c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0208 	orr.w	r2, r2, #8
 8002dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0204 	bic.w	r2, r2, #4
 8002dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6999      	ldr	r1, [r3, #24]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	619a      	str	r2, [r3, #24]
      break;
 8002dfe:	e062      	b.n	8002ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fa20 	bl	800373c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0208 	orr.w	r2, r2, #8
 800330a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0204 	bic.w	r2, r2, #4
 800331a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6999      	ldr	r1, [r3, #24]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	619a      	str	r2, [r3, #24]
      break;
 800332e:	e062      	b.n	80033f6 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fa70 	bl	80032ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6999      	ldr	r1, [r3, #24]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	021a      	lsls	r2, r3, #8
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	619a      	str	r2, [r3, #24]
      break;
 8002e40:	e041      	b.n	8002ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fa70 	bl	800381c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800334a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6999      	ldr	r1, [r3, #24]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	021a      	lsls	r2, r3, #8
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	619a      	str	r2, [r3, #24]
      break;
 8003370:	e041      	b.n	80033f6 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fac5 	bl	80033d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0208 	orr.w	r2, r2, #8
 8002e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69da      	ldr	r2, [r3, #28]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0204 	bic.w	r2, r2, #4
 8002e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69d9      	ldr	r1, [r3, #28]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	61da      	str	r2, [r3, #28]
      break;
 8002e80:	e021      	b.n	8002ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fac5 	bl	8003908 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0208 	orr.w	r2, r2, #8
 800338c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0204 	bic.w	r2, r2, #4
 800339c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69d9      	ldr	r1, [r3, #28]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	61da      	str	r2, [r3, #28]
      break;
 80033b0:	e021      	b.n	80033f6 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fb19 	bl	80034c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69d9      	ldr	r1, [r3, #28]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	021a      	lsls	r2, r3, #8
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	61da      	str	r2, [r3, #28]
      break;
 8002ec2:	e000      	b.n	8002ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fb19 	bl	80039f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69da      	ldr	r2, [r3, #28]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69d9      	ldr	r1, [r3, #28]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	021a      	lsls	r2, r3, #8
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	61da      	str	r2, [r3, #28]
      break;
 80033f2:	e000      	b.n	80033f6 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Stashed changes
    }

    default:
      break;
<<<<<<< Updated upstream
 8002ec4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_TIM_ConfigClockSource>:
=======
 80033f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_TIM_ConfigClockSource>:
>>>>>>> Stashed changes
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< Updated upstream
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
=======
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_TIM_ConfigClockSource+0x18>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e0b3      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x180>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_TIM_ConfigClockSource+0x18>
 8003424:	2302      	movs	r3, #2
 8003426:	e0b3      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x180>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< Updated upstream
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f30:	d03e      	beq.n	8002fb0 <HAL_TIM_ConfigClockSource+0xd0>
 8002f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f36:	f200 8087 	bhi.w	8003048 <HAL_TIM_ConfigClockSource+0x168>
 8002f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3e:	f000 8085 	beq.w	800304c <HAL_TIM_ConfigClockSource+0x16c>
 8002f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f46:	d87f      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x168>
 8002f48:	2b70      	cmp	r3, #112	; 0x70
 8002f4a:	d01a      	beq.n	8002f82 <HAL_TIM_ConfigClockSource+0xa2>
 8002f4c:	2b70      	cmp	r3, #112	; 0x70
 8002f4e:	d87b      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x168>
 8002f50:	2b60      	cmp	r3, #96	; 0x60
 8002f52:	d050      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x116>
 8002f54:	2b60      	cmp	r3, #96	; 0x60
 8002f56:	d877      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x168>
 8002f58:	2b50      	cmp	r3, #80	; 0x50
 8002f5a:	d03c      	beq.n	8002fd6 <HAL_TIM_ConfigClockSource+0xf6>
 8002f5c:	2b50      	cmp	r3, #80	; 0x50
 8002f5e:	d873      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x168>
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	d058      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0x136>
 8002f64:	2b40      	cmp	r3, #64	; 0x40
 8002f66:	d86f      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x168>
 8002f68:	2b30      	cmp	r3, #48	; 0x30
 8002f6a:	d064      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x156>
 8002f6c:	2b30      	cmp	r3, #48	; 0x30
 8002f6e:	d86b      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x168>
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	d060      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x156>
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d867      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x168>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d05c      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x156>
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d05a      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x156>
=======
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003446:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800344e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003460:	d03e      	beq.n	80034e0 <HAL_TIM_ConfigClockSource+0xd0>
 8003462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003466:	f200 8087 	bhi.w	8003578 <HAL_TIM_ConfigClockSource+0x168>
 800346a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346e:	f000 8085 	beq.w	800357c <HAL_TIM_ConfigClockSource+0x16c>
 8003472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003476:	d87f      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
 8003478:	2b70      	cmp	r3, #112	; 0x70
 800347a:	d01a      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0xa2>
 800347c:	2b70      	cmp	r3, #112	; 0x70
 800347e:	d87b      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
 8003480:	2b60      	cmp	r3, #96	; 0x60
 8003482:	d050      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0x116>
 8003484:	2b60      	cmp	r3, #96	; 0x60
 8003486:	d877      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
 8003488:	2b50      	cmp	r3, #80	; 0x50
 800348a:	d03c      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0xf6>
 800348c:	2b50      	cmp	r3, #80	; 0x50
 800348e:	d873      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d058      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x136>
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d86f      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
 8003498:	2b30      	cmp	r3, #48	; 0x30
 800349a:	d064      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x156>
 800349c:	2b30      	cmp	r3, #48	; 0x30
 800349e:	d86b      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d060      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x156>
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d867      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d05c      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x156>
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d05a      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x156>
>>>>>>> Stashed changes
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
<<<<<<< Updated upstream
 8002f80:	e062      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6899      	ldr	r1, [r3, #8]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f000 fb65 	bl	8003660 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fa4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	609a      	str	r2, [r3, #8]
      break;
 8002fae:	e04e      	b.n	800304e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	6899      	ldr	r1, [r3, #8]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f000 fb4e 	bl	8003660 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fd2:	609a      	str	r2, [r3, #8]
      break;
 8002fd4:	e03b      	b.n	800304e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6859      	ldr	r1, [r3, #4]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f000 fac2 	bl	800356c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2150      	movs	r1, #80	; 0x50
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fb1b 	bl	800362a <TIM_ITRx_SetConfig>
      break;
 8002ff4:	e02b      	b.n	800304e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6859      	ldr	r1, [r3, #4]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	461a      	mov	r2, r3
 8003004:	f000 fae1 	bl	80035ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2160      	movs	r1, #96	; 0x60
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fb0b 	bl	800362a <TIM_ITRx_SetConfig>
      break;
 8003014:	e01b      	b.n	800304e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6859      	ldr	r1, [r3, #4]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	461a      	mov	r2, r3
 8003024:	f000 faa2 	bl	800356c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2140      	movs	r1, #64	; 0x40
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fafb 	bl	800362a <TIM_ITRx_SetConfig>
      break;
 8003034:	e00b      	b.n	800304e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4619      	mov	r1, r3
 8003040:	4610      	mov	r0, r2
 8003042:	f000 faf2 	bl	800362a <TIM_ITRx_SetConfig>
      break;
 8003046:	e002      	b.n	800304e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003048:	bf00      	nop
 800304a:	e000      	b.n	800304e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800304c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_TIM_PeriodElapsedCallback>:
=======
 80034b0:	e062      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6899      	ldr	r1, [r3, #8]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f000 fb65 	bl	8003b90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	609a      	str	r2, [r3, #8]
      break;
 80034de:	e04e      	b.n	800357e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6899      	ldr	r1, [r3, #8]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f000 fb4e 	bl	8003b90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003502:	609a      	str	r2, [r3, #8]
      break;
 8003504:	e03b      	b.n	800357e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6859      	ldr	r1, [r3, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	461a      	mov	r2, r3
 8003514:	f000 fac2 	bl	8003a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2150      	movs	r1, #80	; 0x50
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fb1b 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 8003524:	e02b      	b.n	800357e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6859      	ldr	r1, [r3, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	461a      	mov	r2, r3
 8003534:	f000 fae1 	bl	8003afa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2160      	movs	r1, #96	; 0x60
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fb0b 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 8003544:	e01b      	b.n	800357e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6859      	ldr	r1, [r3, #4]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	461a      	mov	r2, r3
 8003554:	f000 faa2 	bl	8003a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2140      	movs	r1, #64	; 0x40
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fafb 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 8003564:	e00b      	b.n	800357e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4619      	mov	r1, r3
 8003570:	4610      	mov	r0, r2
 8003572:	f000 faf2 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 8003576:	e002      	b.n	800357e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003578:	bf00      	nop
 800357a:	e000      	b.n	800357e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800357c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
=======
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
=======
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_TIM_IC_CaptureCallback>:
=======
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Stashed changes
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
=======
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> Stashed changes
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
=======
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_TIM_TriggerCallback>:
=======
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIM_TriggerCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
=======
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <TIM_Base_SetConfig>:
=======
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a40      	ldr	r2, [pc, #256]	; (80031e0 <TIM_Base_SetConfig+0x114>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d013      	beq.n	800310c <TIM_Base_SetConfig+0x40>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ea:	d00f      	beq.n	800310c <TIM_Base_SetConfig+0x40>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a3d      	ldr	r2, [pc, #244]	; (80031e4 <TIM_Base_SetConfig+0x118>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00b      	beq.n	800310c <TIM_Base_SetConfig+0x40>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a3c      	ldr	r2, [pc, #240]	; (80031e8 <TIM_Base_SetConfig+0x11c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d007      	beq.n	800310c <TIM_Base_SetConfig+0x40>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a3b      	ldr	r2, [pc, #236]	; (80031ec <TIM_Base_SetConfig+0x120>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d003      	beq.n	800310c <TIM_Base_SetConfig+0x40>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3a      	ldr	r2, [pc, #232]	; (80031f0 <TIM_Base_SetConfig+0x124>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d108      	bne.n	800311e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a2f      	ldr	r2, [pc, #188]	; (80031e0 <TIM_Base_SetConfig+0x114>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d02b      	beq.n	800317e <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312c:	d027      	beq.n	800317e <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a2c      	ldr	r2, [pc, #176]	; (80031e4 <TIM_Base_SetConfig+0x118>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d023      	beq.n	800317e <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a2b      	ldr	r2, [pc, #172]	; (80031e8 <TIM_Base_SetConfig+0x11c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01f      	beq.n	800317e <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a2a      	ldr	r2, [pc, #168]	; (80031ec <TIM_Base_SetConfig+0x120>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d01b      	beq.n	800317e <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a29      	ldr	r2, [pc, #164]	; (80031f0 <TIM_Base_SetConfig+0x124>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d017      	beq.n	800317e <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a28      	ldr	r2, [pc, #160]	; (80031f4 <TIM_Base_SetConfig+0x128>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a27      	ldr	r2, [pc, #156]	; (80031f8 <TIM_Base_SetConfig+0x12c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00f      	beq.n	800317e <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a26      	ldr	r2, [pc, #152]	; (80031fc <TIM_Base_SetConfig+0x130>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00b      	beq.n	800317e <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a25      	ldr	r2, [pc, #148]	; (8003200 <TIM_Base_SetConfig+0x134>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a24      	ldr	r2, [pc, #144]	; (8003204 <TIM_Base_SetConfig+0x138>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d003      	beq.n	800317e <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a23      	ldr	r2, [pc, #140]	; (8003208 <TIM_Base_SetConfig+0x13c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d108      	bne.n	8003190 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4313      	orrs	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
=======
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a40      	ldr	r2, [pc, #256]	; (8003710 <TIM_Base_SetConfig+0x114>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d013      	beq.n	800363c <TIM_Base_SetConfig+0x40>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361a:	d00f      	beq.n	800363c <TIM_Base_SetConfig+0x40>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a3d      	ldr	r2, [pc, #244]	; (8003714 <TIM_Base_SetConfig+0x118>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00b      	beq.n	800363c <TIM_Base_SetConfig+0x40>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a3c      	ldr	r2, [pc, #240]	; (8003718 <TIM_Base_SetConfig+0x11c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d007      	beq.n	800363c <TIM_Base_SetConfig+0x40>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a3b      	ldr	r2, [pc, #236]	; (800371c <TIM_Base_SetConfig+0x120>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <TIM_Base_SetConfig+0x40>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a3a      	ldr	r2, [pc, #232]	; (8003720 <TIM_Base_SetConfig+0x124>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d108      	bne.n	800364e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a2f      	ldr	r2, [pc, #188]	; (8003710 <TIM_Base_SetConfig+0x114>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d02b      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365c:	d027      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2c      	ldr	r2, [pc, #176]	; (8003714 <TIM_Base_SetConfig+0x118>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d023      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a2b      	ldr	r2, [pc, #172]	; (8003718 <TIM_Base_SetConfig+0x11c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01f      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a2a      	ldr	r2, [pc, #168]	; (800371c <TIM_Base_SetConfig+0x120>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01b      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a29      	ldr	r2, [pc, #164]	; (8003720 <TIM_Base_SetConfig+0x124>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d017      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a28      	ldr	r2, [pc, #160]	; (8003724 <TIM_Base_SetConfig+0x128>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a27      	ldr	r2, [pc, #156]	; (8003728 <TIM_Base_SetConfig+0x12c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00f      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a26      	ldr	r2, [pc, #152]	; (800372c <TIM_Base_SetConfig+0x130>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00b      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a25      	ldr	r2, [pc, #148]	; (8003730 <TIM_Base_SetConfig+0x134>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d007      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a24      	ldr	r2, [pc, #144]	; (8003734 <TIM_Base_SetConfig+0x138>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d003      	beq.n	80036ae <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a23      	ldr	r2, [pc, #140]	; (8003738 <TIM_Base_SetConfig+0x13c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d108      	bne.n	80036c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <TIM_Base_SetConfig+0x114>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d003      	beq.n	80031c4 <TIM_Base_SetConfig+0xf8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <TIM_Base_SetConfig+0x124>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d103      	bne.n	80031cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30
=======
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <TIM_Base_SetConfig+0x114>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d003      	beq.n	80036f4 <TIM_Base_SetConfig+0xf8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a0c      	ldr	r2, [pc, #48]	; (8003720 <TIM_Base_SetConfig+0x124>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d103      	bne.n	80036fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	615a      	str	r2, [r3, #20]
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40010000 	.word	0x40010000
 80031e4:	40000400 	.word	0x40000400
 80031e8:	40000800 	.word	0x40000800
 80031ec:	40000c00 	.word	0x40000c00
 80031f0:	40010400 	.word	0x40010400
 80031f4:	40014000 	.word	0x40014000
 80031f8:	40014400 	.word	0x40014400
 80031fc:	40014800 	.word	0x40014800
 8003200:	40001800 	.word	0x40001800
 8003204:	40001c00 	.word	0x40001c00
 8003208:	40002000 	.word	0x40002000

0800320c <TIM_OC1_SetConfig>:
=======
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	615a      	str	r2, [r3, #20]
}
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40010000 	.word	0x40010000
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800
 800371c:	40000c00 	.word	0x40000c00
 8003720:	40010400 	.word	0x40010400
 8003724:	40014000 	.word	0x40014000
 8003728:	40014400 	.word	0x40014400
 800372c:	40014800 	.word	0x40014800
 8003730:	40001800 	.word	0x40001800
 8003734:	40001c00 	.word	0x40001c00
 8003738:	40002000 	.word	0x40002000

0800373c <TIM_OC1_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
=======
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< Updated upstream
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0201 	bic.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0303 	bic.w	r3, r3, #3
 8003242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f023 0302 	bic.w	r3, r3, #2
 8003254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a20      	ldr	r2, [pc, #128]	; (80032e4 <TIM_OC1_SetConfig+0xd8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d003      	beq.n	8003270 <TIM_OC1_SetConfig+0x64>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <TIM_OC1_SetConfig+0xdc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d10c      	bne.n	800328a <TIM_OC1_SetConfig+0x7e>
=======
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f023 0201 	bic.w	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0303 	bic.w	r3, r3, #3
 8003772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f023 0302 	bic.w	r3, r3, #2
 8003784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a20      	ldr	r2, [pc, #128]	; (8003814 <TIM_OC1_SetConfig+0xd8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <TIM_OC1_SetConfig+0x64>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a1f      	ldr	r2, [pc, #124]	; (8003818 <TIM_OC1_SetConfig+0xdc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d10c      	bne.n	80037ba <TIM_OC1_SetConfig+0x7e>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< Updated upstream
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f023 0308 	bic.w	r3, r3, #8
 8003276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f023 0304 	bic.w	r3, r3, #4
 8003288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <TIM_OC1_SetConfig+0xd8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d003      	beq.n	800329a <TIM_OC1_SetConfig+0x8e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <TIM_OC1_SetConfig+0xdc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d111      	bne.n	80032be <TIM_OC1_SetConfig+0xb2>
=======
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f023 0308 	bic.w	r3, r3, #8
 80037a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f023 0304 	bic.w	r3, r3, #4
 80037b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a15      	ldr	r2, [pc, #84]	; (8003814 <TIM_OC1_SetConfig+0xd8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d003      	beq.n	80037ca <TIM_OC1_SetConfig+0x8e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <TIM_OC1_SetConfig+0xdc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d111      	bne.n	80037ee <TIM_OC1_SetConfig+0xb2>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< Updated upstream
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
=======
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	621a      	str	r2, [r3, #32]
}
 80032d8:	bf00      	nop
 80032da:	371c      	adds	r7, #28
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40010400 	.word	0x40010400

080032ec <TIM_OC2_SetConfig>:
=======
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	621a      	str	r2, [r3, #32]
}
 8003808:	bf00      	nop
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	40010000 	.word	0x40010000
 8003818:	40010400 	.word	0x40010400

0800381c <TIM_OC2_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
=======
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< Updated upstream
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	f023 0210 	bic.w	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800331a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f023 0320 	bic.w	r3, r3, #32
 8003336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a22      	ldr	r2, [pc, #136]	; (80033d0 <TIM_OC2_SetConfig+0xe4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d003      	beq.n	8003354 <TIM_OC2_SetConfig+0x68>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a21      	ldr	r2, [pc, #132]	; (80033d4 <TIM_OC2_SetConfig+0xe8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d10d      	bne.n	8003370 <TIM_OC2_SetConfig+0x84>
=======
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f023 0210 	bic.w	r2, r3, #16
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0320 	bic.w	r3, r3, #32
 8003866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a22      	ldr	r2, [pc, #136]	; (8003900 <TIM_OC2_SetConfig+0xe4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_OC2_SetConfig+0x68>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a21      	ldr	r2, [pc, #132]	; (8003904 <TIM_OC2_SetConfig+0xe8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d10d      	bne.n	80038a0 <TIM_OC2_SetConfig+0x84>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< Updated upstream
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800335a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800336e:	617b      	str	r3, [r7, #20]
=======
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800388a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800389e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< Updated upstream
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <TIM_OC2_SetConfig+0xe4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_OC2_SetConfig+0x94>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <TIM_OC2_SetConfig+0xe8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d113      	bne.n	80033a8 <TIM_OC2_SetConfig+0xbc>
=======
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a17      	ldr	r2, [pc, #92]	; (8003900 <TIM_OC2_SetConfig+0xe4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_OC2_SetConfig+0x94>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a16      	ldr	r2, [pc, #88]	; (8003904 <TIM_OC2_SetConfig+0xe8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d113      	bne.n	80038d8 <TIM_OC2_SetConfig+0xbc>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< Updated upstream
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800338e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
=======
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40010000 	.word	0x40010000
 80033d4:	40010400 	.word	0x40010400

080033d8 <TIM_OC3_SetConfig>:
=======
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	621a      	str	r2, [r3, #32]
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40010000 	.word	0x40010000
 8003904:	40010400 	.word	0x40010400

08003908 <TIM_OC3_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
=======
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< Updated upstream
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0303 	bic.w	r3, r3, #3
 800340e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <TIM_OC3_SetConfig+0xe0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <TIM_OC3_SetConfig+0x66>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a20      	ldr	r2, [pc, #128]	; (80034bc <TIM_OC3_SetConfig+0xe4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d10d      	bne.n	800345a <TIM_OC3_SetConfig+0x82>
=======
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0303 	bic.w	r3, r3, #3
 800393e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <TIM_OC3_SetConfig+0xe0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <TIM_OC3_SetConfig+0x66>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a20      	ldr	r2, [pc, #128]	; (80039ec <TIM_OC3_SetConfig+0xe4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d10d      	bne.n	800398a <TIM_OC3_SetConfig+0x82>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< Updated upstream
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	021b      	lsls	r3, r3, #8
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a16      	ldr	r2, [pc, #88]	; (80034b8 <TIM_OC3_SetConfig+0xe0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d003      	beq.n	800346a <TIM_OC3_SetConfig+0x92>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a15      	ldr	r2, [pc, #84]	; (80034bc <TIM_OC3_SetConfig+0xe4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d113      	bne.n	8003492 <TIM_OC3_SetConfig+0xba>
=======
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a16      	ldr	r2, [pc, #88]	; (80039e8 <TIM_OC3_SetConfig+0xe0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <TIM_OC3_SetConfig+0x92>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a15      	ldr	r2, [pc, #84]	; (80039ec <TIM_OC3_SetConfig+0xe4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d113      	bne.n	80039c2 <TIM_OC3_SetConfig+0xba>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< Updated upstream
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
=======
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	621a      	str	r2, [r3, #32]
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	40010000 	.word	0x40010000
 80034bc:	40010400 	.word	0x40010400

080034c0 <TIM_OC4_SetConfig>:
=======
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	621a      	str	r2, [r3, #32]
}
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40010400 	.word	0x40010400

080039f0 <TIM_OC4_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
=======
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< Updated upstream
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800350a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	031b      	lsls	r3, r3, #12
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a12      	ldr	r2, [pc, #72]	; (8003564 <TIM_OC4_SetConfig+0xa4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_OC4_SetConfig+0x68>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a11      	ldr	r2, [pc, #68]	; (8003568 <TIM_OC4_SetConfig+0xa8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d109      	bne.n	800353c <TIM_OC4_SetConfig+0x7c>
=======
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	031b      	lsls	r3, r3, #12
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a12      	ldr	r2, [pc, #72]	; (8003a94 <TIM_OC4_SetConfig+0xa4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_OC4_SetConfig+0x68>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a11      	ldr	r2, [pc, #68]	; (8003a98 <TIM_OC4_SetConfig+0xa8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d109      	bne.n	8003a6c <TIM_OC4_SetConfig+0x7c>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< Updated upstream
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800352e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	019b      	lsls	r3, r3, #6
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
=======
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	019b      	lsls	r3, r3, #6
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	621a      	str	r2, [r3, #32]
}
 8003556:	bf00      	nop
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40010000 	.word	0x40010000
 8003568:	40010400 	.word	0x40010400

0800356c <TIM_TI1_ConfigInputStage>:
=======
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	621a      	str	r2, [r3, #32]
}
 8003a86:	bf00      	nop
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40010400 	.word	0x40010400

08003a9c <TIM_TI1_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
=======
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	f023 0201 	bic.w	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f023 030a 	bic.w	r3, r3, #10
 80035a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <TIM_TI2_ConfigInputStage>:
=======
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	f023 0201 	bic.w	r2, r3, #1
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f023 030a 	bic.w	r3, r3, #10
 8003ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <TIM_TI2_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 80035ca:	b480      	push	{r7}
 80035cc:	b087      	sub	sp, #28
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
=======
 8003afa:	b480      	push	{r7}
 8003afc:	b087      	sub	sp, #28
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< Updated upstream
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f023 0210 	bic.w	r2, r3, #16
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	031b      	lsls	r3, r3, #12
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003606:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	621a      	str	r2, [r3, #32]
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <TIM_ITRx_SetConfig>:
=======
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f023 0210 	bic.w	r2, r3, #16
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	031b      	lsls	r3, r3, #12
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <TIM_ITRx_SetConfig>:
>>>>>>> Stashed changes
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< Updated upstream
 800362a:	b480      	push	{r7}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
=======
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< Updated upstream
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	f043 0307 	orr.w	r3, r3, #7
 800364c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	609a      	str	r2, [r3, #8]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <TIM_ETR_SetConfig>:
=======
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f043 0307 	orr.w	r3, r3, #7
 8003b7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	609a      	str	r2, [r3, #8]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <TIM_ETR_SetConfig>:
>>>>>>> Stashed changes
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< Updated upstream
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800367a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	021a      	lsls	r2, r3, #8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	431a      	orrs	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4313      	orrs	r3, r2
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	609a      	str	r2, [r3, #8]
}
 8003694:	bf00      	nop
 8003696:	371c      	adds	r7, #28
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <TIM_CCxChannelCmd>:
=======
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003baa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	021a      	lsls	r2, r3, #8
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	609a      	str	r2, [r3, #8]
}
 8003bc4:	bf00      	nop
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <TIM_CCxChannelCmd>:
>>>>>>> Stashed changes
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< Updated upstream
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
=======
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< Updated upstream
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 031f 	and.w	r3, r3, #31
 80036b2:	2201      	movs	r2, #1
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a1a      	ldr	r2, [r3, #32]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	43db      	mvns	r3, r3
 80036c2:	401a      	ands	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	fa01 f303 	lsl.w	r3, r1, r3
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	621a      	str	r2, [r3, #32]
}
 80036de:	bf00      	nop
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	2201      	movs	r2, #1
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1a      	ldr	r2, [r3, #32]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a1a      	ldr	r2, [r3, #32]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	fa01 f303 	lsl.w	r3, r1, r3
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	621a      	str	r2, [r3, #32]
}
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> Stashed changes
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< Updated upstream
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
=======
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003700:	2302      	movs	r3, #2
 8003702:	e05a      	b.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a21      	ldr	r2, [pc, #132]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d022      	beq.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003750:	d01d      	beq.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a1d      	ldr	r2, [pc, #116]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d018      	beq.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a1b      	ldr	r2, [pc, #108]	; (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1a      	ldr	r2, [pc, #104]	; (80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00e      	beq.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d009      	beq.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a17      	ldr	r2, [pc, #92]	; (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d10c      	bne.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	4313      	orrs	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	609a      	str	r2, [r3, #8]
=======
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e05a      	b.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a21      	ldr	r2, [pc, #132]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d022      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c80:	d01d      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d018      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1b      	ldr	r2, [pc, #108]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1a      	ldr	r2, [pc, #104]	; (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00e      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d009      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a17      	ldr	r2, [pc, #92]	; (8003d0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a15      	ldr	r2, [pc, #84]	; (8003d10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< Updated upstream
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40010000 	.word	0x40010000
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40000800 	.word	0x40000800
 80037d4:	40000c00 	.word	0x40000c00
 80037d8:	40010400 	.word	0x40010400
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40001800 	.word	0x40001800

080037e4 <HAL_TIMEx_CommutCallback>:
=======
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800
 8003d04:	40000c00 	.word	0x40000c00
 8003d08:	40010400 	.word	0x40010400
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	40001800 	.word	0x40001800

08003d14 <HAL_TIMEx_CommutCallback>:
>>>>>>> Stashed changes
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
=======
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIMEx_BreakCallback>:
=======
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_TIMEx_BreakCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
=======
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_UART_Init>:
=======
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_UART_Init>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e03f      	b.n	800389e <HAL_UART_Init+0x92>
=======
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e03f      	b.n	8003dce <HAL_UART_Init+0x92>
>>>>>>> Stashed changes
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd fbd8 	bl	8000fe8 <HAL_UART_MspInit>
=======
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fd fbd8 	bl	8001518 <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800384e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fba1 	bl	8003f98 <UART_SetConfig>
=======
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2224      	movs	r2, #36	; 0x24
 8003d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 fba1 	bl	80044c8 <UART_SetConfig>
>>>>>>> Stashed changes

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003864:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003874:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003884:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_UART_Transmit>:
=======
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003da4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003db4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_UART_Transmit>:
>>>>>>> Stashed changes
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b088      	sub	sp, #32
 80038aa:	af02      	add	r7, sp, #8
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	f040 8083 	bne.w	80039ce <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_UART_Transmit+0x2e>
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e07b      	b.n	80039d0 <HAL_UART_Transmit+0x12a>
=======
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b088      	sub	sp, #32
 8003dda:	af02      	add	r7, sp, #8
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	f040 8083 	bne.w	8003efe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_UART_Transmit+0x2e>
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e07b      	b.n	8003f00 <HAL_UART_Transmit+0x12a>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< Updated upstream
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_UART_Transmit+0x40>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e074      	b.n	80039d0 <HAL_UART_Transmit+0x12a>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2221      	movs	r2, #33	; 0x21
 80038f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80038fc:	f7fd fcf2 	bl	80012e4 <HAL_GetTick>
 8003900:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	88fa      	ldrh	r2, [r7, #6]
 8003906:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003916:	e042      	b.n	800399e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392e:	d122      	bne.n	8003976 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2200      	movs	r2, #0
 8003938:	2180      	movs	r1, #128	; 0x80
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f9c0 	bl	8003cc0 <UART_WaitOnFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e042      	b.n	80039d0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800395c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d103      	bne.n	800396e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	3302      	adds	r3, #2
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	e017      	b.n	800399e <HAL_UART_Transmit+0xf8>
=======
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_UART_Transmit+0x40>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e074      	b.n	8003f00 <HAL_UART_Transmit+0x12a>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2221      	movs	r2, #33	; 0x21
 8003e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e2c:	f7fd fcf2 	bl	8001814 <HAL_GetTick>
 8003e30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	88fa      	ldrh	r2, [r7, #6]
 8003e36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	88fa      	ldrh	r2, [r7, #6]
 8003e3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003e46:	e042      	b.n	8003ece <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5e:	d122      	bne.n	8003ea6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2200      	movs	r2, #0
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f9c0 	bl	80041f0 <UART_WaitOnFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e042      	b.n	8003f00 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e8c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d103      	bne.n	8003e9e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	3302      	adds	r3, #2
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	e017      	b.n	8003ece <HAL_UART_Transmit+0xf8>
>>>>>>> Stashed changes
        }
        else
        {
          pData += 1U;
<<<<<<< Updated upstream
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	3301      	adds	r3, #1
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	e013      	b.n	800399e <HAL_UART_Transmit+0xf8>
=======
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	e013      	b.n	8003ece <HAL_UART_Transmit+0xf8>
>>>>>>> Stashed changes
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< Updated upstream
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2200      	movs	r2, #0
 800397e:	2180      	movs	r1, #128	; 0x80
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f99d 	bl	8003cc0 <UART_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e01f      	b.n	80039d0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	60ba      	str	r2, [r7, #8]
 8003996:	781a      	ldrb	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1b7      	bne.n	8003918 <HAL_UART_Transmit+0x72>
=======
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2200      	movs	r2, #0
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f99d 	bl	80041f0 <UART_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e01f      	b.n	8003f00 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	60ba      	str	r2, [r7, #8]
 8003ec6:	781a      	ldrb	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1b7      	bne.n	8003e48 <HAL_UART_Transmit+0x72>
>>>>>>> Stashed changes
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< Updated upstream
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2200      	movs	r2, #0
 80039b0:	2140      	movs	r1, #64	; 0x40
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f984 	bl	8003cc0 <UART_WaitOnFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e006      	b.n	80039d0 <HAL_UART_Transmit+0x12a>
=======
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2140      	movs	r1, #64	; 0x40
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f984 	bl	80041f0 <UART_WaitOnFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e006      	b.n	8003f00 <HAL_UART_Transmit+0x12a>
>>>>>>> Stashed changes
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	e000      	b.n	80039d0 <HAL_UART_Transmit+0x12a>
=======
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e000      	b.n	8003f00 <HAL_UART_Transmit+0x12a>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 80039ce:	2302      	movs	r3, #2
  }
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_UART_Receive_IT>:
=======
 8003efe:	2302      	movs	r3, #2
  }
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_UART_Receive_IT>:
>>>>>>> Stashed changes
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	4613      	mov	r3, r2
 80039e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d140      	bne.n	8003a74 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_UART_Receive_IT+0x26>
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e039      	b.n	8003a76 <HAL_UART_Receive_IT+0x9e>
=======
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	4613      	mov	r3, r2
 8003f14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d140      	bne.n	8003fa4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_UART_Receive_IT+0x26>
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e039      	b.n	8003fa6 <HAL_UART_Receive_IT+0x9e>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< Updated upstream
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_UART_Receive_IT+0x38>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e032      	b.n	8003a76 <HAL_UART_Receive_IT+0x9e>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2222      	movs	r2, #34	; 0x22
 8003a34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a4e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0220 	orr.w	r2, r2, #32
 8003a6e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e000      	b.n	8003a76 <HAL_UART_Receive_IT+0x9e>
=======
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_UART_Receive_IT+0x38>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e032      	b.n	8003fa6 <HAL_UART_Receive_IT+0x9e>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	88fa      	ldrh	r2, [r7, #6]
 8003f52:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	88fa      	ldrh	r2, [r7, #6]
 8003f58:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2222      	movs	r2, #34	; 0x22
 8003f64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f7e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0220 	orr.w	r2, r2, #32
 8003f9e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <HAL_UART_Receive_IT+0x9e>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8003a74:	2302      	movs	r3, #2
  }
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <HAL_UART_IRQHandler>:
=======
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <HAL_UART_IRQHandler>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10d      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x52>
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f9e0 	bl	8003e94 <UART_Receive_IT>
      return;
 8003ad4:	e0d0      	b.n	8003c78 <HAL_UART_IRQHandler+0x1f4>
=======
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10d      	bne.n	8004006 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_UART_IRQHandler+0x52>
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f9e0 	bl	80043c4 <UART_Receive_IT>
      return;
 8004004:	e0d0      	b.n	80041a8 <HAL_UART_IRQHandler+0x1f4>
>>>>>>> Stashed changes
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
<<<<<<< Updated upstream
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80b0 	beq.w	8003c3e <HAL_UART_IRQHandler+0x1ba>
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d105      	bne.n	8003af4 <HAL_UART_IRQHandler+0x70>
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80a5 	beq.w	8003c3e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <HAL_UART_IRQHandler+0x90>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0c:	f043 0201 	orr.w	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80b0 	beq.w	800416e <HAL_UART_IRQHandler+0x1ba>
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d105      	bne.n	8004024 <HAL_UART_IRQHandler+0x70>
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 80a5 	beq.w	800416e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_UART_IRQHandler+0x90>
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403c:	f043 0201 	orr.w	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< Updated upstream
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <HAL_UART_IRQHandler+0xb0>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	f043 0202 	orr.w	r2, r3, #2
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_UART_IRQHandler+0xb0>
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405c:	f043 0202 	orr.w	r2, r3, #2
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< Updated upstream
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_UART_IRQHandler+0xd0>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4c:	f043 0204 	orr.w	r2, r3, #4
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_UART_IRQHandler+0xd0>
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	f043 0204 	orr.w	r2, r3, #4
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
<<<<<<< Updated upstream
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00f      	beq.n	8003b7e <HAL_UART_IRQHandler+0xfa>
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d104      	bne.n	8003b72 <HAL_UART_IRQHandler+0xee>
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	f043 0208 	orr.w	r2, r3, #8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00f      	beq.n	80040ae <HAL_UART_IRQHandler+0xfa>
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d104      	bne.n	80040a2 <HAL_UART_IRQHandler+0xee>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a6:	f043 0208 	orr.w	r2, r3, #8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< Updated upstream
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d077      	beq.n	8003c76 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_UART_IRQHandler+0x11c>
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f97a 	bl	8003e94 <UART_Receive_IT>
=======
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d077      	beq.n	80041a6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <HAL_UART_IRQHandler+0x11c>
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f97a 	bl	80043c4 <UART_Receive_IT>
>>>>>>> Stashed changes
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	bf0c      	ite	eq
 8003bae:	2301      	moveq	r3, #1
 8003bb0:	2300      	movne	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <HAL_UART_IRQHandler+0x144>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d031      	beq.n	8003c2c <HAL_UART_IRQHandler+0x1a8>
=======
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b40      	cmp	r3, #64	; 0x40
 80040dc:	bf0c      	ite	eq
 80040de:	2301      	moveq	r3, #1
 80040e0:	2300      	movne	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d102      	bne.n	80040f8 <HAL_UART_IRQHandler+0x144>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d031      	beq.n	800415c <HAL_UART_IRQHandler+0x1a8>
>>>>>>> Stashed changes
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f8c3 	bl	8003d54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd8:	2b40      	cmp	r3, #64	; 0x40
 8003bda:	d123      	bne.n	8003c24 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d013      	beq.n	8003c1c <HAL_UART_IRQHandler+0x198>
=======
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f8c3 	bl	8004284 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004108:	2b40      	cmp	r3, #64	; 0x40
 800410a:	d123      	bne.n	8004154 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004120:	2b00      	cmp	r3, #0
 8004122:	d013      	beq.n	800414c <HAL_UART_IRQHandler+0x198>
>>>>>>> Stashed changes
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< Updated upstream
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf8:	4a21      	ldr	r2, [pc, #132]	; (8003c80 <HAL_UART_IRQHandler+0x1fc>)
 8003bfa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fd fd93 	bl	800172c <HAL_DMA_Abort_IT>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d016      	beq.n	8003c3a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c16:	4610      	mov	r0, r2
 8003c18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1a:	e00e      	b.n	8003c3a <HAL_UART_IRQHandler+0x1b6>
=======
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004128:	4a21      	ldr	r2, [pc, #132]	; (80041b0 <HAL_UART_IRQHandler+0x1fc>)
 800412a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004130:	4618      	mov	r0, r3
 8004132:	f7fd fd93 	bl	8001c5c <HAL_DMA_Abort_IT>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d016      	beq.n	800416a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004146:	4610      	mov	r0, r2
 8004148:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414a:	e00e      	b.n	800416a <HAL_UART_IRQHandler+0x1b6>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f845 	bl	8003cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c22:	e00a      	b.n	8003c3a <HAL_UART_IRQHandler+0x1b6>
=======
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f845 	bl	80041dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004152:	e00a      	b.n	800416a <HAL_UART_IRQHandler+0x1b6>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f841 	bl	8003cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2a:	e006      	b.n	8003c3a <HAL_UART_IRQHandler+0x1b6>
=======
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f841 	bl	80041dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415a:	e006      	b.n	800416a <HAL_UART_IRQHandler+0x1b6>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f83d 	bl	8003cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003c38:	e01d      	b.n	8003c76 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3a:	bf00      	nop
    return;
 8003c3c:	e01b      	b.n	8003c76 <HAL_UART_IRQHandler+0x1f2>
=======
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f83d 	bl	80041dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004168:	e01d      	b.n	80041a6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416a:	bf00      	nop
    return;
 800416c:	e01b      	b.n	80041a6 <HAL_UART_IRQHandler+0x1f2>
>>>>>>> Stashed changes
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< Updated upstream
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_UART_IRQHandler+0x1d6>
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8b0 	bl	8003db8 <UART_Transmit_IT>
    return;
 8003c58:	e00e      	b.n	8003c78 <HAL_UART_IRQHandler+0x1f4>
=======
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <HAL_UART_IRQHandler+0x1d6>
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f8b0 	bl	80042e8 <UART_Transmit_IT>
    return;
 8004188:	e00e      	b.n	80041a8 <HAL_UART_IRQHandler+0x1f4>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< Updated upstream
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d009      	beq.n	8003c78 <HAL_UART_IRQHandler+0x1f4>
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f8f8 	bl	8003e64 <UART_EndTransmit_IT>
    return;
 8003c74:	e000      	b.n	8003c78 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003c76:	bf00      	nop
  }
}
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	08003d91 	.word	0x08003d91

08003c84 <HAL_UART_TxCpltCallback>:
=======
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d009      	beq.n	80041a8 <HAL_UART_IRQHandler+0x1f4>
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f8f8 	bl	8004394 <UART_EndTransmit_IT>
    return;
 80041a4:	e000      	b.n	80041a8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80041a6:	bf00      	nop
  }
}
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	080042c1 	.word	0x080042c1

080041b4 <HAL_UART_TxCpltCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
=======
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_UART_RxCpltCallback>:
=======
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_UART_RxCpltCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
=======
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_UART_ErrorCallback>:
=======
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_UART_ErrorCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
=======
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <UART_WaitOnFlagUntilTimeout>:
=======
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd0:	e02c      	b.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d028      	beq.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ce0:	f7fd fb00 	bl	80012e4 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d21d      	bcs.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cfe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0201 	bic.w	r2, r2, #1
 8003d0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e00f      	b.n	8003d4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4013      	ands	r3, r2
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d0c3      	beq.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004200:	e02c      	b.n	800425c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d028      	beq.n	800425c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <UART_WaitOnFlagUntilTimeout+0x30>
 8004210:	f7fd fb00 	bl	8001814 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	429a      	cmp	r2, r3
 800421e:	d21d      	bcs.n	800425c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800422e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e00f      	b.n	800427c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4013      	ands	r3, r2
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	429a      	cmp	r2, r3
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	429a      	cmp	r2, r3
 8004278:	d0c3      	beq.n	8004202 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <UART_EndRxTransfer>:
=======
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <UART_DMAAbortOnError>:
=======
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800429a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0201 	bic.w	r2, r2, #1
 80042aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <UART_DMAAbortOnError>:
>>>>>>> Stashed changes
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f7ff ff7e 	bl	8003cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003db0:	bf00      	nop
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <UART_Transmit_IT>:
=======
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f7ff ff7e 	bl	80041dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <UART_Transmit_IT>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
=======
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< Updated upstream
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b21      	cmp	r3, #33	; 0x21
 8003dca:	d144      	bne.n	8003e56 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd4:	d11a      	bne.n	8003e0c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d105      	bne.n	8003e00 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	1c9a      	adds	r2, r3, #2
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	621a      	str	r2, [r3, #32]
 8003dfe:	e00e      	b.n	8003e1e <UART_Transmit_IT+0x66>
=======
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b21      	cmp	r3, #33	; 0x21
 80042fa:	d144      	bne.n	8004386 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004304:	d11a      	bne.n	800433c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	461a      	mov	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800431a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d105      	bne.n	8004330 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	1c9a      	adds	r2, r3, #2
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	621a      	str	r2, [r3, #32]
 800432e:	e00e      	b.n	800434e <UART_Transmit_IT+0x66>
>>>>>>> Stashed changes
      }
      else
      {
        huart->pTxBuffPtr += 1U;
<<<<<<< Updated upstream
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	621a      	str	r2, [r3, #32]
 8003e0a:	e008      	b.n	8003e1e <UART_Transmit_IT+0x66>
=======
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	621a      	str	r2, [r3, #32]
 800433a:	e008      	b.n	800434e <UART_Transmit_IT+0x66>
>>>>>>> Stashed changes
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< Updated upstream
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	1c59      	adds	r1, r3, #1
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6211      	str	r1, [r2, #32]
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10f      	bne.n	8003e52 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e000      	b.n	8003e58 <UART_Transmit_IT+0xa0>
=======
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	1c59      	adds	r1, r3, #1
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6211      	str	r1, [r2, #32]
 8004346:	781a      	ldrb	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29b      	uxth	r3, r3
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	4619      	mov	r1, r3
 800435c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10f      	bne.n	8004382 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004370:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004380:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	e000      	b.n	8004388 <UART_Transmit_IT+0xa0>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8003e56:	2302      	movs	r3, #2
  }
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <UART_EndTransmit_IT>:
=======
 8004386:	2302      	movs	r3, #2
  }
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <UART_EndTransmit_IT>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
=======
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< Updated upstream
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff fefd 	bl	8003c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <UART_Receive_IT>:
=======
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff fefd 	bl	80041b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <UART_Receive_IT>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
=======
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< Updated upstream
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b22      	cmp	r3, #34	; 0x22
 8003ea6:	d171      	bne.n	8003f8c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb0:	d123      	bne.n	8003efa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10e      	bne.n	8003ede <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	1c9a      	adds	r2, r3, #2
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28
 8003edc:	e029      	b.n	8003f32 <UART_Receive_IT+0x9e>
=======
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b22      	cmp	r3, #34	; 0x22
 80043d6:	d171      	bne.n	80044bc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e0:	d123      	bne.n	800442a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10e      	bne.n	800440e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	1c9a      	adds	r2, r3, #2
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	629a      	str	r2, [r3, #40]	; 0x28
 800440c:	e029      	b.n	8004462 <UART_Receive_IT+0x9e>
>>>>>>> Stashed changes
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
<<<<<<< Updated upstream
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ef8:	e01b      	b.n	8003f32 <UART_Receive_IT+0x9e>
=======
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	b29b      	uxth	r3, r3
 8004416:	b2db      	uxtb	r3, r3
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	629a      	str	r2, [r3, #40]	; 0x28
 8004428:	e01b      	b.n	8004462 <UART_Receive_IT+0x9e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
<<<<<<< Updated upstream
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6858      	ldr	r0, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	1c59      	adds	r1, r3, #1
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6291      	str	r1, [r2, #40]	; 0x28
 8003f12:	b2c2      	uxtb	r2, r0
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e00c      	b.n	8003f32 <UART_Receive_IT+0x9e>
=======
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6858      	ldr	r0, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	1c59      	adds	r1, r3, #1
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6291      	str	r1, [r2, #40]	; 0x28
 8004442:	b2c2      	uxtb	r2, r0
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	e00c      	b.n	8004462 <UART_Receive_IT+0x9e>
>>>>>>> Stashed changes
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< Updated upstream
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	1c58      	adds	r0, r3, #1
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	6288      	str	r0, [r1, #40]	; 0x28
 8003f2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]
=======
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	b2da      	uxtb	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004454:	1c58      	adds	r0, r3, #1
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	6288      	str	r0, [r1, #40]	; 0x28
 800445a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
      }
    }

    if (--huart->RxXferCount == 0U)
<<<<<<< Updated upstream
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d120      	bne.n	8003f88 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0220 	bic.w	r2, r2, #32
 8003f54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
=======
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29b      	uxth	r3, r3
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	4619      	mov	r1, r3
 8004470:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004472:	2b00      	cmp	r3, #0
 8004474:	d120      	bne.n	80044b8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0220 	bic.w	r2, r2, #32
 8004484:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004494:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695a      	ldr	r2, [r3, #20]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
<<<<<<< Updated upstream
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fe8a 	bl	8003c98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	e002      	b.n	8003f8e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	e000      	b.n	8003f8e <UART_Receive_IT+0xfa>
=======
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fe8a 	bl	80041c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	e002      	b.n	80044be <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	e000      	b.n	80044be <UART_Receive_IT+0xfa>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8003f8c:	2302      	movs	r3, #2
  }
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <UART_SetConfig>:
=======
 80044bc:	2302      	movs	r3, #2
  }
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <UART_SetConfig>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8003f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f9c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
=======
 80044c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044cc:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
>>>>>>> Stashed changes
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 8003fa6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fb2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fb6:	68d9      	ldr	r1, [r3, #12]
 8003fb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	ea40 0301 	orr.w	r3, r0, r1
 8003fc2:	6113      	str	r3, [r2, #16]
=======
 80044d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044e6:	68d9      	ldr	r1, [r3, #12]
 80044e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	ea40 0301 	orr.w	r3, r0, r1
 80044f2:	6113      	str	r3, [r2, #16]
>>>>>>> Stashed changes
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< Updated upstream
 8003fc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8003fe6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ff2:	f021 010c 	bic.w	r1, r1, #12
 8003ff6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004000:	430b      	orrs	r3, r1
 8004002:	60d3      	str	r3, [r2, #12]
=======
 80044f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	431a      	orrs	r2, r3
 8004502:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	431a      	orrs	r2, r3
 800450a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8004516:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004522:	f021 010c 	bic.w	r1, r1, #12
 8004526:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004530:	430b      	orrs	r3, r1
 8004532:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< Updated upstream
 8004004:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004010:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004014:	6999      	ldr	r1, [r3, #24]
 8004016:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	ea40 0301 	orr.w	r3, r0, r1
 8004020:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004022:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402c:	f040 824a 	bne.w	80044c4 <UART_SetConfig+0x52c>
=======
 8004534:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004540:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004544:	6999      	ldr	r1, [r3, #24]
 8004546:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	ea40 0301 	orr.w	r3, r0, r1
 8004550:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004552:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455c:	f040 824a 	bne.w	80049f4 <UART_SetConfig+0x52c>
>>>>>>> Stashed changes
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< Updated upstream
 8004030:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4b96      	ldr	r3, [pc, #600]	; (8004290 <UART_SetConfig+0x2f8>)
 8004038:	429a      	cmp	r2, r3
 800403a:	d006      	beq.n	800404a <UART_SetConfig+0xb2>
 800403c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b94      	ldr	r3, [pc, #592]	; (8004294 <UART_SetConfig+0x2fc>)
 8004044:	429a      	cmp	r2, r3
 8004046:	f040 8129 	bne.w	800429c <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800404a:	f7fe fc2b 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 800404e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004052:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004056:	2200      	movs	r2, #0
 8004058:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800405c:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004060:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004064:	4622      	mov	r2, r4
 8004066:	462b      	mov	r3, r5
 8004068:	1891      	adds	r1, r2, r2
 800406a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800406e:	415b      	adcs	r3, r3
 8004070:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004074:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004078:	4621      	mov	r1, r4
 800407a:	1851      	adds	r1, r2, r1
 800407c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004080:	4629      	mov	r1, r5
 8004082:	414b      	adcs	r3, r1
 8004084:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004094:	4649      	mov	r1, r9
 8004096:	00cb      	lsls	r3, r1, #3
 8004098:	4641      	mov	r1, r8
 800409a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800409e:	4641      	mov	r1, r8
 80040a0:	00ca      	lsls	r2, r1, #3
 80040a2:	4610      	mov	r0, r2
 80040a4:	4619      	mov	r1, r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	4622      	mov	r2, r4
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80040b0:	462b      	mov	r3, r5
 80040b2:	460a      	mov	r2, r1
 80040b4:	eb42 0303 	adc.w	r3, r2, r3
 80040b8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80040bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80040c8:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80040cc:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80040d0:	460b      	mov	r3, r1
 80040d2:	18db      	adds	r3, r3, r3
 80040d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040d8:	4613      	mov	r3, r2
 80040da:	eb42 0303 	adc.w	r3, r2, r3
 80040de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040e2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80040e6:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80040ea:	f7fc f8c1 	bl	8000270 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4b69      	ldr	r3, [pc, #420]	; (8004298 <UART_SetConfig+0x300>)
 80040f4:	fba3 2302 	umull	r2, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	011c      	lsls	r4, r3, #4
 80040fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004100:	2200      	movs	r2, #0
 8004102:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004106:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800410a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800410e:	4642      	mov	r2, r8
 8004110:	464b      	mov	r3, r9
 8004112:	1891      	adds	r1, r2, r2
 8004114:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004118:	415b      	adcs	r3, r3
 800411a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800411e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004122:	4641      	mov	r1, r8
 8004124:	1851      	adds	r1, r2, r1
 8004126:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800412a:	4649      	mov	r1, r9
 800412c:	414b      	adcs	r3, r1
 800412e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800413e:	4659      	mov	r1, fp
 8004140:	00cb      	lsls	r3, r1, #3
 8004142:	4651      	mov	r1, sl
 8004144:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004148:	4651      	mov	r1, sl
 800414a:	00ca      	lsls	r2, r1, #3
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	4603      	mov	r3, r0
 8004152:	4642      	mov	r2, r8
 8004154:	189b      	adds	r3, r3, r2
 8004156:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800415a:	464b      	mov	r3, r9
 800415c:	460a      	mov	r2, r1
 800415e:	eb42 0303 	adc.w	r3, r2, r3
 8004162:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8004166:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004172:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8004176:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800417a:	460b      	mov	r3, r1
 800417c:	18db      	adds	r3, r3, r3
 800417e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004182:	4613      	mov	r3, r2
 8004184:	eb42 0303 	adc.w	r3, r2, r3
 8004188:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800418c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004190:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004194:	f7fc f86c 	bl	8000270 <__aeabi_uldivmod>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4611      	mov	r1, r2
 800419e:	4b3e      	ldr	r3, [pc, #248]	; (8004298 <UART_SetConfig+0x300>)
 80041a0:	fba3 2301 	umull	r2, r3, r3, r1
 80041a4:	095b      	lsrs	r3, r3, #5
 80041a6:	2264      	movs	r2, #100	; 0x64
 80041a8:	fb02 f303 	mul.w	r3, r2, r3
 80041ac:	1acb      	subs	r3, r1, r3
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041b4:	4b38      	ldr	r3, [pc, #224]	; (8004298 <UART_SetConfig+0x300>)
 80041b6:	fba3 2302 	umull	r2, r3, r3, r2
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041c2:	441c      	add	r4, r3
 80041c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041c8:	2200      	movs	r2, #0
 80041ca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80041ce:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80041d2:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80041d6:	4642      	mov	r2, r8
 80041d8:	464b      	mov	r3, r9
 80041da:	1891      	adds	r1, r2, r2
 80041dc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80041e0:	415b      	adcs	r3, r3
 80041e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80041e6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80041ea:	4641      	mov	r1, r8
 80041ec:	1851      	adds	r1, r2, r1
 80041ee:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80041f2:	4649      	mov	r1, r9
 80041f4:	414b      	adcs	r3, r1
 80041f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8004206:	4659      	mov	r1, fp
 8004208:	00cb      	lsls	r3, r1, #3
 800420a:	4651      	mov	r1, sl
 800420c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004210:	4651      	mov	r1, sl
 8004212:	00ca      	lsls	r2, r1, #3
 8004214:	4610      	mov	r0, r2
 8004216:	4619      	mov	r1, r3
 8004218:	4603      	mov	r3, r0
 800421a:	4642      	mov	r2, r8
 800421c:	189b      	adds	r3, r3, r2
 800421e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004222:	464b      	mov	r3, r9
 8004224:	460a      	mov	r2, r1
 8004226:	eb42 0303 	adc.w	r3, r2, r3
 800422a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800422e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800423a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800423e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8004242:	460b      	mov	r3, r1
 8004244:	18db      	adds	r3, r3, r3
 8004246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800424a:	4613      	mov	r3, r2
 800424c:	eb42 0303 	adc.w	r3, r2, r3
 8004250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004254:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004258:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800425c:	f7fc f808 	bl	8000270 <__aeabi_uldivmod>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <UART_SetConfig+0x300>)
 8004266:	fba3 1302 	umull	r1, r3, r3, r2
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	2164      	movs	r1, #100	; 0x64
 800426e:	fb01 f303 	mul.w	r3, r1, r3
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	3332      	adds	r3, #50	; 0x32
 8004278:	4a07      	ldr	r2, [pc, #28]	; (8004298 <UART_SetConfig+0x300>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	f003 0207 	and.w	r2, r3, #7
 8004284:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4422      	add	r2, r4
 800428c:	609a      	str	r2, [r3, #8]
 800428e:	e349      	b.n	8004924 <UART_SetConfig+0x98c>
 8004290:	40011000 	.word	0x40011000
 8004294:	40011400 	.word	0x40011400
 8004298:	51eb851f 	.word	0x51eb851f
=======
 8004560:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4b96      	ldr	r3, [pc, #600]	; (80047c0 <UART_SetConfig+0x2f8>)
 8004568:	429a      	cmp	r2, r3
 800456a:	d006      	beq.n	800457a <UART_SetConfig+0xb2>
 800456c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b94      	ldr	r3, [pc, #592]	; (80047c4 <UART_SetConfig+0x2fc>)
 8004574:	429a      	cmp	r2, r3
 8004576:	f040 8129 	bne.w	80047cc <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800457a:	f7fe fc2b 	bl	8002dd4 <HAL_RCC_GetPCLK2Freq>
 800457e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004582:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004586:	2200      	movs	r2, #0
 8004588:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800458c:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004590:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004594:	4622      	mov	r2, r4
 8004596:	462b      	mov	r3, r5
 8004598:	1891      	adds	r1, r2, r2
 800459a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800459e:	415b      	adcs	r3, r3
 80045a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80045a4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80045a8:	4621      	mov	r1, r4
 80045aa:	1851      	adds	r1, r2, r1
 80045ac:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80045b0:	4629      	mov	r1, r5
 80045b2:	414b      	adcs	r3, r1
 80045b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80045c4:	4649      	mov	r1, r9
 80045c6:	00cb      	lsls	r3, r1, #3
 80045c8:	4641      	mov	r1, r8
 80045ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ce:	4641      	mov	r1, r8
 80045d0:	00ca      	lsls	r2, r1, #3
 80045d2:	4610      	mov	r0, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	4603      	mov	r3, r0
 80045d8:	4622      	mov	r2, r4
 80045da:	189b      	adds	r3, r3, r2
 80045dc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80045e0:	462b      	mov	r3, r5
 80045e2:	460a      	mov	r2, r1
 80045e4:	eb42 0303 	adc.w	r3, r2, r3
 80045e8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80045ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80045f8:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80045fc:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004600:	460b      	mov	r3, r1
 8004602:	18db      	adds	r3, r3, r3
 8004604:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004608:	4613      	mov	r3, r2
 800460a:	eb42 0303 	adc.w	r3, r2, r3
 800460e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004612:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004616:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800461a:	f7fb fe29 	bl	8000270 <__aeabi_uldivmod>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4b69      	ldr	r3, [pc, #420]	; (80047c8 <UART_SetConfig+0x300>)
 8004624:	fba3 2302 	umull	r2, r3, r3, r2
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	011c      	lsls	r4, r3, #4
 800462c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004630:	2200      	movs	r2, #0
 8004632:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004636:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800463a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800463e:	4642      	mov	r2, r8
 8004640:	464b      	mov	r3, r9
 8004642:	1891      	adds	r1, r2, r2
 8004644:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004648:	415b      	adcs	r3, r3
 800464a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800464e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004652:	4641      	mov	r1, r8
 8004654:	1851      	adds	r1, r2, r1
 8004656:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800465a:	4649      	mov	r1, r9
 800465c:	414b      	adcs	r3, r1
 800465e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800466e:	4659      	mov	r1, fp
 8004670:	00cb      	lsls	r3, r1, #3
 8004672:	4651      	mov	r1, sl
 8004674:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004678:	4651      	mov	r1, sl
 800467a:	00ca      	lsls	r2, r1, #3
 800467c:	4610      	mov	r0, r2
 800467e:	4619      	mov	r1, r3
 8004680:	4603      	mov	r3, r0
 8004682:	4642      	mov	r2, r8
 8004684:	189b      	adds	r3, r3, r2
 8004686:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800468a:	464b      	mov	r3, r9
 800468c:	460a      	mov	r2, r1
 800468e:	eb42 0303 	adc.w	r3, r2, r3
 8004692:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8004696:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80046a2:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80046a6:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80046aa:	460b      	mov	r3, r1
 80046ac:	18db      	adds	r3, r3, r3
 80046ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046b2:	4613      	mov	r3, r2
 80046b4:	eb42 0303 	adc.w	r3, r2, r3
 80046b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046bc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80046c0:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80046c4:	f7fb fdd4 	bl	8000270 <__aeabi_uldivmod>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4611      	mov	r1, r2
 80046ce:	4b3e      	ldr	r3, [pc, #248]	; (80047c8 <UART_SetConfig+0x300>)
 80046d0:	fba3 2301 	umull	r2, r3, r3, r1
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	2264      	movs	r2, #100	; 0x64
 80046d8:	fb02 f303 	mul.w	r3, r2, r3
 80046dc:	1acb      	subs	r3, r1, r3
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046e4:	4b38      	ldr	r3, [pc, #224]	; (80047c8 <UART_SetConfig+0x300>)
 80046e6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046f2:	441c      	add	r4, r3
 80046f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046f8:	2200      	movs	r2, #0
 80046fa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80046fe:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004702:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8004706:	4642      	mov	r2, r8
 8004708:	464b      	mov	r3, r9
 800470a:	1891      	adds	r1, r2, r2
 800470c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004710:	415b      	adcs	r3, r3
 8004712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004716:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800471a:	4641      	mov	r1, r8
 800471c:	1851      	adds	r1, r2, r1
 800471e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004722:	4649      	mov	r1, r9
 8004724:	414b      	adcs	r3, r1
 8004726:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8004736:	4659      	mov	r1, fp
 8004738:	00cb      	lsls	r3, r1, #3
 800473a:	4651      	mov	r1, sl
 800473c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004740:	4651      	mov	r1, sl
 8004742:	00ca      	lsls	r2, r1, #3
 8004744:	4610      	mov	r0, r2
 8004746:	4619      	mov	r1, r3
 8004748:	4603      	mov	r3, r0
 800474a:	4642      	mov	r2, r8
 800474c:	189b      	adds	r3, r3, r2
 800474e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004752:	464b      	mov	r3, r9
 8004754:	460a      	mov	r2, r1
 8004756:	eb42 0303 	adc.w	r3, r2, r3
 800475a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800475e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800476a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800476e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8004772:	460b      	mov	r3, r1
 8004774:	18db      	adds	r3, r3, r3
 8004776:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800477a:	4613      	mov	r3, r2
 800477c:	eb42 0303 	adc.w	r3, r2, r3
 8004780:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004784:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004788:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800478c:	f7fb fd70 	bl	8000270 <__aeabi_uldivmod>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <UART_SetConfig+0x300>)
 8004796:	fba3 1302 	umull	r1, r3, r3, r2
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	2164      	movs	r1, #100	; 0x64
 800479e:	fb01 f303 	mul.w	r3, r1, r3
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	3332      	adds	r3, #50	; 0x32
 80047a8:	4a07      	ldr	r2, [pc, #28]	; (80047c8 <UART_SetConfig+0x300>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	f003 0207 	and.w	r2, r3, #7
 80047b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4422      	add	r2, r4
 80047bc:	609a      	str	r2, [r3, #8]
 80047be:	e349      	b.n	8004e54 <UART_SetConfig+0x98c>
 80047c0:	40011000 	.word	0x40011000
 80047c4:	40011400 	.word	0x40011400
 80047c8:	51eb851f 	.word	0x51eb851f
>>>>>>> Stashed changes
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< Updated upstream
 800429c:	f7fe faee 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 80042a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042a8:	2200      	movs	r2, #0
 80042aa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80042ae:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80042b2:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80042b6:	4622      	mov	r2, r4
 80042b8:	462b      	mov	r3, r5
 80042ba:	1891      	adds	r1, r2, r2
 80042bc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80042c0:	415b      	adcs	r3, r3
 80042c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80042c6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80042ca:	4621      	mov	r1, r4
 80042cc:	eb12 0a01 	adds.w	sl, r2, r1
 80042d0:	4629      	mov	r1, r5
 80042d2:	eb43 0b01 	adc.w	fp, r3, r1
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042ea:	4692      	mov	sl, r2
 80042ec:	469b      	mov	fp, r3
 80042ee:	4623      	mov	r3, r4
 80042f0:	eb1a 0303 	adds.w	r3, sl, r3
 80042f4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80042f8:	462b      	mov	r3, r5
 80042fa:	eb4b 0303 	adc.w	r3, fp, r3
 80042fe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004302:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800430e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004312:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004316:	460b      	mov	r3, r1
 8004318:	18db      	adds	r3, r3, r3
 800431a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800431e:	4613      	mov	r3, r2
 8004320:	eb42 0303 	adc.w	r3, r2, r3
 8004324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004328:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800432c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004330:	f7fb ff9e 	bl	8000270 <__aeabi_uldivmod>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4b61      	ldr	r3, [pc, #388]	; (80044c0 <UART_SetConfig+0x528>)
 800433a:	fba3 2302 	umull	r2, r3, r3, r2
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	011c      	lsls	r4, r3, #4
 8004342:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004346:	2200      	movs	r2, #0
 8004348:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800434c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004350:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004354:	4642      	mov	r2, r8
 8004356:	464b      	mov	r3, r9
 8004358:	1891      	adds	r1, r2, r2
 800435a:	67b9      	str	r1, [r7, #120]	; 0x78
 800435c:	415b      	adcs	r3, r3
 800435e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004360:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004364:	4641      	mov	r1, r8
 8004366:	1851      	adds	r1, r2, r1
 8004368:	6739      	str	r1, [r7, #112]	; 0x70
 800436a:	4649      	mov	r1, r9
 800436c:	414b      	adcs	r3, r1
 800436e:	677b      	str	r3, [r7, #116]	; 0x74
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 800437c:	4659      	mov	r1, fp
 800437e:	00cb      	lsls	r3, r1, #3
 8004380:	4651      	mov	r1, sl
 8004382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004386:	4651      	mov	r1, sl
 8004388:	00ca      	lsls	r2, r1, #3
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	4603      	mov	r3, r0
 8004390:	4642      	mov	r2, r8
 8004392:	189b      	adds	r3, r3, r2
 8004394:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004398:	464b      	mov	r3, r9
 800439a:	460a      	mov	r2, r1
 800439c:	eb42 0303 	adc.w	r3, r2, r3
 80043a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80043a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80043b0:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80043b4:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80043b8:	460b      	mov	r3, r1
 80043ba:	18db      	adds	r3, r3, r3
 80043bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80043be:	4613      	mov	r3, r2
 80043c0:	eb42 0303 	adc.w	r3, r2, r3
 80043c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043c6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80043ca:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80043ce:	f7fb ff4f 	bl	8000270 <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4611      	mov	r1, r2
 80043d8:	4b39      	ldr	r3, [pc, #228]	; (80044c0 <UART_SetConfig+0x528>)
 80043da:	fba3 2301 	umull	r2, r3, r3, r1
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2264      	movs	r2, #100	; 0x64
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	1acb      	subs	r3, r1, r3
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043ee:	4b34      	ldr	r3, [pc, #208]	; (80044c0 <UART_SetConfig+0x528>)
 80043f0:	fba3 2302 	umull	r2, r3, r3, r2
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043fc:	441c      	add	r4, r3
 80043fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004402:	2200      	movs	r2, #0
 8004404:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004408:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800440c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004410:	4642      	mov	r2, r8
 8004412:	464b      	mov	r3, r9
 8004414:	1891      	adds	r1, r2, r2
 8004416:	6639      	str	r1, [r7, #96]	; 0x60
 8004418:	415b      	adcs	r3, r3
 800441a:	667b      	str	r3, [r7, #100]	; 0x64
 800441c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004420:	4641      	mov	r1, r8
 8004422:	1851      	adds	r1, r2, r1
 8004424:	65b9      	str	r1, [r7, #88]	; 0x58
 8004426:	4649      	mov	r1, r9
 8004428:	414b      	adcs	r3, r1
 800442a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004438:	4659      	mov	r1, fp
 800443a:	00cb      	lsls	r3, r1, #3
 800443c:	4651      	mov	r1, sl
 800443e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004442:	4651      	mov	r1, sl
 8004444:	00ca      	lsls	r2, r1, #3
 8004446:	4610      	mov	r0, r2
 8004448:	4619      	mov	r1, r3
 800444a:	4603      	mov	r3, r0
 800444c:	4642      	mov	r2, r8
 800444e:	189b      	adds	r3, r3, r2
 8004450:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004454:	464b      	mov	r3, r9
 8004456:	460a      	mov	r2, r1
 8004458:	eb42 0303 	adc.w	r3, r2, r3
 800445c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004460:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800446c:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004470:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004474:	460b      	mov	r3, r1
 8004476:	18db      	adds	r3, r3, r3
 8004478:	653b      	str	r3, [r7, #80]	; 0x50
 800447a:	4613      	mov	r3, r2
 800447c:	eb42 0303 	adc.w	r3, r2, r3
 8004480:	657b      	str	r3, [r7, #84]	; 0x54
 8004482:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004486:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800448a:	f7fb fef1 	bl	8000270 <__aeabi_uldivmod>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <UART_SetConfig+0x528>)
 8004494:	fba3 1302 	umull	r1, r3, r3, r2
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	2164      	movs	r1, #100	; 0x64
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	3332      	adds	r3, #50	; 0x32
 80044a6:	4a06      	ldr	r2, [pc, #24]	; (80044c0 <UART_SetConfig+0x528>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	f003 0207 	and.w	r2, r3, #7
 80044b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4422      	add	r2, r4
 80044ba:	609a      	str	r2, [r3, #8]
=======
 80047cc:	f7fe faee 	bl	8002dac <HAL_RCC_GetPCLK1Freq>
 80047d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047d8:	2200      	movs	r2, #0
 80047da:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80047de:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80047e2:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80047e6:	4622      	mov	r2, r4
 80047e8:	462b      	mov	r3, r5
 80047ea:	1891      	adds	r1, r2, r2
 80047ec:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80047f0:	415b      	adcs	r3, r3
 80047f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047f6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80047fa:	4621      	mov	r1, r4
 80047fc:	eb12 0a01 	adds.w	sl, r2, r1
 8004800:	4629      	mov	r1, r5
 8004802:	eb43 0b01 	adc.w	fp, r3, r1
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004812:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004816:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800481a:	4692      	mov	sl, r2
 800481c:	469b      	mov	fp, r3
 800481e:	4623      	mov	r3, r4
 8004820:	eb1a 0303 	adds.w	r3, sl, r3
 8004824:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004828:	462b      	mov	r3, r5
 800482a:	eb4b 0303 	adc.w	r3, fp, r3
 800482e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004832:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800483e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004842:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004846:	460b      	mov	r3, r1
 8004848:	18db      	adds	r3, r3, r3
 800484a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800484e:	4613      	mov	r3, r2
 8004850:	eb42 0303 	adc.w	r3, r2, r3
 8004854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004858:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800485c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004860:	f7fb fd06 	bl	8000270 <__aeabi_uldivmod>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4b61      	ldr	r3, [pc, #388]	; (80049f0 <UART_SetConfig+0x528>)
 800486a:	fba3 2302 	umull	r2, r3, r3, r2
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	011c      	lsls	r4, r3, #4
 8004872:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004876:	2200      	movs	r2, #0
 8004878:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800487c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004880:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	1891      	adds	r1, r2, r2
 800488a:	67b9      	str	r1, [r7, #120]	; 0x78
 800488c:	415b      	adcs	r3, r3
 800488e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004890:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004894:	4641      	mov	r1, r8
 8004896:	1851      	adds	r1, r2, r1
 8004898:	6739      	str	r1, [r7, #112]	; 0x70
 800489a:	4649      	mov	r1, r9
 800489c:	414b      	adcs	r3, r1
 800489e:	677b      	str	r3, [r7, #116]	; 0x74
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80048ac:	4659      	mov	r1, fp
 80048ae:	00cb      	lsls	r3, r1, #3
 80048b0:	4651      	mov	r1, sl
 80048b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b6:	4651      	mov	r1, sl
 80048b8:	00ca      	lsls	r2, r1, #3
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	4603      	mov	r3, r0
 80048c0:	4642      	mov	r2, r8
 80048c2:	189b      	adds	r3, r3, r2
 80048c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80048c8:	464b      	mov	r3, r9
 80048ca:	460a      	mov	r2, r1
 80048cc:	eb42 0303 	adc.w	r3, r2, r3
 80048d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80048d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80048e0:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80048e4:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80048e8:	460b      	mov	r3, r1
 80048ea:	18db      	adds	r3, r3, r3
 80048ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80048ee:	4613      	mov	r3, r2
 80048f0:	eb42 0303 	adc.w	r3, r2, r3
 80048f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048f6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80048fa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80048fe:	f7fb fcb7 	bl	8000270 <__aeabi_uldivmod>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4611      	mov	r1, r2
 8004908:	4b39      	ldr	r3, [pc, #228]	; (80049f0 <UART_SetConfig+0x528>)
 800490a:	fba3 2301 	umull	r2, r3, r3, r1
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	2264      	movs	r2, #100	; 0x64
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	1acb      	subs	r3, r1, r3
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800491e:	4b34      	ldr	r3, [pc, #208]	; (80049f0 <UART_SetConfig+0x528>)
 8004920:	fba3 2302 	umull	r2, r3, r3, r2
 8004924:	095b      	lsrs	r3, r3, #5
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800492c:	441c      	add	r4, r3
 800492e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004932:	2200      	movs	r2, #0
 8004934:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004938:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800493c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004940:	4642      	mov	r2, r8
 8004942:	464b      	mov	r3, r9
 8004944:	1891      	adds	r1, r2, r2
 8004946:	6639      	str	r1, [r7, #96]	; 0x60
 8004948:	415b      	adcs	r3, r3
 800494a:	667b      	str	r3, [r7, #100]	; 0x64
 800494c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004950:	4641      	mov	r1, r8
 8004952:	1851      	adds	r1, r2, r1
 8004954:	65b9      	str	r1, [r7, #88]	; 0x58
 8004956:	4649      	mov	r1, r9
 8004958:	414b      	adcs	r3, r1
 800495a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004968:	4659      	mov	r1, fp
 800496a:	00cb      	lsls	r3, r1, #3
 800496c:	4651      	mov	r1, sl
 800496e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004972:	4651      	mov	r1, sl
 8004974:	00ca      	lsls	r2, r1, #3
 8004976:	4610      	mov	r0, r2
 8004978:	4619      	mov	r1, r3
 800497a:	4603      	mov	r3, r0
 800497c:	4642      	mov	r2, r8
 800497e:	189b      	adds	r3, r3, r2
 8004980:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004984:	464b      	mov	r3, r9
 8004986:	460a      	mov	r2, r1
 8004988:	eb42 0303 	adc.w	r3, r2, r3
 800498c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004990:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800499c:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80049a0:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80049a4:	460b      	mov	r3, r1
 80049a6:	18db      	adds	r3, r3, r3
 80049a8:	653b      	str	r3, [r7, #80]	; 0x50
 80049aa:	4613      	mov	r3, r2
 80049ac:	eb42 0303 	adc.w	r3, r2, r3
 80049b0:	657b      	str	r3, [r7, #84]	; 0x54
 80049b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049b6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80049ba:	f7fb fc59 	bl	8000270 <__aeabi_uldivmod>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <UART_SetConfig+0x528>)
 80049c4:	fba3 1302 	umull	r1, r3, r3, r2
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	2164      	movs	r1, #100	; 0x64
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	3332      	adds	r3, #50	; 0x32
 80049d6:	4a06      	ldr	r2, [pc, #24]	; (80049f0 <UART_SetConfig+0x528>)
 80049d8:	fba2 2303 	umull	r2, r3, r2, r3
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	f003 0207 	and.w	r2, r3, #7
 80049e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4422      	add	r2, r4
 80049ea:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
<<<<<<< Updated upstream
 80044bc:	e232      	b.n	8004924 <UART_SetConfig+0x98c>
 80044be:	bf00      	nop
 80044c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	4b8d      	ldr	r3, [pc, #564]	; (8004700 <UART_SetConfig+0x768>)
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d006      	beq.n	80044de <UART_SetConfig+0x546>
 80044d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4b8b      	ldr	r3, [pc, #556]	; (8004704 <UART_SetConfig+0x76c>)
 80044d8:	429a      	cmp	r2, r3
 80044da:	f040 8117 	bne.w	800470c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80044de:	f7fe f9e1 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 80044e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80044f0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80044f4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80044f8:	4622      	mov	r2, r4
 80044fa:	462b      	mov	r3, r5
 80044fc:	1891      	adds	r1, r2, r2
 80044fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004500:	415b      	adcs	r3, r3
 8004502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004504:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004508:	4621      	mov	r1, r4
 800450a:	eb12 0801 	adds.w	r8, r2, r1
 800450e:	4629      	mov	r1, r5
 8004510:	eb43 0901 	adc.w	r9, r3, r1
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004520:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004524:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004528:	4690      	mov	r8, r2
 800452a:	4699      	mov	r9, r3
 800452c:	4623      	mov	r3, r4
 800452e:	eb18 0303 	adds.w	r3, r8, r3
 8004532:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004536:	462b      	mov	r3, r5
 8004538:	eb49 0303 	adc.w	r3, r9, r3
 800453c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004540:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800454c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800455c:	4629      	mov	r1, r5
 800455e:	008b      	lsls	r3, r1, #2
 8004560:	4621      	mov	r1, r4
 8004562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004566:	4621      	mov	r1, r4
 8004568:	008a      	lsls	r2, r1, #2
 800456a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 800456e:	f7fb fe7f 	bl	8000270 <__aeabi_uldivmod>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4b64      	ldr	r3, [pc, #400]	; (8004708 <UART_SetConfig+0x770>)
 8004578:	fba3 2302 	umull	r2, r3, r3, r2
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	011c      	lsls	r4, r3, #4
 8004580:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004584:	2200      	movs	r2, #0
 8004586:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800458a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800458e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004592:	4642      	mov	r2, r8
 8004594:	464b      	mov	r3, r9
 8004596:	1891      	adds	r1, r2, r2
 8004598:	6439      	str	r1, [r7, #64]	; 0x40
 800459a:	415b      	adcs	r3, r3
 800459c:	647b      	str	r3, [r7, #68]	; 0x44
 800459e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045a2:	4641      	mov	r1, r8
 80045a4:	1851      	adds	r1, r2, r1
 80045a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80045a8:	4649      	mov	r1, r9
 80045aa:	414b      	adcs	r3, r1
 80045ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80045ba:	4659      	mov	r1, fp
 80045bc:	00cb      	lsls	r3, r1, #3
 80045be:	4651      	mov	r1, sl
 80045c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045c4:	4651      	mov	r1, sl
 80045c6:	00ca      	lsls	r2, r1, #3
 80045c8:	4610      	mov	r0, r2
 80045ca:	4619      	mov	r1, r3
 80045cc:	4603      	mov	r3, r0
 80045ce:	4642      	mov	r2, r8
 80045d0:	189b      	adds	r3, r3, r2
 80045d2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80045d6:	464b      	mov	r3, r9
 80045d8:	460a      	mov	r2, r1
 80045da:	eb42 0303 	adc.w	r3, r2, r3
 80045de:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80045e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80045ee:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80045fe:	4649      	mov	r1, r9
 8004600:	008b      	lsls	r3, r1, #2
 8004602:	4641      	mov	r1, r8
 8004604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004608:	4641      	mov	r1, r8
 800460a:	008a      	lsls	r2, r1, #2
 800460c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004610:	f7fb fe2e 	bl	8000270 <__aeabi_uldivmod>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <UART_SetConfig+0x770>)
 800461a:	fba3 1302 	umull	r1, r3, r3, r2
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	2164      	movs	r1, #100	; 0x64
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	3332      	adds	r3, #50	; 0x32
 800462c:	4a36      	ldr	r2, [pc, #216]	; (8004708 <UART_SetConfig+0x770>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004638:	441c      	add	r4, r3
 800463a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800463e:	2200      	movs	r2, #0
 8004640:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004644:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004648:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800464c:	4642      	mov	r2, r8
 800464e:	464b      	mov	r3, r9
 8004650:	1891      	adds	r1, r2, r2
 8004652:	6339      	str	r1, [r7, #48]	; 0x30
 8004654:	415b      	adcs	r3, r3
 8004656:	637b      	str	r3, [r7, #52]	; 0x34
 8004658:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800465c:	4641      	mov	r1, r8
 800465e:	1851      	adds	r1, r2, r1
 8004660:	62b9      	str	r1, [r7, #40]	; 0x28
 8004662:	4649      	mov	r1, r9
 8004664:	414b      	adcs	r3, r1
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004674:	4659      	mov	r1, fp
 8004676:	00cb      	lsls	r3, r1, #3
 8004678:	4651      	mov	r1, sl
 800467a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800467e:	4651      	mov	r1, sl
 8004680:	00ca      	lsls	r2, r1, #3
 8004682:	4610      	mov	r0, r2
 8004684:	4619      	mov	r1, r3
 8004686:	4603      	mov	r3, r0
 8004688:	4642      	mov	r2, r8
 800468a:	189b      	adds	r3, r3, r2
 800468c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004690:	464b      	mov	r3, r9
 8004692:	460a      	mov	r2, r1
 8004694:	eb42 0303 	adc.w	r3, r2, r3
 8004698:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800469c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80046a8:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80046b8:	4649      	mov	r1, r9
 80046ba:	008b      	lsls	r3, r1, #2
 80046bc:	4641      	mov	r1, r8
 80046be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046c2:	4641      	mov	r1, r8
 80046c4:	008a      	lsls	r2, r1, #2
 80046c6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80046ca:	f7fb fdd1 	bl	8000270 <__aeabi_uldivmod>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <UART_SetConfig+0x770>)
 80046d4:	fba3 1302 	umull	r1, r3, r3, r2
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	2164      	movs	r1, #100	; 0x64
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	3332      	adds	r3, #50	; 0x32
 80046e6:	4a08      	ldr	r2, [pc, #32]	; (8004708 <UART_SetConfig+0x770>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	f003 020f 	and.w	r2, r3, #15
 80046f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4422      	add	r2, r4
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	e112      	b.n	8004924 <UART_SetConfig+0x98c>
 80046fe:	bf00      	nop
 8004700:	40011000 	.word	0x40011000
 8004704:	40011400 	.word	0x40011400
 8004708:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800470c:	f7fe f8b6 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8004710:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004714:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004718:	2200      	movs	r2, #0
 800471a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800471e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004722:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004726:	4642      	mov	r2, r8
 8004728:	464b      	mov	r3, r9
 800472a:	1891      	adds	r1, r2, r2
 800472c:	6239      	str	r1, [r7, #32]
 800472e:	415b      	adcs	r3, r3
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
 8004732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004736:	4641      	mov	r1, r8
 8004738:	1854      	adds	r4, r2, r1
 800473a:	4649      	mov	r1, r9
 800473c:	eb43 0501 	adc.w	r5, r3, r1
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	00eb      	lsls	r3, r5, #3
 800474a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800474e:	00e2      	lsls	r2, r4, #3
 8004750:	4614      	mov	r4, r2
 8004752:	461d      	mov	r5, r3
 8004754:	4643      	mov	r3, r8
 8004756:	18e3      	adds	r3, r4, r3
 8004758:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800475c:	464b      	mov	r3, r9
 800475e:	eb45 0303 	adc.w	r3, r5, r3
 8004762:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004766:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004772:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004782:	4629      	mov	r1, r5
 8004784:	008b      	lsls	r3, r1, #2
 8004786:	4621      	mov	r1, r4
 8004788:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800478c:	4621      	mov	r1, r4
 800478e:	008a      	lsls	r2, r1, #2
 8004790:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004794:	f7fb fd6c 	bl	8000270 <__aeabi_uldivmod>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4b64      	ldr	r3, [pc, #400]	; (8004930 <UART_SetConfig+0x998>)
 800479e:	fba3 2302 	umull	r2, r3, r3, r2
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	011c      	lsls	r4, r3, #4
 80047a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047b0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80047b4:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80047b8:	4642      	mov	r2, r8
 80047ba:	464b      	mov	r3, r9
 80047bc:	1891      	adds	r1, r2, r2
 80047be:	61b9      	str	r1, [r7, #24]
 80047c0:	415b      	adcs	r3, r3
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c8:	4641      	mov	r1, r8
 80047ca:	1851      	adds	r1, r2, r1
 80047cc:	6139      	str	r1, [r7, #16]
 80047ce:	4649      	mov	r1, r9
 80047d0:	414b      	adcs	r3, r1
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047e0:	4659      	mov	r1, fp
 80047e2:	00cb      	lsls	r3, r1, #3
 80047e4:	4651      	mov	r1, sl
 80047e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ea:	4651      	mov	r1, sl
 80047ec:	00ca      	lsls	r2, r1, #3
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	4603      	mov	r3, r0
 80047f4:	4642      	mov	r2, r8
 80047f6:	189b      	adds	r3, r3, r2
 80047f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80047fc:	464b      	mov	r3, r9
 80047fe:	460a      	mov	r2, r1
 8004800:	eb42 0303 	adc.w	r3, r2, r3
 8004804:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004808:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004814:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004824:	4649      	mov	r1, r9
 8004826:	008b      	lsls	r3, r1, #2
 8004828:	4641      	mov	r1, r8
 800482a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800482e:	4641      	mov	r1, r8
 8004830:	008a      	lsls	r2, r1, #2
 8004832:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004836:	f7fb fd1b 	bl	8000270 <__aeabi_uldivmod>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4b3c      	ldr	r3, [pc, #240]	; (8004930 <UART_SetConfig+0x998>)
 8004840:	fba3 1302 	umull	r1, r3, r3, r2
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	2164      	movs	r1, #100	; 0x64
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	3332      	adds	r3, #50	; 0x32
 8004852:	4a37      	ldr	r2, [pc, #220]	; (8004930 <UART_SetConfig+0x998>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485e:	441c      	add	r4, r3
 8004860:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004864:	2200      	movs	r2, #0
 8004866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800486a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800486e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004872:	4642      	mov	r2, r8
 8004874:	464b      	mov	r3, r9
 8004876:	1891      	adds	r1, r2, r2
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	415b      	adcs	r3, r3
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004882:	4641      	mov	r1, r8
 8004884:	1851      	adds	r1, r2, r1
 8004886:	6039      	str	r1, [r7, #0]
 8004888:	4649      	mov	r1, r9
 800488a:	414b      	adcs	r3, r1
 800488c:	607b      	str	r3, [r7, #4]
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800489a:	4659      	mov	r1, fp
 800489c:	00cb      	lsls	r3, r1, #3
 800489e:	4651      	mov	r1, sl
 80048a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048a4:	4651      	mov	r1, sl
 80048a6:	00ca      	lsls	r2, r1, #3
 80048a8:	4610      	mov	r0, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	4603      	mov	r3, r0
 80048ae:	4642      	mov	r2, r8
 80048b0:	189b      	adds	r3, r3, r2
 80048b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048b6:	464b      	mov	r3, r9
 80048b8:	460a      	mov	r2, r1
 80048ba:	eb42 0303 	adc.w	r3, r2, r3
 80048be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80048de:	4649      	mov	r1, r9
 80048e0:	008b      	lsls	r3, r1, #2
 80048e2:	4641      	mov	r1, r8
 80048e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e8:	4641      	mov	r1, r8
 80048ea:	008a      	lsls	r2, r1, #2
 80048ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048f0:	f7fb fcbe 	bl	8000270 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <UART_SetConfig+0x998>)
 80048fa:	fba3 1302 	umull	r1, r3, r3, r2
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	2164      	movs	r1, #100	; 0x64
 8004902:	fb01 f303 	mul.w	r3, r1, r3
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	3332      	adds	r3, #50	; 0x32
 800490c:	4a08      	ldr	r2, [pc, #32]	; (8004930 <UART_SetConfig+0x998>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	f003 020f 	and.w	r2, r3, #15
 8004918:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4422      	add	r2, r4
 8004920:	609a      	str	r2, [r3, #8]
}
 8004922:	e7ff      	b.n	8004924 <UART_SetConfig+0x98c>
 8004924:	bf00      	nop
 8004926:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800492a:	46bd      	mov	sp, r7
 800492c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004930:	51eb851f 	.word	0x51eb851f

08004934 <__errno>:
 8004934:	4b01      	ldr	r3, [pc, #4]	; (800493c <__errno+0x8>)
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	2000000c 	.word	0x2000000c

08004940 <__libc_init_array>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	4d0d      	ldr	r5, [pc, #52]	; (8004978 <__libc_init_array+0x38>)
 8004944:	4c0d      	ldr	r4, [pc, #52]	; (800497c <__libc_init_array+0x3c>)
 8004946:	1b64      	subs	r4, r4, r5
 8004948:	10a4      	asrs	r4, r4, #2
 800494a:	2600      	movs	r6, #0
 800494c:	42a6      	cmp	r6, r4
 800494e:	d109      	bne.n	8004964 <__libc_init_array+0x24>
 8004950:	4d0b      	ldr	r5, [pc, #44]	; (8004980 <__libc_init_array+0x40>)
 8004952:	4c0c      	ldr	r4, [pc, #48]	; (8004984 <__libc_init_array+0x44>)
 8004954:	f000 ffbc 	bl	80058d0 <_init>
 8004958:	1b64      	subs	r4, r4, r5
 800495a:	10a4      	asrs	r4, r4, #2
 800495c:	2600      	movs	r6, #0
 800495e:	42a6      	cmp	r6, r4
 8004960:	d105      	bne.n	800496e <__libc_init_array+0x2e>
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	f855 3b04 	ldr.w	r3, [r5], #4
 8004968:	4798      	blx	r3
 800496a:	3601      	adds	r6, #1
 800496c:	e7ee      	b.n	800494c <__libc_init_array+0xc>
 800496e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004972:	4798      	blx	r3
 8004974:	3601      	adds	r6, #1
 8004976:	e7f2      	b.n	800495e <__libc_init_array+0x1e>
 8004978:	08005a08 	.word	0x08005a08
 800497c:	08005a08 	.word	0x08005a08
 8004980:	08005a08 	.word	0x08005a08
 8004984:	08005a0c 	.word	0x08005a0c

08004988 <memcpy>:
 8004988:	440a      	add	r2, r1
 800498a:	4291      	cmp	r1, r2
 800498c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004990:	d100      	bne.n	8004994 <memcpy+0xc>
 8004992:	4770      	bx	lr
 8004994:	b510      	push	{r4, lr}
 8004996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800499a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800499e:	4291      	cmp	r1, r2
 80049a0:	d1f9      	bne.n	8004996 <memcpy+0xe>
 80049a2:	bd10      	pop	{r4, pc}

080049a4 <memset>:
 80049a4:	4402      	add	r2, r0
 80049a6:	4603      	mov	r3, r0
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d100      	bne.n	80049ae <memset+0xa>
 80049ac:	4770      	bx	lr
 80049ae:	f803 1b01 	strb.w	r1, [r3], #1
 80049b2:	e7f9      	b.n	80049a8 <memset+0x4>

080049b4 <iprintf>:
 80049b4:	b40f      	push	{r0, r1, r2, r3}
 80049b6:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <iprintf+0x2c>)
 80049b8:	b513      	push	{r0, r1, r4, lr}
 80049ba:	681c      	ldr	r4, [r3, #0]
 80049bc:	b124      	cbz	r4, 80049c8 <iprintf+0x14>
 80049be:	69a3      	ldr	r3, [r4, #24]
 80049c0:	b913      	cbnz	r3, 80049c8 <iprintf+0x14>
 80049c2:	4620      	mov	r0, r4
 80049c4:	f000 f866 	bl	8004a94 <__sinit>
 80049c8:	ab05      	add	r3, sp, #20
 80049ca:	9a04      	ldr	r2, [sp, #16]
 80049cc:	68a1      	ldr	r1, [r4, #8]
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	4620      	mov	r0, r4
 80049d2:	f000 f9bd 	bl	8004d50 <_vfiprintf_r>
 80049d6:	b002      	add	sp, #8
 80049d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049dc:	b004      	add	sp, #16
 80049de:	4770      	bx	lr
 80049e0:	2000000c 	.word	0x2000000c

080049e4 <std>:
 80049e4:	2300      	movs	r3, #0
 80049e6:	b510      	push	{r4, lr}
 80049e8:	4604      	mov	r4, r0
 80049ea:	e9c0 3300 	strd	r3, r3, [r0]
 80049ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049f2:	6083      	str	r3, [r0, #8]
 80049f4:	8181      	strh	r1, [r0, #12]
 80049f6:	6643      	str	r3, [r0, #100]	; 0x64
 80049f8:	81c2      	strh	r2, [r0, #14]
 80049fa:	6183      	str	r3, [r0, #24]
 80049fc:	4619      	mov	r1, r3
 80049fe:	2208      	movs	r2, #8
 8004a00:	305c      	adds	r0, #92	; 0x5c
 8004a02:	f7ff ffcf 	bl	80049a4 <memset>
 8004a06:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <std+0x38>)
 8004a08:	6263      	str	r3, [r4, #36]	; 0x24
 8004a0a:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <std+0x3c>)
 8004a0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a0e:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <std+0x40>)
 8004a10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <std+0x44>)
 8004a14:	6224      	str	r4, [r4, #32]
 8004a16:	6323      	str	r3, [r4, #48]	; 0x30
 8004a18:	bd10      	pop	{r4, pc}
 8004a1a:	bf00      	nop
 8004a1c:	080052f9 	.word	0x080052f9
 8004a20:	0800531b 	.word	0x0800531b
 8004a24:	08005353 	.word	0x08005353
 8004a28:	08005377 	.word	0x08005377

08004a2c <_cleanup_r>:
 8004a2c:	4901      	ldr	r1, [pc, #4]	; (8004a34 <_cleanup_r+0x8>)
 8004a2e:	f000 b8af 	b.w	8004b90 <_fwalk_reent>
 8004a32:	bf00      	nop
 8004a34:	08005651 	.word	0x08005651

08004a38 <__sfmoreglue>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	2268      	movs	r2, #104	; 0x68
 8004a3c:	1e4d      	subs	r5, r1, #1
 8004a3e:	4355      	muls	r5, r2
 8004a40:	460e      	mov	r6, r1
 8004a42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a46:	f000 f8e5 	bl	8004c14 <_malloc_r>
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	b140      	cbz	r0, 8004a60 <__sfmoreglue+0x28>
 8004a4e:	2100      	movs	r1, #0
 8004a50:	e9c0 1600 	strd	r1, r6, [r0]
 8004a54:	300c      	adds	r0, #12
 8004a56:	60a0      	str	r0, [r4, #8]
 8004a58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a5c:	f7ff ffa2 	bl	80049a4 <memset>
 8004a60:	4620      	mov	r0, r4
 8004a62:	bd70      	pop	{r4, r5, r6, pc}

08004a64 <__sfp_lock_acquire>:
 8004a64:	4801      	ldr	r0, [pc, #4]	; (8004a6c <__sfp_lock_acquire+0x8>)
 8004a66:	f000 b8b3 	b.w	8004bd0 <__retarget_lock_acquire_recursive>
 8004a6a:	bf00      	nop
 8004a6c:	2001333d 	.word	0x2001333d

08004a70 <__sfp_lock_release>:
 8004a70:	4801      	ldr	r0, [pc, #4]	; (8004a78 <__sfp_lock_release+0x8>)
 8004a72:	f000 b8ae 	b.w	8004bd2 <__retarget_lock_release_recursive>
 8004a76:	bf00      	nop
 8004a78:	2001333d 	.word	0x2001333d

08004a7c <__sinit_lock_acquire>:
 8004a7c:	4801      	ldr	r0, [pc, #4]	; (8004a84 <__sinit_lock_acquire+0x8>)
 8004a7e:	f000 b8a7 	b.w	8004bd0 <__retarget_lock_acquire_recursive>
 8004a82:	bf00      	nop
 8004a84:	2001333e 	.word	0x2001333e

08004a88 <__sinit_lock_release>:
 8004a88:	4801      	ldr	r0, [pc, #4]	; (8004a90 <__sinit_lock_release+0x8>)
 8004a8a:	f000 b8a2 	b.w	8004bd2 <__retarget_lock_release_recursive>
 8004a8e:	bf00      	nop
 8004a90:	2001333e 	.word	0x2001333e

08004a94 <__sinit>:
 8004a94:	b510      	push	{r4, lr}
 8004a96:	4604      	mov	r4, r0
 8004a98:	f7ff fff0 	bl	8004a7c <__sinit_lock_acquire>
 8004a9c:	69a3      	ldr	r3, [r4, #24]
 8004a9e:	b11b      	cbz	r3, 8004aa8 <__sinit+0x14>
 8004aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aa4:	f7ff bff0 	b.w	8004a88 <__sinit_lock_release>
 8004aa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004aac:	6523      	str	r3, [r4, #80]	; 0x50
 8004aae:	4b13      	ldr	r3, [pc, #76]	; (8004afc <__sinit+0x68>)
 8004ab0:	4a13      	ldr	r2, [pc, #76]	; (8004b00 <__sinit+0x6c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ab6:	42a3      	cmp	r3, r4
 8004ab8:	bf04      	itt	eq
 8004aba:	2301      	moveq	r3, #1
 8004abc:	61a3      	streq	r3, [r4, #24]
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f000 f820 	bl	8004b04 <__sfp>
 8004ac4:	6060      	str	r0, [r4, #4]
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f000 f81c 	bl	8004b04 <__sfp>
 8004acc:	60a0      	str	r0, [r4, #8]
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f000 f818 	bl	8004b04 <__sfp>
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	60e0      	str	r0, [r4, #12]
 8004ad8:	2104      	movs	r1, #4
 8004ada:	6860      	ldr	r0, [r4, #4]
 8004adc:	f7ff ff82 	bl	80049e4 <std>
 8004ae0:	68a0      	ldr	r0, [r4, #8]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	2109      	movs	r1, #9
 8004ae6:	f7ff ff7d 	bl	80049e4 <std>
 8004aea:	68e0      	ldr	r0, [r4, #12]
 8004aec:	2202      	movs	r2, #2
 8004aee:	2112      	movs	r1, #18
 8004af0:	f7ff ff78 	bl	80049e4 <std>
 8004af4:	2301      	movs	r3, #1
 8004af6:	61a3      	str	r3, [r4, #24]
 8004af8:	e7d2      	b.n	8004aa0 <__sinit+0xc>
 8004afa:	bf00      	nop
 8004afc:	08005968 	.word	0x08005968
 8004b00:	08004a2d 	.word	0x08004a2d

08004b04 <__sfp>:
 8004b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b06:	4607      	mov	r7, r0
 8004b08:	f7ff ffac 	bl	8004a64 <__sfp_lock_acquire>
 8004b0c:	4b1e      	ldr	r3, [pc, #120]	; (8004b88 <__sfp+0x84>)
 8004b0e:	681e      	ldr	r6, [r3, #0]
 8004b10:	69b3      	ldr	r3, [r6, #24]
 8004b12:	b913      	cbnz	r3, 8004b1a <__sfp+0x16>
 8004b14:	4630      	mov	r0, r6
 8004b16:	f7ff ffbd 	bl	8004a94 <__sinit>
 8004b1a:	3648      	adds	r6, #72	; 0x48
 8004b1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	d503      	bpl.n	8004b2c <__sfp+0x28>
 8004b24:	6833      	ldr	r3, [r6, #0]
 8004b26:	b30b      	cbz	r3, 8004b6c <__sfp+0x68>
 8004b28:	6836      	ldr	r6, [r6, #0]
 8004b2a:	e7f7      	b.n	8004b1c <__sfp+0x18>
 8004b2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b30:	b9d5      	cbnz	r5, 8004b68 <__sfp+0x64>
 8004b32:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <__sfp+0x88>)
 8004b34:	60e3      	str	r3, [r4, #12]
 8004b36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b3a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b3c:	f000 f847 	bl	8004bce <__retarget_lock_init_recursive>
 8004b40:	f7ff ff96 	bl	8004a70 <__sfp_lock_release>
 8004b44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b4c:	6025      	str	r5, [r4, #0]
 8004b4e:	61a5      	str	r5, [r4, #24]
 8004b50:	2208      	movs	r2, #8
 8004b52:	4629      	mov	r1, r5
 8004b54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b58:	f7ff ff24 	bl	80049a4 <memset>
 8004b5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b64:	4620      	mov	r0, r4
 8004b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b68:	3468      	adds	r4, #104	; 0x68
 8004b6a:	e7d9      	b.n	8004b20 <__sfp+0x1c>
 8004b6c:	2104      	movs	r1, #4
 8004b6e:	4638      	mov	r0, r7
 8004b70:	f7ff ff62 	bl	8004a38 <__sfmoreglue>
 8004b74:	4604      	mov	r4, r0
 8004b76:	6030      	str	r0, [r6, #0]
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d1d5      	bne.n	8004b28 <__sfp+0x24>
 8004b7c:	f7ff ff78 	bl	8004a70 <__sfp_lock_release>
 8004b80:	230c      	movs	r3, #12
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	e7ee      	b.n	8004b64 <__sfp+0x60>
 8004b86:	bf00      	nop
 8004b88:	08005968 	.word	0x08005968
 8004b8c:	ffff0001 	.word	0xffff0001

08004b90 <_fwalk_reent>:
 8004b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b94:	4606      	mov	r6, r0
 8004b96:	4688      	mov	r8, r1
 8004b98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b9c:	2700      	movs	r7, #0
 8004b9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ba2:	f1b9 0901 	subs.w	r9, r9, #1
 8004ba6:	d505      	bpl.n	8004bb4 <_fwalk_reent+0x24>
 8004ba8:	6824      	ldr	r4, [r4, #0]
 8004baa:	2c00      	cmp	r4, #0
 8004bac:	d1f7      	bne.n	8004b9e <_fwalk_reent+0xe>
 8004bae:	4638      	mov	r0, r7
 8004bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bb4:	89ab      	ldrh	r3, [r5, #12]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d907      	bls.n	8004bca <_fwalk_reent+0x3a>
 8004bba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	d003      	beq.n	8004bca <_fwalk_reent+0x3a>
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	47c0      	blx	r8
 8004bc8:	4307      	orrs	r7, r0
 8004bca:	3568      	adds	r5, #104	; 0x68
 8004bcc:	e7e9      	b.n	8004ba2 <_fwalk_reent+0x12>

08004bce <__retarget_lock_init_recursive>:
 8004bce:	4770      	bx	lr

08004bd0 <__retarget_lock_acquire_recursive>:
 8004bd0:	4770      	bx	lr

08004bd2 <__retarget_lock_release_recursive>:
 8004bd2:	4770      	bx	lr

08004bd4 <sbrk_aligned>:
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	4e0e      	ldr	r6, [pc, #56]	; (8004c10 <sbrk_aligned+0x3c>)
 8004bd8:	460c      	mov	r4, r1
 8004bda:	6831      	ldr	r1, [r6, #0]
 8004bdc:	4605      	mov	r5, r0
 8004bde:	b911      	cbnz	r1, 8004be6 <sbrk_aligned+0x12>
 8004be0:	f000 fb7a 	bl	80052d8 <_sbrk_r>
 8004be4:	6030      	str	r0, [r6, #0]
 8004be6:	4621      	mov	r1, r4
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 fb75 	bl	80052d8 <_sbrk_r>
 8004bee:	1c43      	adds	r3, r0, #1
 8004bf0:	d00a      	beq.n	8004c08 <sbrk_aligned+0x34>
 8004bf2:	1cc4      	adds	r4, r0, #3
 8004bf4:	f024 0403 	bic.w	r4, r4, #3
 8004bf8:	42a0      	cmp	r0, r4
 8004bfa:	d007      	beq.n	8004c0c <sbrk_aligned+0x38>
 8004bfc:	1a21      	subs	r1, r4, r0
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f000 fb6a 	bl	80052d8 <_sbrk_r>
 8004c04:	3001      	adds	r0, #1
 8004c06:	d101      	bne.n	8004c0c <sbrk_aligned+0x38>
 8004c08:	f04f 34ff 	mov.w	r4, #4294967295
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	20013344 	.word	0x20013344

08004c14 <_malloc_r>:
 8004c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c18:	1ccd      	adds	r5, r1, #3
 8004c1a:	f025 0503 	bic.w	r5, r5, #3
 8004c1e:	3508      	adds	r5, #8
 8004c20:	2d0c      	cmp	r5, #12
 8004c22:	bf38      	it	cc
 8004c24:	250c      	movcc	r5, #12
 8004c26:	2d00      	cmp	r5, #0
 8004c28:	4607      	mov	r7, r0
 8004c2a:	db01      	blt.n	8004c30 <_malloc_r+0x1c>
 8004c2c:	42a9      	cmp	r1, r5
 8004c2e:	d905      	bls.n	8004c3c <_malloc_r+0x28>
 8004c30:	230c      	movs	r3, #12
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	2600      	movs	r6, #0
 8004c36:	4630      	mov	r0, r6
 8004c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c3c:	4e2e      	ldr	r6, [pc, #184]	; (8004cf8 <_malloc_r+0xe4>)
 8004c3e:	f000 fdbb 	bl	80057b8 <__malloc_lock>
 8004c42:	6833      	ldr	r3, [r6, #0]
 8004c44:	461c      	mov	r4, r3
 8004c46:	bb34      	cbnz	r4, 8004c96 <_malloc_r+0x82>
 8004c48:	4629      	mov	r1, r5
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	f7ff ffc2 	bl	8004bd4 <sbrk_aligned>
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	4604      	mov	r4, r0
 8004c54:	d14d      	bne.n	8004cf2 <_malloc_r+0xde>
 8004c56:	6834      	ldr	r4, [r6, #0]
 8004c58:	4626      	mov	r6, r4
 8004c5a:	2e00      	cmp	r6, #0
 8004c5c:	d140      	bne.n	8004ce0 <_malloc_r+0xcc>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	4631      	mov	r1, r6
 8004c62:	4638      	mov	r0, r7
 8004c64:	eb04 0803 	add.w	r8, r4, r3
 8004c68:	f000 fb36 	bl	80052d8 <_sbrk_r>
 8004c6c:	4580      	cmp	r8, r0
 8004c6e:	d13a      	bne.n	8004ce6 <_malloc_r+0xd2>
 8004c70:	6821      	ldr	r1, [r4, #0]
 8004c72:	3503      	adds	r5, #3
 8004c74:	1a6d      	subs	r5, r5, r1
 8004c76:	f025 0503 	bic.w	r5, r5, #3
 8004c7a:	3508      	adds	r5, #8
 8004c7c:	2d0c      	cmp	r5, #12
 8004c7e:	bf38      	it	cc
 8004c80:	250c      	movcc	r5, #12
 8004c82:	4629      	mov	r1, r5
 8004c84:	4638      	mov	r0, r7
 8004c86:	f7ff ffa5 	bl	8004bd4 <sbrk_aligned>
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	d02b      	beq.n	8004ce6 <_malloc_r+0xd2>
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	442b      	add	r3, r5
 8004c92:	6023      	str	r3, [r4, #0]
 8004c94:	e00e      	b.n	8004cb4 <_malloc_r+0xa0>
 8004c96:	6822      	ldr	r2, [r4, #0]
 8004c98:	1b52      	subs	r2, r2, r5
 8004c9a:	d41e      	bmi.n	8004cda <_malloc_r+0xc6>
 8004c9c:	2a0b      	cmp	r2, #11
 8004c9e:	d916      	bls.n	8004cce <_malloc_r+0xba>
 8004ca0:	1961      	adds	r1, r4, r5
 8004ca2:	42a3      	cmp	r3, r4
 8004ca4:	6025      	str	r5, [r4, #0]
 8004ca6:	bf18      	it	ne
 8004ca8:	6059      	strne	r1, [r3, #4]
 8004caa:	6863      	ldr	r3, [r4, #4]
 8004cac:	bf08      	it	eq
 8004cae:	6031      	streq	r1, [r6, #0]
 8004cb0:	5162      	str	r2, [r4, r5]
 8004cb2:	604b      	str	r3, [r1, #4]
 8004cb4:	4638      	mov	r0, r7
 8004cb6:	f104 060b 	add.w	r6, r4, #11
 8004cba:	f000 fd83 	bl	80057c4 <__malloc_unlock>
 8004cbe:	f026 0607 	bic.w	r6, r6, #7
 8004cc2:	1d23      	adds	r3, r4, #4
 8004cc4:	1af2      	subs	r2, r6, r3
 8004cc6:	d0b6      	beq.n	8004c36 <_malloc_r+0x22>
 8004cc8:	1b9b      	subs	r3, r3, r6
 8004cca:	50a3      	str	r3, [r4, r2]
 8004ccc:	e7b3      	b.n	8004c36 <_malloc_r+0x22>
 8004cce:	6862      	ldr	r2, [r4, #4]
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	bf0c      	ite	eq
 8004cd4:	6032      	streq	r2, [r6, #0]
 8004cd6:	605a      	strne	r2, [r3, #4]
 8004cd8:	e7ec      	b.n	8004cb4 <_malloc_r+0xa0>
 8004cda:	4623      	mov	r3, r4
 8004cdc:	6864      	ldr	r4, [r4, #4]
 8004cde:	e7b2      	b.n	8004c46 <_malloc_r+0x32>
 8004ce0:	4634      	mov	r4, r6
 8004ce2:	6876      	ldr	r6, [r6, #4]
 8004ce4:	e7b9      	b.n	8004c5a <_malloc_r+0x46>
 8004ce6:	230c      	movs	r3, #12
 8004ce8:	603b      	str	r3, [r7, #0]
 8004cea:	4638      	mov	r0, r7
 8004cec:	f000 fd6a 	bl	80057c4 <__malloc_unlock>
 8004cf0:	e7a1      	b.n	8004c36 <_malloc_r+0x22>
 8004cf2:	6025      	str	r5, [r4, #0]
 8004cf4:	e7de      	b.n	8004cb4 <_malloc_r+0xa0>
 8004cf6:	bf00      	nop
 8004cf8:	20013340 	.word	0x20013340

08004cfc <__sfputc_r>:
 8004cfc:	6893      	ldr	r3, [r2, #8]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	b410      	push	{r4}
 8004d04:	6093      	str	r3, [r2, #8]
 8004d06:	da08      	bge.n	8004d1a <__sfputc_r+0x1e>
 8004d08:	6994      	ldr	r4, [r2, #24]
 8004d0a:	42a3      	cmp	r3, r4
 8004d0c:	db01      	blt.n	8004d12 <__sfputc_r+0x16>
 8004d0e:	290a      	cmp	r1, #10
 8004d10:	d103      	bne.n	8004d1a <__sfputc_r+0x1e>
 8004d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d16:	f000 bb33 	b.w	8005380 <__swbuf_r>
 8004d1a:	6813      	ldr	r3, [r2, #0]
 8004d1c:	1c58      	adds	r0, r3, #1
 8004d1e:	6010      	str	r0, [r2, #0]
 8004d20:	7019      	strb	r1, [r3, #0]
 8004d22:	4608      	mov	r0, r1
 8004d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <__sfputs_r>:
 8004d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2c:	4606      	mov	r6, r0
 8004d2e:	460f      	mov	r7, r1
 8004d30:	4614      	mov	r4, r2
 8004d32:	18d5      	adds	r5, r2, r3
 8004d34:	42ac      	cmp	r4, r5
 8004d36:	d101      	bne.n	8004d3c <__sfputs_r+0x12>
 8004d38:	2000      	movs	r0, #0
 8004d3a:	e007      	b.n	8004d4c <__sfputs_r+0x22>
 8004d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d40:	463a      	mov	r2, r7
 8004d42:	4630      	mov	r0, r6
 8004d44:	f7ff ffda 	bl	8004cfc <__sfputc_r>
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	d1f3      	bne.n	8004d34 <__sfputs_r+0xa>
 8004d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d50 <_vfiprintf_r>:
 8004d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d54:	460d      	mov	r5, r1
 8004d56:	b09d      	sub	sp, #116	; 0x74
 8004d58:	4614      	mov	r4, r2
 8004d5a:	4698      	mov	r8, r3
 8004d5c:	4606      	mov	r6, r0
 8004d5e:	b118      	cbz	r0, 8004d68 <_vfiprintf_r+0x18>
 8004d60:	6983      	ldr	r3, [r0, #24]
 8004d62:	b90b      	cbnz	r3, 8004d68 <_vfiprintf_r+0x18>
 8004d64:	f7ff fe96 	bl	8004a94 <__sinit>
 8004d68:	4b89      	ldr	r3, [pc, #548]	; (8004f90 <_vfiprintf_r+0x240>)
 8004d6a:	429d      	cmp	r5, r3
 8004d6c:	d11b      	bne.n	8004da6 <_vfiprintf_r+0x56>
 8004d6e:	6875      	ldr	r5, [r6, #4]
 8004d70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d72:	07d9      	lsls	r1, r3, #31
 8004d74:	d405      	bmi.n	8004d82 <_vfiprintf_r+0x32>
 8004d76:	89ab      	ldrh	r3, [r5, #12]
 8004d78:	059a      	lsls	r2, r3, #22
 8004d7a:	d402      	bmi.n	8004d82 <_vfiprintf_r+0x32>
 8004d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d7e:	f7ff ff27 	bl	8004bd0 <__retarget_lock_acquire_recursive>
 8004d82:	89ab      	ldrh	r3, [r5, #12]
 8004d84:	071b      	lsls	r3, r3, #28
 8004d86:	d501      	bpl.n	8004d8c <_vfiprintf_r+0x3c>
 8004d88:	692b      	ldr	r3, [r5, #16]
 8004d8a:	b9eb      	cbnz	r3, 8004dc8 <_vfiprintf_r+0x78>
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f000 fb5a 	bl	8005448 <__swsetup_r>
 8004d94:	b1c0      	cbz	r0, 8004dc8 <_vfiprintf_r+0x78>
 8004d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d98:	07dc      	lsls	r4, r3, #31
 8004d9a:	d50e      	bpl.n	8004dba <_vfiprintf_r+0x6a>
 8004d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004da0:	b01d      	add	sp, #116	; 0x74
 8004da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da6:	4b7b      	ldr	r3, [pc, #492]	; (8004f94 <_vfiprintf_r+0x244>)
 8004da8:	429d      	cmp	r5, r3
 8004daa:	d101      	bne.n	8004db0 <_vfiprintf_r+0x60>
 8004dac:	68b5      	ldr	r5, [r6, #8]
 8004dae:	e7df      	b.n	8004d70 <_vfiprintf_r+0x20>
 8004db0:	4b79      	ldr	r3, [pc, #484]	; (8004f98 <_vfiprintf_r+0x248>)
 8004db2:	429d      	cmp	r5, r3
 8004db4:	bf08      	it	eq
 8004db6:	68f5      	ldreq	r5, [r6, #12]
 8004db8:	e7da      	b.n	8004d70 <_vfiprintf_r+0x20>
 8004dba:	89ab      	ldrh	r3, [r5, #12]
 8004dbc:	0598      	lsls	r0, r3, #22
 8004dbe:	d4ed      	bmi.n	8004d9c <_vfiprintf_r+0x4c>
 8004dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dc2:	f7ff ff06 	bl	8004bd2 <__retarget_lock_release_recursive>
 8004dc6:	e7e9      	b.n	8004d9c <_vfiprintf_r+0x4c>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	9309      	str	r3, [sp, #36]	; 0x24
 8004dcc:	2320      	movs	r3, #32
 8004dce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dd6:	2330      	movs	r3, #48	; 0x30
 8004dd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f9c <_vfiprintf_r+0x24c>
 8004ddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004de0:	f04f 0901 	mov.w	r9, #1
 8004de4:	4623      	mov	r3, r4
 8004de6:	469a      	mov	sl, r3
 8004de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dec:	b10a      	cbz	r2, 8004df2 <_vfiprintf_r+0xa2>
 8004dee:	2a25      	cmp	r2, #37	; 0x25
 8004df0:	d1f9      	bne.n	8004de6 <_vfiprintf_r+0x96>
 8004df2:	ebba 0b04 	subs.w	fp, sl, r4
 8004df6:	d00b      	beq.n	8004e10 <_vfiprintf_r+0xc0>
 8004df8:	465b      	mov	r3, fp
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f7ff ff93 	bl	8004d2a <__sfputs_r>
 8004e04:	3001      	adds	r0, #1
 8004e06:	f000 80aa 	beq.w	8004f5e <_vfiprintf_r+0x20e>
 8004e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e0c:	445a      	add	r2, fp
 8004e0e:	9209      	str	r2, [sp, #36]	; 0x24
 8004e10:	f89a 3000 	ldrb.w	r3, [sl]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 80a2 	beq.w	8004f5e <_vfiprintf_r+0x20e>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e24:	f10a 0a01 	add.w	sl, sl, #1
 8004e28:	9304      	str	r3, [sp, #16]
 8004e2a:	9307      	str	r3, [sp, #28]
 8004e2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e30:	931a      	str	r3, [sp, #104]	; 0x68
 8004e32:	4654      	mov	r4, sl
 8004e34:	2205      	movs	r2, #5
 8004e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e3a:	4858      	ldr	r0, [pc, #352]	; (8004f9c <_vfiprintf_r+0x24c>)
 8004e3c:	f7fb f9c8 	bl	80001d0 <memchr>
 8004e40:	9a04      	ldr	r2, [sp, #16]
 8004e42:	b9d8      	cbnz	r0, 8004e7c <_vfiprintf_r+0x12c>
 8004e44:	06d1      	lsls	r1, r2, #27
 8004e46:	bf44      	itt	mi
 8004e48:	2320      	movmi	r3, #32
 8004e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e4e:	0713      	lsls	r3, r2, #28
 8004e50:	bf44      	itt	mi
 8004e52:	232b      	movmi	r3, #43	; 0x2b
 8004e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e58:	f89a 3000 	ldrb.w	r3, [sl]
 8004e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e5e:	d015      	beq.n	8004e8c <_vfiprintf_r+0x13c>
 8004e60:	9a07      	ldr	r2, [sp, #28]
 8004e62:	4654      	mov	r4, sl
 8004e64:	2000      	movs	r0, #0
 8004e66:	f04f 0c0a 	mov.w	ip, #10
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e70:	3b30      	subs	r3, #48	; 0x30
 8004e72:	2b09      	cmp	r3, #9
 8004e74:	d94e      	bls.n	8004f14 <_vfiprintf_r+0x1c4>
 8004e76:	b1b0      	cbz	r0, 8004ea6 <_vfiprintf_r+0x156>
 8004e78:	9207      	str	r2, [sp, #28]
 8004e7a:	e014      	b.n	8004ea6 <_vfiprintf_r+0x156>
 8004e7c:	eba0 0308 	sub.w	r3, r0, r8
 8004e80:	fa09 f303 	lsl.w	r3, r9, r3
 8004e84:	4313      	orrs	r3, r2
 8004e86:	9304      	str	r3, [sp, #16]
 8004e88:	46a2      	mov	sl, r4
 8004e8a:	e7d2      	b.n	8004e32 <_vfiprintf_r+0xe2>
 8004e8c:	9b03      	ldr	r3, [sp, #12]
 8004e8e:	1d19      	adds	r1, r3, #4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	9103      	str	r1, [sp, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bfbb      	ittet	lt
 8004e98:	425b      	neglt	r3, r3
 8004e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8004e9e:	9307      	strge	r3, [sp, #28]
 8004ea0:	9307      	strlt	r3, [sp, #28]
 8004ea2:	bfb8      	it	lt
 8004ea4:	9204      	strlt	r2, [sp, #16]
 8004ea6:	7823      	ldrb	r3, [r4, #0]
 8004ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8004eaa:	d10c      	bne.n	8004ec6 <_vfiprintf_r+0x176>
 8004eac:	7863      	ldrb	r3, [r4, #1]
 8004eae:	2b2a      	cmp	r3, #42	; 0x2a
 8004eb0:	d135      	bne.n	8004f1e <_vfiprintf_r+0x1ce>
 8004eb2:	9b03      	ldr	r3, [sp, #12]
 8004eb4:	1d1a      	adds	r2, r3, #4
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	9203      	str	r2, [sp, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bfb8      	it	lt
 8004ebe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ec2:	3402      	adds	r4, #2
 8004ec4:	9305      	str	r3, [sp, #20]
 8004ec6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004fac <_vfiprintf_r+0x25c>
 8004eca:	7821      	ldrb	r1, [r4, #0]
 8004ecc:	2203      	movs	r2, #3
 8004ece:	4650      	mov	r0, sl
 8004ed0:	f7fb f97e 	bl	80001d0 <memchr>
 8004ed4:	b140      	cbz	r0, 8004ee8 <_vfiprintf_r+0x198>
 8004ed6:	2340      	movs	r3, #64	; 0x40
 8004ed8:	eba0 000a 	sub.w	r0, r0, sl
 8004edc:	fa03 f000 	lsl.w	r0, r3, r0
 8004ee0:	9b04      	ldr	r3, [sp, #16]
 8004ee2:	4303      	orrs	r3, r0
 8004ee4:	3401      	adds	r4, #1
 8004ee6:	9304      	str	r3, [sp, #16]
 8004ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eec:	482c      	ldr	r0, [pc, #176]	; (8004fa0 <_vfiprintf_r+0x250>)
 8004eee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ef2:	2206      	movs	r2, #6
 8004ef4:	f7fb f96c 	bl	80001d0 <memchr>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d03f      	beq.n	8004f7c <_vfiprintf_r+0x22c>
 8004efc:	4b29      	ldr	r3, [pc, #164]	; (8004fa4 <_vfiprintf_r+0x254>)
 8004efe:	bb1b      	cbnz	r3, 8004f48 <_vfiprintf_r+0x1f8>
 8004f00:	9b03      	ldr	r3, [sp, #12]
 8004f02:	3307      	adds	r3, #7
 8004f04:	f023 0307 	bic.w	r3, r3, #7
 8004f08:	3308      	adds	r3, #8
 8004f0a:	9303      	str	r3, [sp, #12]
 8004f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f0e:	443b      	add	r3, r7
 8004f10:	9309      	str	r3, [sp, #36]	; 0x24
 8004f12:	e767      	b.n	8004de4 <_vfiprintf_r+0x94>
 8004f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f18:	460c      	mov	r4, r1
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	e7a5      	b.n	8004e6a <_vfiprintf_r+0x11a>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	3401      	adds	r4, #1
 8004f22:	9305      	str	r3, [sp, #20]
 8004f24:	4619      	mov	r1, r3
 8004f26:	f04f 0c0a 	mov.w	ip, #10
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f30:	3a30      	subs	r2, #48	; 0x30
 8004f32:	2a09      	cmp	r2, #9
 8004f34:	d903      	bls.n	8004f3e <_vfiprintf_r+0x1ee>
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0c5      	beq.n	8004ec6 <_vfiprintf_r+0x176>
 8004f3a:	9105      	str	r1, [sp, #20]
 8004f3c:	e7c3      	b.n	8004ec6 <_vfiprintf_r+0x176>
 8004f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f42:	4604      	mov	r4, r0
 8004f44:	2301      	movs	r3, #1
 8004f46:	e7f0      	b.n	8004f2a <_vfiprintf_r+0x1da>
 8004f48:	ab03      	add	r3, sp, #12
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	462a      	mov	r2, r5
 8004f4e:	4b16      	ldr	r3, [pc, #88]	; (8004fa8 <_vfiprintf_r+0x258>)
 8004f50:	a904      	add	r1, sp, #16
 8004f52:	4630      	mov	r0, r6
 8004f54:	f3af 8000 	nop.w
 8004f58:	4607      	mov	r7, r0
 8004f5a:	1c78      	adds	r0, r7, #1
 8004f5c:	d1d6      	bne.n	8004f0c <_vfiprintf_r+0x1bc>
 8004f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f60:	07d9      	lsls	r1, r3, #31
 8004f62:	d405      	bmi.n	8004f70 <_vfiprintf_r+0x220>
 8004f64:	89ab      	ldrh	r3, [r5, #12]
 8004f66:	059a      	lsls	r2, r3, #22
 8004f68:	d402      	bmi.n	8004f70 <_vfiprintf_r+0x220>
 8004f6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f6c:	f7ff fe31 	bl	8004bd2 <__retarget_lock_release_recursive>
 8004f70:	89ab      	ldrh	r3, [r5, #12]
 8004f72:	065b      	lsls	r3, r3, #25
 8004f74:	f53f af12 	bmi.w	8004d9c <_vfiprintf_r+0x4c>
 8004f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f7a:	e711      	b.n	8004da0 <_vfiprintf_r+0x50>
 8004f7c:	ab03      	add	r3, sp, #12
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	462a      	mov	r2, r5
 8004f82:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <_vfiprintf_r+0x258>)
 8004f84:	a904      	add	r1, sp, #16
 8004f86:	4630      	mov	r0, r6
 8004f88:	f000 f880 	bl	800508c <_printf_i>
 8004f8c:	e7e4      	b.n	8004f58 <_vfiprintf_r+0x208>
 8004f8e:	bf00      	nop
 8004f90:	0800598c 	.word	0x0800598c
 8004f94:	080059ac 	.word	0x080059ac
 8004f98:	0800596c 	.word	0x0800596c
 8004f9c:	080059cc 	.word	0x080059cc
 8004fa0:	080059d6 	.word	0x080059d6
 8004fa4:	00000000 	.word	0x00000000
 8004fa8:	08004d2b 	.word	0x08004d2b
 8004fac:	080059d2 	.word	0x080059d2

08004fb0 <_printf_common>:
 8004fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb4:	4616      	mov	r6, r2
 8004fb6:	4699      	mov	r9, r3
 8004fb8:	688a      	ldr	r2, [r1, #8]
 8004fba:	690b      	ldr	r3, [r1, #16]
 8004fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	bfb8      	it	lt
 8004fc4:	4613      	movlt	r3, r2
 8004fc6:	6033      	str	r3, [r6, #0]
 8004fc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fcc:	4607      	mov	r7, r0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	b10a      	cbz	r2, 8004fd6 <_printf_common+0x26>
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	6033      	str	r3, [r6, #0]
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	0699      	lsls	r1, r3, #26
 8004fda:	bf42      	ittt	mi
 8004fdc:	6833      	ldrmi	r3, [r6, #0]
 8004fde:	3302      	addmi	r3, #2
 8004fe0:	6033      	strmi	r3, [r6, #0]
 8004fe2:	6825      	ldr	r5, [r4, #0]
 8004fe4:	f015 0506 	ands.w	r5, r5, #6
 8004fe8:	d106      	bne.n	8004ff8 <_printf_common+0x48>
 8004fea:	f104 0a19 	add.w	sl, r4, #25
 8004fee:	68e3      	ldr	r3, [r4, #12]
 8004ff0:	6832      	ldr	r2, [r6, #0]
 8004ff2:	1a9b      	subs	r3, r3, r2
 8004ff4:	42ab      	cmp	r3, r5
 8004ff6:	dc26      	bgt.n	8005046 <_printf_common+0x96>
 8004ff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ffc:	1e13      	subs	r3, r2, #0
 8004ffe:	6822      	ldr	r2, [r4, #0]
 8005000:	bf18      	it	ne
 8005002:	2301      	movne	r3, #1
 8005004:	0692      	lsls	r2, r2, #26
 8005006:	d42b      	bmi.n	8005060 <_printf_common+0xb0>
 8005008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800500c:	4649      	mov	r1, r9
 800500e:	4638      	mov	r0, r7
 8005010:	47c0      	blx	r8
 8005012:	3001      	adds	r0, #1
 8005014:	d01e      	beq.n	8005054 <_printf_common+0xa4>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	68e5      	ldr	r5, [r4, #12]
 800501a:	6832      	ldr	r2, [r6, #0]
 800501c:	f003 0306 	and.w	r3, r3, #6
 8005020:	2b04      	cmp	r3, #4
 8005022:	bf08      	it	eq
 8005024:	1aad      	subeq	r5, r5, r2
 8005026:	68a3      	ldr	r3, [r4, #8]
 8005028:	6922      	ldr	r2, [r4, #16]
 800502a:	bf0c      	ite	eq
 800502c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005030:	2500      	movne	r5, #0
 8005032:	4293      	cmp	r3, r2
 8005034:	bfc4      	itt	gt
 8005036:	1a9b      	subgt	r3, r3, r2
 8005038:	18ed      	addgt	r5, r5, r3
 800503a:	2600      	movs	r6, #0
 800503c:	341a      	adds	r4, #26
 800503e:	42b5      	cmp	r5, r6
 8005040:	d11a      	bne.n	8005078 <_printf_common+0xc8>
 8005042:	2000      	movs	r0, #0
 8005044:	e008      	b.n	8005058 <_printf_common+0xa8>
 8005046:	2301      	movs	r3, #1
 8005048:	4652      	mov	r2, sl
 800504a:	4649      	mov	r1, r9
 800504c:	4638      	mov	r0, r7
 800504e:	47c0      	blx	r8
 8005050:	3001      	adds	r0, #1
 8005052:	d103      	bne.n	800505c <_printf_common+0xac>
 8005054:	f04f 30ff 	mov.w	r0, #4294967295
 8005058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800505c:	3501      	adds	r5, #1
 800505e:	e7c6      	b.n	8004fee <_printf_common+0x3e>
 8005060:	18e1      	adds	r1, r4, r3
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	2030      	movs	r0, #48	; 0x30
 8005066:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800506a:	4422      	add	r2, r4
 800506c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005074:	3302      	adds	r3, #2
 8005076:	e7c7      	b.n	8005008 <_printf_common+0x58>
 8005078:	2301      	movs	r3, #1
 800507a:	4622      	mov	r2, r4
 800507c:	4649      	mov	r1, r9
 800507e:	4638      	mov	r0, r7
 8005080:	47c0      	blx	r8
 8005082:	3001      	adds	r0, #1
 8005084:	d0e6      	beq.n	8005054 <_printf_common+0xa4>
 8005086:	3601      	adds	r6, #1
 8005088:	e7d9      	b.n	800503e <_printf_common+0x8e>
	...

0800508c <_printf_i>:
 800508c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005090:	7e0f      	ldrb	r7, [r1, #24]
 8005092:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005094:	2f78      	cmp	r7, #120	; 0x78
 8005096:	4691      	mov	r9, r2
 8005098:	4680      	mov	r8, r0
 800509a:	460c      	mov	r4, r1
 800509c:	469a      	mov	sl, r3
 800509e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050a2:	d807      	bhi.n	80050b4 <_printf_i+0x28>
 80050a4:	2f62      	cmp	r7, #98	; 0x62
 80050a6:	d80a      	bhi.n	80050be <_printf_i+0x32>
 80050a8:	2f00      	cmp	r7, #0
 80050aa:	f000 80d8 	beq.w	800525e <_printf_i+0x1d2>
 80050ae:	2f58      	cmp	r7, #88	; 0x58
 80050b0:	f000 80a3 	beq.w	80051fa <_printf_i+0x16e>
 80050b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050bc:	e03a      	b.n	8005134 <_printf_i+0xa8>
 80050be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050c2:	2b15      	cmp	r3, #21
 80050c4:	d8f6      	bhi.n	80050b4 <_printf_i+0x28>
 80050c6:	a101      	add	r1, pc, #4	; (adr r1, 80050cc <_printf_i+0x40>)
 80050c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050cc:	08005125 	.word	0x08005125
 80050d0:	08005139 	.word	0x08005139
 80050d4:	080050b5 	.word	0x080050b5
 80050d8:	080050b5 	.word	0x080050b5
 80050dc:	080050b5 	.word	0x080050b5
 80050e0:	080050b5 	.word	0x080050b5
 80050e4:	08005139 	.word	0x08005139
 80050e8:	080050b5 	.word	0x080050b5
 80050ec:	080050b5 	.word	0x080050b5
 80050f0:	080050b5 	.word	0x080050b5
 80050f4:	080050b5 	.word	0x080050b5
 80050f8:	08005245 	.word	0x08005245
 80050fc:	08005169 	.word	0x08005169
 8005100:	08005227 	.word	0x08005227
 8005104:	080050b5 	.word	0x080050b5
 8005108:	080050b5 	.word	0x080050b5
 800510c:	08005267 	.word	0x08005267
 8005110:	080050b5 	.word	0x080050b5
 8005114:	08005169 	.word	0x08005169
 8005118:	080050b5 	.word	0x080050b5
 800511c:	080050b5 	.word	0x080050b5
 8005120:	0800522f 	.word	0x0800522f
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	1d1a      	adds	r2, r3, #4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	602a      	str	r2, [r5, #0]
 800512c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005134:	2301      	movs	r3, #1
 8005136:	e0a3      	b.n	8005280 <_printf_i+0x1f4>
 8005138:	6820      	ldr	r0, [r4, #0]
 800513a:	6829      	ldr	r1, [r5, #0]
 800513c:	0606      	lsls	r6, r0, #24
 800513e:	f101 0304 	add.w	r3, r1, #4
 8005142:	d50a      	bpl.n	800515a <_printf_i+0xce>
 8005144:	680e      	ldr	r6, [r1, #0]
 8005146:	602b      	str	r3, [r5, #0]
 8005148:	2e00      	cmp	r6, #0
 800514a:	da03      	bge.n	8005154 <_printf_i+0xc8>
 800514c:	232d      	movs	r3, #45	; 0x2d
 800514e:	4276      	negs	r6, r6
 8005150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005154:	485e      	ldr	r0, [pc, #376]	; (80052d0 <_printf_i+0x244>)
 8005156:	230a      	movs	r3, #10
 8005158:	e019      	b.n	800518e <_printf_i+0x102>
 800515a:	680e      	ldr	r6, [r1, #0]
 800515c:	602b      	str	r3, [r5, #0]
 800515e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005162:	bf18      	it	ne
 8005164:	b236      	sxthne	r6, r6
 8005166:	e7ef      	b.n	8005148 <_printf_i+0xbc>
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	6820      	ldr	r0, [r4, #0]
 800516c:	1d19      	adds	r1, r3, #4
 800516e:	6029      	str	r1, [r5, #0]
 8005170:	0601      	lsls	r1, r0, #24
 8005172:	d501      	bpl.n	8005178 <_printf_i+0xec>
 8005174:	681e      	ldr	r6, [r3, #0]
 8005176:	e002      	b.n	800517e <_printf_i+0xf2>
 8005178:	0646      	lsls	r6, r0, #25
 800517a:	d5fb      	bpl.n	8005174 <_printf_i+0xe8>
 800517c:	881e      	ldrh	r6, [r3, #0]
 800517e:	4854      	ldr	r0, [pc, #336]	; (80052d0 <_printf_i+0x244>)
 8005180:	2f6f      	cmp	r7, #111	; 0x6f
 8005182:	bf0c      	ite	eq
 8005184:	2308      	moveq	r3, #8
 8005186:	230a      	movne	r3, #10
 8005188:	2100      	movs	r1, #0
 800518a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800518e:	6865      	ldr	r5, [r4, #4]
 8005190:	60a5      	str	r5, [r4, #8]
 8005192:	2d00      	cmp	r5, #0
 8005194:	bfa2      	ittt	ge
 8005196:	6821      	ldrge	r1, [r4, #0]
 8005198:	f021 0104 	bicge.w	r1, r1, #4
 800519c:	6021      	strge	r1, [r4, #0]
 800519e:	b90e      	cbnz	r6, 80051a4 <_printf_i+0x118>
 80051a0:	2d00      	cmp	r5, #0
 80051a2:	d04d      	beq.n	8005240 <_printf_i+0x1b4>
 80051a4:	4615      	mov	r5, r2
 80051a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80051aa:	fb03 6711 	mls	r7, r3, r1, r6
 80051ae:	5dc7      	ldrb	r7, [r0, r7]
 80051b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051b4:	4637      	mov	r7, r6
 80051b6:	42bb      	cmp	r3, r7
 80051b8:	460e      	mov	r6, r1
 80051ba:	d9f4      	bls.n	80051a6 <_printf_i+0x11a>
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d10b      	bne.n	80051d8 <_printf_i+0x14c>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	07de      	lsls	r6, r3, #31
 80051c4:	d508      	bpl.n	80051d8 <_printf_i+0x14c>
 80051c6:	6923      	ldr	r3, [r4, #16]
 80051c8:	6861      	ldr	r1, [r4, #4]
 80051ca:	4299      	cmp	r1, r3
 80051cc:	bfde      	ittt	le
 80051ce:	2330      	movle	r3, #48	; 0x30
 80051d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051d8:	1b52      	subs	r2, r2, r5
 80051da:	6122      	str	r2, [r4, #16]
 80051dc:	f8cd a000 	str.w	sl, [sp]
 80051e0:	464b      	mov	r3, r9
 80051e2:	aa03      	add	r2, sp, #12
 80051e4:	4621      	mov	r1, r4
 80051e6:	4640      	mov	r0, r8
 80051e8:	f7ff fee2 	bl	8004fb0 <_printf_common>
 80051ec:	3001      	adds	r0, #1
 80051ee:	d14c      	bne.n	800528a <_printf_i+0x1fe>
 80051f0:	f04f 30ff 	mov.w	r0, #4294967295
 80051f4:	b004      	add	sp, #16
 80051f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051fa:	4835      	ldr	r0, [pc, #212]	; (80052d0 <_printf_i+0x244>)
 80051fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005200:	6829      	ldr	r1, [r5, #0]
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	f851 6b04 	ldr.w	r6, [r1], #4
 8005208:	6029      	str	r1, [r5, #0]
 800520a:	061d      	lsls	r5, r3, #24
 800520c:	d514      	bpl.n	8005238 <_printf_i+0x1ac>
 800520e:	07df      	lsls	r7, r3, #31
 8005210:	bf44      	itt	mi
 8005212:	f043 0320 	orrmi.w	r3, r3, #32
 8005216:	6023      	strmi	r3, [r4, #0]
 8005218:	b91e      	cbnz	r6, 8005222 <_printf_i+0x196>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	f023 0320 	bic.w	r3, r3, #32
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	2310      	movs	r3, #16
 8005224:	e7b0      	b.n	8005188 <_printf_i+0xfc>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	f043 0320 	orr.w	r3, r3, #32
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	2378      	movs	r3, #120	; 0x78
 8005230:	4828      	ldr	r0, [pc, #160]	; (80052d4 <_printf_i+0x248>)
 8005232:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005236:	e7e3      	b.n	8005200 <_printf_i+0x174>
 8005238:	0659      	lsls	r1, r3, #25
 800523a:	bf48      	it	mi
 800523c:	b2b6      	uxthmi	r6, r6
 800523e:	e7e6      	b.n	800520e <_printf_i+0x182>
 8005240:	4615      	mov	r5, r2
 8005242:	e7bb      	b.n	80051bc <_printf_i+0x130>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	6826      	ldr	r6, [r4, #0]
 8005248:	6961      	ldr	r1, [r4, #20]
 800524a:	1d18      	adds	r0, r3, #4
 800524c:	6028      	str	r0, [r5, #0]
 800524e:	0635      	lsls	r5, r6, #24
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	d501      	bpl.n	8005258 <_printf_i+0x1cc>
 8005254:	6019      	str	r1, [r3, #0]
 8005256:	e002      	b.n	800525e <_printf_i+0x1d2>
 8005258:	0670      	lsls	r0, r6, #25
 800525a:	d5fb      	bpl.n	8005254 <_printf_i+0x1c8>
 800525c:	8019      	strh	r1, [r3, #0]
 800525e:	2300      	movs	r3, #0
 8005260:	6123      	str	r3, [r4, #16]
 8005262:	4615      	mov	r5, r2
 8005264:	e7ba      	b.n	80051dc <_printf_i+0x150>
 8005266:	682b      	ldr	r3, [r5, #0]
 8005268:	1d1a      	adds	r2, r3, #4
 800526a:	602a      	str	r2, [r5, #0]
 800526c:	681d      	ldr	r5, [r3, #0]
 800526e:	6862      	ldr	r2, [r4, #4]
 8005270:	2100      	movs	r1, #0
 8005272:	4628      	mov	r0, r5
 8005274:	f7fa ffac 	bl	80001d0 <memchr>
 8005278:	b108      	cbz	r0, 800527e <_printf_i+0x1f2>
 800527a:	1b40      	subs	r0, r0, r5
 800527c:	6060      	str	r0, [r4, #4]
 800527e:	6863      	ldr	r3, [r4, #4]
 8005280:	6123      	str	r3, [r4, #16]
 8005282:	2300      	movs	r3, #0
 8005284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005288:	e7a8      	b.n	80051dc <_printf_i+0x150>
 800528a:	6923      	ldr	r3, [r4, #16]
 800528c:	462a      	mov	r2, r5
 800528e:	4649      	mov	r1, r9
 8005290:	4640      	mov	r0, r8
 8005292:	47d0      	blx	sl
 8005294:	3001      	adds	r0, #1
 8005296:	d0ab      	beq.n	80051f0 <_printf_i+0x164>
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	079b      	lsls	r3, r3, #30
 800529c:	d413      	bmi.n	80052c6 <_printf_i+0x23a>
 800529e:	68e0      	ldr	r0, [r4, #12]
 80052a0:	9b03      	ldr	r3, [sp, #12]
 80052a2:	4298      	cmp	r0, r3
 80052a4:	bfb8      	it	lt
 80052a6:	4618      	movlt	r0, r3
 80052a8:	e7a4      	b.n	80051f4 <_printf_i+0x168>
 80052aa:	2301      	movs	r3, #1
 80052ac:	4632      	mov	r2, r6
 80052ae:	4649      	mov	r1, r9
 80052b0:	4640      	mov	r0, r8
 80052b2:	47d0      	blx	sl
 80052b4:	3001      	adds	r0, #1
 80052b6:	d09b      	beq.n	80051f0 <_printf_i+0x164>
 80052b8:	3501      	adds	r5, #1
 80052ba:	68e3      	ldr	r3, [r4, #12]
 80052bc:	9903      	ldr	r1, [sp, #12]
 80052be:	1a5b      	subs	r3, r3, r1
 80052c0:	42ab      	cmp	r3, r5
 80052c2:	dcf2      	bgt.n	80052aa <_printf_i+0x21e>
 80052c4:	e7eb      	b.n	800529e <_printf_i+0x212>
 80052c6:	2500      	movs	r5, #0
 80052c8:	f104 0619 	add.w	r6, r4, #25
 80052cc:	e7f5      	b.n	80052ba <_printf_i+0x22e>
 80052ce:	bf00      	nop
 80052d0:	080059dd 	.word	0x080059dd
 80052d4:	080059ee 	.word	0x080059ee

080052d8 <_sbrk_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4d06      	ldr	r5, [pc, #24]	; (80052f4 <_sbrk_r+0x1c>)
 80052dc:	2300      	movs	r3, #0
 80052de:	4604      	mov	r4, r0
 80052e0:	4608      	mov	r0, r1
 80052e2:	602b      	str	r3, [r5, #0]
 80052e4:	f7fb fcac 	bl	8000c40 <_sbrk>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_sbrk_r+0x1a>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_sbrk_r+0x1a>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	20013348 	.word	0x20013348

080052f8 <__sread>:
 80052f8:	b510      	push	{r4, lr}
 80052fa:	460c      	mov	r4, r1
 80052fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005300:	f000 fab2 	bl	8005868 <_read_r>
 8005304:	2800      	cmp	r0, #0
 8005306:	bfab      	itete	ge
 8005308:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800530a:	89a3      	ldrhlt	r3, [r4, #12]
 800530c:	181b      	addge	r3, r3, r0
 800530e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005312:	bfac      	ite	ge
 8005314:	6563      	strge	r3, [r4, #84]	; 0x54
 8005316:	81a3      	strhlt	r3, [r4, #12]
 8005318:	bd10      	pop	{r4, pc}

0800531a <__swrite>:
 800531a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800531e:	461f      	mov	r7, r3
 8005320:	898b      	ldrh	r3, [r1, #12]
 8005322:	05db      	lsls	r3, r3, #23
 8005324:	4605      	mov	r5, r0
 8005326:	460c      	mov	r4, r1
 8005328:	4616      	mov	r6, r2
 800532a:	d505      	bpl.n	8005338 <__swrite+0x1e>
 800532c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005330:	2302      	movs	r3, #2
 8005332:	2200      	movs	r2, #0
 8005334:	f000 f9c8 	bl	80056c8 <_lseek_r>
 8005338:	89a3      	ldrh	r3, [r4, #12]
 800533a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800533e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005342:	81a3      	strh	r3, [r4, #12]
 8005344:	4632      	mov	r2, r6
 8005346:	463b      	mov	r3, r7
 8005348:	4628      	mov	r0, r5
 800534a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800534e:	f000 b869 	b.w	8005424 <_write_r>

08005352 <__sseek>:
 8005352:	b510      	push	{r4, lr}
 8005354:	460c      	mov	r4, r1
 8005356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535a:	f000 f9b5 	bl	80056c8 <_lseek_r>
 800535e:	1c43      	adds	r3, r0, #1
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	bf15      	itete	ne
 8005364:	6560      	strne	r0, [r4, #84]	; 0x54
 8005366:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800536a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800536e:	81a3      	strheq	r3, [r4, #12]
 8005370:	bf18      	it	ne
 8005372:	81a3      	strhne	r3, [r4, #12]
 8005374:	bd10      	pop	{r4, pc}

08005376 <__sclose>:
 8005376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800537a:	f000 b8d3 	b.w	8005524 <_close_r>
	...

08005380 <__swbuf_r>:
 8005380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005382:	460e      	mov	r6, r1
 8005384:	4614      	mov	r4, r2
 8005386:	4605      	mov	r5, r0
 8005388:	b118      	cbz	r0, 8005392 <__swbuf_r+0x12>
 800538a:	6983      	ldr	r3, [r0, #24]
 800538c:	b90b      	cbnz	r3, 8005392 <__swbuf_r+0x12>
 800538e:	f7ff fb81 	bl	8004a94 <__sinit>
 8005392:	4b21      	ldr	r3, [pc, #132]	; (8005418 <__swbuf_r+0x98>)
 8005394:	429c      	cmp	r4, r3
 8005396:	d12b      	bne.n	80053f0 <__swbuf_r+0x70>
 8005398:	686c      	ldr	r4, [r5, #4]
 800539a:	69a3      	ldr	r3, [r4, #24]
 800539c:	60a3      	str	r3, [r4, #8]
 800539e:	89a3      	ldrh	r3, [r4, #12]
 80053a0:	071a      	lsls	r2, r3, #28
 80053a2:	d52f      	bpl.n	8005404 <__swbuf_r+0x84>
 80053a4:	6923      	ldr	r3, [r4, #16]
 80053a6:	b36b      	cbz	r3, 8005404 <__swbuf_r+0x84>
 80053a8:	6923      	ldr	r3, [r4, #16]
 80053aa:	6820      	ldr	r0, [r4, #0]
 80053ac:	1ac0      	subs	r0, r0, r3
 80053ae:	6963      	ldr	r3, [r4, #20]
 80053b0:	b2f6      	uxtb	r6, r6
 80053b2:	4283      	cmp	r3, r0
 80053b4:	4637      	mov	r7, r6
 80053b6:	dc04      	bgt.n	80053c2 <__swbuf_r+0x42>
 80053b8:	4621      	mov	r1, r4
 80053ba:	4628      	mov	r0, r5
 80053bc:	f000 f948 	bl	8005650 <_fflush_r>
 80053c0:	bb30      	cbnz	r0, 8005410 <__swbuf_r+0x90>
 80053c2:	68a3      	ldr	r3, [r4, #8]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	60a3      	str	r3, [r4, #8]
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	6022      	str	r2, [r4, #0]
 80053ce:	701e      	strb	r6, [r3, #0]
 80053d0:	6963      	ldr	r3, [r4, #20]
 80053d2:	3001      	adds	r0, #1
 80053d4:	4283      	cmp	r3, r0
 80053d6:	d004      	beq.n	80053e2 <__swbuf_r+0x62>
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	07db      	lsls	r3, r3, #31
 80053dc:	d506      	bpl.n	80053ec <__swbuf_r+0x6c>
 80053de:	2e0a      	cmp	r6, #10
 80053e0:	d104      	bne.n	80053ec <__swbuf_r+0x6c>
 80053e2:	4621      	mov	r1, r4
 80053e4:	4628      	mov	r0, r5
 80053e6:	f000 f933 	bl	8005650 <_fflush_r>
 80053ea:	b988      	cbnz	r0, 8005410 <__swbuf_r+0x90>
 80053ec:	4638      	mov	r0, r7
 80053ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053f0:	4b0a      	ldr	r3, [pc, #40]	; (800541c <__swbuf_r+0x9c>)
 80053f2:	429c      	cmp	r4, r3
 80053f4:	d101      	bne.n	80053fa <__swbuf_r+0x7a>
 80053f6:	68ac      	ldr	r4, [r5, #8]
 80053f8:	e7cf      	b.n	800539a <__swbuf_r+0x1a>
 80053fa:	4b09      	ldr	r3, [pc, #36]	; (8005420 <__swbuf_r+0xa0>)
 80053fc:	429c      	cmp	r4, r3
 80053fe:	bf08      	it	eq
 8005400:	68ec      	ldreq	r4, [r5, #12]
 8005402:	e7ca      	b.n	800539a <__swbuf_r+0x1a>
 8005404:	4621      	mov	r1, r4
 8005406:	4628      	mov	r0, r5
 8005408:	f000 f81e 	bl	8005448 <__swsetup_r>
 800540c:	2800      	cmp	r0, #0
 800540e:	d0cb      	beq.n	80053a8 <__swbuf_r+0x28>
 8005410:	f04f 37ff 	mov.w	r7, #4294967295
 8005414:	e7ea      	b.n	80053ec <__swbuf_r+0x6c>
 8005416:	bf00      	nop
 8005418:	0800598c 	.word	0x0800598c
 800541c:	080059ac 	.word	0x080059ac
 8005420:	0800596c 	.word	0x0800596c

08005424 <_write_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	4d07      	ldr	r5, [pc, #28]	; (8005444 <_write_r+0x20>)
 8005428:	4604      	mov	r4, r0
 800542a:	4608      	mov	r0, r1
 800542c:	4611      	mov	r1, r2
 800542e:	2200      	movs	r2, #0
 8005430:	602a      	str	r2, [r5, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	f7fb fbb3 	bl	8000b9e <_write>
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	d102      	bne.n	8005442 <_write_r+0x1e>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	b103      	cbz	r3, 8005442 <_write_r+0x1e>
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	bd38      	pop	{r3, r4, r5, pc}
 8005444:	20013348 	.word	0x20013348

08005448 <__swsetup_r>:
 8005448:	4b32      	ldr	r3, [pc, #200]	; (8005514 <__swsetup_r+0xcc>)
 800544a:	b570      	push	{r4, r5, r6, lr}
 800544c:	681d      	ldr	r5, [r3, #0]
 800544e:	4606      	mov	r6, r0
 8005450:	460c      	mov	r4, r1
 8005452:	b125      	cbz	r5, 800545e <__swsetup_r+0x16>
 8005454:	69ab      	ldr	r3, [r5, #24]
 8005456:	b913      	cbnz	r3, 800545e <__swsetup_r+0x16>
 8005458:	4628      	mov	r0, r5
 800545a:	f7ff fb1b 	bl	8004a94 <__sinit>
 800545e:	4b2e      	ldr	r3, [pc, #184]	; (8005518 <__swsetup_r+0xd0>)
 8005460:	429c      	cmp	r4, r3
 8005462:	d10f      	bne.n	8005484 <__swsetup_r+0x3c>
 8005464:	686c      	ldr	r4, [r5, #4]
 8005466:	89a3      	ldrh	r3, [r4, #12]
 8005468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800546c:	0719      	lsls	r1, r3, #28
 800546e:	d42c      	bmi.n	80054ca <__swsetup_r+0x82>
 8005470:	06dd      	lsls	r5, r3, #27
 8005472:	d411      	bmi.n	8005498 <__swsetup_r+0x50>
 8005474:	2309      	movs	r3, #9
 8005476:	6033      	str	r3, [r6, #0]
 8005478:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800547c:	81a3      	strh	r3, [r4, #12]
 800547e:	f04f 30ff 	mov.w	r0, #4294967295
 8005482:	e03e      	b.n	8005502 <__swsetup_r+0xba>
 8005484:	4b25      	ldr	r3, [pc, #148]	; (800551c <__swsetup_r+0xd4>)
 8005486:	429c      	cmp	r4, r3
 8005488:	d101      	bne.n	800548e <__swsetup_r+0x46>
 800548a:	68ac      	ldr	r4, [r5, #8]
 800548c:	e7eb      	b.n	8005466 <__swsetup_r+0x1e>
 800548e:	4b24      	ldr	r3, [pc, #144]	; (8005520 <__swsetup_r+0xd8>)
 8005490:	429c      	cmp	r4, r3
 8005492:	bf08      	it	eq
 8005494:	68ec      	ldreq	r4, [r5, #12]
 8005496:	e7e6      	b.n	8005466 <__swsetup_r+0x1e>
 8005498:	0758      	lsls	r0, r3, #29
 800549a:	d512      	bpl.n	80054c2 <__swsetup_r+0x7a>
 800549c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800549e:	b141      	cbz	r1, 80054b2 <__swsetup_r+0x6a>
 80054a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054a4:	4299      	cmp	r1, r3
 80054a6:	d002      	beq.n	80054ae <__swsetup_r+0x66>
 80054a8:	4630      	mov	r0, r6
 80054aa:	f000 f991 	bl	80057d0 <_free_r>
 80054ae:	2300      	movs	r3, #0
 80054b0:	6363      	str	r3, [r4, #52]	; 0x34
 80054b2:	89a3      	ldrh	r3, [r4, #12]
 80054b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054b8:	81a3      	strh	r3, [r4, #12]
 80054ba:	2300      	movs	r3, #0
 80054bc:	6063      	str	r3, [r4, #4]
 80054be:	6923      	ldr	r3, [r4, #16]
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	89a3      	ldrh	r3, [r4, #12]
 80054c4:	f043 0308 	orr.w	r3, r3, #8
 80054c8:	81a3      	strh	r3, [r4, #12]
 80054ca:	6923      	ldr	r3, [r4, #16]
 80054cc:	b94b      	cbnz	r3, 80054e2 <__swsetup_r+0x9a>
 80054ce:	89a3      	ldrh	r3, [r4, #12]
 80054d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d8:	d003      	beq.n	80054e2 <__swsetup_r+0x9a>
 80054da:	4621      	mov	r1, r4
 80054dc:	4630      	mov	r0, r6
 80054de:	f000 f92b 	bl	8005738 <__smakebuf_r>
 80054e2:	89a0      	ldrh	r0, [r4, #12]
 80054e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054e8:	f010 0301 	ands.w	r3, r0, #1
 80054ec:	d00a      	beq.n	8005504 <__swsetup_r+0xbc>
 80054ee:	2300      	movs	r3, #0
 80054f0:	60a3      	str	r3, [r4, #8]
 80054f2:	6963      	ldr	r3, [r4, #20]
 80054f4:	425b      	negs	r3, r3
 80054f6:	61a3      	str	r3, [r4, #24]
 80054f8:	6923      	ldr	r3, [r4, #16]
 80054fa:	b943      	cbnz	r3, 800550e <__swsetup_r+0xc6>
 80054fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005500:	d1ba      	bne.n	8005478 <__swsetup_r+0x30>
 8005502:	bd70      	pop	{r4, r5, r6, pc}
 8005504:	0781      	lsls	r1, r0, #30
 8005506:	bf58      	it	pl
 8005508:	6963      	ldrpl	r3, [r4, #20]
 800550a:	60a3      	str	r3, [r4, #8]
 800550c:	e7f4      	b.n	80054f8 <__swsetup_r+0xb0>
 800550e:	2000      	movs	r0, #0
 8005510:	e7f7      	b.n	8005502 <__swsetup_r+0xba>
 8005512:	bf00      	nop
 8005514:	2000000c 	.word	0x2000000c
 8005518:	0800598c 	.word	0x0800598c
 800551c:	080059ac 	.word	0x080059ac
 8005520:	0800596c 	.word	0x0800596c

08005524 <_close_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4d06      	ldr	r5, [pc, #24]	; (8005540 <_close_r+0x1c>)
 8005528:	2300      	movs	r3, #0
 800552a:	4604      	mov	r4, r0
 800552c:	4608      	mov	r0, r1
 800552e:	602b      	str	r3, [r5, #0]
 8005530:	f7fb fb51 	bl	8000bd6 <_close>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d102      	bne.n	800553e <_close_r+0x1a>
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	b103      	cbz	r3, 800553e <_close_r+0x1a>
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	bd38      	pop	{r3, r4, r5, pc}
 8005540:	20013348 	.word	0x20013348

08005544 <__sflush_r>:
 8005544:	898a      	ldrh	r2, [r1, #12]
 8005546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554a:	4605      	mov	r5, r0
 800554c:	0710      	lsls	r0, r2, #28
 800554e:	460c      	mov	r4, r1
 8005550:	d458      	bmi.n	8005604 <__sflush_r+0xc0>
 8005552:	684b      	ldr	r3, [r1, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	dc05      	bgt.n	8005564 <__sflush_r+0x20>
 8005558:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800555a:	2b00      	cmp	r3, #0
 800555c:	dc02      	bgt.n	8005564 <__sflush_r+0x20>
 800555e:	2000      	movs	r0, #0
 8005560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005566:	2e00      	cmp	r6, #0
 8005568:	d0f9      	beq.n	800555e <__sflush_r+0x1a>
 800556a:	2300      	movs	r3, #0
 800556c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005570:	682f      	ldr	r7, [r5, #0]
 8005572:	602b      	str	r3, [r5, #0]
 8005574:	d032      	beq.n	80055dc <__sflush_r+0x98>
 8005576:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	075a      	lsls	r2, r3, #29
 800557c:	d505      	bpl.n	800558a <__sflush_r+0x46>
 800557e:	6863      	ldr	r3, [r4, #4]
 8005580:	1ac0      	subs	r0, r0, r3
 8005582:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005584:	b10b      	cbz	r3, 800558a <__sflush_r+0x46>
 8005586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005588:	1ac0      	subs	r0, r0, r3
 800558a:	2300      	movs	r3, #0
 800558c:	4602      	mov	r2, r0
 800558e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005590:	6a21      	ldr	r1, [r4, #32]
 8005592:	4628      	mov	r0, r5
 8005594:	47b0      	blx	r6
 8005596:	1c43      	adds	r3, r0, #1
 8005598:	89a3      	ldrh	r3, [r4, #12]
 800559a:	d106      	bne.n	80055aa <__sflush_r+0x66>
 800559c:	6829      	ldr	r1, [r5, #0]
 800559e:	291d      	cmp	r1, #29
 80055a0:	d82c      	bhi.n	80055fc <__sflush_r+0xb8>
 80055a2:	4a2a      	ldr	r2, [pc, #168]	; (800564c <__sflush_r+0x108>)
 80055a4:	40ca      	lsrs	r2, r1
 80055a6:	07d6      	lsls	r6, r2, #31
 80055a8:	d528      	bpl.n	80055fc <__sflush_r+0xb8>
 80055aa:	2200      	movs	r2, #0
 80055ac:	6062      	str	r2, [r4, #4]
 80055ae:	04d9      	lsls	r1, r3, #19
 80055b0:	6922      	ldr	r2, [r4, #16]
 80055b2:	6022      	str	r2, [r4, #0]
 80055b4:	d504      	bpl.n	80055c0 <__sflush_r+0x7c>
 80055b6:	1c42      	adds	r2, r0, #1
 80055b8:	d101      	bne.n	80055be <__sflush_r+0x7a>
 80055ba:	682b      	ldr	r3, [r5, #0]
 80055bc:	b903      	cbnz	r3, 80055c0 <__sflush_r+0x7c>
 80055be:	6560      	str	r0, [r4, #84]	; 0x54
 80055c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055c2:	602f      	str	r7, [r5, #0]
 80055c4:	2900      	cmp	r1, #0
 80055c6:	d0ca      	beq.n	800555e <__sflush_r+0x1a>
 80055c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055cc:	4299      	cmp	r1, r3
 80055ce:	d002      	beq.n	80055d6 <__sflush_r+0x92>
 80055d0:	4628      	mov	r0, r5
 80055d2:	f000 f8fd 	bl	80057d0 <_free_r>
 80055d6:	2000      	movs	r0, #0
 80055d8:	6360      	str	r0, [r4, #52]	; 0x34
 80055da:	e7c1      	b.n	8005560 <__sflush_r+0x1c>
 80055dc:	6a21      	ldr	r1, [r4, #32]
 80055de:	2301      	movs	r3, #1
 80055e0:	4628      	mov	r0, r5
 80055e2:	47b0      	blx	r6
 80055e4:	1c41      	adds	r1, r0, #1
 80055e6:	d1c7      	bne.n	8005578 <__sflush_r+0x34>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0c4      	beq.n	8005578 <__sflush_r+0x34>
 80055ee:	2b1d      	cmp	r3, #29
 80055f0:	d001      	beq.n	80055f6 <__sflush_r+0xb2>
 80055f2:	2b16      	cmp	r3, #22
 80055f4:	d101      	bne.n	80055fa <__sflush_r+0xb6>
 80055f6:	602f      	str	r7, [r5, #0]
 80055f8:	e7b1      	b.n	800555e <__sflush_r+0x1a>
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005600:	81a3      	strh	r3, [r4, #12]
 8005602:	e7ad      	b.n	8005560 <__sflush_r+0x1c>
 8005604:	690f      	ldr	r7, [r1, #16]
 8005606:	2f00      	cmp	r7, #0
 8005608:	d0a9      	beq.n	800555e <__sflush_r+0x1a>
 800560a:	0793      	lsls	r3, r2, #30
 800560c:	680e      	ldr	r6, [r1, #0]
 800560e:	bf08      	it	eq
 8005610:	694b      	ldreq	r3, [r1, #20]
 8005612:	600f      	str	r7, [r1, #0]
 8005614:	bf18      	it	ne
 8005616:	2300      	movne	r3, #0
 8005618:	eba6 0807 	sub.w	r8, r6, r7
 800561c:	608b      	str	r3, [r1, #8]
 800561e:	f1b8 0f00 	cmp.w	r8, #0
 8005622:	dd9c      	ble.n	800555e <__sflush_r+0x1a>
 8005624:	6a21      	ldr	r1, [r4, #32]
 8005626:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005628:	4643      	mov	r3, r8
 800562a:	463a      	mov	r2, r7
 800562c:	4628      	mov	r0, r5
 800562e:	47b0      	blx	r6
 8005630:	2800      	cmp	r0, #0
 8005632:	dc06      	bgt.n	8005642 <__sflush_r+0xfe>
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800563a:	81a3      	strh	r3, [r4, #12]
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	e78e      	b.n	8005560 <__sflush_r+0x1c>
 8005642:	4407      	add	r7, r0
 8005644:	eba8 0800 	sub.w	r8, r8, r0
 8005648:	e7e9      	b.n	800561e <__sflush_r+0xda>
 800564a:	bf00      	nop
 800564c:	20400001 	.word	0x20400001

08005650 <_fflush_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	690b      	ldr	r3, [r1, #16]
 8005654:	4605      	mov	r5, r0
 8005656:	460c      	mov	r4, r1
 8005658:	b913      	cbnz	r3, 8005660 <_fflush_r+0x10>
 800565a:	2500      	movs	r5, #0
 800565c:	4628      	mov	r0, r5
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	b118      	cbz	r0, 800566a <_fflush_r+0x1a>
 8005662:	6983      	ldr	r3, [r0, #24]
 8005664:	b90b      	cbnz	r3, 800566a <_fflush_r+0x1a>
 8005666:	f7ff fa15 	bl	8004a94 <__sinit>
 800566a:	4b14      	ldr	r3, [pc, #80]	; (80056bc <_fflush_r+0x6c>)
 800566c:	429c      	cmp	r4, r3
 800566e:	d11b      	bne.n	80056a8 <_fflush_r+0x58>
 8005670:	686c      	ldr	r4, [r5, #4]
 8005672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0ef      	beq.n	800565a <_fflush_r+0xa>
 800567a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800567c:	07d0      	lsls	r0, r2, #31
 800567e:	d404      	bmi.n	800568a <_fflush_r+0x3a>
 8005680:	0599      	lsls	r1, r3, #22
 8005682:	d402      	bmi.n	800568a <_fflush_r+0x3a>
 8005684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005686:	f7ff faa3 	bl	8004bd0 <__retarget_lock_acquire_recursive>
 800568a:	4628      	mov	r0, r5
 800568c:	4621      	mov	r1, r4
 800568e:	f7ff ff59 	bl	8005544 <__sflush_r>
 8005692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005694:	07da      	lsls	r2, r3, #31
 8005696:	4605      	mov	r5, r0
 8005698:	d4e0      	bmi.n	800565c <_fflush_r+0xc>
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	059b      	lsls	r3, r3, #22
 800569e:	d4dd      	bmi.n	800565c <_fflush_r+0xc>
 80056a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056a2:	f7ff fa96 	bl	8004bd2 <__retarget_lock_release_recursive>
 80056a6:	e7d9      	b.n	800565c <_fflush_r+0xc>
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <_fflush_r+0x70>)
 80056aa:	429c      	cmp	r4, r3
 80056ac:	d101      	bne.n	80056b2 <_fflush_r+0x62>
 80056ae:	68ac      	ldr	r4, [r5, #8]
 80056b0:	e7df      	b.n	8005672 <_fflush_r+0x22>
 80056b2:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <_fflush_r+0x74>)
 80056b4:	429c      	cmp	r4, r3
 80056b6:	bf08      	it	eq
 80056b8:	68ec      	ldreq	r4, [r5, #12]
 80056ba:	e7da      	b.n	8005672 <_fflush_r+0x22>
 80056bc:	0800598c 	.word	0x0800598c
 80056c0:	080059ac 	.word	0x080059ac
 80056c4:	0800596c 	.word	0x0800596c

080056c8 <_lseek_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4d07      	ldr	r5, [pc, #28]	; (80056e8 <_lseek_r+0x20>)
 80056cc:	4604      	mov	r4, r0
 80056ce:	4608      	mov	r0, r1
 80056d0:	4611      	mov	r1, r2
 80056d2:	2200      	movs	r2, #0
 80056d4:	602a      	str	r2, [r5, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	f7fb faa4 	bl	8000c24 <_lseek>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d102      	bne.n	80056e6 <_lseek_r+0x1e>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	b103      	cbz	r3, 80056e6 <_lseek_r+0x1e>
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	20013348 	.word	0x20013348

080056ec <__swhatbuf_r>:
 80056ec:	b570      	push	{r4, r5, r6, lr}
 80056ee:	460e      	mov	r6, r1
 80056f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f4:	2900      	cmp	r1, #0
 80056f6:	b096      	sub	sp, #88	; 0x58
 80056f8:	4614      	mov	r4, r2
 80056fa:	461d      	mov	r5, r3
 80056fc:	da08      	bge.n	8005710 <__swhatbuf_r+0x24>
 80056fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	602a      	str	r2, [r5, #0]
 8005706:	061a      	lsls	r2, r3, #24
 8005708:	d410      	bmi.n	800572c <__swhatbuf_r+0x40>
 800570a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800570e:	e00e      	b.n	800572e <__swhatbuf_r+0x42>
 8005710:	466a      	mov	r2, sp
 8005712:	f000 f8bb 	bl	800588c <_fstat_r>
 8005716:	2800      	cmp	r0, #0
 8005718:	dbf1      	blt.n	80056fe <__swhatbuf_r+0x12>
 800571a:	9a01      	ldr	r2, [sp, #4]
 800571c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005720:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005724:	425a      	negs	r2, r3
 8005726:	415a      	adcs	r2, r3
 8005728:	602a      	str	r2, [r5, #0]
 800572a:	e7ee      	b.n	800570a <__swhatbuf_r+0x1e>
 800572c:	2340      	movs	r3, #64	; 0x40
 800572e:	2000      	movs	r0, #0
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	b016      	add	sp, #88	; 0x58
 8005734:	bd70      	pop	{r4, r5, r6, pc}
	...

08005738 <__smakebuf_r>:
 8005738:	898b      	ldrh	r3, [r1, #12]
 800573a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800573c:	079d      	lsls	r5, r3, #30
 800573e:	4606      	mov	r6, r0
 8005740:	460c      	mov	r4, r1
 8005742:	d507      	bpl.n	8005754 <__smakebuf_r+0x1c>
 8005744:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	6123      	str	r3, [r4, #16]
 800574c:	2301      	movs	r3, #1
 800574e:	6163      	str	r3, [r4, #20]
 8005750:	b002      	add	sp, #8
 8005752:	bd70      	pop	{r4, r5, r6, pc}
 8005754:	ab01      	add	r3, sp, #4
 8005756:	466a      	mov	r2, sp
 8005758:	f7ff ffc8 	bl	80056ec <__swhatbuf_r>
 800575c:	9900      	ldr	r1, [sp, #0]
 800575e:	4605      	mov	r5, r0
 8005760:	4630      	mov	r0, r6
 8005762:	f7ff fa57 	bl	8004c14 <_malloc_r>
 8005766:	b948      	cbnz	r0, 800577c <__smakebuf_r+0x44>
 8005768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800576c:	059a      	lsls	r2, r3, #22
 800576e:	d4ef      	bmi.n	8005750 <__smakebuf_r+0x18>
 8005770:	f023 0303 	bic.w	r3, r3, #3
 8005774:	f043 0302 	orr.w	r3, r3, #2
 8005778:	81a3      	strh	r3, [r4, #12]
 800577a:	e7e3      	b.n	8005744 <__smakebuf_r+0xc>
 800577c:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <__smakebuf_r+0x7c>)
 800577e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	6020      	str	r0, [r4, #0]
 8005784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005788:	81a3      	strh	r3, [r4, #12]
 800578a:	9b00      	ldr	r3, [sp, #0]
 800578c:	6163      	str	r3, [r4, #20]
 800578e:	9b01      	ldr	r3, [sp, #4]
 8005790:	6120      	str	r0, [r4, #16]
 8005792:	b15b      	cbz	r3, 80057ac <__smakebuf_r+0x74>
 8005794:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005798:	4630      	mov	r0, r6
 800579a:	f000 f889 	bl	80058b0 <_isatty_r>
 800579e:	b128      	cbz	r0, 80057ac <__smakebuf_r+0x74>
 80057a0:	89a3      	ldrh	r3, [r4, #12]
 80057a2:	f023 0303 	bic.w	r3, r3, #3
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	81a3      	strh	r3, [r4, #12]
 80057ac:	89a0      	ldrh	r0, [r4, #12]
 80057ae:	4305      	orrs	r5, r0
 80057b0:	81a5      	strh	r5, [r4, #12]
 80057b2:	e7cd      	b.n	8005750 <__smakebuf_r+0x18>
 80057b4:	08004a2d 	.word	0x08004a2d

080057b8 <__malloc_lock>:
 80057b8:	4801      	ldr	r0, [pc, #4]	; (80057c0 <__malloc_lock+0x8>)
 80057ba:	f7ff ba09 	b.w	8004bd0 <__retarget_lock_acquire_recursive>
 80057be:	bf00      	nop
 80057c0:	2001333c 	.word	0x2001333c

080057c4 <__malloc_unlock>:
 80057c4:	4801      	ldr	r0, [pc, #4]	; (80057cc <__malloc_unlock+0x8>)
 80057c6:	f7ff ba04 	b.w	8004bd2 <__retarget_lock_release_recursive>
 80057ca:	bf00      	nop
 80057cc:	2001333c 	.word	0x2001333c

080057d0 <_free_r>:
 80057d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057d2:	2900      	cmp	r1, #0
 80057d4:	d044      	beq.n	8005860 <_free_r+0x90>
 80057d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057da:	9001      	str	r0, [sp, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f1a1 0404 	sub.w	r4, r1, #4
 80057e2:	bfb8      	it	lt
 80057e4:	18e4      	addlt	r4, r4, r3
 80057e6:	f7ff ffe7 	bl	80057b8 <__malloc_lock>
 80057ea:	4a1e      	ldr	r2, [pc, #120]	; (8005864 <_free_r+0x94>)
 80057ec:	9801      	ldr	r0, [sp, #4]
 80057ee:	6813      	ldr	r3, [r2, #0]
 80057f0:	b933      	cbnz	r3, 8005800 <_free_r+0x30>
 80057f2:	6063      	str	r3, [r4, #4]
 80057f4:	6014      	str	r4, [r2, #0]
 80057f6:	b003      	add	sp, #12
 80057f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057fc:	f7ff bfe2 	b.w	80057c4 <__malloc_unlock>
 8005800:	42a3      	cmp	r3, r4
 8005802:	d908      	bls.n	8005816 <_free_r+0x46>
 8005804:	6825      	ldr	r5, [r4, #0]
 8005806:	1961      	adds	r1, r4, r5
 8005808:	428b      	cmp	r3, r1
 800580a:	bf01      	itttt	eq
 800580c:	6819      	ldreq	r1, [r3, #0]
 800580e:	685b      	ldreq	r3, [r3, #4]
 8005810:	1949      	addeq	r1, r1, r5
 8005812:	6021      	streq	r1, [r4, #0]
 8005814:	e7ed      	b.n	80057f2 <_free_r+0x22>
 8005816:	461a      	mov	r2, r3
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	b10b      	cbz	r3, 8005820 <_free_r+0x50>
 800581c:	42a3      	cmp	r3, r4
 800581e:	d9fa      	bls.n	8005816 <_free_r+0x46>
 8005820:	6811      	ldr	r1, [r2, #0]
 8005822:	1855      	adds	r5, r2, r1
 8005824:	42a5      	cmp	r5, r4
 8005826:	d10b      	bne.n	8005840 <_free_r+0x70>
 8005828:	6824      	ldr	r4, [r4, #0]
 800582a:	4421      	add	r1, r4
 800582c:	1854      	adds	r4, r2, r1
 800582e:	42a3      	cmp	r3, r4
 8005830:	6011      	str	r1, [r2, #0]
 8005832:	d1e0      	bne.n	80057f6 <_free_r+0x26>
 8005834:	681c      	ldr	r4, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	6053      	str	r3, [r2, #4]
 800583a:	4421      	add	r1, r4
 800583c:	6011      	str	r1, [r2, #0]
 800583e:	e7da      	b.n	80057f6 <_free_r+0x26>
 8005840:	d902      	bls.n	8005848 <_free_r+0x78>
 8005842:	230c      	movs	r3, #12
 8005844:	6003      	str	r3, [r0, #0]
 8005846:	e7d6      	b.n	80057f6 <_free_r+0x26>
 8005848:	6825      	ldr	r5, [r4, #0]
 800584a:	1961      	adds	r1, r4, r5
 800584c:	428b      	cmp	r3, r1
 800584e:	bf04      	itt	eq
 8005850:	6819      	ldreq	r1, [r3, #0]
 8005852:	685b      	ldreq	r3, [r3, #4]
 8005854:	6063      	str	r3, [r4, #4]
 8005856:	bf04      	itt	eq
 8005858:	1949      	addeq	r1, r1, r5
 800585a:	6021      	streq	r1, [r4, #0]
 800585c:	6054      	str	r4, [r2, #4]
 800585e:	e7ca      	b.n	80057f6 <_free_r+0x26>
 8005860:	b003      	add	sp, #12
 8005862:	bd30      	pop	{r4, r5, pc}
 8005864:	20013340 	.word	0x20013340

08005868 <_read_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	4d07      	ldr	r5, [pc, #28]	; (8005888 <_read_r+0x20>)
 800586c:	4604      	mov	r4, r0
 800586e:	4608      	mov	r0, r1
 8005870:	4611      	mov	r1, r2
 8005872:	2200      	movs	r2, #0
 8005874:	602a      	str	r2, [r5, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	f7fb f974 	bl	8000b64 <_read>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d102      	bne.n	8005886 <_read_r+0x1e>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	b103      	cbz	r3, 8005886 <_read_r+0x1e>
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	20013348 	.word	0x20013348

0800588c <_fstat_r>:
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	4d07      	ldr	r5, [pc, #28]	; (80058ac <_fstat_r+0x20>)
 8005890:	2300      	movs	r3, #0
 8005892:	4604      	mov	r4, r0
 8005894:	4608      	mov	r0, r1
 8005896:	4611      	mov	r1, r2
 8005898:	602b      	str	r3, [r5, #0]
 800589a:	f7fb f9a8 	bl	8000bee <_fstat>
 800589e:	1c43      	adds	r3, r0, #1
 80058a0:	d102      	bne.n	80058a8 <_fstat_r+0x1c>
 80058a2:	682b      	ldr	r3, [r5, #0]
 80058a4:	b103      	cbz	r3, 80058a8 <_fstat_r+0x1c>
 80058a6:	6023      	str	r3, [r4, #0]
 80058a8:	bd38      	pop	{r3, r4, r5, pc}
 80058aa:	bf00      	nop
 80058ac:	20013348 	.word	0x20013348

080058b0 <_isatty_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	4d06      	ldr	r5, [pc, #24]	; (80058cc <_isatty_r+0x1c>)
 80058b4:	2300      	movs	r3, #0
 80058b6:	4604      	mov	r4, r0
 80058b8:	4608      	mov	r0, r1
 80058ba:	602b      	str	r3, [r5, #0]
 80058bc:	f7fb f9a7 	bl	8000c0e <_isatty>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d102      	bne.n	80058ca <_isatty_r+0x1a>
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	b103      	cbz	r3, 80058ca <_isatty_r+0x1a>
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	bd38      	pop	{r3, r4, r5, pc}
 80058cc:	20013348 	.word	0x20013348

080058d0 <_init>:
 80058d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d2:	bf00      	nop
 80058d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d6:	bc08      	pop	{r3}
 80058d8:	469e      	mov	lr, r3
 80058da:	4770      	bx	lr

080058dc <_fini>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	bf00      	nop
 80058e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e2:	bc08      	pop	{r3}
 80058e4:	469e      	mov	lr, r3
 80058e6:	4770      	bx	lr
=======
 80049ec:	e232      	b.n	8004e54 <UART_SetConfig+0x98c>
 80049ee:	bf00      	nop
 80049f0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b8d      	ldr	r3, [pc, #564]	; (8004c30 <UART_SetConfig+0x768>)
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d006      	beq.n	8004a0e <UART_SetConfig+0x546>
 8004a00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	4b8b      	ldr	r3, [pc, #556]	; (8004c34 <UART_SetConfig+0x76c>)
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	f040 8117 	bne.w	8004c3c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a0e:	f7fe f9e1 	bl	8002dd4 <HAL_RCC_GetPCLK2Freq>
 8004a12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004a20:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004a24:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004a28:	4622      	mov	r2, r4
 8004a2a:	462b      	mov	r3, r5
 8004a2c:	1891      	adds	r1, r2, r2
 8004a2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a30:	415b      	adcs	r3, r3
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a38:	4621      	mov	r1, r4
 8004a3a:	eb12 0801 	adds.w	r8, r2, r1
 8004a3e:	4629      	mov	r1, r5
 8004a40:	eb43 0901 	adc.w	r9, r3, r1
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a58:	4690      	mov	r8, r2
 8004a5a:	4699      	mov	r9, r3
 8004a5c:	4623      	mov	r3, r4
 8004a5e:	eb18 0303 	adds.w	r3, r8, r3
 8004a62:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004a66:	462b      	mov	r3, r5
 8004a68:	eb49 0303 	adc.w	r3, r9, r3
 8004a6c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004a70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004a7c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	008b      	lsls	r3, r1, #2
 8004a90:	4621      	mov	r1, r4
 8004a92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a96:	4621      	mov	r1, r4
 8004a98:	008a      	lsls	r2, r1, #2
 8004a9a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8004a9e:	f7fb fbe7 	bl	8000270 <__aeabi_uldivmod>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4b64      	ldr	r3, [pc, #400]	; (8004c38 <UART_SetConfig+0x770>)
 8004aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	011c      	lsls	r4, r3, #4
 8004ab0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004aba:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004abe:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004ac2:	4642      	mov	r2, r8
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	1891      	adds	r1, r2, r2
 8004ac8:	6439      	str	r1, [r7, #64]	; 0x40
 8004aca:	415b      	adcs	r3, r3
 8004acc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ace:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ad2:	4641      	mov	r1, r8
 8004ad4:	1851      	adds	r1, r2, r1
 8004ad6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ad8:	4649      	mov	r1, r9
 8004ada:	414b      	adcs	r3, r1
 8004adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8004aea:	4659      	mov	r1, fp
 8004aec:	00cb      	lsls	r3, r1, #3
 8004aee:	4651      	mov	r1, sl
 8004af0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004af4:	4651      	mov	r1, sl
 8004af6:	00ca      	lsls	r2, r1, #3
 8004af8:	4610      	mov	r0, r2
 8004afa:	4619      	mov	r1, r3
 8004afc:	4603      	mov	r3, r0
 8004afe:	4642      	mov	r2, r8
 8004b00:	189b      	adds	r3, r3, r2
 8004b02:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004b06:	464b      	mov	r3, r9
 8004b08:	460a      	mov	r2, r1
 8004b0a:	eb42 0303 	adc.w	r3, r2, r3
 8004b0e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004b12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004b1e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8004b2e:	4649      	mov	r1, r9
 8004b30:	008b      	lsls	r3, r1, #2
 8004b32:	4641      	mov	r1, r8
 8004b34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b38:	4641      	mov	r1, r8
 8004b3a:	008a      	lsls	r2, r1, #2
 8004b3c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004b40:	f7fb fb96 	bl	8000270 <__aeabi_uldivmod>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4b3b      	ldr	r3, [pc, #236]	; (8004c38 <UART_SetConfig+0x770>)
 8004b4a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	2164      	movs	r1, #100	; 0x64
 8004b52:	fb01 f303 	mul.w	r3, r1, r3
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	3332      	adds	r3, #50	; 0x32
 8004b5c:	4a36      	ldr	r2, [pc, #216]	; (8004c38 <UART_SetConfig+0x770>)
 8004b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b68:	441c      	add	r4, r3
 8004b6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004b74:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004b78:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	464b      	mov	r3, r9
 8004b80:	1891      	adds	r1, r2, r2
 8004b82:	6339      	str	r1, [r7, #48]	; 0x30
 8004b84:	415b      	adcs	r3, r3
 8004b86:	637b      	str	r3, [r7, #52]	; 0x34
 8004b88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	1851      	adds	r1, r2, r1
 8004b90:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b92:	4649      	mov	r1, r9
 8004b94:	414b      	adcs	r3, r1
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	00cb      	lsls	r3, r1, #3
 8004ba8:	4651      	mov	r1, sl
 8004baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bae:	4651      	mov	r1, sl
 8004bb0:	00ca      	lsls	r2, r1, #3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4642      	mov	r2, r8
 8004bba:	189b      	adds	r3, r3, r2
 8004bbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	460a      	mov	r2, r1
 8004bc4:	eb42 0303 	adc.w	r3, r2, r3
 8004bc8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004bcc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004bd8:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8004be8:	4649      	mov	r1, r9
 8004bea:	008b      	lsls	r3, r1, #2
 8004bec:	4641      	mov	r1, r8
 8004bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bf2:	4641      	mov	r1, r8
 8004bf4:	008a      	lsls	r2, r1, #2
 8004bf6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8004bfa:	f7fb fb39 	bl	8000270 <__aeabi_uldivmod>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4b0d      	ldr	r3, [pc, #52]	; (8004c38 <UART_SetConfig+0x770>)
 8004c04:	fba3 1302 	umull	r1, r3, r3, r2
 8004c08:	095b      	lsrs	r3, r3, #5
 8004c0a:	2164      	movs	r1, #100	; 0x64
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	3332      	adds	r3, #50	; 0x32
 8004c16:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <UART_SetConfig+0x770>)
 8004c18:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	f003 020f 	and.w	r2, r3, #15
 8004c22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4422      	add	r2, r4
 8004c2a:	609a      	str	r2, [r3, #8]
 8004c2c:	e112      	b.n	8004e54 <UART_SetConfig+0x98c>
 8004c2e:	bf00      	nop
 8004c30:	40011000 	.word	0x40011000
 8004c34:	40011400 	.word	0x40011400
 8004c38:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c3c:	f7fe f8b6 	bl	8002dac <HAL_RCC_GetPCLK1Freq>
 8004c40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004c4e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004c52:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004c56:	4642      	mov	r2, r8
 8004c58:	464b      	mov	r3, r9
 8004c5a:	1891      	adds	r1, r2, r2
 8004c5c:	6239      	str	r1, [r7, #32]
 8004c5e:	415b      	adcs	r3, r3
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
 8004c62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c66:	4641      	mov	r1, r8
 8004c68:	1854      	adds	r4, r2, r1
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	eb43 0501 	adc.w	r5, r3, r1
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	00eb      	lsls	r3, r5, #3
 8004c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c7e:	00e2      	lsls	r2, r4, #3
 8004c80:	4614      	mov	r4, r2
 8004c82:	461d      	mov	r5, r3
 8004c84:	4643      	mov	r3, r8
 8004c86:	18e3      	adds	r3, r4, r3
 8004c88:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	eb45 0303 	adc.w	r3, r5, r3
 8004c92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004c96:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004ca2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004cb2:	4629      	mov	r1, r5
 8004cb4:	008b      	lsls	r3, r1, #2
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	008a      	lsls	r2, r1, #2
 8004cc0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004cc4:	f7fb fad4 	bl	8000270 <__aeabi_uldivmod>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4b64      	ldr	r3, [pc, #400]	; (8004e60 <UART_SetConfig+0x998>)
 8004cce:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	011c      	lsls	r4, r3, #4
 8004cd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ce0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004ce4:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	1891      	adds	r1, r2, r2
 8004cee:	61b9      	str	r1, [r7, #24]
 8004cf0:	415b      	adcs	r3, r3
 8004cf2:	61fb      	str	r3, [r7, #28]
 8004cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	1851      	adds	r1, r2, r1
 8004cfc:	6139      	str	r1, [r7, #16]
 8004cfe:	4649      	mov	r1, r9
 8004d00:	414b      	adcs	r3, r1
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d10:	4659      	mov	r1, fp
 8004d12:	00cb      	lsls	r3, r1, #3
 8004d14:	4651      	mov	r1, sl
 8004d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d1a:	4651      	mov	r1, sl
 8004d1c:	00ca      	lsls	r2, r1, #3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	4603      	mov	r3, r0
 8004d24:	4642      	mov	r2, r8
 8004d26:	189b      	adds	r3, r3, r2
 8004d28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d2c:	464b      	mov	r3, r9
 8004d2e:	460a      	mov	r2, r1
 8004d30:	eb42 0303 	adc.w	r3, r2, r3
 8004d34:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d44:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004d54:	4649      	mov	r1, r9
 8004d56:	008b      	lsls	r3, r1, #2
 8004d58:	4641      	mov	r1, r8
 8004d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d5e:	4641      	mov	r1, r8
 8004d60:	008a      	lsls	r2, r1, #2
 8004d62:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004d66:	f7fb fa83 	bl	8000270 <__aeabi_uldivmod>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4b3c      	ldr	r3, [pc, #240]	; (8004e60 <UART_SetConfig+0x998>)
 8004d70:	fba3 1302 	umull	r1, r3, r3, r2
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	2164      	movs	r1, #100	; 0x64
 8004d78:	fb01 f303 	mul.w	r3, r1, r3
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	3332      	adds	r3, #50	; 0x32
 8004d82:	4a37      	ldr	r2, [pc, #220]	; (8004e60 <UART_SetConfig+0x998>)
 8004d84:	fba2 2303 	umull	r2, r3, r2, r3
 8004d88:	095b      	lsrs	r3, r3, #5
 8004d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d8e:	441c      	add	r4, r3
 8004d90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d9e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004da2:	4642      	mov	r2, r8
 8004da4:	464b      	mov	r3, r9
 8004da6:	1891      	adds	r1, r2, r2
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	415b      	adcs	r3, r3
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004db2:	4641      	mov	r1, r8
 8004db4:	1851      	adds	r1, r2, r1
 8004db6:	6039      	str	r1, [r7, #0]
 8004db8:	4649      	mov	r1, r9
 8004dba:	414b      	adcs	r3, r1
 8004dbc:	607b      	str	r3, [r7, #4]
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dca:	4659      	mov	r1, fp
 8004dcc:	00cb      	lsls	r3, r1, #3
 8004dce:	4651      	mov	r1, sl
 8004dd0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dd4:	4651      	mov	r1, sl
 8004dd6:	00ca      	lsls	r2, r1, #3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4642      	mov	r2, r8
 8004de0:	189b      	adds	r3, r3, r2
 8004de2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004de6:	464b      	mov	r3, r9
 8004de8:	460a      	mov	r2, r1
 8004dea:	eb42 0303 	adc.w	r3, r2, r3
 8004dee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004df2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004e0e:	4649      	mov	r1, r9
 8004e10:	008b      	lsls	r3, r1, #2
 8004e12:	4641      	mov	r1, r8
 8004e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e18:	4641      	mov	r1, r8
 8004e1a:	008a      	lsls	r2, r1, #2
 8004e1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e20:	f7fb fa26 	bl	8000270 <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <UART_SetConfig+0x998>)
 8004e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	2164      	movs	r1, #100	; 0x64
 8004e32:	fb01 f303 	mul.w	r3, r1, r3
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	3332      	adds	r3, #50	; 0x32
 8004e3c:	4a08      	ldr	r2, [pc, #32]	; (8004e60 <UART_SetConfig+0x998>)
 8004e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	f003 020f 	and.w	r2, r3, #15
 8004e48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4422      	add	r2, r4
 8004e50:	609a      	str	r2, [r3, #8]
}
 8004e52:	e7ff      	b.n	8004e54 <UART_SetConfig+0x98c>
 8004e54:	bf00      	nop
 8004e56:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e60:	51eb851f 	.word	0x51eb851f

08004e64 <__errno>:
 8004e64:	4b01      	ldr	r3, [pc, #4]	; (8004e6c <__errno+0x8>)
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	2000000c 	.word	0x2000000c

08004e70 <__libc_init_array>:
 8004e70:	b570      	push	{r4, r5, r6, lr}
 8004e72:	4d0d      	ldr	r5, [pc, #52]	; (8004ea8 <__libc_init_array+0x38>)
 8004e74:	4c0d      	ldr	r4, [pc, #52]	; (8004eac <__libc_init_array+0x3c>)
 8004e76:	1b64      	subs	r4, r4, r5
 8004e78:	10a4      	asrs	r4, r4, #2
 8004e7a:	2600      	movs	r6, #0
 8004e7c:	42a6      	cmp	r6, r4
 8004e7e:	d109      	bne.n	8004e94 <__libc_init_array+0x24>
 8004e80:	4d0b      	ldr	r5, [pc, #44]	; (8004eb0 <__libc_init_array+0x40>)
 8004e82:	4c0c      	ldr	r4, [pc, #48]	; (8004eb4 <__libc_init_array+0x44>)
 8004e84:	f001 f8b0 	bl	8005fe8 <_init>
 8004e88:	1b64      	subs	r4, r4, r5
 8004e8a:	10a4      	asrs	r4, r4, #2
 8004e8c:	2600      	movs	r6, #0
 8004e8e:	42a6      	cmp	r6, r4
 8004e90:	d105      	bne.n	8004e9e <__libc_init_array+0x2e>
 8004e92:	bd70      	pop	{r4, r5, r6, pc}
 8004e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e98:	4798      	blx	r3
 8004e9a:	3601      	adds	r6, #1
 8004e9c:	e7ee      	b.n	8004e7c <__libc_init_array+0xc>
 8004e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea2:	4798      	blx	r3
 8004ea4:	3601      	adds	r6, #1
 8004ea6:	e7f2      	b.n	8004e8e <__libc_init_array+0x1e>
 8004ea8:	080061a4 	.word	0x080061a4
 8004eac:	080061a4 	.word	0x080061a4
 8004eb0:	080061a4 	.word	0x080061a4
 8004eb4:	080061a8 	.word	0x080061a8

08004eb8 <memcpy>:
 8004eb8:	440a      	add	r2, r1
 8004eba:	4291      	cmp	r1, r2
 8004ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ec0:	d100      	bne.n	8004ec4 <memcpy+0xc>
 8004ec2:	4770      	bx	lr
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ece:	4291      	cmp	r1, r2
 8004ed0:	d1f9      	bne.n	8004ec6 <memcpy+0xe>
 8004ed2:	bd10      	pop	{r4, pc}

08004ed4 <memset>:
 8004ed4:	4402      	add	r2, r0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d100      	bne.n	8004ede <memset+0xa>
 8004edc:	4770      	bx	lr
 8004ede:	f803 1b01 	strb.w	r1, [r3], #1
 8004ee2:	e7f9      	b.n	8004ed8 <memset+0x4>

08004ee4 <iprintf>:
 8004ee4:	b40f      	push	{r0, r1, r2, r3}
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <iprintf+0x2c>)
 8004ee8:	b513      	push	{r0, r1, r4, lr}
 8004eea:	681c      	ldr	r4, [r3, #0]
 8004eec:	b124      	cbz	r4, 8004ef8 <iprintf+0x14>
 8004eee:	69a3      	ldr	r3, [r4, #24]
 8004ef0:	b913      	cbnz	r3, 8004ef8 <iprintf+0x14>
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f000 f8f4 	bl	80050e0 <__sinit>
 8004ef8:	ab05      	add	r3, sp, #20
 8004efa:	9a04      	ldr	r2, [sp, #16]
 8004efc:	68a1      	ldr	r1, [r4, #8]
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	4620      	mov	r0, r4
 8004f02:	f000 fab1 	bl	8005468 <_vfiprintf_r>
 8004f06:	b002      	add	sp, #8
 8004f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f0c:	b004      	add	sp, #16
 8004f0e:	4770      	bx	lr
 8004f10:	2000000c 	.word	0x2000000c

08004f14 <strncmp>:
 8004f14:	b510      	push	{r4, lr}
 8004f16:	b17a      	cbz	r2, 8004f38 <strncmp+0x24>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	3901      	subs	r1, #1
 8004f1c:	1884      	adds	r4, r0, r2
 8004f1e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004f22:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004f26:	4290      	cmp	r0, r2
 8004f28:	d101      	bne.n	8004f2e <strncmp+0x1a>
 8004f2a:	42a3      	cmp	r3, r4
 8004f2c:	d101      	bne.n	8004f32 <strncmp+0x1e>
 8004f2e:	1a80      	subs	r0, r0, r2
 8004f30:	bd10      	pop	{r4, pc}
 8004f32:	2800      	cmp	r0, #0
 8004f34:	d1f3      	bne.n	8004f1e <strncmp+0xa>
 8004f36:	e7fa      	b.n	8004f2e <strncmp+0x1a>
 8004f38:	4610      	mov	r0, r2
 8004f3a:	e7f9      	b.n	8004f30 <strncmp+0x1c>

08004f3c <strtok>:
 8004f3c:	4b16      	ldr	r3, [pc, #88]	; (8004f98 <strtok+0x5c>)
 8004f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f40:	681e      	ldr	r6, [r3, #0]
 8004f42:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004f44:	4605      	mov	r5, r0
 8004f46:	b9fc      	cbnz	r4, 8004f88 <strtok+0x4c>
 8004f48:	2050      	movs	r0, #80	; 0x50
 8004f4a:	9101      	str	r1, [sp, #4]
 8004f4c:	f000 f97a 	bl	8005244 <malloc>
 8004f50:	9901      	ldr	r1, [sp, #4]
 8004f52:	65b0      	str	r0, [r6, #88]	; 0x58
 8004f54:	4602      	mov	r2, r0
 8004f56:	b920      	cbnz	r0, 8004f62 <strtok+0x26>
 8004f58:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <strtok+0x60>)
 8004f5a:	4811      	ldr	r0, [pc, #68]	; (8004fa0 <strtok+0x64>)
 8004f5c:	2157      	movs	r1, #87	; 0x57
 8004f5e:	f000 f849 	bl	8004ff4 <__assert_func>
 8004f62:	e9c0 4400 	strd	r4, r4, [r0]
 8004f66:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004f6a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004f6e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004f72:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004f76:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004f7a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004f7e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004f82:	6184      	str	r4, [r0, #24]
 8004f84:	7704      	strb	r4, [r0, #28]
 8004f86:	6244      	str	r4, [r0, #36]	; 0x24
 8004f88:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	b002      	add	sp, #8
 8004f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f94:	f000 b806 	b.w	8004fa4 <__strtok_r>
 8004f98:	2000000c 	.word	0x2000000c
 8004f9c:	08006058 	.word	0x08006058
 8004fa0:	0800606f 	.word	0x0800606f

08004fa4 <__strtok_r>:
 8004fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fa6:	b908      	cbnz	r0, 8004fac <__strtok_r+0x8>
 8004fa8:	6810      	ldr	r0, [r2, #0]
 8004faa:	b188      	cbz	r0, 8004fd0 <__strtok_r+0x2c>
 8004fac:	4604      	mov	r4, r0
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004fb4:	460f      	mov	r7, r1
 8004fb6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004fba:	b91e      	cbnz	r6, 8004fc4 <__strtok_r+0x20>
 8004fbc:	b965      	cbnz	r5, 8004fd8 <__strtok_r+0x34>
 8004fbe:	6015      	str	r5, [r2, #0]
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	e005      	b.n	8004fd0 <__strtok_r+0x2c>
 8004fc4:	42b5      	cmp	r5, r6
 8004fc6:	d1f6      	bne.n	8004fb6 <__strtok_r+0x12>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f0      	bne.n	8004fae <__strtok_r+0xa>
 8004fcc:	6014      	str	r4, [r2, #0]
 8004fce:	7003      	strb	r3, [r0, #0]
 8004fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd2:	461c      	mov	r4, r3
 8004fd4:	e00c      	b.n	8004ff0 <__strtok_r+0x4c>
 8004fd6:	b915      	cbnz	r5, 8004fde <__strtok_r+0x3a>
 8004fd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004fdc:	460e      	mov	r6, r1
 8004fde:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004fe2:	42ab      	cmp	r3, r5
 8004fe4:	d1f7      	bne.n	8004fd6 <__strtok_r+0x32>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f3      	beq.n	8004fd2 <__strtok_r+0x2e>
 8004fea:	2300      	movs	r3, #0
 8004fec:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004ff0:	6014      	str	r4, [r2, #0]
 8004ff2:	e7ed      	b.n	8004fd0 <__strtok_r+0x2c>

08004ff4 <__assert_func>:
 8004ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ff6:	4614      	mov	r4, r2
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <__assert_func+0x2c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4605      	mov	r5, r0
 8005000:	68d8      	ldr	r0, [r3, #12]
 8005002:	b14c      	cbz	r4, 8005018 <__assert_func+0x24>
 8005004:	4b07      	ldr	r3, [pc, #28]	; (8005024 <__assert_func+0x30>)
 8005006:	9100      	str	r1, [sp, #0]
 8005008:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800500c:	4906      	ldr	r1, [pc, #24]	; (8005028 <__assert_func+0x34>)
 800500e:	462b      	mov	r3, r5
 8005010:	f000 f8e4 	bl	80051dc <fiprintf>
 8005014:	f000 fe12 	bl	8005c3c <abort>
 8005018:	4b04      	ldr	r3, [pc, #16]	; (800502c <__assert_func+0x38>)
 800501a:	461c      	mov	r4, r3
 800501c:	e7f3      	b.n	8005006 <__assert_func+0x12>
 800501e:	bf00      	nop
 8005020:	2000000c 	.word	0x2000000c
 8005024:	080060cc 	.word	0x080060cc
 8005028:	080060d9 	.word	0x080060d9
 800502c:	08006107 	.word	0x08006107

08005030 <std>:
 8005030:	2300      	movs	r3, #0
 8005032:	b510      	push	{r4, lr}
 8005034:	4604      	mov	r4, r0
 8005036:	e9c0 3300 	strd	r3, r3, [r0]
 800503a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800503e:	6083      	str	r3, [r0, #8]
 8005040:	8181      	strh	r1, [r0, #12]
 8005042:	6643      	str	r3, [r0, #100]	; 0x64
 8005044:	81c2      	strh	r2, [r0, #14]
 8005046:	6183      	str	r3, [r0, #24]
 8005048:	4619      	mov	r1, r3
 800504a:	2208      	movs	r2, #8
 800504c:	305c      	adds	r0, #92	; 0x5c
 800504e:	f7ff ff41 	bl	8004ed4 <memset>
 8005052:	4b05      	ldr	r3, [pc, #20]	; (8005068 <std+0x38>)
 8005054:	6263      	str	r3, [r4, #36]	; 0x24
 8005056:	4b05      	ldr	r3, [pc, #20]	; (800506c <std+0x3c>)
 8005058:	62a3      	str	r3, [r4, #40]	; 0x28
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <std+0x40>)
 800505c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <std+0x44>)
 8005060:	6224      	str	r4, [r4, #32]
 8005062:	6323      	str	r3, [r4, #48]	; 0x30
 8005064:	bd10      	pop	{r4, pc}
 8005066:	bf00      	nop
 8005068:	08005a11 	.word	0x08005a11
 800506c:	08005a33 	.word	0x08005a33
 8005070:	08005a6b 	.word	0x08005a6b
 8005074:	08005a8f 	.word	0x08005a8f

08005078 <_cleanup_r>:
 8005078:	4901      	ldr	r1, [pc, #4]	; (8005080 <_cleanup_r+0x8>)
 800507a:	f000 b8c1 	b.w	8005200 <_fwalk_reent>
 800507e:	bf00      	nop
 8005080:	08005d79 	.word	0x08005d79

08005084 <__sfmoreglue>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	2268      	movs	r2, #104	; 0x68
 8005088:	1e4d      	subs	r5, r1, #1
 800508a:	4355      	muls	r5, r2
 800508c:	460e      	mov	r6, r1
 800508e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005092:	f000 f94b 	bl	800532c <_malloc_r>
 8005096:	4604      	mov	r4, r0
 8005098:	b140      	cbz	r0, 80050ac <__sfmoreglue+0x28>
 800509a:	2100      	movs	r1, #0
 800509c:	e9c0 1600 	strd	r1, r6, [r0]
 80050a0:	300c      	adds	r0, #12
 80050a2:	60a0      	str	r0, [r4, #8]
 80050a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050a8:	f7ff ff14 	bl	8004ed4 <memset>
 80050ac:	4620      	mov	r0, r4
 80050ae:	bd70      	pop	{r4, r5, r6, pc}

080050b0 <__sfp_lock_acquire>:
 80050b0:	4801      	ldr	r0, [pc, #4]	; (80050b8 <__sfp_lock_acquire+0x8>)
 80050b2:	f000 b8c5 	b.w	8005240 <__retarget_lock_acquire_recursive>
 80050b6:	bf00      	nop
 80050b8:	20013329 	.word	0x20013329

080050bc <__sfp_lock_release>:
 80050bc:	4801      	ldr	r0, [pc, #4]	; (80050c4 <__sfp_lock_release+0x8>)
 80050be:	f000 b8c0 	b.w	8005242 <__retarget_lock_release_recursive>
 80050c2:	bf00      	nop
 80050c4:	20013329 	.word	0x20013329

080050c8 <__sinit_lock_acquire>:
 80050c8:	4801      	ldr	r0, [pc, #4]	; (80050d0 <__sinit_lock_acquire+0x8>)
 80050ca:	f000 b8b9 	b.w	8005240 <__retarget_lock_acquire_recursive>
 80050ce:	bf00      	nop
 80050d0:	2001332a 	.word	0x2001332a

080050d4 <__sinit_lock_release>:
 80050d4:	4801      	ldr	r0, [pc, #4]	; (80050dc <__sinit_lock_release+0x8>)
 80050d6:	f000 b8b4 	b.w	8005242 <__retarget_lock_release_recursive>
 80050da:	bf00      	nop
 80050dc:	2001332a 	.word	0x2001332a

080050e0 <__sinit>:
 80050e0:	b510      	push	{r4, lr}
 80050e2:	4604      	mov	r4, r0
 80050e4:	f7ff fff0 	bl	80050c8 <__sinit_lock_acquire>
 80050e8:	69a3      	ldr	r3, [r4, #24]
 80050ea:	b11b      	cbz	r3, 80050f4 <__sinit+0x14>
 80050ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f0:	f7ff bff0 	b.w	80050d4 <__sinit_lock_release>
 80050f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050f8:	6523      	str	r3, [r4, #80]	; 0x50
 80050fa:	4b13      	ldr	r3, [pc, #76]	; (8005148 <__sinit+0x68>)
 80050fc:	4a13      	ldr	r2, [pc, #76]	; (800514c <__sinit+0x6c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	62a2      	str	r2, [r4, #40]	; 0x28
 8005102:	42a3      	cmp	r3, r4
 8005104:	bf04      	itt	eq
 8005106:	2301      	moveq	r3, #1
 8005108:	61a3      	streq	r3, [r4, #24]
 800510a:	4620      	mov	r0, r4
 800510c:	f000 f820 	bl	8005150 <__sfp>
 8005110:	6060      	str	r0, [r4, #4]
 8005112:	4620      	mov	r0, r4
 8005114:	f000 f81c 	bl	8005150 <__sfp>
 8005118:	60a0      	str	r0, [r4, #8]
 800511a:	4620      	mov	r0, r4
 800511c:	f000 f818 	bl	8005150 <__sfp>
 8005120:	2200      	movs	r2, #0
 8005122:	60e0      	str	r0, [r4, #12]
 8005124:	2104      	movs	r1, #4
 8005126:	6860      	ldr	r0, [r4, #4]
 8005128:	f7ff ff82 	bl	8005030 <std>
 800512c:	68a0      	ldr	r0, [r4, #8]
 800512e:	2201      	movs	r2, #1
 8005130:	2109      	movs	r1, #9
 8005132:	f7ff ff7d 	bl	8005030 <std>
 8005136:	68e0      	ldr	r0, [r4, #12]
 8005138:	2202      	movs	r2, #2
 800513a:	2112      	movs	r1, #18
 800513c:	f7ff ff78 	bl	8005030 <std>
 8005140:	2301      	movs	r3, #1
 8005142:	61a3      	str	r3, [r4, #24]
 8005144:	e7d2      	b.n	80050ec <__sinit+0xc>
 8005146:	bf00      	nop
 8005148:	08006054 	.word	0x08006054
 800514c:	08005079 	.word	0x08005079

08005150 <__sfp>:
 8005150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005152:	4607      	mov	r7, r0
 8005154:	f7ff ffac 	bl	80050b0 <__sfp_lock_acquire>
 8005158:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <__sfp+0x84>)
 800515a:	681e      	ldr	r6, [r3, #0]
 800515c:	69b3      	ldr	r3, [r6, #24]
 800515e:	b913      	cbnz	r3, 8005166 <__sfp+0x16>
 8005160:	4630      	mov	r0, r6
 8005162:	f7ff ffbd 	bl	80050e0 <__sinit>
 8005166:	3648      	adds	r6, #72	; 0x48
 8005168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800516c:	3b01      	subs	r3, #1
 800516e:	d503      	bpl.n	8005178 <__sfp+0x28>
 8005170:	6833      	ldr	r3, [r6, #0]
 8005172:	b30b      	cbz	r3, 80051b8 <__sfp+0x68>
 8005174:	6836      	ldr	r6, [r6, #0]
 8005176:	e7f7      	b.n	8005168 <__sfp+0x18>
 8005178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800517c:	b9d5      	cbnz	r5, 80051b4 <__sfp+0x64>
 800517e:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <__sfp+0x88>)
 8005180:	60e3      	str	r3, [r4, #12]
 8005182:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005186:	6665      	str	r5, [r4, #100]	; 0x64
 8005188:	f000 f859 	bl	800523e <__retarget_lock_init_recursive>
 800518c:	f7ff ff96 	bl	80050bc <__sfp_lock_release>
 8005190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005198:	6025      	str	r5, [r4, #0]
 800519a:	61a5      	str	r5, [r4, #24]
 800519c:	2208      	movs	r2, #8
 800519e:	4629      	mov	r1, r5
 80051a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051a4:	f7ff fe96 	bl	8004ed4 <memset>
 80051a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80051b0:	4620      	mov	r0, r4
 80051b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051b4:	3468      	adds	r4, #104	; 0x68
 80051b6:	e7d9      	b.n	800516c <__sfp+0x1c>
 80051b8:	2104      	movs	r1, #4
 80051ba:	4638      	mov	r0, r7
 80051bc:	f7ff ff62 	bl	8005084 <__sfmoreglue>
 80051c0:	4604      	mov	r4, r0
 80051c2:	6030      	str	r0, [r6, #0]
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d1d5      	bne.n	8005174 <__sfp+0x24>
 80051c8:	f7ff ff78 	bl	80050bc <__sfp_lock_release>
 80051cc:	230c      	movs	r3, #12
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	e7ee      	b.n	80051b0 <__sfp+0x60>
 80051d2:	bf00      	nop
 80051d4:	08006054 	.word	0x08006054
 80051d8:	ffff0001 	.word	0xffff0001

080051dc <fiprintf>:
 80051dc:	b40e      	push	{r1, r2, r3}
 80051de:	b503      	push	{r0, r1, lr}
 80051e0:	4601      	mov	r1, r0
 80051e2:	ab03      	add	r3, sp, #12
 80051e4:	4805      	ldr	r0, [pc, #20]	; (80051fc <fiprintf+0x20>)
 80051e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ea:	6800      	ldr	r0, [r0, #0]
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	f000 f93b 	bl	8005468 <_vfiprintf_r>
 80051f2:	b002      	add	sp, #8
 80051f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051f8:	b003      	add	sp, #12
 80051fa:	4770      	bx	lr
 80051fc:	2000000c 	.word	0x2000000c

08005200 <_fwalk_reent>:
 8005200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005204:	4606      	mov	r6, r0
 8005206:	4688      	mov	r8, r1
 8005208:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800520c:	2700      	movs	r7, #0
 800520e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005212:	f1b9 0901 	subs.w	r9, r9, #1
 8005216:	d505      	bpl.n	8005224 <_fwalk_reent+0x24>
 8005218:	6824      	ldr	r4, [r4, #0]
 800521a:	2c00      	cmp	r4, #0
 800521c:	d1f7      	bne.n	800520e <_fwalk_reent+0xe>
 800521e:	4638      	mov	r0, r7
 8005220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005224:	89ab      	ldrh	r3, [r5, #12]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d907      	bls.n	800523a <_fwalk_reent+0x3a>
 800522a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800522e:	3301      	adds	r3, #1
 8005230:	d003      	beq.n	800523a <_fwalk_reent+0x3a>
 8005232:	4629      	mov	r1, r5
 8005234:	4630      	mov	r0, r6
 8005236:	47c0      	blx	r8
 8005238:	4307      	orrs	r7, r0
 800523a:	3568      	adds	r5, #104	; 0x68
 800523c:	e7e9      	b.n	8005212 <_fwalk_reent+0x12>

0800523e <__retarget_lock_init_recursive>:
 800523e:	4770      	bx	lr

08005240 <__retarget_lock_acquire_recursive>:
 8005240:	4770      	bx	lr

08005242 <__retarget_lock_release_recursive>:
 8005242:	4770      	bx	lr

08005244 <malloc>:
 8005244:	4b02      	ldr	r3, [pc, #8]	; (8005250 <malloc+0xc>)
 8005246:	4601      	mov	r1, r0
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	f000 b86f 	b.w	800532c <_malloc_r>
 800524e:	bf00      	nop
 8005250:	2000000c 	.word	0x2000000c

08005254 <_free_r>:
 8005254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005256:	2900      	cmp	r1, #0
 8005258:	d044      	beq.n	80052e4 <_free_r+0x90>
 800525a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800525e:	9001      	str	r0, [sp, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	f1a1 0404 	sub.w	r4, r1, #4
 8005266:	bfb8      	it	lt
 8005268:	18e4      	addlt	r4, r4, r3
 800526a:	f000 fe39 	bl	8005ee0 <__malloc_lock>
 800526e:	4a1e      	ldr	r2, [pc, #120]	; (80052e8 <_free_r+0x94>)
 8005270:	9801      	ldr	r0, [sp, #4]
 8005272:	6813      	ldr	r3, [r2, #0]
 8005274:	b933      	cbnz	r3, 8005284 <_free_r+0x30>
 8005276:	6063      	str	r3, [r4, #4]
 8005278:	6014      	str	r4, [r2, #0]
 800527a:	b003      	add	sp, #12
 800527c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005280:	f000 be34 	b.w	8005eec <__malloc_unlock>
 8005284:	42a3      	cmp	r3, r4
 8005286:	d908      	bls.n	800529a <_free_r+0x46>
 8005288:	6825      	ldr	r5, [r4, #0]
 800528a:	1961      	adds	r1, r4, r5
 800528c:	428b      	cmp	r3, r1
 800528e:	bf01      	itttt	eq
 8005290:	6819      	ldreq	r1, [r3, #0]
 8005292:	685b      	ldreq	r3, [r3, #4]
 8005294:	1949      	addeq	r1, r1, r5
 8005296:	6021      	streq	r1, [r4, #0]
 8005298:	e7ed      	b.n	8005276 <_free_r+0x22>
 800529a:	461a      	mov	r2, r3
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	b10b      	cbz	r3, 80052a4 <_free_r+0x50>
 80052a0:	42a3      	cmp	r3, r4
 80052a2:	d9fa      	bls.n	800529a <_free_r+0x46>
 80052a4:	6811      	ldr	r1, [r2, #0]
 80052a6:	1855      	adds	r5, r2, r1
 80052a8:	42a5      	cmp	r5, r4
 80052aa:	d10b      	bne.n	80052c4 <_free_r+0x70>
 80052ac:	6824      	ldr	r4, [r4, #0]
 80052ae:	4421      	add	r1, r4
 80052b0:	1854      	adds	r4, r2, r1
 80052b2:	42a3      	cmp	r3, r4
 80052b4:	6011      	str	r1, [r2, #0]
 80052b6:	d1e0      	bne.n	800527a <_free_r+0x26>
 80052b8:	681c      	ldr	r4, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	6053      	str	r3, [r2, #4]
 80052be:	4421      	add	r1, r4
 80052c0:	6011      	str	r1, [r2, #0]
 80052c2:	e7da      	b.n	800527a <_free_r+0x26>
 80052c4:	d902      	bls.n	80052cc <_free_r+0x78>
 80052c6:	230c      	movs	r3, #12
 80052c8:	6003      	str	r3, [r0, #0]
 80052ca:	e7d6      	b.n	800527a <_free_r+0x26>
 80052cc:	6825      	ldr	r5, [r4, #0]
 80052ce:	1961      	adds	r1, r4, r5
 80052d0:	428b      	cmp	r3, r1
 80052d2:	bf04      	itt	eq
 80052d4:	6819      	ldreq	r1, [r3, #0]
 80052d6:	685b      	ldreq	r3, [r3, #4]
 80052d8:	6063      	str	r3, [r4, #4]
 80052da:	bf04      	itt	eq
 80052dc:	1949      	addeq	r1, r1, r5
 80052de:	6021      	streq	r1, [r4, #0]
 80052e0:	6054      	str	r4, [r2, #4]
 80052e2:	e7ca      	b.n	800527a <_free_r+0x26>
 80052e4:	b003      	add	sp, #12
 80052e6:	bd30      	pop	{r4, r5, pc}
 80052e8:	2001332c 	.word	0x2001332c

080052ec <sbrk_aligned>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	4e0e      	ldr	r6, [pc, #56]	; (8005328 <sbrk_aligned+0x3c>)
 80052f0:	460c      	mov	r4, r1
 80052f2:	6831      	ldr	r1, [r6, #0]
 80052f4:	4605      	mov	r5, r0
 80052f6:	b911      	cbnz	r1, 80052fe <sbrk_aligned+0x12>
 80052f8:	f000 fb7a 	bl	80059f0 <_sbrk_r>
 80052fc:	6030      	str	r0, [r6, #0]
 80052fe:	4621      	mov	r1, r4
 8005300:	4628      	mov	r0, r5
 8005302:	f000 fb75 	bl	80059f0 <_sbrk_r>
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	d00a      	beq.n	8005320 <sbrk_aligned+0x34>
 800530a:	1cc4      	adds	r4, r0, #3
 800530c:	f024 0403 	bic.w	r4, r4, #3
 8005310:	42a0      	cmp	r0, r4
 8005312:	d007      	beq.n	8005324 <sbrk_aligned+0x38>
 8005314:	1a21      	subs	r1, r4, r0
 8005316:	4628      	mov	r0, r5
 8005318:	f000 fb6a 	bl	80059f0 <_sbrk_r>
 800531c:	3001      	adds	r0, #1
 800531e:	d101      	bne.n	8005324 <sbrk_aligned+0x38>
 8005320:	f04f 34ff 	mov.w	r4, #4294967295
 8005324:	4620      	mov	r0, r4
 8005326:	bd70      	pop	{r4, r5, r6, pc}
 8005328:	20013330 	.word	0x20013330

0800532c <_malloc_r>:
 800532c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005330:	1ccd      	adds	r5, r1, #3
 8005332:	f025 0503 	bic.w	r5, r5, #3
 8005336:	3508      	adds	r5, #8
 8005338:	2d0c      	cmp	r5, #12
 800533a:	bf38      	it	cc
 800533c:	250c      	movcc	r5, #12
 800533e:	2d00      	cmp	r5, #0
 8005340:	4607      	mov	r7, r0
 8005342:	db01      	blt.n	8005348 <_malloc_r+0x1c>
 8005344:	42a9      	cmp	r1, r5
 8005346:	d905      	bls.n	8005354 <_malloc_r+0x28>
 8005348:	230c      	movs	r3, #12
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	2600      	movs	r6, #0
 800534e:	4630      	mov	r0, r6
 8005350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005354:	4e2e      	ldr	r6, [pc, #184]	; (8005410 <_malloc_r+0xe4>)
 8005356:	f000 fdc3 	bl	8005ee0 <__malloc_lock>
 800535a:	6833      	ldr	r3, [r6, #0]
 800535c:	461c      	mov	r4, r3
 800535e:	bb34      	cbnz	r4, 80053ae <_malloc_r+0x82>
 8005360:	4629      	mov	r1, r5
 8005362:	4638      	mov	r0, r7
 8005364:	f7ff ffc2 	bl	80052ec <sbrk_aligned>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	4604      	mov	r4, r0
 800536c:	d14d      	bne.n	800540a <_malloc_r+0xde>
 800536e:	6834      	ldr	r4, [r6, #0]
 8005370:	4626      	mov	r6, r4
 8005372:	2e00      	cmp	r6, #0
 8005374:	d140      	bne.n	80053f8 <_malloc_r+0xcc>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	4631      	mov	r1, r6
 800537a:	4638      	mov	r0, r7
 800537c:	eb04 0803 	add.w	r8, r4, r3
 8005380:	f000 fb36 	bl	80059f0 <_sbrk_r>
 8005384:	4580      	cmp	r8, r0
 8005386:	d13a      	bne.n	80053fe <_malloc_r+0xd2>
 8005388:	6821      	ldr	r1, [r4, #0]
 800538a:	3503      	adds	r5, #3
 800538c:	1a6d      	subs	r5, r5, r1
 800538e:	f025 0503 	bic.w	r5, r5, #3
 8005392:	3508      	adds	r5, #8
 8005394:	2d0c      	cmp	r5, #12
 8005396:	bf38      	it	cc
 8005398:	250c      	movcc	r5, #12
 800539a:	4629      	mov	r1, r5
 800539c:	4638      	mov	r0, r7
 800539e:	f7ff ffa5 	bl	80052ec <sbrk_aligned>
 80053a2:	3001      	adds	r0, #1
 80053a4:	d02b      	beq.n	80053fe <_malloc_r+0xd2>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	442b      	add	r3, r5
 80053aa:	6023      	str	r3, [r4, #0]
 80053ac:	e00e      	b.n	80053cc <_malloc_r+0xa0>
 80053ae:	6822      	ldr	r2, [r4, #0]
 80053b0:	1b52      	subs	r2, r2, r5
 80053b2:	d41e      	bmi.n	80053f2 <_malloc_r+0xc6>
 80053b4:	2a0b      	cmp	r2, #11
 80053b6:	d916      	bls.n	80053e6 <_malloc_r+0xba>
 80053b8:	1961      	adds	r1, r4, r5
 80053ba:	42a3      	cmp	r3, r4
 80053bc:	6025      	str	r5, [r4, #0]
 80053be:	bf18      	it	ne
 80053c0:	6059      	strne	r1, [r3, #4]
 80053c2:	6863      	ldr	r3, [r4, #4]
 80053c4:	bf08      	it	eq
 80053c6:	6031      	streq	r1, [r6, #0]
 80053c8:	5162      	str	r2, [r4, r5]
 80053ca:	604b      	str	r3, [r1, #4]
 80053cc:	4638      	mov	r0, r7
 80053ce:	f104 060b 	add.w	r6, r4, #11
 80053d2:	f000 fd8b 	bl	8005eec <__malloc_unlock>
 80053d6:	f026 0607 	bic.w	r6, r6, #7
 80053da:	1d23      	adds	r3, r4, #4
 80053dc:	1af2      	subs	r2, r6, r3
 80053de:	d0b6      	beq.n	800534e <_malloc_r+0x22>
 80053e0:	1b9b      	subs	r3, r3, r6
 80053e2:	50a3      	str	r3, [r4, r2]
 80053e4:	e7b3      	b.n	800534e <_malloc_r+0x22>
 80053e6:	6862      	ldr	r2, [r4, #4]
 80053e8:	42a3      	cmp	r3, r4
 80053ea:	bf0c      	ite	eq
 80053ec:	6032      	streq	r2, [r6, #0]
 80053ee:	605a      	strne	r2, [r3, #4]
 80053f0:	e7ec      	b.n	80053cc <_malloc_r+0xa0>
 80053f2:	4623      	mov	r3, r4
 80053f4:	6864      	ldr	r4, [r4, #4]
 80053f6:	e7b2      	b.n	800535e <_malloc_r+0x32>
 80053f8:	4634      	mov	r4, r6
 80053fa:	6876      	ldr	r6, [r6, #4]
 80053fc:	e7b9      	b.n	8005372 <_malloc_r+0x46>
 80053fe:	230c      	movs	r3, #12
 8005400:	603b      	str	r3, [r7, #0]
 8005402:	4638      	mov	r0, r7
 8005404:	f000 fd72 	bl	8005eec <__malloc_unlock>
 8005408:	e7a1      	b.n	800534e <_malloc_r+0x22>
 800540a:	6025      	str	r5, [r4, #0]
 800540c:	e7de      	b.n	80053cc <_malloc_r+0xa0>
 800540e:	bf00      	nop
 8005410:	2001332c 	.word	0x2001332c

08005414 <__sfputc_r>:
 8005414:	6893      	ldr	r3, [r2, #8]
 8005416:	3b01      	subs	r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	b410      	push	{r4}
 800541c:	6093      	str	r3, [r2, #8]
 800541e:	da08      	bge.n	8005432 <__sfputc_r+0x1e>
 8005420:	6994      	ldr	r4, [r2, #24]
 8005422:	42a3      	cmp	r3, r4
 8005424:	db01      	blt.n	800542a <__sfputc_r+0x16>
 8005426:	290a      	cmp	r1, #10
 8005428:	d103      	bne.n	8005432 <__sfputc_r+0x1e>
 800542a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800542e:	f000 bb33 	b.w	8005a98 <__swbuf_r>
 8005432:	6813      	ldr	r3, [r2, #0]
 8005434:	1c58      	adds	r0, r3, #1
 8005436:	6010      	str	r0, [r2, #0]
 8005438:	7019      	strb	r1, [r3, #0]
 800543a:	4608      	mov	r0, r1
 800543c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005440:	4770      	bx	lr

08005442 <__sfputs_r>:
 8005442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005444:	4606      	mov	r6, r0
 8005446:	460f      	mov	r7, r1
 8005448:	4614      	mov	r4, r2
 800544a:	18d5      	adds	r5, r2, r3
 800544c:	42ac      	cmp	r4, r5
 800544e:	d101      	bne.n	8005454 <__sfputs_r+0x12>
 8005450:	2000      	movs	r0, #0
 8005452:	e007      	b.n	8005464 <__sfputs_r+0x22>
 8005454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005458:	463a      	mov	r2, r7
 800545a:	4630      	mov	r0, r6
 800545c:	f7ff ffda 	bl	8005414 <__sfputc_r>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d1f3      	bne.n	800544c <__sfputs_r+0xa>
 8005464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005468 <_vfiprintf_r>:
 8005468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546c:	460d      	mov	r5, r1
 800546e:	b09d      	sub	sp, #116	; 0x74
 8005470:	4614      	mov	r4, r2
 8005472:	4698      	mov	r8, r3
 8005474:	4606      	mov	r6, r0
 8005476:	b118      	cbz	r0, 8005480 <_vfiprintf_r+0x18>
 8005478:	6983      	ldr	r3, [r0, #24]
 800547a:	b90b      	cbnz	r3, 8005480 <_vfiprintf_r+0x18>
 800547c:	f7ff fe30 	bl	80050e0 <__sinit>
 8005480:	4b89      	ldr	r3, [pc, #548]	; (80056a8 <_vfiprintf_r+0x240>)
 8005482:	429d      	cmp	r5, r3
 8005484:	d11b      	bne.n	80054be <_vfiprintf_r+0x56>
 8005486:	6875      	ldr	r5, [r6, #4]
 8005488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800548a:	07d9      	lsls	r1, r3, #31
 800548c:	d405      	bmi.n	800549a <_vfiprintf_r+0x32>
 800548e:	89ab      	ldrh	r3, [r5, #12]
 8005490:	059a      	lsls	r2, r3, #22
 8005492:	d402      	bmi.n	800549a <_vfiprintf_r+0x32>
 8005494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005496:	f7ff fed3 	bl	8005240 <__retarget_lock_acquire_recursive>
 800549a:	89ab      	ldrh	r3, [r5, #12]
 800549c:	071b      	lsls	r3, r3, #28
 800549e:	d501      	bpl.n	80054a4 <_vfiprintf_r+0x3c>
 80054a0:	692b      	ldr	r3, [r5, #16]
 80054a2:	b9eb      	cbnz	r3, 80054e0 <_vfiprintf_r+0x78>
 80054a4:	4629      	mov	r1, r5
 80054a6:	4630      	mov	r0, r6
 80054a8:	f000 fb5a 	bl	8005b60 <__swsetup_r>
 80054ac:	b1c0      	cbz	r0, 80054e0 <_vfiprintf_r+0x78>
 80054ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054b0:	07dc      	lsls	r4, r3, #31
 80054b2:	d50e      	bpl.n	80054d2 <_vfiprintf_r+0x6a>
 80054b4:	f04f 30ff 	mov.w	r0, #4294967295
 80054b8:	b01d      	add	sp, #116	; 0x74
 80054ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054be:	4b7b      	ldr	r3, [pc, #492]	; (80056ac <_vfiprintf_r+0x244>)
 80054c0:	429d      	cmp	r5, r3
 80054c2:	d101      	bne.n	80054c8 <_vfiprintf_r+0x60>
 80054c4:	68b5      	ldr	r5, [r6, #8]
 80054c6:	e7df      	b.n	8005488 <_vfiprintf_r+0x20>
 80054c8:	4b79      	ldr	r3, [pc, #484]	; (80056b0 <_vfiprintf_r+0x248>)
 80054ca:	429d      	cmp	r5, r3
 80054cc:	bf08      	it	eq
 80054ce:	68f5      	ldreq	r5, [r6, #12]
 80054d0:	e7da      	b.n	8005488 <_vfiprintf_r+0x20>
 80054d2:	89ab      	ldrh	r3, [r5, #12]
 80054d4:	0598      	lsls	r0, r3, #22
 80054d6:	d4ed      	bmi.n	80054b4 <_vfiprintf_r+0x4c>
 80054d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054da:	f7ff feb2 	bl	8005242 <__retarget_lock_release_recursive>
 80054de:	e7e9      	b.n	80054b4 <_vfiprintf_r+0x4c>
 80054e0:	2300      	movs	r3, #0
 80054e2:	9309      	str	r3, [sp, #36]	; 0x24
 80054e4:	2320      	movs	r3, #32
 80054e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80054ee:	2330      	movs	r3, #48	; 0x30
 80054f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80056b4 <_vfiprintf_r+0x24c>
 80054f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054f8:	f04f 0901 	mov.w	r9, #1
 80054fc:	4623      	mov	r3, r4
 80054fe:	469a      	mov	sl, r3
 8005500:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005504:	b10a      	cbz	r2, 800550a <_vfiprintf_r+0xa2>
 8005506:	2a25      	cmp	r2, #37	; 0x25
 8005508:	d1f9      	bne.n	80054fe <_vfiprintf_r+0x96>
 800550a:	ebba 0b04 	subs.w	fp, sl, r4
 800550e:	d00b      	beq.n	8005528 <_vfiprintf_r+0xc0>
 8005510:	465b      	mov	r3, fp
 8005512:	4622      	mov	r2, r4
 8005514:	4629      	mov	r1, r5
 8005516:	4630      	mov	r0, r6
 8005518:	f7ff ff93 	bl	8005442 <__sfputs_r>
 800551c:	3001      	adds	r0, #1
 800551e:	f000 80aa 	beq.w	8005676 <_vfiprintf_r+0x20e>
 8005522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005524:	445a      	add	r2, fp
 8005526:	9209      	str	r2, [sp, #36]	; 0x24
 8005528:	f89a 3000 	ldrb.w	r3, [sl]
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 80a2 	beq.w	8005676 <_vfiprintf_r+0x20e>
 8005532:	2300      	movs	r3, #0
 8005534:	f04f 32ff 	mov.w	r2, #4294967295
 8005538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800553c:	f10a 0a01 	add.w	sl, sl, #1
 8005540:	9304      	str	r3, [sp, #16]
 8005542:	9307      	str	r3, [sp, #28]
 8005544:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005548:	931a      	str	r3, [sp, #104]	; 0x68
 800554a:	4654      	mov	r4, sl
 800554c:	2205      	movs	r2, #5
 800554e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005552:	4858      	ldr	r0, [pc, #352]	; (80056b4 <_vfiprintf_r+0x24c>)
 8005554:	f7fa fe3c 	bl	80001d0 <memchr>
 8005558:	9a04      	ldr	r2, [sp, #16]
 800555a:	b9d8      	cbnz	r0, 8005594 <_vfiprintf_r+0x12c>
 800555c:	06d1      	lsls	r1, r2, #27
 800555e:	bf44      	itt	mi
 8005560:	2320      	movmi	r3, #32
 8005562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005566:	0713      	lsls	r3, r2, #28
 8005568:	bf44      	itt	mi
 800556a:	232b      	movmi	r3, #43	; 0x2b
 800556c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005570:	f89a 3000 	ldrb.w	r3, [sl]
 8005574:	2b2a      	cmp	r3, #42	; 0x2a
 8005576:	d015      	beq.n	80055a4 <_vfiprintf_r+0x13c>
 8005578:	9a07      	ldr	r2, [sp, #28]
 800557a:	4654      	mov	r4, sl
 800557c:	2000      	movs	r0, #0
 800557e:	f04f 0c0a 	mov.w	ip, #10
 8005582:	4621      	mov	r1, r4
 8005584:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005588:	3b30      	subs	r3, #48	; 0x30
 800558a:	2b09      	cmp	r3, #9
 800558c:	d94e      	bls.n	800562c <_vfiprintf_r+0x1c4>
 800558e:	b1b0      	cbz	r0, 80055be <_vfiprintf_r+0x156>
 8005590:	9207      	str	r2, [sp, #28]
 8005592:	e014      	b.n	80055be <_vfiprintf_r+0x156>
 8005594:	eba0 0308 	sub.w	r3, r0, r8
 8005598:	fa09 f303 	lsl.w	r3, r9, r3
 800559c:	4313      	orrs	r3, r2
 800559e:	9304      	str	r3, [sp, #16]
 80055a0:	46a2      	mov	sl, r4
 80055a2:	e7d2      	b.n	800554a <_vfiprintf_r+0xe2>
 80055a4:	9b03      	ldr	r3, [sp, #12]
 80055a6:	1d19      	adds	r1, r3, #4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	9103      	str	r1, [sp, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	bfbb      	ittet	lt
 80055b0:	425b      	neglt	r3, r3
 80055b2:	f042 0202 	orrlt.w	r2, r2, #2
 80055b6:	9307      	strge	r3, [sp, #28]
 80055b8:	9307      	strlt	r3, [sp, #28]
 80055ba:	bfb8      	it	lt
 80055bc:	9204      	strlt	r2, [sp, #16]
 80055be:	7823      	ldrb	r3, [r4, #0]
 80055c0:	2b2e      	cmp	r3, #46	; 0x2e
 80055c2:	d10c      	bne.n	80055de <_vfiprintf_r+0x176>
 80055c4:	7863      	ldrb	r3, [r4, #1]
 80055c6:	2b2a      	cmp	r3, #42	; 0x2a
 80055c8:	d135      	bne.n	8005636 <_vfiprintf_r+0x1ce>
 80055ca:	9b03      	ldr	r3, [sp, #12]
 80055cc:	1d1a      	adds	r2, r3, #4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	9203      	str	r2, [sp, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bfb8      	it	lt
 80055d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80055da:	3402      	adds	r4, #2
 80055dc:	9305      	str	r3, [sp, #20]
 80055de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80056c4 <_vfiprintf_r+0x25c>
 80055e2:	7821      	ldrb	r1, [r4, #0]
 80055e4:	2203      	movs	r2, #3
 80055e6:	4650      	mov	r0, sl
 80055e8:	f7fa fdf2 	bl	80001d0 <memchr>
 80055ec:	b140      	cbz	r0, 8005600 <_vfiprintf_r+0x198>
 80055ee:	2340      	movs	r3, #64	; 0x40
 80055f0:	eba0 000a 	sub.w	r0, r0, sl
 80055f4:	fa03 f000 	lsl.w	r0, r3, r0
 80055f8:	9b04      	ldr	r3, [sp, #16]
 80055fa:	4303      	orrs	r3, r0
 80055fc:	3401      	adds	r4, #1
 80055fe:	9304      	str	r3, [sp, #16]
 8005600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005604:	482c      	ldr	r0, [pc, #176]	; (80056b8 <_vfiprintf_r+0x250>)
 8005606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800560a:	2206      	movs	r2, #6
 800560c:	f7fa fde0 	bl	80001d0 <memchr>
 8005610:	2800      	cmp	r0, #0
 8005612:	d03f      	beq.n	8005694 <_vfiprintf_r+0x22c>
 8005614:	4b29      	ldr	r3, [pc, #164]	; (80056bc <_vfiprintf_r+0x254>)
 8005616:	bb1b      	cbnz	r3, 8005660 <_vfiprintf_r+0x1f8>
 8005618:	9b03      	ldr	r3, [sp, #12]
 800561a:	3307      	adds	r3, #7
 800561c:	f023 0307 	bic.w	r3, r3, #7
 8005620:	3308      	adds	r3, #8
 8005622:	9303      	str	r3, [sp, #12]
 8005624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005626:	443b      	add	r3, r7
 8005628:	9309      	str	r3, [sp, #36]	; 0x24
 800562a:	e767      	b.n	80054fc <_vfiprintf_r+0x94>
 800562c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005630:	460c      	mov	r4, r1
 8005632:	2001      	movs	r0, #1
 8005634:	e7a5      	b.n	8005582 <_vfiprintf_r+0x11a>
 8005636:	2300      	movs	r3, #0
 8005638:	3401      	adds	r4, #1
 800563a:	9305      	str	r3, [sp, #20]
 800563c:	4619      	mov	r1, r3
 800563e:	f04f 0c0a 	mov.w	ip, #10
 8005642:	4620      	mov	r0, r4
 8005644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005648:	3a30      	subs	r2, #48	; 0x30
 800564a:	2a09      	cmp	r2, #9
 800564c:	d903      	bls.n	8005656 <_vfiprintf_r+0x1ee>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0c5      	beq.n	80055de <_vfiprintf_r+0x176>
 8005652:	9105      	str	r1, [sp, #20]
 8005654:	e7c3      	b.n	80055de <_vfiprintf_r+0x176>
 8005656:	fb0c 2101 	mla	r1, ip, r1, r2
 800565a:	4604      	mov	r4, r0
 800565c:	2301      	movs	r3, #1
 800565e:	e7f0      	b.n	8005642 <_vfiprintf_r+0x1da>
 8005660:	ab03      	add	r3, sp, #12
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	462a      	mov	r2, r5
 8005666:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <_vfiprintf_r+0x258>)
 8005668:	a904      	add	r1, sp, #16
 800566a:	4630      	mov	r0, r6
 800566c:	f3af 8000 	nop.w
 8005670:	4607      	mov	r7, r0
 8005672:	1c78      	adds	r0, r7, #1
 8005674:	d1d6      	bne.n	8005624 <_vfiprintf_r+0x1bc>
 8005676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005678:	07d9      	lsls	r1, r3, #31
 800567a:	d405      	bmi.n	8005688 <_vfiprintf_r+0x220>
 800567c:	89ab      	ldrh	r3, [r5, #12]
 800567e:	059a      	lsls	r2, r3, #22
 8005680:	d402      	bmi.n	8005688 <_vfiprintf_r+0x220>
 8005682:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005684:	f7ff fddd 	bl	8005242 <__retarget_lock_release_recursive>
 8005688:	89ab      	ldrh	r3, [r5, #12]
 800568a:	065b      	lsls	r3, r3, #25
 800568c:	f53f af12 	bmi.w	80054b4 <_vfiprintf_r+0x4c>
 8005690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005692:	e711      	b.n	80054b8 <_vfiprintf_r+0x50>
 8005694:	ab03      	add	r3, sp, #12
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	462a      	mov	r2, r5
 800569a:	4b09      	ldr	r3, [pc, #36]	; (80056c0 <_vfiprintf_r+0x258>)
 800569c:	a904      	add	r1, sp, #16
 800569e:	4630      	mov	r0, r6
 80056a0:	f000 f880 	bl	80057a4 <_printf_i>
 80056a4:	e7e4      	b.n	8005670 <_vfiprintf_r+0x208>
 80056a6:	bf00      	nop
 80056a8:	08006128 	.word	0x08006128
 80056ac:	08006148 	.word	0x08006148
 80056b0:	08006108 	.word	0x08006108
 80056b4:	08006168 	.word	0x08006168
 80056b8:	08006172 	.word	0x08006172
 80056bc:	00000000 	.word	0x00000000
 80056c0:	08005443 	.word	0x08005443
 80056c4:	0800616e 	.word	0x0800616e

080056c8 <_printf_common>:
 80056c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056cc:	4616      	mov	r6, r2
 80056ce:	4699      	mov	r9, r3
 80056d0:	688a      	ldr	r2, [r1, #8]
 80056d2:	690b      	ldr	r3, [r1, #16]
 80056d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056d8:	4293      	cmp	r3, r2
 80056da:	bfb8      	it	lt
 80056dc:	4613      	movlt	r3, r2
 80056de:	6033      	str	r3, [r6, #0]
 80056e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056e4:	4607      	mov	r7, r0
 80056e6:	460c      	mov	r4, r1
 80056e8:	b10a      	cbz	r2, 80056ee <_printf_common+0x26>
 80056ea:	3301      	adds	r3, #1
 80056ec:	6033      	str	r3, [r6, #0]
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	0699      	lsls	r1, r3, #26
 80056f2:	bf42      	ittt	mi
 80056f4:	6833      	ldrmi	r3, [r6, #0]
 80056f6:	3302      	addmi	r3, #2
 80056f8:	6033      	strmi	r3, [r6, #0]
 80056fa:	6825      	ldr	r5, [r4, #0]
 80056fc:	f015 0506 	ands.w	r5, r5, #6
 8005700:	d106      	bne.n	8005710 <_printf_common+0x48>
 8005702:	f104 0a19 	add.w	sl, r4, #25
 8005706:	68e3      	ldr	r3, [r4, #12]
 8005708:	6832      	ldr	r2, [r6, #0]
 800570a:	1a9b      	subs	r3, r3, r2
 800570c:	42ab      	cmp	r3, r5
 800570e:	dc26      	bgt.n	800575e <_printf_common+0x96>
 8005710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005714:	1e13      	subs	r3, r2, #0
 8005716:	6822      	ldr	r2, [r4, #0]
 8005718:	bf18      	it	ne
 800571a:	2301      	movne	r3, #1
 800571c:	0692      	lsls	r2, r2, #26
 800571e:	d42b      	bmi.n	8005778 <_printf_common+0xb0>
 8005720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005724:	4649      	mov	r1, r9
 8005726:	4638      	mov	r0, r7
 8005728:	47c0      	blx	r8
 800572a:	3001      	adds	r0, #1
 800572c:	d01e      	beq.n	800576c <_printf_common+0xa4>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	68e5      	ldr	r5, [r4, #12]
 8005732:	6832      	ldr	r2, [r6, #0]
 8005734:	f003 0306 	and.w	r3, r3, #6
 8005738:	2b04      	cmp	r3, #4
 800573a:	bf08      	it	eq
 800573c:	1aad      	subeq	r5, r5, r2
 800573e:	68a3      	ldr	r3, [r4, #8]
 8005740:	6922      	ldr	r2, [r4, #16]
 8005742:	bf0c      	ite	eq
 8005744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005748:	2500      	movne	r5, #0
 800574a:	4293      	cmp	r3, r2
 800574c:	bfc4      	itt	gt
 800574e:	1a9b      	subgt	r3, r3, r2
 8005750:	18ed      	addgt	r5, r5, r3
 8005752:	2600      	movs	r6, #0
 8005754:	341a      	adds	r4, #26
 8005756:	42b5      	cmp	r5, r6
 8005758:	d11a      	bne.n	8005790 <_printf_common+0xc8>
 800575a:	2000      	movs	r0, #0
 800575c:	e008      	b.n	8005770 <_printf_common+0xa8>
 800575e:	2301      	movs	r3, #1
 8005760:	4652      	mov	r2, sl
 8005762:	4649      	mov	r1, r9
 8005764:	4638      	mov	r0, r7
 8005766:	47c0      	blx	r8
 8005768:	3001      	adds	r0, #1
 800576a:	d103      	bne.n	8005774 <_printf_common+0xac>
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005774:	3501      	adds	r5, #1
 8005776:	e7c6      	b.n	8005706 <_printf_common+0x3e>
 8005778:	18e1      	adds	r1, r4, r3
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	2030      	movs	r0, #48	; 0x30
 800577e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005782:	4422      	add	r2, r4
 8005784:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800578c:	3302      	adds	r3, #2
 800578e:	e7c7      	b.n	8005720 <_printf_common+0x58>
 8005790:	2301      	movs	r3, #1
 8005792:	4622      	mov	r2, r4
 8005794:	4649      	mov	r1, r9
 8005796:	4638      	mov	r0, r7
 8005798:	47c0      	blx	r8
 800579a:	3001      	adds	r0, #1
 800579c:	d0e6      	beq.n	800576c <_printf_common+0xa4>
 800579e:	3601      	adds	r6, #1
 80057a0:	e7d9      	b.n	8005756 <_printf_common+0x8e>
	...

080057a4 <_printf_i>:
 80057a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a8:	7e0f      	ldrb	r7, [r1, #24]
 80057aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057ac:	2f78      	cmp	r7, #120	; 0x78
 80057ae:	4691      	mov	r9, r2
 80057b0:	4680      	mov	r8, r0
 80057b2:	460c      	mov	r4, r1
 80057b4:	469a      	mov	sl, r3
 80057b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057ba:	d807      	bhi.n	80057cc <_printf_i+0x28>
 80057bc:	2f62      	cmp	r7, #98	; 0x62
 80057be:	d80a      	bhi.n	80057d6 <_printf_i+0x32>
 80057c0:	2f00      	cmp	r7, #0
 80057c2:	f000 80d8 	beq.w	8005976 <_printf_i+0x1d2>
 80057c6:	2f58      	cmp	r7, #88	; 0x58
 80057c8:	f000 80a3 	beq.w	8005912 <_printf_i+0x16e>
 80057cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057d4:	e03a      	b.n	800584c <_printf_i+0xa8>
 80057d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057da:	2b15      	cmp	r3, #21
 80057dc:	d8f6      	bhi.n	80057cc <_printf_i+0x28>
 80057de:	a101      	add	r1, pc, #4	; (adr r1, 80057e4 <_printf_i+0x40>)
 80057e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057e4:	0800583d 	.word	0x0800583d
 80057e8:	08005851 	.word	0x08005851
 80057ec:	080057cd 	.word	0x080057cd
 80057f0:	080057cd 	.word	0x080057cd
 80057f4:	080057cd 	.word	0x080057cd
 80057f8:	080057cd 	.word	0x080057cd
 80057fc:	08005851 	.word	0x08005851
 8005800:	080057cd 	.word	0x080057cd
 8005804:	080057cd 	.word	0x080057cd
 8005808:	080057cd 	.word	0x080057cd
 800580c:	080057cd 	.word	0x080057cd
 8005810:	0800595d 	.word	0x0800595d
 8005814:	08005881 	.word	0x08005881
 8005818:	0800593f 	.word	0x0800593f
 800581c:	080057cd 	.word	0x080057cd
 8005820:	080057cd 	.word	0x080057cd
 8005824:	0800597f 	.word	0x0800597f
 8005828:	080057cd 	.word	0x080057cd
 800582c:	08005881 	.word	0x08005881
 8005830:	080057cd 	.word	0x080057cd
 8005834:	080057cd 	.word	0x080057cd
 8005838:	08005947 	.word	0x08005947
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	1d1a      	adds	r2, r3, #4
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	602a      	str	r2, [r5, #0]
 8005844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800584c:	2301      	movs	r3, #1
 800584e:	e0a3      	b.n	8005998 <_printf_i+0x1f4>
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	6829      	ldr	r1, [r5, #0]
 8005854:	0606      	lsls	r6, r0, #24
 8005856:	f101 0304 	add.w	r3, r1, #4
 800585a:	d50a      	bpl.n	8005872 <_printf_i+0xce>
 800585c:	680e      	ldr	r6, [r1, #0]
 800585e:	602b      	str	r3, [r5, #0]
 8005860:	2e00      	cmp	r6, #0
 8005862:	da03      	bge.n	800586c <_printf_i+0xc8>
 8005864:	232d      	movs	r3, #45	; 0x2d
 8005866:	4276      	negs	r6, r6
 8005868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800586c:	485e      	ldr	r0, [pc, #376]	; (80059e8 <_printf_i+0x244>)
 800586e:	230a      	movs	r3, #10
 8005870:	e019      	b.n	80058a6 <_printf_i+0x102>
 8005872:	680e      	ldr	r6, [r1, #0]
 8005874:	602b      	str	r3, [r5, #0]
 8005876:	f010 0f40 	tst.w	r0, #64	; 0x40
 800587a:	bf18      	it	ne
 800587c:	b236      	sxthne	r6, r6
 800587e:	e7ef      	b.n	8005860 <_printf_i+0xbc>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	6820      	ldr	r0, [r4, #0]
 8005884:	1d19      	adds	r1, r3, #4
 8005886:	6029      	str	r1, [r5, #0]
 8005888:	0601      	lsls	r1, r0, #24
 800588a:	d501      	bpl.n	8005890 <_printf_i+0xec>
 800588c:	681e      	ldr	r6, [r3, #0]
 800588e:	e002      	b.n	8005896 <_printf_i+0xf2>
 8005890:	0646      	lsls	r6, r0, #25
 8005892:	d5fb      	bpl.n	800588c <_printf_i+0xe8>
 8005894:	881e      	ldrh	r6, [r3, #0]
 8005896:	4854      	ldr	r0, [pc, #336]	; (80059e8 <_printf_i+0x244>)
 8005898:	2f6f      	cmp	r7, #111	; 0x6f
 800589a:	bf0c      	ite	eq
 800589c:	2308      	moveq	r3, #8
 800589e:	230a      	movne	r3, #10
 80058a0:	2100      	movs	r1, #0
 80058a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058a6:	6865      	ldr	r5, [r4, #4]
 80058a8:	60a5      	str	r5, [r4, #8]
 80058aa:	2d00      	cmp	r5, #0
 80058ac:	bfa2      	ittt	ge
 80058ae:	6821      	ldrge	r1, [r4, #0]
 80058b0:	f021 0104 	bicge.w	r1, r1, #4
 80058b4:	6021      	strge	r1, [r4, #0]
 80058b6:	b90e      	cbnz	r6, 80058bc <_printf_i+0x118>
 80058b8:	2d00      	cmp	r5, #0
 80058ba:	d04d      	beq.n	8005958 <_printf_i+0x1b4>
 80058bc:	4615      	mov	r5, r2
 80058be:	fbb6 f1f3 	udiv	r1, r6, r3
 80058c2:	fb03 6711 	mls	r7, r3, r1, r6
 80058c6:	5dc7      	ldrb	r7, [r0, r7]
 80058c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058cc:	4637      	mov	r7, r6
 80058ce:	42bb      	cmp	r3, r7
 80058d0:	460e      	mov	r6, r1
 80058d2:	d9f4      	bls.n	80058be <_printf_i+0x11a>
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d10b      	bne.n	80058f0 <_printf_i+0x14c>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	07de      	lsls	r6, r3, #31
 80058dc:	d508      	bpl.n	80058f0 <_printf_i+0x14c>
 80058de:	6923      	ldr	r3, [r4, #16]
 80058e0:	6861      	ldr	r1, [r4, #4]
 80058e2:	4299      	cmp	r1, r3
 80058e4:	bfde      	ittt	le
 80058e6:	2330      	movle	r3, #48	; 0x30
 80058e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058f0:	1b52      	subs	r2, r2, r5
 80058f2:	6122      	str	r2, [r4, #16]
 80058f4:	f8cd a000 	str.w	sl, [sp]
 80058f8:	464b      	mov	r3, r9
 80058fa:	aa03      	add	r2, sp, #12
 80058fc:	4621      	mov	r1, r4
 80058fe:	4640      	mov	r0, r8
 8005900:	f7ff fee2 	bl	80056c8 <_printf_common>
 8005904:	3001      	adds	r0, #1
 8005906:	d14c      	bne.n	80059a2 <_printf_i+0x1fe>
 8005908:	f04f 30ff 	mov.w	r0, #4294967295
 800590c:	b004      	add	sp, #16
 800590e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005912:	4835      	ldr	r0, [pc, #212]	; (80059e8 <_printf_i+0x244>)
 8005914:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005918:	6829      	ldr	r1, [r5, #0]
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005920:	6029      	str	r1, [r5, #0]
 8005922:	061d      	lsls	r5, r3, #24
 8005924:	d514      	bpl.n	8005950 <_printf_i+0x1ac>
 8005926:	07df      	lsls	r7, r3, #31
 8005928:	bf44      	itt	mi
 800592a:	f043 0320 	orrmi.w	r3, r3, #32
 800592e:	6023      	strmi	r3, [r4, #0]
 8005930:	b91e      	cbnz	r6, 800593a <_printf_i+0x196>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	f023 0320 	bic.w	r3, r3, #32
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	2310      	movs	r3, #16
 800593c:	e7b0      	b.n	80058a0 <_printf_i+0xfc>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	f043 0320 	orr.w	r3, r3, #32
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	2378      	movs	r3, #120	; 0x78
 8005948:	4828      	ldr	r0, [pc, #160]	; (80059ec <_printf_i+0x248>)
 800594a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800594e:	e7e3      	b.n	8005918 <_printf_i+0x174>
 8005950:	0659      	lsls	r1, r3, #25
 8005952:	bf48      	it	mi
 8005954:	b2b6      	uxthmi	r6, r6
 8005956:	e7e6      	b.n	8005926 <_printf_i+0x182>
 8005958:	4615      	mov	r5, r2
 800595a:	e7bb      	b.n	80058d4 <_printf_i+0x130>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	6826      	ldr	r6, [r4, #0]
 8005960:	6961      	ldr	r1, [r4, #20]
 8005962:	1d18      	adds	r0, r3, #4
 8005964:	6028      	str	r0, [r5, #0]
 8005966:	0635      	lsls	r5, r6, #24
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	d501      	bpl.n	8005970 <_printf_i+0x1cc>
 800596c:	6019      	str	r1, [r3, #0]
 800596e:	e002      	b.n	8005976 <_printf_i+0x1d2>
 8005970:	0670      	lsls	r0, r6, #25
 8005972:	d5fb      	bpl.n	800596c <_printf_i+0x1c8>
 8005974:	8019      	strh	r1, [r3, #0]
 8005976:	2300      	movs	r3, #0
 8005978:	6123      	str	r3, [r4, #16]
 800597a:	4615      	mov	r5, r2
 800597c:	e7ba      	b.n	80058f4 <_printf_i+0x150>
 800597e:	682b      	ldr	r3, [r5, #0]
 8005980:	1d1a      	adds	r2, r3, #4
 8005982:	602a      	str	r2, [r5, #0]
 8005984:	681d      	ldr	r5, [r3, #0]
 8005986:	6862      	ldr	r2, [r4, #4]
 8005988:	2100      	movs	r1, #0
 800598a:	4628      	mov	r0, r5
 800598c:	f7fa fc20 	bl	80001d0 <memchr>
 8005990:	b108      	cbz	r0, 8005996 <_printf_i+0x1f2>
 8005992:	1b40      	subs	r0, r0, r5
 8005994:	6060      	str	r0, [r4, #4]
 8005996:	6863      	ldr	r3, [r4, #4]
 8005998:	6123      	str	r3, [r4, #16]
 800599a:	2300      	movs	r3, #0
 800599c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a0:	e7a8      	b.n	80058f4 <_printf_i+0x150>
 80059a2:	6923      	ldr	r3, [r4, #16]
 80059a4:	462a      	mov	r2, r5
 80059a6:	4649      	mov	r1, r9
 80059a8:	4640      	mov	r0, r8
 80059aa:	47d0      	blx	sl
 80059ac:	3001      	adds	r0, #1
 80059ae:	d0ab      	beq.n	8005908 <_printf_i+0x164>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	079b      	lsls	r3, r3, #30
 80059b4:	d413      	bmi.n	80059de <_printf_i+0x23a>
 80059b6:	68e0      	ldr	r0, [r4, #12]
 80059b8:	9b03      	ldr	r3, [sp, #12]
 80059ba:	4298      	cmp	r0, r3
 80059bc:	bfb8      	it	lt
 80059be:	4618      	movlt	r0, r3
 80059c0:	e7a4      	b.n	800590c <_printf_i+0x168>
 80059c2:	2301      	movs	r3, #1
 80059c4:	4632      	mov	r2, r6
 80059c6:	4649      	mov	r1, r9
 80059c8:	4640      	mov	r0, r8
 80059ca:	47d0      	blx	sl
 80059cc:	3001      	adds	r0, #1
 80059ce:	d09b      	beq.n	8005908 <_printf_i+0x164>
 80059d0:	3501      	adds	r5, #1
 80059d2:	68e3      	ldr	r3, [r4, #12]
 80059d4:	9903      	ldr	r1, [sp, #12]
 80059d6:	1a5b      	subs	r3, r3, r1
 80059d8:	42ab      	cmp	r3, r5
 80059da:	dcf2      	bgt.n	80059c2 <_printf_i+0x21e>
 80059dc:	e7eb      	b.n	80059b6 <_printf_i+0x212>
 80059de:	2500      	movs	r5, #0
 80059e0:	f104 0619 	add.w	r6, r4, #25
 80059e4:	e7f5      	b.n	80059d2 <_printf_i+0x22e>
 80059e6:	bf00      	nop
 80059e8:	08006179 	.word	0x08006179
 80059ec:	0800618a 	.word	0x0800618a

080059f0 <_sbrk_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4d06      	ldr	r5, [pc, #24]	; (8005a0c <_sbrk_r+0x1c>)
 80059f4:	2300      	movs	r3, #0
 80059f6:	4604      	mov	r4, r0
 80059f8:	4608      	mov	r0, r1
 80059fa:	602b      	str	r3, [r5, #0]
 80059fc:	f7fb fbb8 	bl	8001170 <_sbrk>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_sbrk_r+0x1a>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_sbrk_r+0x1a>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	20013334 	.word	0x20013334

08005a10 <__sread>:
 8005a10:	b510      	push	{r4, lr}
 8005a12:	460c      	mov	r4, r1
 8005a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a18:	f000 fa6e 	bl	8005ef8 <_read_r>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	bfab      	itete	ge
 8005a20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a22:	89a3      	ldrhlt	r3, [r4, #12]
 8005a24:	181b      	addge	r3, r3, r0
 8005a26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a2a:	bfac      	ite	ge
 8005a2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a2e:	81a3      	strhlt	r3, [r4, #12]
 8005a30:	bd10      	pop	{r4, pc}

08005a32 <__swrite>:
 8005a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a36:	461f      	mov	r7, r3
 8005a38:	898b      	ldrh	r3, [r1, #12]
 8005a3a:	05db      	lsls	r3, r3, #23
 8005a3c:	4605      	mov	r5, r0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	4616      	mov	r6, r2
 8005a42:	d505      	bpl.n	8005a50 <__swrite+0x1e>
 8005a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a48:	2302      	movs	r3, #2
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f000 f9d0 	bl	8005df0 <_lseek_r>
 8005a50:	89a3      	ldrh	r3, [r4, #12]
 8005a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a5a:	81a3      	strh	r3, [r4, #12]
 8005a5c:	4632      	mov	r2, r6
 8005a5e:	463b      	mov	r3, r7
 8005a60:	4628      	mov	r0, r5
 8005a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a66:	f000 b869 	b.w	8005b3c <_write_r>

08005a6a <__sseek>:
 8005a6a:	b510      	push	{r4, lr}
 8005a6c:	460c      	mov	r4, r1
 8005a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a72:	f000 f9bd 	bl	8005df0 <_lseek_r>
 8005a76:	1c43      	adds	r3, r0, #1
 8005a78:	89a3      	ldrh	r3, [r4, #12]
 8005a7a:	bf15      	itete	ne
 8005a7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a86:	81a3      	strheq	r3, [r4, #12]
 8005a88:	bf18      	it	ne
 8005a8a:	81a3      	strhne	r3, [r4, #12]
 8005a8c:	bd10      	pop	{r4, pc}

08005a8e <__sclose>:
 8005a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a92:	f000 b8db 	b.w	8005c4c <_close_r>
	...

08005a98 <__swbuf_r>:
 8005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9a:	460e      	mov	r6, r1
 8005a9c:	4614      	mov	r4, r2
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	b118      	cbz	r0, 8005aaa <__swbuf_r+0x12>
 8005aa2:	6983      	ldr	r3, [r0, #24]
 8005aa4:	b90b      	cbnz	r3, 8005aaa <__swbuf_r+0x12>
 8005aa6:	f7ff fb1b 	bl	80050e0 <__sinit>
 8005aaa:	4b21      	ldr	r3, [pc, #132]	; (8005b30 <__swbuf_r+0x98>)
 8005aac:	429c      	cmp	r4, r3
 8005aae:	d12b      	bne.n	8005b08 <__swbuf_r+0x70>
 8005ab0:	686c      	ldr	r4, [r5, #4]
 8005ab2:	69a3      	ldr	r3, [r4, #24]
 8005ab4:	60a3      	str	r3, [r4, #8]
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	071a      	lsls	r2, r3, #28
 8005aba:	d52f      	bpl.n	8005b1c <__swbuf_r+0x84>
 8005abc:	6923      	ldr	r3, [r4, #16]
 8005abe:	b36b      	cbz	r3, 8005b1c <__swbuf_r+0x84>
 8005ac0:	6923      	ldr	r3, [r4, #16]
 8005ac2:	6820      	ldr	r0, [r4, #0]
 8005ac4:	1ac0      	subs	r0, r0, r3
 8005ac6:	6963      	ldr	r3, [r4, #20]
 8005ac8:	b2f6      	uxtb	r6, r6
 8005aca:	4283      	cmp	r3, r0
 8005acc:	4637      	mov	r7, r6
 8005ace:	dc04      	bgt.n	8005ada <__swbuf_r+0x42>
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f000 f950 	bl	8005d78 <_fflush_r>
 8005ad8:	bb30      	cbnz	r0, 8005b28 <__swbuf_r+0x90>
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	60a3      	str	r3, [r4, #8]
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	6022      	str	r2, [r4, #0]
 8005ae6:	701e      	strb	r6, [r3, #0]
 8005ae8:	6963      	ldr	r3, [r4, #20]
 8005aea:	3001      	adds	r0, #1
 8005aec:	4283      	cmp	r3, r0
 8005aee:	d004      	beq.n	8005afa <__swbuf_r+0x62>
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	07db      	lsls	r3, r3, #31
 8005af4:	d506      	bpl.n	8005b04 <__swbuf_r+0x6c>
 8005af6:	2e0a      	cmp	r6, #10
 8005af8:	d104      	bne.n	8005b04 <__swbuf_r+0x6c>
 8005afa:	4621      	mov	r1, r4
 8005afc:	4628      	mov	r0, r5
 8005afe:	f000 f93b 	bl	8005d78 <_fflush_r>
 8005b02:	b988      	cbnz	r0, 8005b28 <__swbuf_r+0x90>
 8005b04:	4638      	mov	r0, r7
 8005b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b08:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <__swbuf_r+0x9c>)
 8005b0a:	429c      	cmp	r4, r3
 8005b0c:	d101      	bne.n	8005b12 <__swbuf_r+0x7a>
 8005b0e:	68ac      	ldr	r4, [r5, #8]
 8005b10:	e7cf      	b.n	8005ab2 <__swbuf_r+0x1a>
 8005b12:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <__swbuf_r+0xa0>)
 8005b14:	429c      	cmp	r4, r3
 8005b16:	bf08      	it	eq
 8005b18:	68ec      	ldreq	r4, [r5, #12]
 8005b1a:	e7ca      	b.n	8005ab2 <__swbuf_r+0x1a>
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f000 f81e 	bl	8005b60 <__swsetup_r>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d0cb      	beq.n	8005ac0 <__swbuf_r+0x28>
 8005b28:	f04f 37ff 	mov.w	r7, #4294967295
 8005b2c:	e7ea      	b.n	8005b04 <__swbuf_r+0x6c>
 8005b2e:	bf00      	nop
 8005b30:	08006128 	.word	0x08006128
 8005b34:	08006148 	.word	0x08006148
 8005b38:	08006108 	.word	0x08006108

08005b3c <_write_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	4d07      	ldr	r5, [pc, #28]	; (8005b5c <_write_r+0x20>)
 8005b40:	4604      	mov	r4, r0
 8005b42:	4608      	mov	r0, r1
 8005b44:	4611      	mov	r1, r2
 8005b46:	2200      	movs	r2, #0
 8005b48:	602a      	str	r2, [r5, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f7fb fabf 	bl	80010ce <_write>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d102      	bne.n	8005b5a <_write_r+0x1e>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b103      	cbz	r3, 8005b5a <_write_r+0x1e>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	20013334 	.word	0x20013334

08005b60 <__swsetup_r>:
 8005b60:	4b32      	ldr	r3, [pc, #200]	; (8005c2c <__swsetup_r+0xcc>)
 8005b62:	b570      	push	{r4, r5, r6, lr}
 8005b64:	681d      	ldr	r5, [r3, #0]
 8005b66:	4606      	mov	r6, r0
 8005b68:	460c      	mov	r4, r1
 8005b6a:	b125      	cbz	r5, 8005b76 <__swsetup_r+0x16>
 8005b6c:	69ab      	ldr	r3, [r5, #24]
 8005b6e:	b913      	cbnz	r3, 8005b76 <__swsetup_r+0x16>
 8005b70:	4628      	mov	r0, r5
 8005b72:	f7ff fab5 	bl	80050e0 <__sinit>
 8005b76:	4b2e      	ldr	r3, [pc, #184]	; (8005c30 <__swsetup_r+0xd0>)
 8005b78:	429c      	cmp	r4, r3
 8005b7a:	d10f      	bne.n	8005b9c <__swsetup_r+0x3c>
 8005b7c:	686c      	ldr	r4, [r5, #4]
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b84:	0719      	lsls	r1, r3, #28
 8005b86:	d42c      	bmi.n	8005be2 <__swsetup_r+0x82>
 8005b88:	06dd      	lsls	r5, r3, #27
 8005b8a:	d411      	bmi.n	8005bb0 <__swsetup_r+0x50>
 8005b8c:	2309      	movs	r3, #9
 8005b8e:	6033      	str	r3, [r6, #0]
 8005b90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b94:	81a3      	strh	r3, [r4, #12]
 8005b96:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9a:	e03e      	b.n	8005c1a <__swsetup_r+0xba>
 8005b9c:	4b25      	ldr	r3, [pc, #148]	; (8005c34 <__swsetup_r+0xd4>)
 8005b9e:	429c      	cmp	r4, r3
 8005ba0:	d101      	bne.n	8005ba6 <__swsetup_r+0x46>
 8005ba2:	68ac      	ldr	r4, [r5, #8]
 8005ba4:	e7eb      	b.n	8005b7e <__swsetup_r+0x1e>
 8005ba6:	4b24      	ldr	r3, [pc, #144]	; (8005c38 <__swsetup_r+0xd8>)
 8005ba8:	429c      	cmp	r4, r3
 8005baa:	bf08      	it	eq
 8005bac:	68ec      	ldreq	r4, [r5, #12]
 8005bae:	e7e6      	b.n	8005b7e <__swsetup_r+0x1e>
 8005bb0:	0758      	lsls	r0, r3, #29
 8005bb2:	d512      	bpl.n	8005bda <__swsetup_r+0x7a>
 8005bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bb6:	b141      	cbz	r1, 8005bca <__swsetup_r+0x6a>
 8005bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bbc:	4299      	cmp	r1, r3
 8005bbe:	d002      	beq.n	8005bc6 <__swsetup_r+0x66>
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f7ff fb47 	bl	8005254 <_free_r>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	6363      	str	r3, [r4, #52]	; 0x34
 8005bca:	89a3      	ldrh	r3, [r4, #12]
 8005bcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bd0:	81a3      	strh	r3, [r4, #12]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	6063      	str	r3, [r4, #4]
 8005bd6:	6923      	ldr	r3, [r4, #16]
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	f043 0308 	orr.w	r3, r3, #8
 8005be0:	81a3      	strh	r3, [r4, #12]
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	b94b      	cbnz	r3, 8005bfa <__swsetup_r+0x9a>
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf0:	d003      	beq.n	8005bfa <__swsetup_r+0x9a>
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	f000 f933 	bl	8005e60 <__smakebuf_r>
 8005bfa:	89a0      	ldrh	r0, [r4, #12]
 8005bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c00:	f010 0301 	ands.w	r3, r0, #1
 8005c04:	d00a      	beq.n	8005c1c <__swsetup_r+0xbc>
 8005c06:	2300      	movs	r3, #0
 8005c08:	60a3      	str	r3, [r4, #8]
 8005c0a:	6963      	ldr	r3, [r4, #20]
 8005c0c:	425b      	negs	r3, r3
 8005c0e:	61a3      	str	r3, [r4, #24]
 8005c10:	6923      	ldr	r3, [r4, #16]
 8005c12:	b943      	cbnz	r3, 8005c26 <__swsetup_r+0xc6>
 8005c14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c18:	d1ba      	bne.n	8005b90 <__swsetup_r+0x30>
 8005c1a:	bd70      	pop	{r4, r5, r6, pc}
 8005c1c:	0781      	lsls	r1, r0, #30
 8005c1e:	bf58      	it	pl
 8005c20:	6963      	ldrpl	r3, [r4, #20]
 8005c22:	60a3      	str	r3, [r4, #8]
 8005c24:	e7f4      	b.n	8005c10 <__swsetup_r+0xb0>
 8005c26:	2000      	movs	r0, #0
 8005c28:	e7f7      	b.n	8005c1a <__swsetup_r+0xba>
 8005c2a:	bf00      	nop
 8005c2c:	2000000c 	.word	0x2000000c
 8005c30:	08006128 	.word	0x08006128
 8005c34:	08006148 	.word	0x08006148
 8005c38:	08006108 	.word	0x08006108

08005c3c <abort>:
 8005c3c:	b508      	push	{r3, lr}
 8005c3e:	2006      	movs	r0, #6
 8005c40:	f000 f994 	bl	8005f6c <raise>
 8005c44:	2001      	movs	r0, #1
 8005c46:	f7fb fa1b 	bl	8001080 <_exit>
	...

08005c4c <_close_r>:
 8005c4c:	b538      	push	{r3, r4, r5, lr}
 8005c4e:	4d06      	ldr	r5, [pc, #24]	; (8005c68 <_close_r+0x1c>)
 8005c50:	2300      	movs	r3, #0
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	602b      	str	r3, [r5, #0]
 8005c58:	f7fb fa55 	bl	8001106 <_close>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_close_r+0x1a>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_close_r+0x1a>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	20013334 	.word	0x20013334

08005c6c <__sflush_r>:
 8005c6c:	898a      	ldrh	r2, [r1, #12]
 8005c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c72:	4605      	mov	r5, r0
 8005c74:	0710      	lsls	r0, r2, #28
 8005c76:	460c      	mov	r4, r1
 8005c78:	d458      	bmi.n	8005d2c <__sflush_r+0xc0>
 8005c7a:	684b      	ldr	r3, [r1, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	dc05      	bgt.n	8005c8c <__sflush_r+0x20>
 8005c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	dc02      	bgt.n	8005c8c <__sflush_r+0x20>
 8005c86:	2000      	movs	r0, #0
 8005c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c8e:	2e00      	cmp	r6, #0
 8005c90:	d0f9      	beq.n	8005c86 <__sflush_r+0x1a>
 8005c92:	2300      	movs	r3, #0
 8005c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c98:	682f      	ldr	r7, [r5, #0]
 8005c9a:	602b      	str	r3, [r5, #0]
 8005c9c:	d032      	beq.n	8005d04 <__sflush_r+0x98>
 8005c9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	075a      	lsls	r2, r3, #29
 8005ca4:	d505      	bpl.n	8005cb2 <__sflush_r+0x46>
 8005ca6:	6863      	ldr	r3, [r4, #4]
 8005ca8:	1ac0      	subs	r0, r0, r3
 8005caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cac:	b10b      	cbz	r3, 8005cb2 <__sflush_r+0x46>
 8005cae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cb0:	1ac0      	subs	r0, r0, r3
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cb8:	6a21      	ldr	r1, [r4, #32]
 8005cba:	4628      	mov	r0, r5
 8005cbc:	47b0      	blx	r6
 8005cbe:	1c43      	adds	r3, r0, #1
 8005cc0:	89a3      	ldrh	r3, [r4, #12]
 8005cc2:	d106      	bne.n	8005cd2 <__sflush_r+0x66>
 8005cc4:	6829      	ldr	r1, [r5, #0]
 8005cc6:	291d      	cmp	r1, #29
 8005cc8:	d82c      	bhi.n	8005d24 <__sflush_r+0xb8>
 8005cca:	4a2a      	ldr	r2, [pc, #168]	; (8005d74 <__sflush_r+0x108>)
 8005ccc:	40ca      	lsrs	r2, r1
 8005cce:	07d6      	lsls	r6, r2, #31
 8005cd0:	d528      	bpl.n	8005d24 <__sflush_r+0xb8>
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	6062      	str	r2, [r4, #4]
 8005cd6:	04d9      	lsls	r1, r3, #19
 8005cd8:	6922      	ldr	r2, [r4, #16]
 8005cda:	6022      	str	r2, [r4, #0]
 8005cdc:	d504      	bpl.n	8005ce8 <__sflush_r+0x7c>
 8005cde:	1c42      	adds	r2, r0, #1
 8005ce0:	d101      	bne.n	8005ce6 <__sflush_r+0x7a>
 8005ce2:	682b      	ldr	r3, [r5, #0]
 8005ce4:	b903      	cbnz	r3, 8005ce8 <__sflush_r+0x7c>
 8005ce6:	6560      	str	r0, [r4, #84]	; 0x54
 8005ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cea:	602f      	str	r7, [r5, #0]
 8005cec:	2900      	cmp	r1, #0
 8005cee:	d0ca      	beq.n	8005c86 <__sflush_r+0x1a>
 8005cf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cf4:	4299      	cmp	r1, r3
 8005cf6:	d002      	beq.n	8005cfe <__sflush_r+0x92>
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f7ff faab 	bl	8005254 <_free_r>
 8005cfe:	2000      	movs	r0, #0
 8005d00:	6360      	str	r0, [r4, #52]	; 0x34
 8005d02:	e7c1      	b.n	8005c88 <__sflush_r+0x1c>
 8005d04:	6a21      	ldr	r1, [r4, #32]
 8005d06:	2301      	movs	r3, #1
 8005d08:	4628      	mov	r0, r5
 8005d0a:	47b0      	blx	r6
 8005d0c:	1c41      	adds	r1, r0, #1
 8005d0e:	d1c7      	bne.n	8005ca0 <__sflush_r+0x34>
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0c4      	beq.n	8005ca0 <__sflush_r+0x34>
 8005d16:	2b1d      	cmp	r3, #29
 8005d18:	d001      	beq.n	8005d1e <__sflush_r+0xb2>
 8005d1a:	2b16      	cmp	r3, #22
 8005d1c:	d101      	bne.n	8005d22 <__sflush_r+0xb6>
 8005d1e:	602f      	str	r7, [r5, #0]
 8005d20:	e7b1      	b.n	8005c86 <__sflush_r+0x1a>
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d28:	81a3      	strh	r3, [r4, #12]
 8005d2a:	e7ad      	b.n	8005c88 <__sflush_r+0x1c>
 8005d2c:	690f      	ldr	r7, [r1, #16]
 8005d2e:	2f00      	cmp	r7, #0
 8005d30:	d0a9      	beq.n	8005c86 <__sflush_r+0x1a>
 8005d32:	0793      	lsls	r3, r2, #30
 8005d34:	680e      	ldr	r6, [r1, #0]
 8005d36:	bf08      	it	eq
 8005d38:	694b      	ldreq	r3, [r1, #20]
 8005d3a:	600f      	str	r7, [r1, #0]
 8005d3c:	bf18      	it	ne
 8005d3e:	2300      	movne	r3, #0
 8005d40:	eba6 0807 	sub.w	r8, r6, r7
 8005d44:	608b      	str	r3, [r1, #8]
 8005d46:	f1b8 0f00 	cmp.w	r8, #0
 8005d4a:	dd9c      	ble.n	8005c86 <__sflush_r+0x1a>
 8005d4c:	6a21      	ldr	r1, [r4, #32]
 8005d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d50:	4643      	mov	r3, r8
 8005d52:	463a      	mov	r2, r7
 8005d54:	4628      	mov	r0, r5
 8005d56:	47b0      	blx	r6
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	dc06      	bgt.n	8005d6a <__sflush_r+0xfe>
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d62:	81a3      	strh	r3, [r4, #12]
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	e78e      	b.n	8005c88 <__sflush_r+0x1c>
 8005d6a:	4407      	add	r7, r0
 8005d6c:	eba8 0800 	sub.w	r8, r8, r0
 8005d70:	e7e9      	b.n	8005d46 <__sflush_r+0xda>
 8005d72:	bf00      	nop
 8005d74:	20400001 	.word	0x20400001

08005d78 <_fflush_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	690b      	ldr	r3, [r1, #16]
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	460c      	mov	r4, r1
 8005d80:	b913      	cbnz	r3, 8005d88 <_fflush_r+0x10>
 8005d82:	2500      	movs	r5, #0
 8005d84:	4628      	mov	r0, r5
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	b118      	cbz	r0, 8005d92 <_fflush_r+0x1a>
 8005d8a:	6983      	ldr	r3, [r0, #24]
 8005d8c:	b90b      	cbnz	r3, 8005d92 <_fflush_r+0x1a>
 8005d8e:	f7ff f9a7 	bl	80050e0 <__sinit>
 8005d92:	4b14      	ldr	r3, [pc, #80]	; (8005de4 <_fflush_r+0x6c>)
 8005d94:	429c      	cmp	r4, r3
 8005d96:	d11b      	bne.n	8005dd0 <_fflush_r+0x58>
 8005d98:	686c      	ldr	r4, [r5, #4]
 8005d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0ef      	beq.n	8005d82 <_fflush_r+0xa>
 8005da2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005da4:	07d0      	lsls	r0, r2, #31
 8005da6:	d404      	bmi.n	8005db2 <_fflush_r+0x3a>
 8005da8:	0599      	lsls	r1, r3, #22
 8005daa:	d402      	bmi.n	8005db2 <_fflush_r+0x3a>
 8005dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dae:	f7ff fa47 	bl	8005240 <__retarget_lock_acquire_recursive>
 8005db2:	4628      	mov	r0, r5
 8005db4:	4621      	mov	r1, r4
 8005db6:	f7ff ff59 	bl	8005c6c <__sflush_r>
 8005dba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dbc:	07da      	lsls	r2, r3, #31
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	d4e0      	bmi.n	8005d84 <_fflush_r+0xc>
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	059b      	lsls	r3, r3, #22
 8005dc6:	d4dd      	bmi.n	8005d84 <_fflush_r+0xc>
 8005dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dca:	f7ff fa3a 	bl	8005242 <__retarget_lock_release_recursive>
 8005dce:	e7d9      	b.n	8005d84 <_fflush_r+0xc>
 8005dd0:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <_fflush_r+0x70>)
 8005dd2:	429c      	cmp	r4, r3
 8005dd4:	d101      	bne.n	8005dda <_fflush_r+0x62>
 8005dd6:	68ac      	ldr	r4, [r5, #8]
 8005dd8:	e7df      	b.n	8005d9a <_fflush_r+0x22>
 8005dda:	4b04      	ldr	r3, [pc, #16]	; (8005dec <_fflush_r+0x74>)
 8005ddc:	429c      	cmp	r4, r3
 8005dde:	bf08      	it	eq
 8005de0:	68ec      	ldreq	r4, [r5, #12]
 8005de2:	e7da      	b.n	8005d9a <_fflush_r+0x22>
 8005de4:	08006128 	.word	0x08006128
 8005de8:	08006148 	.word	0x08006148
 8005dec:	08006108 	.word	0x08006108

08005df0 <_lseek_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	4d07      	ldr	r5, [pc, #28]	; (8005e10 <_lseek_r+0x20>)
 8005df4:	4604      	mov	r4, r0
 8005df6:	4608      	mov	r0, r1
 8005df8:	4611      	mov	r1, r2
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	602a      	str	r2, [r5, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f7fb f9a8 	bl	8001154 <_lseek>
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	d102      	bne.n	8005e0e <_lseek_r+0x1e>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	b103      	cbz	r3, 8005e0e <_lseek_r+0x1e>
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	bd38      	pop	{r3, r4, r5, pc}
 8005e10:	20013334 	.word	0x20013334

08005e14 <__swhatbuf_r>:
 8005e14:	b570      	push	{r4, r5, r6, lr}
 8005e16:	460e      	mov	r6, r1
 8005e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e1c:	2900      	cmp	r1, #0
 8005e1e:	b096      	sub	sp, #88	; 0x58
 8005e20:	4614      	mov	r4, r2
 8005e22:	461d      	mov	r5, r3
 8005e24:	da08      	bge.n	8005e38 <__swhatbuf_r+0x24>
 8005e26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	602a      	str	r2, [r5, #0]
 8005e2e:	061a      	lsls	r2, r3, #24
 8005e30:	d410      	bmi.n	8005e54 <__swhatbuf_r+0x40>
 8005e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e36:	e00e      	b.n	8005e56 <__swhatbuf_r+0x42>
 8005e38:	466a      	mov	r2, sp
 8005e3a:	f000 f8b3 	bl	8005fa4 <_fstat_r>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	dbf1      	blt.n	8005e26 <__swhatbuf_r+0x12>
 8005e42:	9a01      	ldr	r2, [sp, #4]
 8005e44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e4c:	425a      	negs	r2, r3
 8005e4e:	415a      	adcs	r2, r3
 8005e50:	602a      	str	r2, [r5, #0]
 8005e52:	e7ee      	b.n	8005e32 <__swhatbuf_r+0x1e>
 8005e54:	2340      	movs	r3, #64	; 0x40
 8005e56:	2000      	movs	r0, #0
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	b016      	add	sp, #88	; 0x58
 8005e5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e60 <__smakebuf_r>:
 8005e60:	898b      	ldrh	r3, [r1, #12]
 8005e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e64:	079d      	lsls	r5, r3, #30
 8005e66:	4606      	mov	r6, r0
 8005e68:	460c      	mov	r4, r1
 8005e6a:	d507      	bpl.n	8005e7c <__smakebuf_r+0x1c>
 8005e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	6123      	str	r3, [r4, #16]
 8005e74:	2301      	movs	r3, #1
 8005e76:	6163      	str	r3, [r4, #20]
 8005e78:	b002      	add	sp, #8
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	ab01      	add	r3, sp, #4
 8005e7e:	466a      	mov	r2, sp
 8005e80:	f7ff ffc8 	bl	8005e14 <__swhatbuf_r>
 8005e84:	9900      	ldr	r1, [sp, #0]
 8005e86:	4605      	mov	r5, r0
 8005e88:	4630      	mov	r0, r6
 8005e8a:	f7ff fa4f 	bl	800532c <_malloc_r>
 8005e8e:	b948      	cbnz	r0, 8005ea4 <__smakebuf_r+0x44>
 8005e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e94:	059a      	lsls	r2, r3, #22
 8005e96:	d4ef      	bmi.n	8005e78 <__smakebuf_r+0x18>
 8005e98:	f023 0303 	bic.w	r3, r3, #3
 8005e9c:	f043 0302 	orr.w	r3, r3, #2
 8005ea0:	81a3      	strh	r3, [r4, #12]
 8005ea2:	e7e3      	b.n	8005e6c <__smakebuf_r+0xc>
 8005ea4:	4b0d      	ldr	r3, [pc, #52]	; (8005edc <__smakebuf_r+0x7c>)
 8005ea6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ea8:	89a3      	ldrh	r3, [r4, #12]
 8005eaa:	6020      	str	r0, [r4, #0]
 8005eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb0:	81a3      	strh	r3, [r4, #12]
 8005eb2:	9b00      	ldr	r3, [sp, #0]
 8005eb4:	6163      	str	r3, [r4, #20]
 8005eb6:	9b01      	ldr	r3, [sp, #4]
 8005eb8:	6120      	str	r0, [r4, #16]
 8005eba:	b15b      	cbz	r3, 8005ed4 <__smakebuf_r+0x74>
 8005ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	f000 f881 	bl	8005fc8 <_isatty_r>
 8005ec6:	b128      	cbz	r0, 8005ed4 <__smakebuf_r+0x74>
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	f023 0303 	bic.w	r3, r3, #3
 8005ece:	f043 0301 	orr.w	r3, r3, #1
 8005ed2:	81a3      	strh	r3, [r4, #12]
 8005ed4:	89a0      	ldrh	r0, [r4, #12]
 8005ed6:	4305      	orrs	r5, r0
 8005ed8:	81a5      	strh	r5, [r4, #12]
 8005eda:	e7cd      	b.n	8005e78 <__smakebuf_r+0x18>
 8005edc:	08005079 	.word	0x08005079

08005ee0 <__malloc_lock>:
 8005ee0:	4801      	ldr	r0, [pc, #4]	; (8005ee8 <__malloc_lock+0x8>)
 8005ee2:	f7ff b9ad 	b.w	8005240 <__retarget_lock_acquire_recursive>
 8005ee6:	bf00      	nop
 8005ee8:	20013328 	.word	0x20013328

08005eec <__malloc_unlock>:
 8005eec:	4801      	ldr	r0, [pc, #4]	; (8005ef4 <__malloc_unlock+0x8>)
 8005eee:	f7ff b9a8 	b.w	8005242 <__retarget_lock_release_recursive>
 8005ef2:	bf00      	nop
 8005ef4:	20013328 	.word	0x20013328

08005ef8 <_read_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4d07      	ldr	r5, [pc, #28]	; (8005f18 <_read_r+0x20>)
 8005efc:	4604      	mov	r4, r0
 8005efe:	4608      	mov	r0, r1
 8005f00:	4611      	mov	r1, r2
 8005f02:	2200      	movs	r2, #0
 8005f04:	602a      	str	r2, [r5, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	f7fb f8c4 	bl	8001094 <_read>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <_read_r+0x1e>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	b103      	cbz	r3, 8005f16 <_read_r+0x1e>
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	20013334 	.word	0x20013334

08005f1c <_raise_r>:
 8005f1c:	291f      	cmp	r1, #31
 8005f1e:	b538      	push	{r3, r4, r5, lr}
 8005f20:	4604      	mov	r4, r0
 8005f22:	460d      	mov	r5, r1
 8005f24:	d904      	bls.n	8005f30 <_raise_r+0x14>
 8005f26:	2316      	movs	r3, #22
 8005f28:	6003      	str	r3, [r0, #0]
 8005f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005f32:	b112      	cbz	r2, 8005f3a <_raise_r+0x1e>
 8005f34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f38:	b94b      	cbnz	r3, 8005f4e <_raise_r+0x32>
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f000 f830 	bl	8005fa0 <_getpid_r>
 8005f40:	462a      	mov	r2, r5
 8005f42:	4601      	mov	r1, r0
 8005f44:	4620      	mov	r0, r4
 8005f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f4a:	f000 b817 	b.w	8005f7c <_kill_r>
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d00a      	beq.n	8005f68 <_raise_r+0x4c>
 8005f52:	1c59      	adds	r1, r3, #1
 8005f54:	d103      	bne.n	8005f5e <_raise_r+0x42>
 8005f56:	2316      	movs	r3, #22
 8005f58:	6003      	str	r3, [r0, #0]
 8005f5a:	2001      	movs	r0, #1
 8005f5c:	e7e7      	b.n	8005f2e <_raise_r+0x12>
 8005f5e:	2400      	movs	r4, #0
 8005f60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f64:	4628      	mov	r0, r5
 8005f66:	4798      	blx	r3
 8005f68:	2000      	movs	r0, #0
 8005f6a:	e7e0      	b.n	8005f2e <_raise_r+0x12>

08005f6c <raise>:
 8005f6c:	4b02      	ldr	r3, [pc, #8]	; (8005f78 <raise+0xc>)
 8005f6e:	4601      	mov	r1, r0
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	f7ff bfd3 	b.w	8005f1c <_raise_r>
 8005f76:	bf00      	nop
 8005f78:	2000000c 	.word	0x2000000c

08005f7c <_kill_r>:
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	4d07      	ldr	r5, [pc, #28]	; (8005f9c <_kill_r+0x20>)
 8005f80:	2300      	movs	r3, #0
 8005f82:	4604      	mov	r4, r0
 8005f84:	4608      	mov	r0, r1
 8005f86:	4611      	mov	r1, r2
 8005f88:	602b      	str	r3, [r5, #0]
 8005f8a:	f7fb f869 	bl	8001060 <_kill>
 8005f8e:	1c43      	adds	r3, r0, #1
 8005f90:	d102      	bne.n	8005f98 <_kill_r+0x1c>
 8005f92:	682b      	ldr	r3, [r5, #0]
 8005f94:	b103      	cbz	r3, 8005f98 <_kill_r+0x1c>
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	bd38      	pop	{r3, r4, r5, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20013334 	.word	0x20013334

08005fa0 <_getpid_r>:
 8005fa0:	f7fb b856 	b.w	8001050 <_getpid>

08005fa4 <_fstat_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d07      	ldr	r5, [pc, #28]	; (8005fc4 <_fstat_r+0x20>)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	4611      	mov	r1, r2
 8005fb0:	602b      	str	r3, [r5, #0]
 8005fb2:	f7fb f8b4 	bl	800111e <_fstat>
 8005fb6:	1c43      	adds	r3, r0, #1
 8005fb8:	d102      	bne.n	8005fc0 <_fstat_r+0x1c>
 8005fba:	682b      	ldr	r3, [r5, #0]
 8005fbc:	b103      	cbz	r3, 8005fc0 <_fstat_r+0x1c>
 8005fbe:	6023      	str	r3, [r4, #0]
 8005fc0:	bd38      	pop	{r3, r4, r5, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20013334 	.word	0x20013334

08005fc8 <_isatty_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4d06      	ldr	r5, [pc, #24]	; (8005fe4 <_isatty_r+0x1c>)
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4604      	mov	r4, r0
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	602b      	str	r3, [r5, #0]
 8005fd4:	f7fb f8b3 	bl	800113e <_isatty>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_isatty_r+0x1a>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_isatty_r+0x1a>
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	20013334 	.word	0x20013334

08005fe8 <_init>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	bf00      	nop
 8005fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fee:	bc08      	pop	{r3}
 8005ff0:	469e      	mov	lr, r3
 8005ff2:	4770      	bx	lr

08005ff4 <_fini>:
 8005ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff6:	bf00      	nop
 8005ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffa:	bc08      	pop	{r3}
 8005ffc:	469e      	mov	lr, r3
 8005ffe:	4770      	bx	lr
>>>>>>> Stashed changes
