
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054cc  080054cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080054cc  080054cc  000154cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054d4  080054d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054d4  080054d4  000154d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054d8  080054d8  000154d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080054dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000132d8  20000070  0800554c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013348  0800554c  00023348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d436  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d0  00000000  00000000  0002d4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0002faa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  000307e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000236bc  00000000  00000000  000313d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff7c  00000000  00000000  00054a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb4f2  00000000  00000000  00064a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012fefa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c4c  00000000  00000000  0012ff4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005358 	.word	0x08005358

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005358 	.word	0x08005358

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b974 	b.w	80004dc <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	468e      	mov	lr, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d14d      	bne.n	80002b6 <__udivmoddi4+0xaa>
 800021a:	428a      	cmp	r2, r1
 800021c:	4694      	mov	ip, r2
 800021e:	d969      	bls.n	80002f4 <__udivmoddi4+0xe8>
 8000220:	fab2 f282 	clz	r2, r2
 8000224:	b152      	cbz	r2, 800023c <__udivmoddi4+0x30>
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	f1c2 0120 	rsb	r1, r2, #32
 800022e:	fa20 f101 	lsr.w	r1, r0, r1
 8000232:	fa0c fc02 	lsl.w	ip, ip, r2
 8000236:	ea41 0e03 	orr.w	lr, r1, r3
 800023a:	4094      	lsls	r4, r2
 800023c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000240:	0c21      	lsrs	r1, r4, #16
 8000242:	fbbe f6f8 	udiv	r6, lr, r8
 8000246:	fa1f f78c 	uxth.w	r7, ip
 800024a:	fb08 e316 	mls	r3, r8, r6, lr
 800024e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000252:	fb06 f107 	mul.w	r1, r6, r7
 8000256:	4299      	cmp	r1, r3
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x64>
 800025a:	eb1c 0303 	adds.w	r3, ip, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 811f 	bcs.w	80004a4 <__udivmoddi4+0x298>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 811c 	bls.w	80004a4 <__udivmoddi4+0x298>
 800026c:	3e02      	subs	r6, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 f707 	mul.w	r7, r0, r7
 8000284:	42a7      	cmp	r7, r4
 8000286:	d90a      	bls.n	800029e <__udivmoddi4+0x92>
 8000288:	eb1c 0404 	adds.w	r4, ip, r4
 800028c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000290:	f080 810a 	bcs.w	80004a8 <__udivmoddi4+0x29c>
 8000294:	42a7      	cmp	r7, r4
 8000296:	f240 8107 	bls.w	80004a8 <__udivmoddi4+0x29c>
 800029a:	4464      	add	r4, ip
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a2:	1be4      	subs	r4, r4, r7
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa4>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xc2>
 80002ba:	2d00      	cmp	r5, #0
 80002bc:	f000 80ef 	beq.w	800049e <__udivmoddi4+0x292>
 80002c0:	2600      	movs	r6, #0
 80002c2:	e9c5 0100 	strd	r0, r1, [r5]
 80002c6:	4630      	mov	r0, r6
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f683 	clz	r6, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d14a      	bne.n	800036c <__udivmoddi4+0x160>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd4>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80f9 	bhi.w	80004d2 <__udivmoddi4+0x2c6>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	469e      	mov	lr, r3
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa4>
 80002ee:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa4>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xec>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 8092 	bne.w	8000426 <__udivmoddi4+0x21a>
 8000302:	eba1 010c 	sub.w	r1, r1, ip
 8000306:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030a:	fa1f fe8c 	uxth.w	lr, ip
 800030e:	2601      	movs	r6, #1
 8000310:	0c20      	lsrs	r0, r4, #16
 8000312:	fbb1 f3f7 	udiv	r3, r1, r7
 8000316:	fb07 1113 	mls	r1, r7, r3, r1
 800031a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031e:	fb0e f003 	mul.w	r0, lr, r3
 8000322:	4288      	cmp	r0, r1
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x12c>
 8000326:	eb1c 0101 	adds.w	r1, ip, r1
 800032a:	f103 38ff 	add.w	r8, r3, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x12a>
 8000330:	4288      	cmp	r0, r1
 8000332:	f200 80cb 	bhi.w	80004cc <__udivmoddi4+0x2c0>
 8000336:	4643      	mov	r3, r8
 8000338:	1a09      	subs	r1, r1, r0
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000340:	fb07 1110 	mls	r1, r7, r0, r1
 8000344:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000348:	fb0e fe00 	mul.w	lr, lr, r0
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x156>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 31ff 	add.w	r1, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x154>
 800035a:	45a6      	cmp	lr, r4
 800035c:	f200 80bb 	bhi.w	80004d6 <__udivmoddi4+0x2ca>
 8000360:	4608      	mov	r0, r1
 8000362:	eba4 040e 	sub.w	r4, r4, lr
 8000366:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036a:	e79c      	b.n	80002a6 <__udivmoddi4+0x9a>
 800036c:	f1c6 0720 	rsb	r7, r6, #32
 8000370:	40b3      	lsls	r3, r6
 8000372:	fa22 fc07 	lsr.w	ip, r2, r7
 8000376:	ea4c 0c03 	orr.w	ip, ip, r3
 800037a:	fa20 f407 	lsr.w	r4, r0, r7
 800037e:	fa01 f306 	lsl.w	r3, r1, r6
 8000382:	431c      	orrs	r4, r3
 8000384:	40f9      	lsrs	r1, r7
 8000386:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038a:	fa00 f306 	lsl.w	r3, r0, r6
 800038e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000392:	0c20      	lsrs	r0, r4, #16
 8000394:	fa1f fe8c 	uxth.w	lr, ip
 8000398:	fb09 1118 	mls	r1, r9, r8, r1
 800039c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a0:	fb08 f00e 	mul.w	r0, r8, lr
 80003a4:	4288      	cmp	r0, r1
 80003a6:	fa02 f206 	lsl.w	r2, r2, r6
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b8>
 80003ac:	eb1c 0101 	adds.w	r1, ip, r1
 80003b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b4:	f080 8088 	bcs.w	80004c8 <__udivmoddi4+0x2bc>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f240 8085 	bls.w	80004c8 <__udivmoddi4+0x2bc>
 80003be:	f1a8 0802 	sub.w	r8, r8, #2
 80003c2:	4461      	add	r1, ip
 80003c4:	1a09      	subs	r1, r1, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003cc:	fb09 1110 	mls	r1, r9, r0, r1
 80003d0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d8:	458e      	cmp	lr, r1
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1e2>
 80003dc:	eb1c 0101 	adds.w	r1, ip, r1
 80003e0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e4:	d26c      	bcs.n	80004c0 <__udivmoddi4+0x2b4>
 80003e6:	458e      	cmp	lr, r1
 80003e8:	d96a      	bls.n	80004c0 <__udivmoddi4+0x2b4>
 80003ea:	3802      	subs	r0, #2
 80003ec:	4461      	add	r1, ip
 80003ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f2:	fba0 9402 	umull	r9, r4, r0, r2
 80003f6:	eba1 010e 	sub.w	r1, r1, lr
 80003fa:	42a1      	cmp	r1, r4
 80003fc:	46c8      	mov	r8, r9
 80003fe:	46a6      	mov	lr, r4
 8000400:	d356      	bcc.n	80004b0 <__udivmoddi4+0x2a4>
 8000402:	d053      	beq.n	80004ac <__udivmoddi4+0x2a0>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x212>
 8000406:	ebb3 0208 	subs.w	r2, r3, r8
 800040a:	eb61 010e 	sbc.w	r1, r1, lr
 800040e:	fa01 f707 	lsl.w	r7, r1, r7
 8000412:	fa22 f306 	lsr.w	r3, r2, r6
 8000416:	40f1      	lsrs	r1, r6
 8000418:	431f      	orrs	r7, r3
 800041a:	e9c5 7100 	strd	r7, r1, [r5]
 800041e:	2600      	movs	r6, #0
 8000420:	4631      	mov	r1, r6
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	f1c2 0320 	rsb	r3, r2, #32
 800042a:	40d8      	lsrs	r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa21 f303 	lsr.w	r3, r1, r3
 8000434:	4091      	lsls	r1, r2
 8000436:	4301      	orrs	r1, r0
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fbb3 f0f7 	udiv	r0, r3, r7
 8000444:	fb07 3610 	mls	r6, r7, r0, r3
 8000448:	0c0b      	lsrs	r3, r1, #16
 800044a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044e:	fb00 f60e 	mul.w	r6, r0, lr
 8000452:	429e      	cmp	r6, r3
 8000454:	fa04 f402 	lsl.w	r4, r4, r2
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x260>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000462:	d22f      	bcs.n	80004c4 <__udivmoddi4+0x2b8>
 8000464:	429e      	cmp	r6, r3
 8000466:	d92d      	bls.n	80004c4 <__udivmoddi4+0x2b8>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1b9b      	subs	r3, r3, r6
 800046e:	b289      	uxth	r1, r1
 8000470:	fbb3 f6f7 	udiv	r6, r3, r7
 8000474:	fb07 3316 	mls	r3, r7, r6, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb06 f30e 	mul.w	r3, r6, lr
 8000480:	428b      	cmp	r3, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x28a>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f106 38ff 	add.w	r8, r6, #4294967295
 800048c:	d216      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800048e:	428b      	cmp	r3, r1
 8000490:	d914      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000492:	3e02      	subs	r6, #2
 8000494:	4461      	add	r1, ip
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800049c:	e738      	b.n	8000310 <__udivmoddi4+0x104>
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e705      	b.n	80002b0 <__udivmoddi4+0xa4>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e3      	b.n	8000270 <__udivmoddi4+0x64>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6f8      	b.n	800029e <__udivmoddi4+0x92>
 80004ac:	454b      	cmp	r3, r9
 80004ae:	d2a9      	bcs.n	8000404 <__udivmoddi4+0x1f8>
 80004b0:	ebb9 0802 	subs.w	r8, r9, r2
 80004b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7a3      	b.n	8000404 <__udivmoddi4+0x1f8>
 80004bc:	4646      	mov	r6, r8
 80004be:	e7ea      	b.n	8000496 <__udivmoddi4+0x28a>
 80004c0:	4620      	mov	r0, r4
 80004c2:	e794      	b.n	80003ee <__udivmoddi4+0x1e2>
 80004c4:	4640      	mov	r0, r8
 80004c6:	e7d1      	b.n	800046c <__udivmoddi4+0x260>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e77b      	b.n	80003c4 <__udivmoddi4+0x1b8>
 80004cc:	3b02      	subs	r3, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	e732      	b.n	8000338 <__udivmoddi4+0x12c>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e709      	b.n	80002ea <__udivmoddi4+0xde>
 80004d6:	4464      	add	r4, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e742      	b.n	8000362 <__udivmoddi4+0x156>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <API_Getcommand>:




void API_Getcommand(UI_t commando)
{
 80004e0:	b084      	sub	sp, #16
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	f107 0c10 	add.w	ip, r7, #16
 80004ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//for(i = 0; i < LINE_BUFLEN; i++)
		 // input.line_rx_buffer[i] = 0;

	// Reset some stuff
	input.byte_buffer_rx[0] = 0;
 80004f0:	4b34      	ldr	r3, [pc, #208]	; (80005c4 <API_Getcommand+0xe4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
	input.char_counter = 0;
 80004f6:	4b33      	ldr	r3, [pc, #204]	; (80005c4 <API_Getcommand+0xe4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	input.command_execute_flag = FALSE;
 80004fe:	4b31      	ldr	r3, [pc, #196]	; (80005c4 <API_Getcommand+0xe4>)
 8000500:	2200      	movs	r2, #0
 8000502:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	// HAl wants a memory location to store the charachter it receives from the UART
	// We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
	// See stm32f4xx_it.c
	//HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);

	strcpy(commando.type, input.line_rx_buffer);
 8000506:	4930      	ldr	r1, [pc, #192]	; (80005c8 <API_Getcommand+0xe8>)
 8000508:	f107 0010 	add.w	r0, r7, #16
 800050c:	f004 fa94 	bl	8004a38 <strcpy>


	if( strcmp(commando.type, "lijn") == 0 )
 8000510:	492e      	ldr	r1, [pc, #184]	; (80005cc <API_Getcommand+0xec>)
 8000512:	f107 0010 	add.w	r0, r7, #16
 8000516:	f7ff fe57 	bl	80001c8 <strcmp>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d106      	bne.n	800052e <API_Getcommand+0x4e>
			 {
				 printf("voer in de data met een comma daartussen\n\n");
 8000520:	482b      	ldr	r0, [pc, #172]	; (80005d0 <API_Getcommand+0xf0>)
 8000522:	f004 fa81 	bl	8004a28 <puts>
					printf(" x, y, x’, y’, kleur, dikte\n");
 8000526:	482b      	ldr	r0, [pc, #172]	; (80005d4 <API_Getcommand+0xf4>)
 8000528:	f004 fa7e 	bl	8004a28 <puts>
 800052c:	e032      	b.n	8000594 <API_Getcommand+0xb4>
				// printf("het is lijn\n");
			 }

			 else if( strcmp(commando.type, "rechthoek") == 0 )
 800052e:	492a      	ldr	r1, [pc, #168]	; (80005d8 <API_Getcommand+0xf8>)
 8000530:	f107 0010 	add.w	r0, r7, #16
 8000534:	f7ff fe48 	bl	80001c8 <strcmp>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d103      	bne.n	8000546 <API_Getcommand+0x66>
			 {
				 printf("het is rechthoek\n");
 800053e:	4827      	ldr	r0, [pc, #156]	; (80005dc <API_Getcommand+0xfc>)
 8000540:	f004 fa72 	bl	8004a28 <puts>
 8000544:	e026      	b.n	8000594 <API_Getcommand+0xb4>
			 }

			 else if( strcmp(commando.type, "tekst") == 0 )
 8000546:	4926      	ldr	r1, [pc, #152]	; (80005e0 <API_Getcommand+0x100>)
 8000548:	f107 0010 	add.w	r0, r7, #16
 800054c:	f7ff fe3c 	bl	80001c8 <strcmp>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d103      	bne.n	800055e <API_Getcommand+0x7e>
			 {
				  printf("het is tekst\n");
 8000556:	4823      	ldr	r0, [pc, #140]	; (80005e4 <API_Getcommand+0x104>)
 8000558:	f004 fa66 	bl	8004a28 <puts>
 800055c:	e01a      	b.n	8000594 <API_Getcommand+0xb4>
			 }

			 else if( strcmp(commando.type, "bitmap") == 0 )
 800055e:	4922      	ldr	r1, [pc, #136]	; (80005e8 <API_Getcommand+0x108>)
 8000560:	f107 0010 	add.w	r0, r7, #16
 8000564:	f7ff fe30 	bl	80001c8 <strcmp>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d103      	bne.n	8000576 <API_Getcommand+0x96>
			 {
				  printf("het is bitmap\n");
 800056e:	481f      	ldr	r0, [pc, #124]	; (80005ec <API_Getcommand+0x10c>)
 8000570:	f004 fa5a 	bl	8004a28 <puts>
 8000574:	e00e      	b.n	8000594 <API_Getcommand+0xb4>
			 }

			 else if( strcmp(commando.type, "clearscreen") == 0 )
 8000576:	491e      	ldr	r1, [pc, #120]	; (80005f0 <API_Getcommand+0x110>)
 8000578:	f107 0010 	add.w	r0, r7, #16
 800057c:	f7ff fe24 	bl	80001c8 <strcmp>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d103      	bne.n	800058e <API_Getcommand+0xae>
			 {
				  printf("het is clearscreen\n");
 8000586:	481b      	ldr	r0, [pc, #108]	; (80005f4 <API_Getcommand+0x114>)
 8000588:	f004 fa4e 	bl	8004a28 <puts>
 800058c:	e002      	b.n	8000594 <API_Getcommand+0xb4>
			 }

			 else
			 {
				 printf("Ongeldig commando\n");
 800058e:	481a      	ldr	r0, [pc, #104]	; (80005f8 <API_Getcommand+0x118>)
 8000590:	f004 fa4a 	bl	8004a28 <puts>
			 }

			 for(i = 0; i < LINE_BUFLEN; i++) input.line_rx_buffer[i] = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	e008      	b.n	80005ac <API_Getcommand+0xcc>
 800059a:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <API_Getcommand+0xe4>)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	3301      	adds	r3, #1
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3301      	adds	r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005b2:	dbf2      	blt.n	800059a <API_Getcommand+0xba>

}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005c0:	b004      	add	sp, #16
 80005c2:	4770      	bx	lr
 80005c4:	20000104 	.word	0x20000104
 80005c8:	20000105 	.word	0x20000105
 80005cc:	08005370 	.word	0x08005370
 80005d0:	08005378 	.word	0x08005378
 80005d4:	080053a4 	.word	0x080053a4
 80005d8:	080053c4 	.word	0x080053c4
 80005dc:	080053d0 	.word	0x080053d0
 80005e0:	080053e4 	.word	0x080053e4
 80005e4:	080053ec 	.word	0x080053ec
 80005e8:	080053fc 	.word	0x080053fc
 80005ec:	08005404 	.word	0x08005404
 80005f0:	08005414 	.word	0x08005414
 80005f4:	08005420 	.word	0x08005420
 80005f8:	08005434 	.word	0x08005434

080005fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_DMA_Init+0x3c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a0b      	ldr	r2, [pc, #44]	; (8000638 <MX_DMA_Init+0x3c>)
 800060c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_DMA_Init+0x3c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	2044      	movs	r0, #68	; 0x44
 8000624:	f000 ff11 	bl	800144a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000628:	2044      	movs	r0, #68	; 0x44
 800062a:	f000 ff2a 	bl	8001482 <HAL_NVIC_EnableIRQ>

}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800

0800063c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	4b32      	ldr	r3, [pc, #200]	; (8000720 <MX_GPIO_Init+0xe4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a31      	ldr	r2, [pc, #196]	; (8000720 <MX_GPIO_Init+0xe4>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <MX_GPIO_Init+0xe4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <MX_GPIO_Init+0xe4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <MX_GPIO_Init+0xe4>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b28      	ldr	r3, [pc, #160]	; (8000720 <MX_GPIO_Init+0xe4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <MX_GPIO_Init+0xe4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a23      	ldr	r2, [pc, #140]	; (8000720 <MX_GPIO_Init+0xe4>)
 8000694:	f043 0310 	orr.w	r3, r3, #16
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <MX_GPIO_Init+0xe4>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0310 	and.w	r3, r3, #16
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_GPIO_Init+0xe4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <MX_GPIO_Init+0xe4>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_GPIO_Init+0xe4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80006c8:	4816      	ldr	r0, [pc, #88]	; (8000724 <MX_GPIO_Init+0xe8>)
 80006ca:	f001 fc23 	bl	8001f14 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d4:	4814      	ldr	r0, [pc, #80]	; (8000728 <MX_GPIO_Init+0xec>)
 80006d6:	f001 fc1d 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80006da:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80006de:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e8:	2303      	movs	r3, #3
 80006ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <MX_GPIO_Init+0xe8>)
 80006f4:	f001 fa72 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000706:	2303      	movs	r3, #3
 8000708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_GPIO_Init+0xec>)
 8000712:	f001 fa63 	bl	8001bdc <HAL_GPIO_Init>

}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	; 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40021000 	.word	0x40021000
 8000728:	40020400 	.word	0x40020400

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b09b      	sub	sp, #108	; 0x6c
 8000730:	af1a      	add	r7, sp, #104	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fd3d 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f841 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073a:	f7ff ff7f 	bl	800063c <MX_GPIO_Init>
  MX_DMA_Init();
 800073e:	f7ff ff5d 	bl	80005fc <MX_DMA_Init>
  MX_TIM1_Init();
 8000742:	f000 fa8b 	bl	8000c5c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000746:	f000 fad9 	bl	8000cfc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800074a:	f000 fbef 	bl	8000f2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 800074e:	f000 fc91 	bl	8001074 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 8000752:	2000      	movs	r0, #0
 8000754:	f000 fce0 	bl	8001118 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 8000758:	220a      	movs	r2, #10
 800075a:	210a      	movs	r1, #10
 800075c:	200a      	movs	r0, #10
 800075e:	f000 fcff 	bl	8001160 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2000      	movs	r0, #0
 8000768:	f000 fcfa 	bl	8001160 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 800076c:	2200      	movs	r2, #0
 800076e:	2100      	movs	r1, #0
 8000770:	f240 103f 	movw	r0, #319	; 0x13f
 8000774:	f000 fcf4 	bl	8001160 <UB_VGA_SetPixel>

  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000778:	2201      	movs	r2, #1
 800077a:	490d      	ldr	r1, [pc, #52]	; (80007b0 <main+0x84>)
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <main+0x88>)
 800077e:	f003 f8f7 	bl	8003970 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 if(input.command_execute_flag == TRUE)
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <main+0x84>)
 8000784:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000788:	2bff      	cmp	r3, #255	; 0xff
 800078a:	d1fa      	bne.n	8000782 <main+0x56>
	  {
		 API_Getcommand(commandos);
 800078c:	4c0a      	ldr	r4, [pc, #40]	; (80007b8 <main+0x8c>)
 800078e:	4668      	mov	r0, sp
 8000790:	f104 0310 	add.w	r3, r4, #16
 8000794:	2268      	movs	r2, #104	; 0x68
 8000796:	4619      	mov	r1, r3
 8000798:	f004 f8c2 	bl	8004920 <memcpy>
 800079c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007a0:	f7ff fe9e 	bl	80004e0 <API_Getcommand>
	  // When finished reset the flag
	     input.command_execute_flag = FALSE;
 80007a4:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <main+0x84>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	 if(input.command_execute_flag == TRUE)
 80007ac:	e7e9      	b.n	8000782 <main+0x56>
 80007ae:	bf00      	nop
 80007b0:	20000104 	.word	0x20000104
 80007b4:	200005f8 	.word	0x200005f8
 80007b8:	2000008c 	.word	0x2000008c

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b094      	sub	sp, #80	; 0x50
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	2230      	movs	r2, #48	; 0x30
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 f8b6 	bl	800493c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	4b28      	ldr	r3, [pc, #160]	; (8000888 <SystemClock_Config+0xcc>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	4a27      	ldr	r2, [pc, #156]	; (8000888 <SystemClock_Config+0xcc>)
 80007ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ee:	6413      	str	r3, [r2, #64]	; 0x40
 80007f0:	4b25      	ldr	r3, [pc, #148]	; (8000888 <SystemClock_Config+0xcc>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <SystemClock_Config+0xd0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a21      	ldr	r2, [pc, #132]	; (800088c <SystemClock_Config+0xd0>)
 8000806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <SystemClock_Config+0xd0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000818:	2301      	movs	r3, #1
 800081a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000822:	2302      	movs	r3, #2
 8000824:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000826:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800082c:	2304      	movs	r3, #4
 800082e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000830:	23a8      	movs	r3, #168	; 0xa8
 8000832:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000834:	2302      	movs	r3, #2
 8000836:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000838:	2304      	movs	r3, #4
 800083a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0320 	add.w	r3, r7, #32
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fb81 	bl	8001f48 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800084c:	f000 f832 	bl	80008b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2302      	movs	r3, #2
 8000856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800085c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000860:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000866:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2105      	movs	r1, #5
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fdd8 	bl	8002424 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800087a:	f000 f81b 	bl	80008b4 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3750      	adds	r7, #80	; 0x50
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40007000 	.word	0x40007000

08000890 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000898:	1d39      	adds	r1, r7, #4
 800089a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800089e:	2201      	movs	r2, #1
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <__io_putchar+0x20>)
 80008a2:	f002 ffcc 	bl	800383e <HAL_UART_Transmit>
	return ch;												//Return the character
 80008a6:	687b      	ldr	r3, [r7, #4]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200005f8 	.word	0x200005f8

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <HAL_MspInit+0x4c>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_MspInit+0x4c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 fc74 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000974:	4828      	ldr	r0, [pc, #160]	; (8000a18 <TIM2_IRQHandler+0xa8>)
 8000976:	f002 f8b1 	bl	8002adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 800097a:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <TIM2_IRQHandler+0xa8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f06f 0208 	mvn.w	r2, #8
 8000982:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000984:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <TIM2_IRQHandler+0xac>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	b29a      	uxth	r2, r3
 800098c:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <TIM2_IRQHandler+0xac>)
 800098e:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <TIM2_IRQHandler+0xac>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000998:	d905      	bls.n	80009a6 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <TIM2_IRQHandler+0xac>)
 800099c:	2200      	movs	r2, #0
 800099e:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 80009a0:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <TIM2_IRQHandler+0xb0>)
 80009a2:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <TIM2_IRQHandler+0xac>)
 80009a4:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <TIM2_IRQHandler+0xac>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d802      	bhi.n	80009b4 <TIM2_IRQHandler+0x44>
 80009ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009b2:	e001      	b.n	80009b8 <TIM2_IRQHandler+0x48>
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <TIM2_IRQHandler+0xb4>)
 80009ba:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <TIM2_IRQHandler+0xac>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	2b23      	cmp	r3, #35	; 0x23
 80009c2:	d927      	bls.n	8000a14 <TIM2_IRQHandler+0xa4>
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <TIM2_IRQHandler+0xac>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	f240 2202 	movw	r2, #514	; 0x202
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d821      	bhi.n	8000a14 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 80009d0:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <TIM2_IRQHandler+0xb8>)
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <TIM2_IRQHandler+0xac>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80009d8:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <TIM2_IRQHandler+0xb8>)
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <TIM2_IRQHandler+0xac>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <TIM2_IRQHandler+0xbc>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <TIM2_IRQHandler+0xbc>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 80009ec:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <TIM2_IRQHandler+0xc0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <TIM2_IRQHandler+0xc0>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f042 0201 	orr.w	r2, r2, #1
 80009fa:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <TIM2_IRQHandler+0xac>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d005      	beq.n	8000a14 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <TIM2_IRQHandler+0xac>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000a10:	4a02      	ldr	r2, [pc, #8]	; (8000a1c <TIM2_IRQHandler+0xac>)
 8000a12:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000558 	.word	0x20000558
 8000a1c:	20013328 	.word	0x20013328
 8000a20:	20000638 	.word	0x20000638
 8000a24:	40020400 	.word	0x40020400
 8000a28:	40026488 	.word	0x40026488
 8000a2c:	40010000 	.word	0x40010000
 8000a30:	20000598 	.word	0x20000598

08000a34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <USART2_IRQHandler+0x68>)
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	71fb      	strb	r3, [r7, #7]
//	if(uart_char != LINE_FEED)
//	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b0d      	cmp	r3, #13
 8000a44:	d002      	beq.n	8000a4c <USART2_IRQHandler+0x18>
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b2e      	cmp	r3, #46	; 0x2e
 8000a4a:	d10e      	bne.n	8000a6a <USART2_IRQHandler+0x36>
		{
			input.command_execute_flag = TRUE;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <USART2_IRQHandler+0x6c>)
 8000a4e:	22ff      	movs	r2, #255	; 0xff
 8000a50:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <USART2_IRQHandler+0x6c>)
 8000a56:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <USART2_IRQHandler+0x6c>)
 8000a5c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <USART2_IRQHandler+0x6c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000a68:	e011      	b.n	8000a8e <USART2_IRQHandler+0x5a>

		}
		else
		{
			input.command_execute_flag = FALSE;
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <USART2_IRQHandler+0x6c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <USART2_IRQHandler+0x6c>)
 8000a74:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a78:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <USART2_IRQHandler+0x6c>)
 8000a7a:	4413      	add	r3, r2
 8000a7c:	79fa      	ldrb	r2, [r7, #7]
 8000a7e:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <USART2_IRQHandler+0x6c>)
 8000a82:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a86:	3301      	adds	r3, #1
 8000a88:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <USART2_IRQHandler+0x6c>)
 8000a8a:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <USART2_IRQHandler+0x70>)
 8000a90:	f002 ffc4 	bl	8003a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */

}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40004400 	.word	0x40004400
 8000aa0:	20000104 	.word	0x20000104
 8000aa4:	200005f8 	.word	0x200005f8

08000aa8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <DMA2_Stream5_IRQHandler+0x48>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	6a1a      	ldr	r2, [r3, #32]
 8000ab2:	f241 1311 	movw	r3, #4369	; 0x1111
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d10f      	bne.n	8000adc <DMA2_Stream5_IRQHandler+0x34>
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <DMA2_Stream5_IRQHandler+0x48>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	6a1a      	ldr	r2, [r3, #32]
 8000ac2:	f240 4344 	movw	r3, #1092	; 0x444
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d107      	bne.n	8000adc <DMA2_Stream5_IRQHandler+0x34>
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <DMA2_Stream5_IRQHandler+0x48>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <DMA2_Stream5_IRQHandler+0x48>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f022 0201 	bic.w	r2, r2, #1
 8000ada:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <DMA2_Stream5_IRQHandler+0x4c>)
 8000ade:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000ae2:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <DMA2_Stream5_IRQHandler+0x50>)
 8000ae6:	f000 fe0f 	bl	8001708 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000518 	.word	0x20000518
 8000af4:	40021000 	.word	0x40021000
 8000af8:	20000598 	.word	0x20000598

08000afc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e00a      	b.n	8000b24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b0e:	f3af 8000 	nop.w
 8000b12:	4601      	mov	r1, r0
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	b2ca      	uxtb	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf0      	blt.n	8000b0e <_read+0x12>
	}

return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	e009      	b.n	8000b5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	60ba      	str	r2, [r7, #8]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fe9d 	bl	8000890 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf1      	blt.n	8000b48 <_write+0x12>
	}
	return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_close>:

int _close(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b96:	605a      	str	r2, [r3, #4]
	return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_isatty>:

int _isatty(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
	return 1;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x50>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x16>
		heap_end = &end;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <_sbrk+0x50>)
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <_sbrk+0x54>)
 8000bec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <_sbrk+0x50>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <_sbrk+0x50>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	466a      	mov	r2, sp
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d907      	bls.n	8000c12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c02:	f003 fe63 	bl	80048cc <__errno>
 8000c06:	4603      	mov	r3, r0
 8000c08:	220c      	movs	r2, #12
 8000c0a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	e006      	b.n	8000c20 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <_sbrk+0x50>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a03      	ldr	r2, [pc, #12]	; (8000c28 <_sbrk+0x50>)
 8000c1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000514 	.word	0x20000514
 8000c2c:	20013348 	.word	0x20013348

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <SystemInit+0x28>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <SystemInit+0x28>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SystemInit+0x28>)
 8000c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <MX_TIM1_Init+0x98>)
 8000c7a:	4a1f      	ldr	r2, [pc, #124]	; (8000cf8 <MX_TIM1_Init+0x9c>)
 8000c7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_TIM1_Init+0x98>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <MX_TIM1_Init+0x98>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_TIM1_Init+0x98>)
 8000c8c:	220b      	movs	r2, #11
 8000c8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_TIM1_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_TIM1_Init+0x98>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_TIM1_Init+0x98>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ca2:	4814      	ldr	r0, [pc, #80]	; (8000cf4 <MX_TIM1_Init+0x98>)
 8000ca4:	f001 fdde 	bl	8002864 <HAL_TIM_Base_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000cae:	f7ff fe01 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <MX_TIM1_Init+0x98>)
 8000cc0:	f002 f8da 	bl	8002e78 <HAL_TIM_ConfigClockSource>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000cca:	f7ff fdf3 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <MX_TIM1_Init+0x98>)
 8000cdc:	f002 fcd2 	bl	8003684 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000ce6:	f7ff fde5 	bl	80008b4 <Error_Handler>
  }

}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000518 	.word	0x20000518
 8000cf8:	40010000 	.word	0x40010000

08000cfc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d02:	f107 0320 	add.w	r3, r7, #32
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
 8000d1a:	615a      	str	r2, [r3, #20]
 8000d1c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <MX_TIM2_Init+0xcc>)
 8000d20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000d26:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <MX_TIM2_Init+0xcc>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <MX_TIM2_Init+0xcc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_TIM2_Init+0xcc>)
 8000d34:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000d38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <MX_TIM2_Init+0xcc>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d40:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <MX_TIM2_Init+0xcc>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d46:	4820      	ldr	r0, [pc, #128]	; (8000dc8 <MX_TIM2_Init+0xcc>)
 8000d48:	f001 fddb 	bl	8002902 <HAL_TIM_PWM_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d52:	f7ff fdaf 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	4619      	mov	r1, r3
 8000d64:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <MX_TIM2_Init+0xcc>)
 8000d66:	f002 fc8d 	bl	8003684 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d70:	f7ff fda0 	bl	80008b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d74:	2360      	movs	r3, #96	; 0x60
 8000d76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000d78:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000d7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2208      	movs	r2, #8
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480e      	ldr	r0, [pc, #56]	; (8000dc8 <MX_TIM2_Init+0xcc>)
 8000d8e:	f001 ffad 	bl	8002cec <HAL_TIM_PWM_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000d98:	f7ff fd8c 	bl	80008b4 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000d9c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000da0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	220c      	movs	r2, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <MX_TIM2_Init+0xcc>)
 8000daa:	f001 ff9f 	bl	8002cec <HAL_TIM_PWM_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000db4:	f7ff fd7e 	bl	80008b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <MX_TIM2_Init+0xcc>)
 8000dba:	f000 f87f 	bl	8000ebc <HAL_TIM_MspPostInit>

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000558 	.word	0x20000558

08000dcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <HAL_TIM_Base_MspInit+0x94>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d13c      	bne.n	8000e58 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <HAL_TIM_Base_MspInit+0x98>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <HAL_TIM_Base_MspInit+0x98>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_TIM_Base_MspInit+0x98>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <HAL_TIM_Base_MspInit+0x9c>)
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <HAL_TIM_Base_MspInit+0xa0>)
 8000dfe:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_TIM_Base_MspInit+0x9c>)
 8000e02:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000e06:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_TIM_Base_MspInit+0x9c>)
 8000e0a:	2240      	movs	r2, #64	; 0x40
 8000e0c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_TIM_Base_MspInit+0x9c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_TIM_Base_MspInit+0x9c>)
 8000e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e1a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_TIM_Base_MspInit+0x9c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_TIM_Base_MspInit+0x9c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <HAL_TIM_Base_MspInit+0x9c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_TIM_Base_MspInit+0x9c>)
 8000e30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e34:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_TIM_Base_MspInit+0x9c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000e3c:	480a      	ldr	r0, [pc, #40]	; (8000e68 <HAL_TIM_Base_MspInit+0x9c>)
 8000e3e:	f000 fb3b 	bl	80014b8 <HAL_DMA_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000e48:	f7ff fd34 	bl	80008b4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <HAL_TIM_Base_MspInit+0x9c>)
 8000e50:	621a      	str	r2, [r3, #32]
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <HAL_TIM_Base_MspInit+0x9c>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40010000 	.word	0x40010000
 8000e64:	40023800 	.word	0x40023800
 8000e68:	20000598 	.word	0x20000598
 8000e6c:	40026488 	.word	0x40026488

08000e70 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e80:	d115      	bne.n	8000eae <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x48>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x48>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_TIM_PWM_MspInit+0x48>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	201c      	movs	r0, #28
 8000ea4:	f000 fad1 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ea8:	201c      	movs	r0, #28
 8000eaa:	f000 faea 	bl	8001482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800

08000ebc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000edc:	d11e      	bne.n	8000f1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_TIM_MspPostInit+0x68>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <HAL_TIM_MspPostInit+0x68>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_TIM_MspPostInit+0x68>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8000efa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000efe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	4619      	mov	r1, r3
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <HAL_TIM_MspPostInit+0x6c>)
 8000f18:	f000 fe60 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	3720      	adds	r7, #32
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020400 	.word	0x40020400

08000f2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <MX_USART2_UART_Init+0x50>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f64:	f002 fc1e 	bl	80037a4 <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f6e:	f7ff fca1 	bl	80008b4 <Error_Handler>
  }

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200005f8 	.word	0x200005f8
 8000f7c:	40004400 	.word	0x40004400

08000f80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a1d      	ldr	r2, [pc, #116]	; (8001014 <HAL_UART_MspInit+0x94>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d133      	bne.n	800100a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fda:	230c      	movs	r3, #12
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fea:	2307      	movs	r3, #7
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4809      	ldr	r0, [pc, #36]	; (800101c <HAL_UART_MspInit+0x9c>)
 8000ff6:	f000 fdf1 	bl	8001bdc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2026      	movs	r0, #38	; 0x26
 8001000:	f000 fa23 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001004:	2026      	movs	r0, #38	; 0x26
 8001006:	f000 fa3c 	bl	8001482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40004400 	.word	0x40004400
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000

08001020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001058 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001024:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001026:	e003      	b.n	8001030 <LoopCopyDataInit>

08001028 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800102a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800102c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800102e:	3104      	adds	r1, #4

08001030 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001034:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001036:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001038:	d3f6      	bcc.n	8001028 <CopyDataInit>
  ldr  r2, =_sbss
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800103c:	e002      	b.n	8001044 <LoopFillZerobss>

0800103e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800103e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001040:	f842 3b04 	str.w	r3, [r2], #4

08001044 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001046:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001048:	d3f9      	bcc.n	800103e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800104a:	f7ff fdf1 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104e:	f003 fc43 	bl	80048d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001052:	f7ff fb6b 	bl	800072c <main>
  bx  lr    
 8001056:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001058:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800105c:	080054dc 	.word	0x080054dc
  ldr  r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001064:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001068:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800106c:	20013348 	.word	0x20013348

08001070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC_IRQHandler>
	...

08001074 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <UB_VGA_Screen_Init+0x84>)
 800107a:	2200      	movs	r2, #0
 800107c:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <UB_VGA_Screen_Init+0x84>)
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <UB_VGA_Screen_Init+0x84>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <UB_VGA_Screen_Init+0x88>)
 800108c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001090:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8001092:	481b      	ldr	r0, [pc, #108]	; (8001100 <UB_VGA_Screen_Init+0x8c>)
 8001094:	f001 fc11 	bl	80028ba <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001098:	210c      	movs	r1, #12
 800109a:	4819      	ldr	r0, [pc, #100]	; (8001100 <UB_VGA_Screen_Init+0x8c>)
 800109c:	f001 fc5c 	bl	8002958 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80010a0:	2108      	movs	r1, #8
 80010a2:	4817      	ldr	r0, [pc, #92]	; (8001100 <UB_VGA_Screen_Init+0x8c>)
 80010a4:	f001 fc96 	bl	80029d4 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <UB_VGA_Screen_Init+0x90>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <UB_VGA_Screen_Init+0x90>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010b6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <UB_VGA_Screen_Init+0x90>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <UB_VGA_Screen_Init+0x90>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0201 	orr.w	r2, r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 80010c8:	490f      	ldr	r1, [pc, #60]	; (8001108 <UB_VGA_Screen_Init+0x94>)
 80010ca:	f240 1341 	movw	r3, #321	; 0x141
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <UB_VGA_Screen_Init+0x98>)
 80010d0:	480f      	ldr	r0, [pc, #60]	; (8001110 <UB_VGA_Screen_Init+0x9c>)
 80010d2:	f000 fa9f 	bl	8001614 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 80010d6:	480e      	ldr	r0, [pc, #56]	; (8001110 <UB_VGA_Screen_Init+0x9c>)
 80010d8:	f000 f9ee 	bl	80014b8 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <UB_VGA_Screen_Init+0x9c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <UB_VGA_Screen_Init+0x9c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0210 	orr.w	r2, r2, #16
 80010ea:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <UB_VGA_Screen_Init+0xa0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a01      	ldr	r2, [pc, #4]	; (80010f8 <UB_VGA_Screen_Init+0x84>)
 80010f2:	6093      	str	r3, [r2, #8]
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20013328 	.word	0x20013328
 80010fc:	40020400 	.word	0x40020400
 8001100:	20000558 	.word	0x20000558
 8001104:	20000518 	.word	0x20000518
 8001108:	20000638 	.word	0x20000638
 800110c:	40021015 	.word	0x40021015
 8001110:	20000598 	.word	0x20000598
 8001114:	40026488 	.word	0x40026488

08001118 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001122:	2300      	movs	r3, #0
 8001124:	81bb      	strh	r3, [r7, #12]
 8001126:	e012      	b.n	800114e <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001128:	2300      	movs	r3, #0
 800112a:	81fb      	strh	r3, [r7, #14]
 800112c:	e008      	b.n	8001140 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 800112e:	79fa      	ldrb	r2, [r7, #7]
 8001130:	89b9      	ldrh	r1, [r7, #12]
 8001132:	89fb      	ldrh	r3, [r7, #14]
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f813 	bl	8001160 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	3301      	adds	r3, #1
 800113e:	81fb      	strh	r3, [r7, #14]
 8001140:	89fb      	ldrh	r3, [r7, #14]
 8001142:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001146:	d3f2      	bcc.n	800112e <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001148:	89bb      	ldrh	r3, [r7, #12]
 800114a:	3301      	adds	r3, #1
 800114c:	81bb      	strh	r3, [r7, #12]
 800114e:	89bb      	ldrh	r3, [r7, #12]
 8001150:	2bef      	cmp	r3, #239	; 0xef
 8001152:	d9e9      	bls.n	8001128 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	460b      	mov	r3, r1
 800116c:	80bb      	strh	r3, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001178:	d301      	bcc.n	800117e <UB_VGA_SetPixel+0x1e>
    xp = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 800117e:	88bb      	ldrh	r3, [r7, #4]
 8001180:	2bef      	cmp	r3, #239	; 0xef
 8001182:	d901      	bls.n	8001188 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001188:	88ba      	ldrh	r2, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	019b      	lsls	r3, r3, #6
 8001192:	441a      	add	r2, r3
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	4413      	add	r3, r2
 8001198:	4904      	ldr	r1, [pc, #16]	; (80011ac <UB_VGA_SetPixel+0x4c>)
 800119a:	78fa      	ldrb	r2, [r7, #3]
 800119c:	54ca      	strb	r2, [r1, r3]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000638 	.word	0x20000638

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <HAL_Init+0x40>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_Init+0x40>)
 80011c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_Init+0x40>)
 80011d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f92b 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f808 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff fb6e 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023c00 	.word	0x40023c00

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f943 	bl	800149e <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 f90b 	bl	800144a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000000 	.word	0x20000000
 800124c:	20000008 	.word	0x20000008
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008
 8001278:	20013334 	.word	0x20013334

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20013334 	.word	0x20013334

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4907      	ldr	r1, [pc, #28]	; (8001330 <__NVIC_EnableIRQ+0x38>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	; (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	; (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff8e 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff29 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff3e 	bl	80012dc <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff8e 	bl	8001388 <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5d 	bl	8001334 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff31 	bl	80012f8 <__NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffa2 	bl	80013f0 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff feda 	bl	800127c <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e099      	b.n	8001608 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2202      	movs	r2, #2
 80014e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014f4:	e00f      	b.n	8001516 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014f6:	f7ff fec1 	bl	800127c <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b05      	cmp	r3, #5
 8001502:	d908      	bls.n	8001516 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2220      	movs	r2, #32
 8001508:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2203      	movs	r2, #3
 800150e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e078      	b.n	8001608 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1e8      	bne.n	80014f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	4b38      	ldr	r3, [pc, #224]	; (8001610 <HAL_DMA_Init+0x158>)
 8001530:	4013      	ands	r3, r2
 8001532:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001542:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	4313      	orrs	r3, r2
 8001566:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	2b04      	cmp	r3, #4
 800156e:	d107      	bne.n	8001580 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	4313      	orrs	r3, r2
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	4313      	orrs	r3, r2
 800157e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f023 0307 	bic.w	r3, r3, #7
 8001596:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	4313      	orrs	r3, r2
 80015a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d117      	bne.n	80015da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00e      	beq.n	80015da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fa91 	bl	8001ae4 <DMA_CheckFifoParam>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015d6:	2301      	movs	r3, #1
 80015d8:	e016      	b.n	8001608 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 fa48 	bl	8001a78 <DMA_CalcBaseAndBitshift>
 80015e8:	4603      	mov	r3, r0
 80015ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f0:	223f      	movs	r2, #63	; 0x3f
 80015f2:	409a      	lsls	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	f010803f 	.word	0xf010803f

08001614 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_DMA_Start_IT+0x26>
 8001636:	2302      	movs	r3, #2
 8001638:	e040      	b.n	80016bc <HAL_DMA_Start_IT+0xa8>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b01      	cmp	r3, #1
 800164c:	d12f      	bne.n	80016ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2202      	movs	r2, #2
 8001652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 f9da 	bl	8001a1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166c:	223f      	movs	r2, #63	; 0x3f
 800166e:	409a      	lsls	r2, r3
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0216 	orr.w	r2, r2, #22
 8001682:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	2b00      	cmp	r3, #0
 800168a:	d007      	beq.n	800169c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0208 	orr.w	r2, r2, #8
 800169a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e005      	b.n	80016ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016b6:	2302      	movs	r3, #2
 80016b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d004      	beq.n	80016e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00c      	b.n	80016fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2205      	movs	r2, #5
 80016e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0201 	bic.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001714:	4b8e      	ldr	r3, [pc, #568]	; (8001950 <HAL_DMA_IRQHandler+0x248>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a8e      	ldr	r2, [pc, #568]	; (8001954 <HAL_DMA_IRQHandler+0x24c>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0a9b      	lsrs	r3, r3, #10
 8001720:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001726:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001732:	2208      	movs	r2, #8
 8001734:	409a      	lsls	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d01a      	beq.n	8001774 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d013      	beq.n	8001774 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0204 	bic.w	r2, r2, #4
 800175a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001760:	2208      	movs	r2, #8
 8001762:	409a      	lsls	r2, r3
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001778:	2201      	movs	r2, #1
 800177a:	409a      	lsls	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d012      	beq.n	80017aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00b      	beq.n	80017aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001796:	2201      	movs	r2, #1
 8001798:	409a      	lsls	r2, r3
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a2:	f043 0202 	orr.w	r2, r3, #2
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ae:	2204      	movs	r2, #4
 80017b0:	409a      	lsls	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d012      	beq.n	80017e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00b      	beq.n	80017e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	2204      	movs	r2, #4
 80017ce:	409a      	lsls	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d8:	f043 0204 	orr.w	r2, r3, #4
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e4:	2210      	movs	r2, #16
 80017e6:	409a      	lsls	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d043      	beq.n	8001878 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d03c      	beq.n	8001878 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001802:	2210      	movs	r2, #16
 8001804:	409a      	lsls	r2, r3
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d018      	beq.n	800184a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d108      	bne.n	8001838 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	2b00      	cmp	r3, #0
 800182c:	d024      	beq.n	8001878 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	4798      	blx	r3
 8001836:	e01f      	b.n	8001878 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183c:	2b00      	cmp	r3, #0
 800183e:	d01b      	beq.n	8001878 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	4798      	blx	r3
 8001848:	e016      	b.n	8001878 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d107      	bne.n	8001868 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0208 	bic.w	r2, r2, #8
 8001866:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187c:	2220      	movs	r2, #32
 800187e:	409a      	lsls	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 808f 	beq.w	80019a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 8087 	beq.w	80019a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189e:	2220      	movs	r2, #32
 80018a0:	409a      	lsls	r2, r3
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d136      	bne.n	8001920 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0216 	bic.w	r2, r2, #22
 80018c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695a      	ldr	r2, [r3, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d103      	bne.n	80018e2 <HAL_DMA_IRQHandler+0x1da>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d007      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0208 	bic.w	r2, r2, #8
 80018f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f6:	223f      	movs	r2, #63	; 0x3f
 80018f8:	409a      	lsls	r2, r3
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001912:	2b00      	cmp	r3, #0
 8001914:	d07e      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	4798      	blx	r3
        }
        return;
 800191e:	e079      	b.n	8001a14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d01d      	beq.n	800196a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10d      	bne.n	8001958 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	2b00      	cmp	r3, #0
 8001942:	d031      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	4798      	blx	r3
 800194c:	e02c      	b.n	80019a8 <HAL_DMA_IRQHandler+0x2a0>
 800194e:	bf00      	nop
 8001950:	20000000 	.word	0x20000000
 8001954:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195c:	2b00      	cmp	r3, #0
 800195e:	d023      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	4798      	blx	r3
 8001968:	e01e      	b.n	80019a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10f      	bne.n	8001998 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0210 	bic.w	r2, r2, #16
 8001986:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d032      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d022      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2205      	movs	r2, #5
 80019c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	3301      	adds	r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d307      	bcc.n	80019f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f2      	bne.n	80019d4 <HAL_DMA_IRQHandler+0x2cc>
 80019ee:	e000      	b.n	80019f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019f0:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d005      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
 8001a12:	e000      	b.n	8001a16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a14:	bf00      	nop
    }
  }
}
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b40      	cmp	r3, #64	; 0x40
 8001a48:	d108      	bne.n	8001a5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a5a:	e007      	b.n	8001a6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	60da      	str	r2, [r3, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	3b10      	subs	r3, #16
 8001a88:	4a14      	ldr	r2, [pc, #80]	; (8001adc <DMA_CalcBaseAndBitshift+0x64>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a92:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <DMA_CalcBaseAndBitshift+0x68>)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d909      	bls.n	8001aba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001aae:	f023 0303 	bic.w	r3, r3, #3
 8001ab2:	1d1a      	adds	r2, r3, #4
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ab8:	e007      	b.n	8001aca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ac2:	f023 0303 	bic.w	r3, r3, #3
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	aaaaaaab 	.word	0xaaaaaaab
 8001ae0:	08005460 	.word	0x08005460

08001ae4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d11f      	bne.n	8001b3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d856      	bhi.n	8001bb2 <DMA_CheckFifoParam+0xce>
 8001b04:	a201      	add	r2, pc, #4	; (adr r2, 8001b0c <DMA_CheckFifoParam+0x28>)
 8001b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0a:	bf00      	nop
 8001b0c:	08001b1d 	.word	0x08001b1d
 8001b10:	08001b2f 	.word	0x08001b2f
 8001b14:	08001b1d 	.word	0x08001b1d
 8001b18:	08001bb3 	.word	0x08001bb3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d046      	beq.n	8001bb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b2c:	e043      	b.n	8001bb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b36:	d140      	bne.n	8001bba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b3c:	e03d      	b.n	8001bba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b46:	d121      	bne.n	8001b8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d837      	bhi.n	8001bbe <DMA_CheckFifoParam+0xda>
 8001b4e:	a201      	add	r2, pc, #4	; (adr r2, 8001b54 <DMA_CheckFifoParam+0x70>)
 8001b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b54:	08001b65 	.word	0x08001b65
 8001b58:	08001b6b 	.word	0x08001b6b
 8001b5c:	08001b65 	.word	0x08001b65
 8001b60:	08001b7d 	.word	0x08001b7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
      break;
 8001b68:	e030      	b.n	8001bcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d025      	beq.n	8001bc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b7a:	e022      	b.n	8001bc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b84:	d11f      	bne.n	8001bc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b8a:	e01c      	b.n	8001bc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d903      	bls.n	8001b9a <DMA_CheckFifoParam+0xb6>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d003      	beq.n	8001ba0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b98:	e018      	b.n	8001bcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8001b9e:	e015      	b.n	8001bcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00e      	beq.n	8001bca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb0:	e00b      	b.n	8001bca <DMA_CheckFifoParam+0xe6>
      break;
 8001bb2:	bf00      	nop
 8001bb4:	e00a      	b.n	8001bcc <DMA_CheckFifoParam+0xe8>
      break;
 8001bb6:	bf00      	nop
 8001bb8:	e008      	b.n	8001bcc <DMA_CheckFifoParam+0xe8>
      break;
 8001bba:	bf00      	nop
 8001bbc:	e006      	b.n	8001bcc <DMA_CheckFifoParam+0xe8>
      break;
 8001bbe:	bf00      	nop
 8001bc0:	e004      	b.n	8001bcc <DMA_CheckFifoParam+0xe8>
      break;
 8001bc2:	bf00      	nop
 8001bc4:	e002      	b.n	8001bcc <DMA_CheckFifoParam+0xe8>
      break;   
 8001bc6:	bf00      	nop
 8001bc8:	e000      	b.n	8001bcc <DMA_CheckFifoParam+0xe8>
      break;
 8001bca:	bf00      	nop
    }
  } 
  
  return status; 
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e16b      	b.n	8001ed0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 815a 	bne.w	8001eca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d00b      	beq.n	8001c36 <HAL_GPIO_Init+0x5a>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d007      	beq.n	8001c36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c2a:	2b11      	cmp	r3, #17
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b12      	cmp	r3, #18
 8001c34:	d130      	bne.n	8001c98 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	2203      	movs	r2, #3
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 0201 	and.w	r2, r3, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0xfc>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b12      	cmp	r3, #18
 8001cd6:	d123      	bne.n	8001d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80b4 	beq.w	8001eca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b60      	ldr	r3, [pc, #384]	; (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a5f      	ldr	r2, [pc, #380]	; (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b5d      	ldr	r3, [pc, #372]	; (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7e:	4a5b      	ldr	r2, [pc, #364]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a52      	ldr	r2, [pc, #328]	; (8001ef0 <HAL_GPIO_Init+0x314>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d02b      	beq.n	8001e02 <HAL_GPIO_Init+0x226>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a51      	ldr	r2, [pc, #324]	; (8001ef4 <HAL_GPIO_Init+0x318>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d025      	beq.n	8001dfe <HAL_GPIO_Init+0x222>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a50      	ldr	r2, [pc, #320]	; (8001ef8 <HAL_GPIO_Init+0x31c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01f      	beq.n	8001dfa <HAL_GPIO_Init+0x21e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4f      	ldr	r2, [pc, #316]	; (8001efc <HAL_GPIO_Init+0x320>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d019      	beq.n	8001df6 <HAL_GPIO_Init+0x21a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4e      	ldr	r2, [pc, #312]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0x216>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4d      	ldr	r2, [pc, #308]	; (8001f04 <HAL_GPIO_Init+0x328>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00d      	beq.n	8001dee <HAL_GPIO_Init+0x212>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4c      	ldr	r2, [pc, #304]	; (8001f08 <HAL_GPIO_Init+0x32c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <HAL_GPIO_Init+0x20e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4b      	ldr	r2, [pc, #300]	; (8001f0c <HAL_GPIO_Init+0x330>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_GPIO_Init+0x20a>
 8001de2:	2307      	movs	r3, #7
 8001de4:	e00e      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001de6:	2308      	movs	r3, #8
 8001de8:	e00c      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001dea:	2306      	movs	r3, #6
 8001dec:	e00a      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001dee:	2305      	movs	r3, #5
 8001df0:	e008      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001df2:	2304      	movs	r3, #4
 8001df4:	e006      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001df6:	2303      	movs	r3, #3
 8001df8:	e004      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001e02:	2300      	movs	r3, #0
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	f002 0203 	and.w	r2, r2, #3
 8001e0a:	0092      	lsls	r2, r2, #2
 8001e0c:	4093      	lsls	r3, r2
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e14:	4935      	ldr	r1, [pc, #212]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e22:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e46:	4a32      	ldr	r2, [pc, #200]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e4c:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e70:	4a27      	ldr	r2, [pc, #156]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e76:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ec4:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b0f      	cmp	r3, #15
 8001ed4:	f67f ae90 	bls.w	8001bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40013800 	.word	0x40013800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	40020c00 	.word	0x40020c00
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40021400 	.word	0x40021400
 8001f08:	40021800 	.word	0x40021800
 8001f0c:	40021c00 	.word	0x40021c00
 8001f10:	40013c00 	.word	0x40013c00

08001f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
 8001f20:	4613      	mov	r3, r2
 8001f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f24:	787b      	ldrb	r3, [r7, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f30:	e003      	b.n	8001f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	041a      	lsls	r2, r3, #16
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	619a      	str	r2, [r3, #24]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e25e      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d075      	beq.n	8002052 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f66:	4b88      	ldr	r3, [pc, #544]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d00c      	beq.n	8001f8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f72:	4b85      	ldr	r3, [pc, #532]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d112      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7e:	4b82      	ldr	r3, [pc, #520]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f8a:	d10b      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	4b7e      	ldr	r3, [pc, #504]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d05b      	beq.n	8002050 <HAL_RCC_OscConfig+0x108>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d157      	bne.n	8002050 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e239      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fac:	d106      	bne.n	8001fbc <HAL_RCC_OscConfig+0x74>
 8001fae:	4b76      	ldr	r3, [pc, #472]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a75      	ldr	r2, [pc, #468]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e01d      	b.n	8001ff8 <HAL_RCC_OscConfig+0xb0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x98>
 8001fc6:	4b70      	ldr	r3, [pc, #448]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a6f      	ldr	r2, [pc, #444]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b6d      	ldr	r3, [pc, #436]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a6c      	ldr	r2, [pc, #432]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e00b      	b.n	8001ff8 <HAL_RCC_OscConfig+0xb0>
 8001fe0:	4b69      	ldr	r3, [pc, #420]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a68      	ldr	r2, [pc, #416]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	4b66      	ldr	r3, [pc, #408]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a65      	ldr	r2, [pc, #404]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff f93c 	bl	800127c <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002008:	f7ff f938 	bl	800127c <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	; 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e1fe      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	4b5b      	ldr	r3, [pc, #364]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0xc0>
 8002026:	e014      	b.n	8002052 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff f928 	bl	800127c <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002030:	f7ff f924 	bl	800127c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	; 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e1ea      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002042:	4b51      	ldr	r3, [pc, #324]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0xe8>
 800204e:	e000      	b.n	8002052 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d063      	beq.n	8002126 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800205e:	4b4a      	ldr	r3, [pc, #296]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800206a:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002072:	2b08      	cmp	r3, #8
 8002074:	d11c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002076:	4b44      	ldr	r3, [pc, #272]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d116      	bne.n	80020b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_RCC_OscConfig+0x152>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d001      	beq.n	800209a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e1be      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209a:	4b3b      	ldr	r3, [pc, #236]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4937      	ldr	r1, [pc, #220]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	e03a      	b.n	8002126 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d020      	beq.n	80020fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b8:	4b34      	ldr	r3, [pc, #208]	; (800218c <HAL_RCC_OscConfig+0x244>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7ff f8dd 	bl	800127c <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c6:	f7ff f8d9 	bl	800127c <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e19f      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d8:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e4:	4b28      	ldr	r3, [pc, #160]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4925      	ldr	r1, [pc, #148]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]
 80020f8:	e015      	b.n	8002126 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <HAL_RCC_OscConfig+0x244>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7ff f8bc 	bl	800127c <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002108:	f7ff f8b8 	bl	800127c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e17e      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d036      	beq.n	80021a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d016      	beq.n	8002168 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_RCC_OscConfig+0x248>)
 800213c:	2201      	movs	r2, #1
 800213e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002140:	f7ff f89c 	bl	800127c <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002148:	f7ff f898 	bl	800127c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e15e      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_OscConfig+0x240>)
 800215c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x200>
 8002166:	e01b      	b.n	80021a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCC_OscConfig+0x248>)
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7ff f885 	bl	800127c <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002174:	e00e      	b.n	8002194 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002176:	f7ff f881 	bl	800127c <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d907      	bls.n	8002194 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e147      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
 8002188:	40023800 	.word	0x40023800
 800218c:	42470000 	.word	0x42470000
 8002190:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002194:	4b88      	ldr	r3, [pc, #544]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1ea      	bne.n	8002176 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8097 	beq.w	80022dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b2:	4b81      	ldr	r3, [pc, #516]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10f      	bne.n	80021de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	4b7d      	ldr	r3, [pc, #500]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a7c      	ldr	r2, [pc, #496]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b7a      	ldr	r3, [pc, #488]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021da:	2301      	movs	r3, #1
 80021dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021de:	4b77      	ldr	r3, [pc, #476]	; (80023bc <HAL_RCC_OscConfig+0x474>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d118      	bne.n	800221c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ea:	4b74      	ldr	r3, [pc, #464]	; (80023bc <HAL_RCC_OscConfig+0x474>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a73      	ldr	r2, [pc, #460]	; (80023bc <HAL_RCC_OscConfig+0x474>)
 80021f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f6:	f7ff f841 	bl	800127c <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fe:	f7ff f83d 	bl	800127c <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e103      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002210:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <HAL_RCC_OscConfig+0x474>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x2ea>
 8002224:	4b64      	ldr	r3, [pc, #400]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	4a63      	ldr	r2, [pc, #396]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6713      	str	r3, [r2, #112]	; 0x70
 8002230:	e01c      	b.n	800226c <HAL_RCC_OscConfig+0x324>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b05      	cmp	r3, #5
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x30c>
 800223a:	4b5f      	ldr	r3, [pc, #380]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223e:	4a5e      	ldr	r2, [pc, #376]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002240:	f043 0304 	orr.w	r3, r3, #4
 8002244:	6713      	str	r3, [r2, #112]	; 0x70
 8002246:	4b5c      	ldr	r3, [pc, #368]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	4a5b      	ldr	r2, [pc, #364]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6713      	str	r3, [r2, #112]	; 0x70
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0x324>
 8002254:	4b58      	ldr	r3, [pc, #352]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002258:	4a57      	ldr	r2, [pc, #348]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	6713      	str	r3, [r2, #112]	; 0x70
 8002260:	4b55      	ldr	r3, [pc, #340]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	4a54      	ldr	r2, [pc, #336]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002266:	f023 0304 	bic.w	r3, r3, #4
 800226a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d015      	beq.n	80022a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002274:	f7ff f802 	bl	800127c <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227a:	e00a      	b.n	8002292 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227c:	f7fe fffe 	bl	800127c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e0c2      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002292:	4b49      	ldr	r3, [pc, #292]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ee      	beq.n	800227c <HAL_RCC_OscConfig+0x334>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a0:	f7fe ffec 	bl	800127c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a6:	e00a      	b.n	80022be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7fe ffe8 	bl	800127c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0ac      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022be:	4b3e      	ldr	r3, [pc, #248]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1ee      	bne.n	80022a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d105      	bne.n	80022dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d0:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	4a38      	ldr	r2, [pc, #224]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8098 	beq.w	8002416 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022e6:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d05c      	beq.n	80023ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d141      	bne.n	800237e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fa:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <HAL_RCC_OscConfig+0x478>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe ffbc 	bl	800127c <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002308:	f7fe ffb8 	bl	800127c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e07e      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	019b      	lsls	r3, r3, #6
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	3b01      	subs	r3, #1
 8002340:	041b      	lsls	r3, r3, #16
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	061b      	lsls	r3, r3, #24
 800234a:	491b      	ldr	r1, [pc, #108]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_RCC_OscConfig+0x478>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7fe ff91 	bl	800127c <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235e:	f7fe ff8d 	bl	800127c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e053      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x416>
 800237c:	e04b      	b.n	8002416 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <HAL_RCC_OscConfig+0x478>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe ff7a 	bl	800127c <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe ff76 	bl	800127c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e03c      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_RCC_OscConfig+0x470>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x444>
 80023aa:	e034      	b.n	8002416 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d107      	bne.n	80023c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e02f      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40007000 	.word	0x40007000
 80023c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023c4:	4b16      	ldr	r3, [pc, #88]	; (8002420 <HAL_RCC_OscConfig+0x4d8>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d11c      	bne.n	8002412 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d115      	bne.n	8002412 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023ec:	4013      	ands	r3, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d10d      	bne.n	8002412 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002400:	429a      	cmp	r2, r3
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d001      	beq.n	8002416 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40023800 	.word	0x40023800

08002424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0cc      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b68      	ldr	r3, [pc, #416]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d90c      	bls.n	8002460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b65      	ldr	r3, [pc, #404]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b63      	ldr	r3, [pc, #396]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0b8      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002478:	4b59      	ldr	r3, [pc, #356]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4a58      	ldr	r2, [pc, #352]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002482:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002490:	4b53      	ldr	r3, [pc, #332]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4a52      	ldr	r2, [pc, #328]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800249a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800249c:	4b50      	ldr	r3, [pc, #320]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	494d      	ldr	r1, [pc, #308]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d044      	beq.n	8002544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d119      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e07f      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d003      	beq.n	80024e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	4b3f      	ldr	r3, [pc, #252]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e06f      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f2:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e067      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002502:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f023 0203 	bic.w	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4934      	ldr	r1, [pc, #208]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	4313      	orrs	r3, r2
 8002512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002514:	f7fe feb2 	bl	800127c <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7fe feae 	bl	800127c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e04f      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 020c 	and.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	429a      	cmp	r2, r3
 8002542:	d1eb      	bne.n	800251c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002544:	4b25      	ldr	r3, [pc, #148]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d20c      	bcs.n	800256c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b20      	ldr	r3, [pc, #128]	; (80025dc <HAL_RCC_ClockConfig+0x1b8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e032      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4916      	ldr	r1, [pc, #88]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	490e      	ldr	r1, [pc, #56]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025aa:	f000 f821 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 80025ae:	4602      	mov	r2, r0
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	490a      	ldr	r1, [pc, #40]	; (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	5ccb      	ldrb	r3, [r1, r3]
 80025be:	fa22 f303 	lsr.w	r3, r2, r3
 80025c2:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fe12 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023c00 	.word	0x40023c00
 80025e0:	40023800 	.word	0x40023800
 80025e4:	08005448 	.word	0x08005448
 80025e8:	20000000 	.word	0x20000000
 80025ec:	20000004 	.word	0x20000004

080025f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f4:	b094      	sub	sp, #80	; 0x50
 80025f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	647b      	str	r3, [r7, #68]	; 0x44
 80025fc:	2300      	movs	r3, #0
 80025fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002600:	2300      	movs	r3, #0
 8002602:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002608:	4b79      	ldr	r3, [pc, #484]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b08      	cmp	r3, #8
 8002612:	d00d      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x40>
 8002614:	2b08      	cmp	r3, #8
 8002616:	f200 80e1 	bhi.w	80027dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0x34>
 800261e:	2b04      	cmp	r3, #4
 8002620:	d003      	beq.n	800262a <HAL_RCC_GetSysClockFreq+0x3a>
 8002622:	e0db      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002624:	4b73      	ldr	r3, [pc, #460]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002626:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002628:	e0db      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800262a:	4b73      	ldr	r3, [pc, #460]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800262c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800262e:	e0d8      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002630:	4b6f      	ldr	r3, [pc, #444]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002638:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800263a:	4b6d      	ldr	r3, [pc, #436]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d063      	beq.n	800270e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002646:	4b6a      	ldr	r3, [pc, #424]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	099b      	lsrs	r3, r3, #6
 800264c:	2200      	movs	r2, #0
 800264e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002650:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002658:	633b      	str	r3, [r7, #48]	; 0x30
 800265a:	2300      	movs	r3, #0
 800265c:	637b      	str	r3, [r7, #52]	; 0x34
 800265e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002662:	4622      	mov	r2, r4
 8002664:	462b      	mov	r3, r5
 8002666:	f04f 0000 	mov.w	r0, #0
 800266a:	f04f 0100 	mov.w	r1, #0
 800266e:	0159      	lsls	r1, r3, #5
 8002670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002674:	0150      	lsls	r0, r2, #5
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4621      	mov	r1, r4
 800267c:	1a51      	subs	r1, r2, r1
 800267e:	6139      	str	r1, [r7, #16]
 8002680:	4629      	mov	r1, r5
 8002682:	eb63 0301 	sbc.w	r3, r3, r1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002694:	4659      	mov	r1, fp
 8002696:	018b      	lsls	r3, r1, #6
 8002698:	4651      	mov	r1, sl
 800269a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800269e:	4651      	mov	r1, sl
 80026a0:	018a      	lsls	r2, r1, #6
 80026a2:	4651      	mov	r1, sl
 80026a4:	ebb2 0801 	subs.w	r8, r2, r1
 80026a8:	4659      	mov	r1, fp
 80026aa:	eb63 0901 	sbc.w	r9, r3, r1
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026c2:	4690      	mov	r8, r2
 80026c4:	4699      	mov	r9, r3
 80026c6:	4623      	mov	r3, r4
 80026c8:	eb18 0303 	adds.w	r3, r8, r3
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	462b      	mov	r3, r5
 80026d0:	eb49 0303 	adc.w	r3, r9, r3
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026e2:	4629      	mov	r1, r5
 80026e4:	024b      	lsls	r3, r1, #9
 80026e6:	4621      	mov	r1, r4
 80026e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026ec:	4621      	mov	r1, r4
 80026ee:	024a      	lsls	r2, r1, #9
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f6:	2200      	movs	r2, #0
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002700:	f7fd fd6c 	bl	80001dc <__aeabi_uldivmod>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4613      	mov	r3, r2
 800270a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800270c:	e058      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270e:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	099b      	lsrs	r3, r3, #6
 8002714:	2200      	movs	r2, #0
 8002716:	4618      	mov	r0, r3
 8002718:	4611      	mov	r1, r2
 800271a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800271e:	623b      	str	r3, [r7, #32]
 8002720:	2300      	movs	r3, #0
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
 8002724:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002728:	4642      	mov	r2, r8
 800272a:	464b      	mov	r3, r9
 800272c:	f04f 0000 	mov.w	r0, #0
 8002730:	f04f 0100 	mov.w	r1, #0
 8002734:	0159      	lsls	r1, r3, #5
 8002736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800273a:	0150      	lsls	r0, r2, #5
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4641      	mov	r1, r8
 8002742:	ebb2 0a01 	subs.w	sl, r2, r1
 8002746:	4649      	mov	r1, r9
 8002748:	eb63 0b01 	sbc.w	fp, r3, r1
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002758:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800275c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002760:	ebb2 040a 	subs.w	r4, r2, sl
 8002764:	eb63 050b 	sbc.w	r5, r3, fp
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	00eb      	lsls	r3, r5, #3
 8002772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002776:	00e2      	lsls	r2, r4, #3
 8002778:	4614      	mov	r4, r2
 800277a:	461d      	mov	r5, r3
 800277c:	4643      	mov	r3, r8
 800277e:	18e3      	adds	r3, r4, r3
 8002780:	603b      	str	r3, [r7, #0]
 8002782:	464b      	mov	r3, r9
 8002784:	eb45 0303 	adc.w	r3, r5, r3
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002796:	4629      	mov	r1, r5
 8002798:	028b      	lsls	r3, r1, #10
 800279a:	4621      	mov	r1, r4
 800279c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a0:	4621      	mov	r1, r4
 80027a2:	028a      	lsls	r2, r1, #10
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027aa:	2200      	movs	r2, #0
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	61fa      	str	r2, [r7, #28]
 80027b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027b4:	f7fd fd12 	bl	80001dc <__aeabi_uldivmod>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4613      	mov	r3, r2
 80027be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	0c1b      	lsrs	r3, r3, #16
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	3301      	adds	r3, #1
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027da:	e002      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80027de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3750      	adds	r7, #80	; 0x50
 80027e8:	46bd      	mov	sp, r7
 80027ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	00f42400 	.word	0x00f42400
 80027f8:	007a1200 	.word	0x007a1200

080027fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_RCC_GetHCLKFreq+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000000 	.word	0x20000000

08002814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002818:	f7ff fff0 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	0a9b      	lsrs	r3, r3, #10
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4903      	ldr	r1, [pc, #12]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40023800 	.word	0x40023800
 8002838:	08005458 	.word	0x08005458

0800283c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002840:	f7ff ffdc 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	0b5b      	lsrs	r3, r3, #13
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4903      	ldr	r1, [pc, #12]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	08005458 	.word	0x08005458

08002864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e01d      	b.n	80028b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fe fa9e 	bl	8000dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f000 fbde 	bl	8003064 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2202      	movs	r2, #2
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b06      	cmp	r3, #6
 80028da:	d007      	beq.n	80028ec <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e01d      	b.n	8002950 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d106      	bne.n	800292e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7fe faa1 	bl	8000e70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2202      	movs	r2, #2
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	4619      	mov	r1, r3
 8002940:	4610      	mov	r0, r2
 8002942:	f000 fb8f 	bl	8003064 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2201      	movs	r2, #1
 8002968:	6839      	ldr	r1, [r7, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fe64 	bl	8003638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a15      	ldr	r2, [pc, #84]	; (80029cc <HAL_TIM_PWM_Start+0x74>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d004      	beq.n	8002984 <HAL_TIM_PWM_Start+0x2c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <HAL_TIM_PWM_Start+0x78>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d101      	bne.n	8002988 <HAL_TIM_PWM_Start+0x30>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_TIM_PWM_Start+0x32>
 8002988:	2300      	movs	r3, #0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b06      	cmp	r3, #6
 80029ae:	d007      	beq.n	80029c0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40010000 	.word	0x40010000
 80029d0:	40010400 	.word	0x40010400

080029d4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b0c      	cmp	r3, #12
 80029e2:	d841      	bhi.n	8002a68 <HAL_TIM_PWM_Start_IT+0x94>
 80029e4:	a201      	add	r2, pc, #4	; (adr r2, 80029ec <HAL_TIM_PWM_Start_IT+0x18>)
 80029e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ea:	bf00      	nop
 80029ec:	08002a21 	.word	0x08002a21
 80029f0:	08002a69 	.word	0x08002a69
 80029f4:	08002a69 	.word	0x08002a69
 80029f8:	08002a69 	.word	0x08002a69
 80029fc:	08002a33 	.word	0x08002a33
 8002a00:	08002a69 	.word	0x08002a69
 8002a04:	08002a69 	.word	0x08002a69
 8002a08:	08002a69 	.word	0x08002a69
 8002a0c:	08002a45 	.word	0x08002a45
 8002a10:	08002a69 	.word	0x08002a69
 8002a14:	08002a69 	.word	0x08002a69
 8002a18:	08002a69 	.word	0x08002a69
 8002a1c:	08002a57 	.word	0x08002a57
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0202 	orr.w	r2, r2, #2
 8002a2e:	60da      	str	r2, [r3, #12]
      break;
 8002a30:	e01b      	b.n	8002a6a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0204 	orr.w	r2, r2, #4
 8002a40:	60da      	str	r2, [r3, #12]
      break;
 8002a42:	e012      	b.n	8002a6a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0208 	orr.w	r2, r2, #8
 8002a52:	60da      	str	r2, [r3, #12]
      break;
 8002a54:	e009      	b.n	8002a6a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0210 	orr.w	r2, r2, #16
 8002a64:	60da      	str	r2, [r3, #12]
      break;
 8002a66:	e000      	b.n	8002a6a <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002a68:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	6839      	ldr	r1, [r7, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fde0 	bl	8003638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a15      	ldr	r2, [pc, #84]	; (8002ad4 <HAL_TIM_PWM_Start_IT+0x100>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d004      	beq.n	8002a8c <HAL_TIM_PWM_Start_IT+0xb8>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <HAL_TIM_PWM_Start_IT+0x104>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d101      	bne.n	8002a90 <HAL_TIM_PWM_Start_IT+0xbc>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <HAL_TIM_PWM_Start_IT+0xbe>
 8002a90:	2300      	movs	r3, #0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b06      	cmp	r3, #6
 8002ab6:	d007      	beq.n	8002ac8 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	40010400 	.word	0x40010400

08002adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d122      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d11b      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0202 	mvn.w	r2, #2
 8002b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fa82 	bl	8003028 <HAL_TIM_IC_CaptureCallback>
 8002b24:	e005      	b.n	8002b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fa74 	bl	8003014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fa85 	bl	800303c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d122      	bne.n	8002b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d11b      	bne.n	8002b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0204 	mvn.w	r2, #4
 8002b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fa58 	bl	8003028 <HAL_TIM_IC_CaptureCallback>
 8002b78:	e005      	b.n	8002b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fa4a 	bl	8003014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fa5b 	bl	800303c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d122      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d11b      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0208 	mvn.w	r2, #8
 8002bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fa2e 	bl	8003028 <HAL_TIM_IC_CaptureCallback>
 8002bcc:	e005      	b.n	8002bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fa20 	bl	8003014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fa31 	bl	800303c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b10      	cmp	r3, #16
 8002bec:	d122      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b10      	cmp	r3, #16
 8002bfa:	d11b      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0210 	mvn.w	r2, #16
 8002c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2208      	movs	r2, #8
 8002c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fa04 	bl	8003028 <HAL_TIM_IC_CaptureCallback>
 8002c20:	e005      	b.n	8002c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f9f6 	bl	8003014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fa07 	bl	800303c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d10e      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0201 	mvn.w	r2, #1
 8002c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f9d0 	bl	8003000 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	2b80      	cmp	r3, #128	; 0x80
 8002c6c:	d10e      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d107      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fd82 	bl	8003790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d10e      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d107      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9cc 	bl	8003050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d107      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0220 	mvn.w	r2, #32
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fd4c 	bl	800377c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e0b4      	b.n	8002e70 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2202      	movs	r2, #2
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b0c      	cmp	r3, #12
 8002d1a:	f200 809f 	bhi.w	8002e5c <HAL_TIM_PWM_ConfigChannel+0x170>
 8002d1e:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d59 	.word	0x08002d59
 8002d28:	08002e5d 	.word	0x08002e5d
 8002d2c:	08002e5d 	.word	0x08002e5d
 8002d30:	08002e5d 	.word	0x08002e5d
 8002d34:	08002d99 	.word	0x08002d99
 8002d38:	08002e5d 	.word	0x08002e5d
 8002d3c:	08002e5d 	.word	0x08002e5d
 8002d40:	08002e5d 	.word	0x08002e5d
 8002d44:	08002ddb 	.word	0x08002ddb
 8002d48:	08002e5d 	.word	0x08002e5d
 8002d4c:	08002e5d 	.word	0x08002e5d
 8002d50:	08002e5d 	.word	0x08002e5d
 8002d54:	08002e1b 	.word	0x08002e1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fa20 	bl	80031a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0208 	orr.w	r2, r2, #8
 8002d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0204 	bic.w	r2, r2, #4
 8002d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6999      	ldr	r1, [r3, #24]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	619a      	str	r2, [r3, #24]
      break;
 8002d96:	e062      	b.n	8002e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fa70 	bl	8003284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6999      	ldr	r1, [r3, #24]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	619a      	str	r2, [r3, #24]
      break;
 8002dd8:	e041      	b.n	8002e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fac5 	bl	8003370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0208 	orr.w	r2, r2, #8
 8002df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0204 	bic.w	r2, r2, #4
 8002e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69d9      	ldr	r1, [r3, #28]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	61da      	str	r2, [r3, #28]
      break;
 8002e18:	e021      	b.n	8002e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fb19 	bl	8003458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69d9      	ldr	r1, [r3, #28]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	021a      	lsls	r2, r3, #8
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	61da      	str	r2, [r3, #28]
      break;
 8002e5a:	e000      	b.n	8002e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002e5c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_TIM_ConfigClockSource+0x18>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e0b3      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x180>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec8:	d03e      	beq.n	8002f48 <HAL_TIM_ConfigClockSource+0xd0>
 8002eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ece:	f200 8087 	bhi.w	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed6:	f000 8085 	beq.w	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ede:	d87f      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002ee0:	2b70      	cmp	r3, #112	; 0x70
 8002ee2:	d01a      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0xa2>
 8002ee4:	2b70      	cmp	r3, #112	; 0x70
 8002ee6:	d87b      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002ee8:	2b60      	cmp	r3, #96	; 0x60
 8002eea:	d050      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x116>
 8002eec:	2b60      	cmp	r3, #96	; 0x60
 8002eee:	d877      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002ef0:	2b50      	cmp	r3, #80	; 0x50
 8002ef2:	d03c      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0xf6>
 8002ef4:	2b50      	cmp	r3, #80	; 0x50
 8002ef6:	d873      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002ef8:	2b40      	cmp	r3, #64	; 0x40
 8002efa:	d058      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0x136>
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d86f      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002f00:	2b30      	cmp	r3, #48	; 0x30
 8002f02:	d064      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x156>
 8002f04:	2b30      	cmp	r3, #48	; 0x30
 8002f06:	d86b      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d060      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x156>
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d867      	bhi.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d05c      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x156>
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	d05a      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002f18:	e062      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6899      	ldr	r1, [r3, #8]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f000 fb65 	bl	80035f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	609a      	str	r2, [r3, #8]
      break;
 8002f46:	e04e      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	6899      	ldr	r1, [r3, #8]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f000 fb4e 	bl	80035f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f6a:	609a      	str	r2, [r3, #8]
      break;
 8002f6c:	e03b      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6859      	ldr	r1, [r3, #4]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f000 fac2 	bl	8003504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2150      	movs	r1, #80	; 0x50
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fb1b 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 8002f8c:	e02b      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f000 fae1 	bl	8003562 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2160      	movs	r1, #96	; 0x60
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fb0b 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 8002fac:	e01b      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6859      	ldr	r1, [r3, #4]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f000 faa2 	bl	8003504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2140      	movs	r1, #64	; 0x40
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fafb 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 8002fcc:	e00b      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4610      	mov	r0, r2
 8002fda:	f000 faf2 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 8002fde:	e002      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fe0:	bf00      	nop
 8002fe2:	e000      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fe4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a40      	ldr	r2, [pc, #256]	; (8003178 <TIM_Base_SetConfig+0x114>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d013      	beq.n	80030a4 <TIM_Base_SetConfig+0x40>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003082:	d00f      	beq.n	80030a4 <TIM_Base_SetConfig+0x40>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a3d      	ldr	r2, [pc, #244]	; (800317c <TIM_Base_SetConfig+0x118>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00b      	beq.n	80030a4 <TIM_Base_SetConfig+0x40>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a3c      	ldr	r2, [pc, #240]	; (8003180 <TIM_Base_SetConfig+0x11c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d007      	beq.n	80030a4 <TIM_Base_SetConfig+0x40>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a3b      	ldr	r2, [pc, #236]	; (8003184 <TIM_Base_SetConfig+0x120>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d003      	beq.n	80030a4 <TIM_Base_SetConfig+0x40>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a3a      	ldr	r2, [pc, #232]	; (8003188 <TIM_Base_SetConfig+0x124>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d108      	bne.n	80030b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a2f      	ldr	r2, [pc, #188]	; (8003178 <TIM_Base_SetConfig+0x114>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d02b      	beq.n	8003116 <TIM_Base_SetConfig+0xb2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c4:	d027      	beq.n	8003116 <TIM_Base_SetConfig+0xb2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a2c      	ldr	r2, [pc, #176]	; (800317c <TIM_Base_SetConfig+0x118>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d023      	beq.n	8003116 <TIM_Base_SetConfig+0xb2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a2b      	ldr	r2, [pc, #172]	; (8003180 <TIM_Base_SetConfig+0x11c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01f      	beq.n	8003116 <TIM_Base_SetConfig+0xb2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a2a      	ldr	r2, [pc, #168]	; (8003184 <TIM_Base_SetConfig+0x120>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01b      	beq.n	8003116 <TIM_Base_SetConfig+0xb2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a29      	ldr	r2, [pc, #164]	; (8003188 <TIM_Base_SetConfig+0x124>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d017      	beq.n	8003116 <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a28      	ldr	r2, [pc, #160]	; (800318c <TIM_Base_SetConfig+0x128>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a27      	ldr	r2, [pc, #156]	; (8003190 <TIM_Base_SetConfig+0x12c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00f      	beq.n	8003116 <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a26      	ldr	r2, [pc, #152]	; (8003194 <TIM_Base_SetConfig+0x130>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00b      	beq.n	8003116 <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a25      	ldr	r2, [pc, #148]	; (8003198 <TIM_Base_SetConfig+0x134>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d007      	beq.n	8003116 <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a24      	ldr	r2, [pc, #144]	; (800319c <TIM_Base_SetConfig+0x138>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d003      	beq.n	8003116 <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a23      	ldr	r2, [pc, #140]	; (80031a0 <TIM_Base_SetConfig+0x13c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d108      	bne.n	8003128 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <TIM_Base_SetConfig+0x114>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d003      	beq.n	800315c <TIM_Base_SetConfig+0xf8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <TIM_Base_SetConfig+0x124>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d103      	bne.n	8003164 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	615a      	str	r2, [r3, #20]
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40010000 	.word	0x40010000
 800317c:	40000400 	.word	0x40000400
 8003180:	40000800 	.word	0x40000800
 8003184:	40000c00 	.word	0x40000c00
 8003188:	40010400 	.word	0x40010400
 800318c:	40014000 	.word	0x40014000
 8003190:	40014400 	.word	0x40014400
 8003194:	40014800 	.word	0x40014800
 8003198:	40001800 	.word	0x40001800
 800319c:	40001c00 	.word	0x40001c00
 80031a0:	40002000 	.word	0x40002000

080031a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f023 0201 	bic.w	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f023 0302 	bic.w	r3, r3, #2
 80031ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a20      	ldr	r2, [pc, #128]	; (800327c <TIM_OC1_SetConfig+0xd8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <TIM_OC1_SetConfig+0x64>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <TIM_OC1_SetConfig+0xdc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d10c      	bne.n	8003222 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f023 0308 	bic.w	r3, r3, #8
 800320e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f023 0304 	bic.w	r3, r3, #4
 8003220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a15      	ldr	r2, [pc, #84]	; (800327c <TIM_OC1_SetConfig+0xd8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d003      	beq.n	8003232 <TIM_OC1_SetConfig+0x8e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a14      	ldr	r2, [pc, #80]	; (8003280 <TIM_OC1_SetConfig+0xdc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d111      	bne.n	8003256 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	621a      	str	r2, [r3, #32]
}
 8003270:	bf00      	nop
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40010000 	.word	0x40010000
 8003280:	40010400 	.word	0x40010400

08003284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f023 0210 	bic.w	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f023 0320 	bic.w	r3, r3, #32
 80032ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a22      	ldr	r2, [pc, #136]	; (8003368 <TIM_OC2_SetConfig+0xe4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_OC2_SetConfig+0x68>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a21      	ldr	r2, [pc, #132]	; (800336c <TIM_OC2_SetConfig+0xe8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d10d      	bne.n	8003308 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003306:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a17      	ldr	r2, [pc, #92]	; (8003368 <TIM_OC2_SetConfig+0xe4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d003      	beq.n	8003318 <TIM_OC2_SetConfig+0x94>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a16      	ldr	r2, [pc, #88]	; (800336c <TIM_OC2_SetConfig+0xe8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d113      	bne.n	8003340 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800331e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	621a      	str	r2, [r3, #32]
}
 800335a:	bf00      	nop
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40010000 	.word	0x40010000
 800336c:	40010400 	.word	0x40010400

08003370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a21      	ldr	r2, [pc, #132]	; (8003450 <TIM_OC3_SetConfig+0xe0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d003      	beq.n	80033d6 <TIM_OC3_SetConfig+0x66>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a20      	ldr	r2, [pc, #128]	; (8003454 <TIM_OC3_SetConfig+0xe4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10d      	bne.n	80033f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a16      	ldr	r2, [pc, #88]	; (8003450 <TIM_OC3_SetConfig+0xe0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d003      	beq.n	8003402 <TIM_OC3_SetConfig+0x92>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a15      	ldr	r2, [pc, #84]	; (8003454 <TIM_OC3_SetConfig+0xe4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d113      	bne.n	800342a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	621a      	str	r2, [r3, #32]
}
 8003444:	bf00      	nop
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	40010000 	.word	0x40010000
 8003454:	40010400 	.word	0x40010400

08003458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4313      	orrs	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	031b      	lsls	r3, r3, #12
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a12      	ldr	r2, [pc, #72]	; (80034fc <TIM_OC4_SetConfig+0xa4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_OC4_SetConfig+0x68>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a11      	ldr	r2, [pc, #68]	; (8003500 <TIM_OC4_SetConfig+0xa8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d109      	bne.n	80034d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	019b      	lsls	r3, r3, #6
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	621a      	str	r2, [r3, #32]
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40010000 	.word	0x40010000
 8003500:	40010400 	.word	0x40010400

08003504 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f023 0201 	bic.w	r2, r3, #1
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800352e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f023 030a 	bic.w	r3, r3, #10
 8003540:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	621a      	str	r2, [r3, #32]
}
 8003556:	bf00      	nop
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003562:	b480      	push	{r7}
 8003564:	b087      	sub	sp, #28
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f023 0210 	bic.w	r2, r3, #16
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800358c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	031b      	lsls	r3, r3, #12
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800359e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	621a      	str	r2, [r3, #32]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	f043 0307 	orr.w	r3, r3, #7
 80035e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	609a      	str	r2, [r3, #8]
}
 80035ec:	bf00      	nop
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003612:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	021a      	lsls	r2, r3, #8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	431a      	orrs	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4313      	orrs	r3, r2
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	2201      	movs	r2, #1
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a1a      	ldr	r2, [r3, #32]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	43db      	mvns	r3, r3
 800365a:	401a      	ands	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1a      	ldr	r2, [r3, #32]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	fa01 f303 	lsl.w	r3, r1, r3
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003698:	2302      	movs	r3, #2
 800369a:	e05a      	b.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a21      	ldr	r2, [pc, #132]	; (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d022      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e8:	d01d      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1d      	ldr	r2, [pc, #116]	; (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d018      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1b      	ldr	r2, [pc, #108]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1a      	ldr	r2, [pc, #104]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00e      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a18      	ldr	r2, [pc, #96]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a17      	ldr	r2, [pc, #92]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a15      	ldr	r2, [pc, #84]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10c      	bne.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800372c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	4313      	orrs	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40010000 	.word	0x40010000
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40010400 	.word	0x40010400
 8003774:	40014000 	.word	0x40014000
 8003778:	40001800 	.word	0x40001800

0800377c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e03f      	b.n	8003836 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd fbd8 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2224      	movs	r2, #36	; 0x24
 80037d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fba1 	bl	8003f30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800380c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800381c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b088      	sub	sp, #32
 8003842:	af02      	add	r7, sp, #8
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b20      	cmp	r3, #32
 800385c:	f040 8083 	bne.w	8003966 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_UART_Transmit+0x2e>
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e07b      	b.n	8003968 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_UART_Transmit+0x40>
 800387a:	2302      	movs	r3, #2
 800387c:	e074      	b.n	8003968 <HAL_UART_Transmit+0x12a>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2221      	movs	r2, #33	; 0x21
 8003890:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003894:	f7fd fcf2 	bl	800127c <HAL_GetTick>
 8003898:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	88fa      	ldrh	r2, [r7, #6]
 800389e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80038ae:	e042      	b.n	8003936 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c6:	d122      	bne.n	800390e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2200      	movs	r2, #0
 80038d0:	2180      	movs	r1, #128	; 0x80
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f9c0 	bl	8003c58 <UART_WaitOnFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e042      	b.n	8003968 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038f4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d103      	bne.n	8003906 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	3302      	adds	r3, #2
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	e017      	b.n	8003936 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	3301      	adds	r3, #1
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	e013      	b.n	8003936 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2200      	movs	r2, #0
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f99d 	bl	8003c58 <UART_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e01f      	b.n	8003968 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	60ba      	str	r2, [r7, #8]
 800392e:	781a      	ldrb	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1b7      	bne.n	80038b0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2200      	movs	r2, #0
 8003948:	2140      	movs	r1, #64	; 0x40
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f984 	bl	8003c58 <UART_WaitOnFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e006      	b.n	8003968 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	e000      	b.n	8003968 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003966:	2302      	movs	r3, #2
  }
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	4613      	mov	r3, r2
 800397c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b20      	cmp	r3, #32
 8003988:	d140      	bne.n	8003a0c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_UART_Receive_IT+0x26>
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e039      	b.n	8003a0e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_UART_Receive_IT+0x38>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e032      	b.n	8003a0e <HAL_UART_Receive_IT+0x9e>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	88fa      	ldrh	r2, [r7, #6]
 80039ba:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2222      	movs	r2, #34	; 0x22
 80039cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0220 	orr.w	r2, r2, #32
 8003a06:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e000      	b.n	8003a0e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003a0c:	2302      	movs	r3, #2
  }
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10d      	bne.n	8003a6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_UART_IRQHandler+0x52>
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f9e0 	bl	8003e2c <UART_Receive_IT>
      return;
 8003a6c:	e0d0      	b.n	8003c10 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80b0 	beq.w	8003bd6 <HAL_UART_IRQHandler+0x1ba>
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d105      	bne.n	8003a8c <HAL_UART_IRQHandler+0x70>
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80a5 	beq.w	8003bd6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_UART_IRQHandler+0x90>
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	f043 0201 	orr.w	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_UART_IRQHandler+0xb0>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac4:	f043 0202 	orr.w	r2, r3, #2
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_UART_IRQHandler+0xd0>
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae4:	f043 0204 	orr.w	r2, r3, #4
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00f      	beq.n	8003b16 <HAL_UART_IRQHandler+0xfa>
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d104      	bne.n	8003b0a <HAL_UART_IRQHandler+0xee>
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	f043 0208 	orr.w	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d077      	beq.n	8003c0e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <HAL_UART_IRQHandler+0x11c>
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f97a 	bl	8003e2c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	bf0c      	ite	eq
 8003b46:	2301      	moveq	r3, #1
 8003b48:	2300      	movne	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d102      	bne.n	8003b60 <HAL_UART_IRQHandler+0x144>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d031      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f8c3 	bl	8003cec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d123      	bne.n	8003bbc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b82:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d013      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <HAL_UART_IRQHandler+0x1fc>)
 8003b92:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fd fd93 	bl	80016c4 <HAL_DMA_Abort_IT>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d016      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb2:	e00e      	b.n	8003bd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f845 	bl	8003c44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bba:	e00a      	b.n	8003bd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f841 	bl	8003c44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc2:	e006      	b.n	8003bd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f83d 	bl	8003c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003bd0:	e01d      	b.n	8003c0e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd2:	bf00      	nop
    return;
 8003bd4:	e01b      	b.n	8003c0e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x1d6>
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f8b0 	bl	8003d50 <UART_Transmit_IT>
    return;
 8003bf0:	e00e      	b.n	8003c10 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <HAL_UART_IRQHandler+0x1f4>
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d004      	beq.n	8003c10 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f8f8 	bl	8003dfc <UART_EndTransmit_IT>
    return;
 8003c0c:	e000      	b.n	8003c10 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003c0e:	bf00      	nop
  }
}
 8003c10:	3720      	adds	r7, #32
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	08003d29 	.word	0x08003d29

08003c1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c68:	e02c      	b.n	8003cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d028      	beq.n	8003cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d007      	beq.n	8003c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c78:	f7fd fb00 	bl	800127c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d21d      	bcs.n	8003cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c96:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e00f      	b.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2301      	moveq	r3, #1
 8003cd6:	2300      	movne	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d0c3      	beq.n	8003c6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7ff ff7e 	bl	8003c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b21      	cmp	r3, #33	; 0x21
 8003d62:	d144      	bne.n	8003dee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6c:	d11a      	bne.n	8003da4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d82:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	1c9a      	adds	r2, r3, #2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	621a      	str	r2, [r3, #32]
 8003d96:	e00e      	b.n	8003db6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	621a      	str	r2, [r3, #32]
 8003da2:	e008      	b.n	8003db6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	1c59      	adds	r1, r3, #1
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6211      	str	r1, [r2, #32]
 8003dae:	781a      	ldrb	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003de8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e000      	b.n	8003df0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003dee:	2302      	movs	r3, #2
  }
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e12:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff fefd 	bl	8003c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b22      	cmp	r3, #34	; 0x22
 8003e3e:	d171      	bne.n	8003f24 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e48:	d123      	bne.n	8003e92 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10e      	bne.n	8003e76 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	1c9a      	adds	r2, r3, #2
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28
 8003e74:	e029      	b.n	8003eca <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e90:	e01b      	b.n	8003eca <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10a      	bne.n	8003eb0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6858      	ldr	r0, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	1c59      	adds	r1, r3, #1
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6291      	str	r1, [r2, #40]	; 0x28
 8003eaa:	b2c2      	uxtb	r2, r0
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	e00c      	b.n	8003eca <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	1c58      	adds	r0, r3, #1
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	6288      	str	r0, [r1, #40]	; 0x28
 8003ec2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d120      	bne.n	8003f20 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0220 	bic.w	r2, r2, #32
 8003eec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003efc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0201 	bic.w	r2, r2, #1
 8003f0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff fe8a 	bl	8003c30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	e002      	b.n	8003f26 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e000      	b.n	8003f26 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
  }
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f34:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f3e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f4a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f4e:	68d9      	ldr	r1, [r3, #12]
 8003f50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	ea40 0301 	orr.w	r3, r0, r1
 8003f5a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	431a      	orrs	r2, r3
 8003f72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8003f7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f8a:	f021 010c 	bic.w	r1, r1, #12
 8003f8e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fa8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fac:	6999      	ldr	r1, [r3, #24]
 8003fae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	ea40 0301 	orr.w	r3, r0, r1
 8003fb8:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc4:	f040 824a 	bne.w	800445c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b96      	ldr	r3, [pc, #600]	; (8004228 <UART_SetConfig+0x2f8>)
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d006      	beq.n	8003fe2 <UART_SetConfig+0xb2>
 8003fd4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4b94      	ldr	r3, [pc, #592]	; (800422c <UART_SetConfig+0x2fc>)
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	f040 8129 	bne.w	8004234 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fe2:	f7fe fc2b 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8003fe6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8003ff4:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8003ff8:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8003ffc:	4622      	mov	r2, r4
 8003ffe:	462b      	mov	r3, r5
 8004000:	1891      	adds	r1, r2, r2
 8004002:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004006:	415b      	adcs	r3, r3
 8004008:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800400c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004010:	4621      	mov	r1, r4
 8004012:	1851      	adds	r1, r2, r1
 8004014:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004018:	4629      	mov	r1, r5
 800401a:	414b      	adcs	r3, r1
 800401c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 800402c:	4649      	mov	r1, r9
 800402e:	00cb      	lsls	r3, r1, #3
 8004030:	4641      	mov	r1, r8
 8004032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004036:	4641      	mov	r1, r8
 8004038:	00ca      	lsls	r2, r1, #3
 800403a:	4610      	mov	r0, r2
 800403c:	4619      	mov	r1, r3
 800403e:	4603      	mov	r3, r0
 8004040:	4622      	mov	r2, r4
 8004042:	189b      	adds	r3, r3, r2
 8004044:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004048:	462b      	mov	r3, r5
 800404a:	460a      	mov	r2, r1
 800404c:	eb42 0303 	adc.w	r3, r2, r3
 8004050:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004054:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004060:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004064:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004068:	460b      	mov	r3, r1
 800406a:	18db      	adds	r3, r3, r3
 800406c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004070:	4613      	mov	r3, r2
 8004072:	eb42 0303 	adc.w	r3, r2, r3
 8004076:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800407a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800407e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004082:	f7fc f8ab 	bl	80001dc <__aeabi_uldivmod>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4b69      	ldr	r3, [pc, #420]	; (8004230 <UART_SetConfig+0x300>)
 800408c:	fba3 2302 	umull	r2, r3, r3, r2
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	011c      	lsls	r4, r3, #4
 8004094:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004098:	2200      	movs	r2, #0
 800409a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800409e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80040a2:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80040a6:	4642      	mov	r2, r8
 80040a8:	464b      	mov	r3, r9
 80040aa:	1891      	adds	r1, r2, r2
 80040ac:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80040b0:	415b      	adcs	r3, r3
 80040b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80040b6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80040ba:	4641      	mov	r1, r8
 80040bc:	1851      	adds	r1, r2, r1
 80040be:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80040c2:	4649      	mov	r1, r9
 80040c4:	414b      	adcs	r3, r1
 80040c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80040d6:	4659      	mov	r1, fp
 80040d8:	00cb      	lsls	r3, r1, #3
 80040da:	4651      	mov	r1, sl
 80040dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040e0:	4651      	mov	r1, sl
 80040e2:	00ca      	lsls	r2, r1, #3
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	4603      	mov	r3, r0
 80040ea:	4642      	mov	r2, r8
 80040ec:	189b      	adds	r3, r3, r2
 80040ee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80040f2:	464b      	mov	r3, r9
 80040f4:	460a      	mov	r2, r1
 80040f6:	eb42 0303 	adc.w	r3, r2, r3
 80040fa:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80040fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800410a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800410e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8004112:	460b      	mov	r3, r1
 8004114:	18db      	adds	r3, r3, r3
 8004116:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800411a:	4613      	mov	r3, r2
 800411c:	eb42 0303 	adc.w	r3, r2, r3
 8004120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004124:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004128:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800412c:	f7fc f856 	bl	80001dc <__aeabi_uldivmod>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4611      	mov	r1, r2
 8004136:	4b3e      	ldr	r3, [pc, #248]	; (8004230 <UART_SetConfig+0x300>)
 8004138:	fba3 2301 	umull	r2, r3, r3, r1
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	2264      	movs	r2, #100	; 0x64
 8004140:	fb02 f303 	mul.w	r3, r2, r3
 8004144:	1acb      	subs	r3, r1, r3
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800414c:	4b38      	ldr	r3, [pc, #224]	; (8004230 <UART_SetConfig+0x300>)
 800414e:	fba3 2302 	umull	r2, r3, r3, r2
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800415a:	441c      	add	r4, r3
 800415c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004160:	2200      	movs	r2, #0
 8004162:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004166:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800416a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800416e:	4642      	mov	r2, r8
 8004170:	464b      	mov	r3, r9
 8004172:	1891      	adds	r1, r2, r2
 8004174:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004178:	415b      	adcs	r3, r3
 800417a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800417e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004182:	4641      	mov	r1, r8
 8004184:	1851      	adds	r1, r2, r1
 8004186:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800418a:	4649      	mov	r1, r9
 800418c:	414b      	adcs	r3, r1
 800418e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800419e:	4659      	mov	r1, fp
 80041a0:	00cb      	lsls	r3, r1, #3
 80041a2:	4651      	mov	r1, sl
 80041a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a8:	4651      	mov	r1, sl
 80041aa:	00ca      	lsls	r2, r1, #3
 80041ac:	4610      	mov	r0, r2
 80041ae:	4619      	mov	r1, r3
 80041b0:	4603      	mov	r3, r0
 80041b2:	4642      	mov	r2, r8
 80041b4:	189b      	adds	r3, r3, r2
 80041b6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80041ba:	464b      	mov	r3, r9
 80041bc:	460a      	mov	r2, r1
 80041be:	eb42 0303 	adc.w	r3, r2, r3
 80041c2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80041c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80041d2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80041d6:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80041da:	460b      	mov	r3, r1
 80041dc:	18db      	adds	r3, r3, r3
 80041de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041e2:	4613      	mov	r3, r2
 80041e4:	eb42 0303 	adc.w	r3, r2, r3
 80041e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041ec:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80041f0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80041f4:	f7fb fff2 	bl	80001dc <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <UART_SetConfig+0x300>)
 80041fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2164      	movs	r1, #100	; 0x64
 8004206:	fb01 f303 	mul.w	r3, r1, r3
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	3332      	adds	r3, #50	; 0x32
 8004210:	4a07      	ldr	r2, [pc, #28]	; (8004230 <UART_SetConfig+0x300>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	f003 0207 	and.w	r2, r3, #7
 800421c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4422      	add	r2, r4
 8004224:	609a      	str	r2, [r3, #8]
 8004226:	e349      	b.n	80048bc <UART_SetConfig+0x98c>
 8004228:	40011000 	.word	0x40011000
 800422c:	40011400 	.word	0x40011400
 8004230:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004234:	f7fe faee 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 8004238:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800423c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004240:	2200      	movs	r2, #0
 8004242:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004246:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800424a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800424e:	4622      	mov	r2, r4
 8004250:	462b      	mov	r3, r5
 8004252:	1891      	adds	r1, r2, r2
 8004254:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004258:	415b      	adcs	r3, r3
 800425a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800425e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004262:	4621      	mov	r1, r4
 8004264:	eb12 0a01 	adds.w	sl, r2, r1
 8004268:	4629      	mov	r1, r5
 800426a:	eb43 0b01 	adc.w	fp, r3, r1
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800427a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800427e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004282:	4692      	mov	sl, r2
 8004284:	469b      	mov	fp, r3
 8004286:	4623      	mov	r3, r4
 8004288:	eb1a 0303 	adds.w	r3, sl, r3
 800428c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004290:	462b      	mov	r3, r5
 8004292:	eb4b 0303 	adc.w	r3, fp, r3
 8004296:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800429a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80042a6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80042aa:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80042ae:	460b      	mov	r3, r1
 80042b0:	18db      	adds	r3, r3, r3
 80042b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042b6:	4613      	mov	r3, r2
 80042b8:	eb42 0303 	adc.w	r3, r2, r3
 80042bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042c0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80042c4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80042c8:	f7fb ff88 	bl	80001dc <__aeabi_uldivmod>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4b61      	ldr	r3, [pc, #388]	; (8004458 <UART_SetConfig+0x528>)
 80042d2:	fba3 2302 	umull	r2, r3, r3, r2
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	011c      	lsls	r4, r3, #4
 80042da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042de:	2200      	movs	r2, #0
 80042e0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80042e4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80042e8:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80042ec:	4642      	mov	r2, r8
 80042ee:	464b      	mov	r3, r9
 80042f0:	1891      	adds	r1, r2, r2
 80042f2:	67b9      	str	r1, [r7, #120]	; 0x78
 80042f4:	415b      	adcs	r3, r3
 80042f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042f8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80042fc:	4641      	mov	r1, r8
 80042fe:	1851      	adds	r1, r2, r1
 8004300:	6739      	str	r1, [r7, #112]	; 0x70
 8004302:	4649      	mov	r1, r9
 8004304:	414b      	adcs	r3, r1
 8004306:	677b      	str	r3, [r7, #116]	; 0x74
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004314:	4659      	mov	r1, fp
 8004316:	00cb      	lsls	r3, r1, #3
 8004318:	4651      	mov	r1, sl
 800431a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800431e:	4651      	mov	r1, sl
 8004320:	00ca      	lsls	r2, r1, #3
 8004322:	4610      	mov	r0, r2
 8004324:	4619      	mov	r1, r3
 8004326:	4603      	mov	r3, r0
 8004328:	4642      	mov	r2, r8
 800432a:	189b      	adds	r3, r3, r2
 800432c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004330:	464b      	mov	r3, r9
 8004332:	460a      	mov	r2, r1
 8004334:	eb42 0303 	adc.w	r3, r2, r3
 8004338:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800433c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004348:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800434c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8004350:	460b      	mov	r3, r1
 8004352:	18db      	adds	r3, r3, r3
 8004354:	66bb      	str	r3, [r7, #104]	; 0x68
 8004356:	4613      	mov	r3, r2
 8004358:	eb42 0303 	adc.w	r3, r2, r3
 800435c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800435e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004362:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004366:	f7fb ff39 	bl	80001dc <__aeabi_uldivmod>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4611      	mov	r1, r2
 8004370:	4b39      	ldr	r3, [pc, #228]	; (8004458 <UART_SetConfig+0x528>)
 8004372:	fba3 2301 	umull	r2, r3, r3, r1
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	2264      	movs	r2, #100	; 0x64
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	1acb      	subs	r3, r1, r3
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004386:	4b34      	ldr	r3, [pc, #208]	; (8004458 <UART_SetConfig+0x528>)
 8004388:	fba3 2302 	umull	r2, r3, r3, r2
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004394:	441c      	add	r4, r3
 8004396:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80043a0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80043a4:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80043a8:	4642      	mov	r2, r8
 80043aa:	464b      	mov	r3, r9
 80043ac:	1891      	adds	r1, r2, r2
 80043ae:	6639      	str	r1, [r7, #96]	; 0x60
 80043b0:	415b      	adcs	r3, r3
 80043b2:	667b      	str	r3, [r7, #100]	; 0x64
 80043b4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80043b8:	4641      	mov	r1, r8
 80043ba:	1851      	adds	r1, r2, r1
 80043bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80043be:	4649      	mov	r1, r9
 80043c0:	414b      	adcs	r3, r1
 80043c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80043d0:	4659      	mov	r1, fp
 80043d2:	00cb      	lsls	r3, r1, #3
 80043d4:	4651      	mov	r1, sl
 80043d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043da:	4651      	mov	r1, sl
 80043dc:	00ca      	lsls	r2, r1, #3
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	4642      	mov	r2, r8
 80043e6:	189b      	adds	r3, r3, r2
 80043e8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80043ec:	464b      	mov	r3, r9
 80043ee:	460a      	mov	r2, r1
 80043f0:	eb42 0303 	adc.w	r3, r2, r3
 80043f4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80043f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004404:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004408:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 800440c:	460b      	mov	r3, r1
 800440e:	18db      	adds	r3, r3, r3
 8004410:	653b      	str	r3, [r7, #80]	; 0x50
 8004412:	4613      	mov	r3, r2
 8004414:	eb42 0303 	adc.w	r3, r2, r3
 8004418:	657b      	str	r3, [r7, #84]	; 0x54
 800441a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800441e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004422:	f7fb fedb 	bl	80001dc <__aeabi_uldivmod>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <UART_SetConfig+0x528>)
 800442c:	fba3 1302 	umull	r1, r3, r3, r2
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	2164      	movs	r1, #100	; 0x64
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	3332      	adds	r3, #50	; 0x32
 800443e:	4a06      	ldr	r2, [pc, #24]	; (8004458 <UART_SetConfig+0x528>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	095b      	lsrs	r3, r3, #5
 8004446:	f003 0207 	and.w	r2, r3, #7
 800444a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4422      	add	r2, r4
 8004452:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004454:	e232      	b.n	80048bc <UART_SetConfig+0x98c>
 8004456:	bf00      	nop
 8004458:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800445c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b8d      	ldr	r3, [pc, #564]	; (8004698 <UART_SetConfig+0x768>)
 8004464:	429a      	cmp	r2, r3
 8004466:	d006      	beq.n	8004476 <UART_SetConfig+0x546>
 8004468:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b8b      	ldr	r3, [pc, #556]	; (800469c <UART_SetConfig+0x76c>)
 8004470:	429a      	cmp	r2, r3
 8004472:	f040 8117 	bne.w	80046a4 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004476:	f7fe f9e1 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 800447a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800447e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004482:	2200      	movs	r2, #0
 8004484:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004488:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800448c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004490:	4622      	mov	r2, r4
 8004492:	462b      	mov	r3, r5
 8004494:	1891      	adds	r1, r2, r2
 8004496:	64b9      	str	r1, [r7, #72]	; 0x48
 8004498:	415b      	adcs	r3, r3
 800449a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800449c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044a0:	4621      	mov	r1, r4
 80044a2:	eb12 0801 	adds.w	r8, r2, r1
 80044a6:	4629      	mov	r1, r5
 80044a8:	eb43 0901 	adc.w	r9, r3, r1
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044c0:	4690      	mov	r8, r2
 80044c2:	4699      	mov	r9, r3
 80044c4:	4623      	mov	r3, r4
 80044c6:	eb18 0303 	adds.w	r3, r8, r3
 80044ca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80044ce:	462b      	mov	r3, r5
 80044d0:	eb49 0303 	adc.w	r3, r9, r3
 80044d4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80044d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80044e4:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80044f4:	4629      	mov	r1, r5
 80044f6:	008b      	lsls	r3, r1, #2
 80044f8:	4621      	mov	r1, r4
 80044fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044fe:	4621      	mov	r1, r4
 8004500:	008a      	lsls	r2, r1, #2
 8004502:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8004506:	f7fb fe69 	bl	80001dc <__aeabi_uldivmod>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4b64      	ldr	r3, [pc, #400]	; (80046a0 <UART_SetConfig+0x770>)
 8004510:	fba3 2302 	umull	r2, r3, r3, r2
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	011c      	lsls	r4, r3, #4
 8004518:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800451c:	2200      	movs	r2, #0
 800451e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004522:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004526:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800452a:	4642      	mov	r2, r8
 800452c:	464b      	mov	r3, r9
 800452e:	1891      	adds	r1, r2, r2
 8004530:	6439      	str	r1, [r7, #64]	; 0x40
 8004532:	415b      	adcs	r3, r3
 8004534:	647b      	str	r3, [r7, #68]	; 0x44
 8004536:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800453a:	4641      	mov	r1, r8
 800453c:	1851      	adds	r1, r2, r1
 800453e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004540:	4649      	mov	r1, r9
 8004542:	414b      	adcs	r3, r1
 8004544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8004552:	4659      	mov	r1, fp
 8004554:	00cb      	lsls	r3, r1, #3
 8004556:	4651      	mov	r1, sl
 8004558:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455c:	4651      	mov	r1, sl
 800455e:	00ca      	lsls	r2, r1, #3
 8004560:	4610      	mov	r0, r2
 8004562:	4619      	mov	r1, r3
 8004564:	4603      	mov	r3, r0
 8004566:	4642      	mov	r2, r8
 8004568:	189b      	adds	r3, r3, r2
 800456a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800456e:	464b      	mov	r3, r9
 8004570:	460a      	mov	r2, r1
 8004572:	eb42 0303 	adc.w	r3, r2, r3
 8004576:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800457a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004586:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8004596:	4649      	mov	r1, r9
 8004598:	008b      	lsls	r3, r1, #2
 800459a:	4641      	mov	r1, r8
 800459c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045a0:	4641      	mov	r1, r8
 80045a2:	008a      	lsls	r2, r1, #2
 80045a4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80045a8:	f7fb fe18 	bl	80001dc <__aeabi_uldivmod>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4b3b      	ldr	r3, [pc, #236]	; (80046a0 <UART_SetConfig+0x770>)
 80045b2:	fba3 1302 	umull	r1, r3, r3, r2
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	2164      	movs	r1, #100	; 0x64
 80045ba:	fb01 f303 	mul.w	r3, r1, r3
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	3332      	adds	r3, #50	; 0x32
 80045c4:	4a36      	ldr	r2, [pc, #216]	; (80046a0 <UART_SetConfig+0x770>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045d0:	441c      	add	r4, r3
 80045d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045d6:	2200      	movs	r2, #0
 80045d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80045dc:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80045e0:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 80045e4:	4642      	mov	r2, r8
 80045e6:	464b      	mov	r3, r9
 80045e8:	1891      	adds	r1, r2, r2
 80045ea:	6339      	str	r1, [r7, #48]	; 0x30
 80045ec:	415b      	adcs	r3, r3
 80045ee:	637b      	str	r3, [r7, #52]	; 0x34
 80045f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045f4:	4641      	mov	r1, r8
 80045f6:	1851      	adds	r1, r2, r1
 80045f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80045fa:	4649      	mov	r1, r9
 80045fc:	414b      	adcs	r3, r1
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800460c:	4659      	mov	r1, fp
 800460e:	00cb      	lsls	r3, r1, #3
 8004610:	4651      	mov	r1, sl
 8004612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004616:	4651      	mov	r1, sl
 8004618:	00ca      	lsls	r2, r1, #3
 800461a:	4610      	mov	r0, r2
 800461c:	4619      	mov	r1, r3
 800461e:	4603      	mov	r3, r0
 8004620:	4642      	mov	r2, r8
 8004622:	189b      	adds	r3, r3, r2
 8004624:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004628:	464b      	mov	r3, r9
 800462a:	460a      	mov	r2, r1
 800462c:	eb42 0303 	adc.w	r3, r2, r3
 8004630:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004634:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004640:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8004650:	4649      	mov	r1, r9
 8004652:	008b      	lsls	r3, r1, #2
 8004654:	4641      	mov	r1, r8
 8004656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800465a:	4641      	mov	r1, r8
 800465c:	008a      	lsls	r2, r1, #2
 800465e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8004662:	f7fb fdbb 	bl	80001dc <__aeabi_uldivmod>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <UART_SetConfig+0x770>)
 800466c:	fba3 1302 	umull	r1, r3, r3, r2
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	2164      	movs	r1, #100	; 0x64
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	3332      	adds	r3, #50	; 0x32
 800467e:	4a08      	ldr	r2, [pc, #32]	; (80046a0 <UART_SetConfig+0x770>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	f003 020f 	and.w	r2, r3, #15
 800468a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4422      	add	r2, r4
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	e112      	b.n	80048bc <UART_SetConfig+0x98c>
 8004696:	bf00      	nop
 8004698:	40011000 	.word	0x40011000
 800469c:	40011400 	.word	0x40011400
 80046a0:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80046a4:	f7fe f8b6 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 80046a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80046b6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80046ba:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80046be:	4642      	mov	r2, r8
 80046c0:	464b      	mov	r3, r9
 80046c2:	1891      	adds	r1, r2, r2
 80046c4:	6239      	str	r1, [r7, #32]
 80046c6:	415b      	adcs	r3, r3
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046ce:	4641      	mov	r1, r8
 80046d0:	1854      	adds	r4, r2, r1
 80046d2:	4649      	mov	r1, r9
 80046d4:	eb43 0501 	adc.w	r5, r3, r1
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	00eb      	lsls	r3, r5, #3
 80046e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046e6:	00e2      	lsls	r2, r4, #3
 80046e8:	4614      	mov	r4, r2
 80046ea:	461d      	mov	r5, r3
 80046ec:	4643      	mov	r3, r8
 80046ee:	18e3      	adds	r3, r4, r3
 80046f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80046f4:	464b      	mov	r3, r9
 80046f6:	eb45 0303 	adc.w	r3, r5, r3
 80046fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80046fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800470a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800471a:	4629      	mov	r1, r5
 800471c:	008b      	lsls	r3, r1, #2
 800471e:	4621      	mov	r1, r4
 8004720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004724:	4621      	mov	r1, r4
 8004726:	008a      	lsls	r2, r1, #2
 8004728:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800472c:	f7fb fd56 	bl	80001dc <__aeabi_uldivmod>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4b64      	ldr	r3, [pc, #400]	; (80048c8 <UART_SetConfig+0x998>)
 8004736:	fba3 2302 	umull	r2, r3, r3, r2
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	011c      	lsls	r4, r3, #4
 800473e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004742:	2200      	movs	r2, #0
 8004744:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004748:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800474c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004750:	4642      	mov	r2, r8
 8004752:	464b      	mov	r3, r9
 8004754:	1891      	adds	r1, r2, r2
 8004756:	61b9      	str	r1, [r7, #24]
 8004758:	415b      	adcs	r3, r3
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004760:	4641      	mov	r1, r8
 8004762:	1851      	adds	r1, r2, r1
 8004764:	6139      	str	r1, [r7, #16]
 8004766:	4649      	mov	r1, r9
 8004768:	414b      	adcs	r3, r1
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004778:	4659      	mov	r1, fp
 800477a:	00cb      	lsls	r3, r1, #3
 800477c:	4651      	mov	r1, sl
 800477e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004782:	4651      	mov	r1, sl
 8004784:	00ca      	lsls	r2, r1, #3
 8004786:	4610      	mov	r0, r2
 8004788:	4619      	mov	r1, r3
 800478a:	4603      	mov	r3, r0
 800478c:	4642      	mov	r2, r8
 800478e:	189b      	adds	r3, r3, r2
 8004790:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004794:	464b      	mov	r3, r9
 8004796:	460a      	mov	r2, r1
 8004798:	eb42 0303 	adc.w	r3, r2, r3
 800479c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80047a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80047ac:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80047bc:	4649      	mov	r1, r9
 80047be:	008b      	lsls	r3, r1, #2
 80047c0:	4641      	mov	r1, r8
 80047c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047c6:	4641      	mov	r1, r8
 80047c8:	008a      	lsls	r2, r1, #2
 80047ca:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80047ce:	f7fb fd05 	bl	80001dc <__aeabi_uldivmod>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4b3c      	ldr	r3, [pc, #240]	; (80048c8 <UART_SetConfig+0x998>)
 80047d8:	fba3 1302 	umull	r1, r3, r3, r2
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	2164      	movs	r1, #100	; 0x64
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	3332      	adds	r3, #50	; 0x32
 80047ea:	4a37      	ldr	r2, [pc, #220]	; (80048c8 <UART_SetConfig+0x998>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	095b      	lsrs	r3, r3, #5
 80047f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f6:	441c      	add	r4, r3
 80047f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047fc:	2200      	movs	r2, #0
 80047fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004802:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004806:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800480a:	4642      	mov	r2, r8
 800480c:	464b      	mov	r3, r9
 800480e:	1891      	adds	r1, r2, r2
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	415b      	adcs	r3, r3
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800481a:	4641      	mov	r1, r8
 800481c:	1851      	adds	r1, r2, r1
 800481e:	6039      	str	r1, [r7, #0]
 8004820:	4649      	mov	r1, r9
 8004822:	414b      	adcs	r3, r1
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004832:	4659      	mov	r1, fp
 8004834:	00cb      	lsls	r3, r1, #3
 8004836:	4651      	mov	r1, sl
 8004838:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800483c:	4651      	mov	r1, sl
 800483e:	00ca      	lsls	r2, r1, #3
 8004840:	4610      	mov	r0, r2
 8004842:	4619      	mov	r1, r3
 8004844:	4603      	mov	r3, r0
 8004846:	4642      	mov	r2, r8
 8004848:	189b      	adds	r3, r3, r2
 800484a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800484e:	464b      	mov	r3, r9
 8004850:	460a      	mov	r2, r1
 8004852:	eb42 0303 	adc.w	r3, r2, r3
 8004856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800485a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004866:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004876:	4649      	mov	r1, r9
 8004878:	008b      	lsls	r3, r1, #2
 800487a:	4641      	mov	r1, r8
 800487c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004880:	4641      	mov	r1, r8
 8004882:	008a      	lsls	r2, r1, #2
 8004884:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004888:	f7fb fca8 	bl	80001dc <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <UART_SetConfig+0x998>)
 8004892:	fba3 1302 	umull	r1, r3, r3, r2
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	2164      	movs	r1, #100	; 0x64
 800489a:	fb01 f303 	mul.w	r3, r1, r3
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	3332      	adds	r3, #50	; 0x32
 80048a4:	4a08      	ldr	r2, [pc, #32]	; (80048c8 <UART_SetConfig+0x998>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	f003 020f 	and.w	r2, r3, #15
 80048b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4422      	add	r2, r4
 80048b8:	609a      	str	r2, [r3, #8]
}
 80048ba:	e7ff      	b.n	80048bc <UART_SetConfig+0x98c>
 80048bc:	bf00      	nop
 80048be:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80048c2:	46bd      	mov	sp, r7
 80048c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048c8:	51eb851f 	.word	0x51eb851f

080048cc <__errno>:
 80048cc:	4b01      	ldr	r3, [pc, #4]	; (80048d4 <__errno+0x8>)
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	2000000c 	.word	0x2000000c

080048d8 <__libc_init_array>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	4d0d      	ldr	r5, [pc, #52]	; (8004910 <__libc_init_array+0x38>)
 80048dc:	4c0d      	ldr	r4, [pc, #52]	; (8004914 <__libc_init_array+0x3c>)
 80048de:	1b64      	subs	r4, r4, r5
 80048e0:	10a4      	asrs	r4, r4, #2
 80048e2:	2600      	movs	r6, #0
 80048e4:	42a6      	cmp	r6, r4
 80048e6:	d109      	bne.n	80048fc <__libc_init_array+0x24>
 80048e8:	4d0b      	ldr	r5, [pc, #44]	; (8004918 <__libc_init_array+0x40>)
 80048ea:	4c0c      	ldr	r4, [pc, #48]	; (800491c <__libc_init_array+0x44>)
 80048ec:	f000 fd34 	bl	8005358 <_init>
 80048f0:	1b64      	subs	r4, r4, r5
 80048f2:	10a4      	asrs	r4, r4, #2
 80048f4:	2600      	movs	r6, #0
 80048f6:	42a6      	cmp	r6, r4
 80048f8:	d105      	bne.n	8004906 <__libc_init_array+0x2e>
 80048fa:	bd70      	pop	{r4, r5, r6, pc}
 80048fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004900:	4798      	blx	r3
 8004902:	3601      	adds	r6, #1
 8004904:	e7ee      	b.n	80048e4 <__libc_init_array+0xc>
 8004906:	f855 3b04 	ldr.w	r3, [r5], #4
 800490a:	4798      	blx	r3
 800490c:	3601      	adds	r6, #1
 800490e:	e7f2      	b.n	80048f6 <__libc_init_array+0x1e>
 8004910:	080054d4 	.word	0x080054d4
 8004914:	080054d4 	.word	0x080054d4
 8004918:	080054d4 	.word	0x080054d4
 800491c:	080054d8 	.word	0x080054d8

08004920 <memcpy>:
 8004920:	440a      	add	r2, r1
 8004922:	4291      	cmp	r1, r2
 8004924:	f100 33ff 	add.w	r3, r0, #4294967295
 8004928:	d100      	bne.n	800492c <memcpy+0xc>
 800492a:	4770      	bx	lr
 800492c:	b510      	push	{r4, lr}
 800492e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004936:	4291      	cmp	r1, r2
 8004938:	d1f9      	bne.n	800492e <memcpy+0xe>
 800493a:	bd10      	pop	{r4, pc}

0800493c <memset>:
 800493c:	4402      	add	r2, r0
 800493e:	4603      	mov	r3, r0
 8004940:	4293      	cmp	r3, r2
 8004942:	d100      	bne.n	8004946 <memset+0xa>
 8004944:	4770      	bx	lr
 8004946:	f803 1b01 	strb.w	r1, [r3], #1
 800494a:	e7f9      	b.n	8004940 <memset+0x4>

0800494c <_puts_r>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	460e      	mov	r6, r1
 8004950:	4605      	mov	r5, r0
 8004952:	b118      	cbz	r0, 800495c <_puts_r+0x10>
 8004954:	6983      	ldr	r3, [r0, #24]
 8004956:	b90b      	cbnz	r3, 800495c <_puts_r+0x10>
 8004958:	f000 fa50 	bl	8004dfc <__sinit>
 800495c:	69ab      	ldr	r3, [r5, #24]
 800495e:	68ac      	ldr	r4, [r5, #8]
 8004960:	b913      	cbnz	r3, 8004968 <_puts_r+0x1c>
 8004962:	4628      	mov	r0, r5
 8004964:	f000 fa4a 	bl	8004dfc <__sinit>
 8004968:	4b2c      	ldr	r3, [pc, #176]	; (8004a1c <_puts_r+0xd0>)
 800496a:	429c      	cmp	r4, r3
 800496c:	d120      	bne.n	80049b0 <_puts_r+0x64>
 800496e:	686c      	ldr	r4, [r5, #4]
 8004970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004972:	07db      	lsls	r3, r3, #31
 8004974:	d405      	bmi.n	8004982 <_puts_r+0x36>
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	0598      	lsls	r0, r3, #22
 800497a:	d402      	bmi.n	8004982 <_puts_r+0x36>
 800497c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800497e:	f000 fadb 	bl	8004f38 <__retarget_lock_acquire_recursive>
 8004982:	89a3      	ldrh	r3, [r4, #12]
 8004984:	0719      	lsls	r1, r3, #28
 8004986:	d51d      	bpl.n	80049c4 <_puts_r+0x78>
 8004988:	6923      	ldr	r3, [r4, #16]
 800498a:	b1db      	cbz	r3, 80049c4 <_puts_r+0x78>
 800498c:	3e01      	subs	r6, #1
 800498e:	68a3      	ldr	r3, [r4, #8]
 8004990:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004994:	3b01      	subs	r3, #1
 8004996:	60a3      	str	r3, [r4, #8]
 8004998:	bb39      	cbnz	r1, 80049ea <_puts_r+0x9e>
 800499a:	2b00      	cmp	r3, #0
 800499c:	da38      	bge.n	8004a10 <_puts_r+0xc4>
 800499e:	4622      	mov	r2, r4
 80049a0:	210a      	movs	r1, #10
 80049a2:	4628      	mov	r0, r5
 80049a4:	f000 f850 	bl	8004a48 <__swbuf_r>
 80049a8:	3001      	adds	r0, #1
 80049aa:	d011      	beq.n	80049d0 <_puts_r+0x84>
 80049ac:	250a      	movs	r5, #10
 80049ae:	e011      	b.n	80049d4 <_puts_r+0x88>
 80049b0:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <_puts_r+0xd4>)
 80049b2:	429c      	cmp	r4, r3
 80049b4:	d101      	bne.n	80049ba <_puts_r+0x6e>
 80049b6:	68ac      	ldr	r4, [r5, #8]
 80049b8:	e7da      	b.n	8004970 <_puts_r+0x24>
 80049ba:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <_puts_r+0xd8>)
 80049bc:	429c      	cmp	r4, r3
 80049be:	bf08      	it	eq
 80049c0:	68ec      	ldreq	r4, [r5, #12]
 80049c2:	e7d5      	b.n	8004970 <_puts_r+0x24>
 80049c4:	4621      	mov	r1, r4
 80049c6:	4628      	mov	r0, r5
 80049c8:	f000 f890 	bl	8004aec <__swsetup_r>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d0dd      	beq.n	800498c <_puts_r+0x40>
 80049d0:	f04f 35ff 	mov.w	r5, #4294967295
 80049d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049d6:	07da      	lsls	r2, r3, #31
 80049d8:	d405      	bmi.n	80049e6 <_puts_r+0x9a>
 80049da:	89a3      	ldrh	r3, [r4, #12]
 80049dc:	059b      	lsls	r3, r3, #22
 80049de:	d402      	bmi.n	80049e6 <_puts_r+0x9a>
 80049e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049e2:	f000 faaa 	bl	8004f3a <__retarget_lock_release_recursive>
 80049e6:	4628      	mov	r0, r5
 80049e8:	bd70      	pop	{r4, r5, r6, pc}
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	da04      	bge.n	80049f8 <_puts_r+0xac>
 80049ee:	69a2      	ldr	r2, [r4, #24]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	dc06      	bgt.n	8004a02 <_puts_r+0xb6>
 80049f4:	290a      	cmp	r1, #10
 80049f6:	d004      	beq.n	8004a02 <_puts_r+0xb6>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	6022      	str	r2, [r4, #0]
 80049fe:	7019      	strb	r1, [r3, #0]
 8004a00:	e7c5      	b.n	800498e <_puts_r+0x42>
 8004a02:	4622      	mov	r2, r4
 8004a04:	4628      	mov	r0, r5
 8004a06:	f000 f81f 	bl	8004a48 <__swbuf_r>
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d1bf      	bne.n	800498e <_puts_r+0x42>
 8004a0e:	e7df      	b.n	80049d0 <_puts_r+0x84>
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	250a      	movs	r5, #10
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	6022      	str	r2, [r4, #0]
 8004a18:	701d      	strb	r5, [r3, #0]
 8004a1a:	e7db      	b.n	80049d4 <_puts_r+0x88>
 8004a1c:	0800548c 	.word	0x0800548c
 8004a20:	080054ac 	.word	0x080054ac
 8004a24:	0800546c 	.word	0x0800546c

08004a28 <puts>:
 8004a28:	4b02      	ldr	r3, [pc, #8]	; (8004a34 <puts+0xc>)
 8004a2a:	4601      	mov	r1, r0
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	f7ff bf8d 	b.w	800494c <_puts_r>
 8004a32:	bf00      	nop
 8004a34:	2000000c 	.word	0x2000000c

08004a38 <strcpy>:
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a3e:	f803 2b01 	strb.w	r2, [r3], #1
 8004a42:	2a00      	cmp	r2, #0
 8004a44:	d1f9      	bne.n	8004a3a <strcpy+0x2>
 8004a46:	4770      	bx	lr

08004a48 <__swbuf_r>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	460e      	mov	r6, r1
 8004a4c:	4614      	mov	r4, r2
 8004a4e:	4605      	mov	r5, r0
 8004a50:	b118      	cbz	r0, 8004a5a <__swbuf_r+0x12>
 8004a52:	6983      	ldr	r3, [r0, #24]
 8004a54:	b90b      	cbnz	r3, 8004a5a <__swbuf_r+0x12>
 8004a56:	f000 f9d1 	bl	8004dfc <__sinit>
 8004a5a:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <__swbuf_r+0x98>)
 8004a5c:	429c      	cmp	r4, r3
 8004a5e:	d12b      	bne.n	8004ab8 <__swbuf_r+0x70>
 8004a60:	686c      	ldr	r4, [r5, #4]
 8004a62:	69a3      	ldr	r3, [r4, #24]
 8004a64:	60a3      	str	r3, [r4, #8]
 8004a66:	89a3      	ldrh	r3, [r4, #12]
 8004a68:	071a      	lsls	r2, r3, #28
 8004a6a:	d52f      	bpl.n	8004acc <__swbuf_r+0x84>
 8004a6c:	6923      	ldr	r3, [r4, #16]
 8004a6e:	b36b      	cbz	r3, 8004acc <__swbuf_r+0x84>
 8004a70:	6923      	ldr	r3, [r4, #16]
 8004a72:	6820      	ldr	r0, [r4, #0]
 8004a74:	1ac0      	subs	r0, r0, r3
 8004a76:	6963      	ldr	r3, [r4, #20]
 8004a78:	b2f6      	uxtb	r6, r6
 8004a7a:	4283      	cmp	r3, r0
 8004a7c:	4637      	mov	r7, r6
 8004a7e:	dc04      	bgt.n	8004a8a <__swbuf_r+0x42>
 8004a80:	4621      	mov	r1, r4
 8004a82:	4628      	mov	r0, r5
 8004a84:	f000 f926 	bl	8004cd4 <_fflush_r>
 8004a88:	bb30      	cbnz	r0, 8004ad8 <__swbuf_r+0x90>
 8004a8a:	68a3      	ldr	r3, [r4, #8]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	60a3      	str	r3, [r4, #8]
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	6022      	str	r2, [r4, #0]
 8004a96:	701e      	strb	r6, [r3, #0]
 8004a98:	6963      	ldr	r3, [r4, #20]
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	4283      	cmp	r3, r0
 8004a9e:	d004      	beq.n	8004aaa <__swbuf_r+0x62>
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	07db      	lsls	r3, r3, #31
 8004aa4:	d506      	bpl.n	8004ab4 <__swbuf_r+0x6c>
 8004aa6:	2e0a      	cmp	r6, #10
 8004aa8:	d104      	bne.n	8004ab4 <__swbuf_r+0x6c>
 8004aaa:	4621      	mov	r1, r4
 8004aac:	4628      	mov	r0, r5
 8004aae:	f000 f911 	bl	8004cd4 <_fflush_r>
 8004ab2:	b988      	cbnz	r0, 8004ad8 <__swbuf_r+0x90>
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <__swbuf_r+0x9c>)
 8004aba:	429c      	cmp	r4, r3
 8004abc:	d101      	bne.n	8004ac2 <__swbuf_r+0x7a>
 8004abe:	68ac      	ldr	r4, [r5, #8]
 8004ac0:	e7cf      	b.n	8004a62 <__swbuf_r+0x1a>
 8004ac2:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <__swbuf_r+0xa0>)
 8004ac4:	429c      	cmp	r4, r3
 8004ac6:	bf08      	it	eq
 8004ac8:	68ec      	ldreq	r4, [r5, #12]
 8004aca:	e7ca      	b.n	8004a62 <__swbuf_r+0x1a>
 8004acc:	4621      	mov	r1, r4
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f000 f80c 	bl	8004aec <__swsetup_r>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d0cb      	beq.n	8004a70 <__swbuf_r+0x28>
 8004ad8:	f04f 37ff 	mov.w	r7, #4294967295
 8004adc:	e7ea      	b.n	8004ab4 <__swbuf_r+0x6c>
 8004ade:	bf00      	nop
 8004ae0:	0800548c 	.word	0x0800548c
 8004ae4:	080054ac 	.word	0x080054ac
 8004ae8:	0800546c 	.word	0x0800546c

08004aec <__swsetup_r>:
 8004aec:	4b32      	ldr	r3, [pc, #200]	; (8004bb8 <__swsetup_r+0xcc>)
 8004aee:	b570      	push	{r4, r5, r6, lr}
 8004af0:	681d      	ldr	r5, [r3, #0]
 8004af2:	4606      	mov	r6, r0
 8004af4:	460c      	mov	r4, r1
 8004af6:	b125      	cbz	r5, 8004b02 <__swsetup_r+0x16>
 8004af8:	69ab      	ldr	r3, [r5, #24]
 8004afa:	b913      	cbnz	r3, 8004b02 <__swsetup_r+0x16>
 8004afc:	4628      	mov	r0, r5
 8004afe:	f000 f97d 	bl	8004dfc <__sinit>
 8004b02:	4b2e      	ldr	r3, [pc, #184]	; (8004bbc <__swsetup_r+0xd0>)
 8004b04:	429c      	cmp	r4, r3
 8004b06:	d10f      	bne.n	8004b28 <__swsetup_r+0x3c>
 8004b08:	686c      	ldr	r4, [r5, #4]
 8004b0a:	89a3      	ldrh	r3, [r4, #12]
 8004b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b10:	0719      	lsls	r1, r3, #28
 8004b12:	d42c      	bmi.n	8004b6e <__swsetup_r+0x82>
 8004b14:	06dd      	lsls	r5, r3, #27
 8004b16:	d411      	bmi.n	8004b3c <__swsetup_r+0x50>
 8004b18:	2309      	movs	r3, #9
 8004b1a:	6033      	str	r3, [r6, #0]
 8004b1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b20:	81a3      	strh	r3, [r4, #12]
 8004b22:	f04f 30ff 	mov.w	r0, #4294967295
 8004b26:	e03e      	b.n	8004ba6 <__swsetup_r+0xba>
 8004b28:	4b25      	ldr	r3, [pc, #148]	; (8004bc0 <__swsetup_r+0xd4>)
 8004b2a:	429c      	cmp	r4, r3
 8004b2c:	d101      	bne.n	8004b32 <__swsetup_r+0x46>
 8004b2e:	68ac      	ldr	r4, [r5, #8]
 8004b30:	e7eb      	b.n	8004b0a <__swsetup_r+0x1e>
 8004b32:	4b24      	ldr	r3, [pc, #144]	; (8004bc4 <__swsetup_r+0xd8>)
 8004b34:	429c      	cmp	r4, r3
 8004b36:	bf08      	it	eq
 8004b38:	68ec      	ldreq	r4, [r5, #12]
 8004b3a:	e7e6      	b.n	8004b0a <__swsetup_r+0x1e>
 8004b3c:	0758      	lsls	r0, r3, #29
 8004b3e:	d512      	bpl.n	8004b66 <__swsetup_r+0x7a>
 8004b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b42:	b141      	cbz	r1, 8004b56 <__swsetup_r+0x6a>
 8004b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b48:	4299      	cmp	r1, r3
 8004b4a:	d002      	beq.n	8004b52 <__swsetup_r+0x66>
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f000 fa5b 	bl	8005008 <_free_r>
 8004b52:	2300      	movs	r3, #0
 8004b54:	6363      	str	r3, [r4, #52]	; 0x34
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b5c:	81a3      	strh	r3, [r4, #12]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	6063      	str	r3, [r4, #4]
 8004b62:	6923      	ldr	r3, [r4, #16]
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	f043 0308 	orr.w	r3, r3, #8
 8004b6c:	81a3      	strh	r3, [r4, #12]
 8004b6e:	6923      	ldr	r3, [r4, #16]
 8004b70:	b94b      	cbnz	r3, 8004b86 <__swsetup_r+0x9a>
 8004b72:	89a3      	ldrh	r3, [r4, #12]
 8004b74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b7c:	d003      	beq.n	8004b86 <__swsetup_r+0x9a>
 8004b7e:	4621      	mov	r1, r4
 8004b80:	4630      	mov	r0, r6
 8004b82:	f000 fa01 	bl	8004f88 <__smakebuf_r>
 8004b86:	89a0      	ldrh	r0, [r4, #12]
 8004b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b8c:	f010 0301 	ands.w	r3, r0, #1
 8004b90:	d00a      	beq.n	8004ba8 <__swsetup_r+0xbc>
 8004b92:	2300      	movs	r3, #0
 8004b94:	60a3      	str	r3, [r4, #8]
 8004b96:	6963      	ldr	r3, [r4, #20]
 8004b98:	425b      	negs	r3, r3
 8004b9a:	61a3      	str	r3, [r4, #24]
 8004b9c:	6923      	ldr	r3, [r4, #16]
 8004b9e:	b943      	cbnz	r3, 8004bb2 <__swsetup_r+0xc6>
 8004ba0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ba4:	d1ba      	bne.n	8004b1c <__swsetup_r+0x30>
 8004ba6:	bd70      	pop	{r4, r5, r6, pc}
 8004ba8:	0781      	lsls	r1, r0, #30
 8004baa:	bf58      	it	pl
 8004bac:	6963      	ldrpl	r3, [r4, #20]
 8004bae:	60a3      	str	r3, [r4, #8]
 8004bb0:	e7f4      	b.n	8004b9c <__swsetup_r+0xb0>
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	e7f7      	b.n	8004ba6 <__swsetup_r+0xba>
 8004bb6:	bf00      	nop
 8004bb8:	2000000c 	.word	0x2000000c
 8004bbc:	0800548c 	.word	0x0800548c
 8004bc0:	080054ac 	.word	0x080054ac
 8004bc4:	0800546c 	.word	0x0800546c

08004bc8 <__sflush_r>:
 8004bc8:	898a      	ldrh	r2, [r1, #12]
 8004bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bce:	4605      	mov	r5, r0
 8004bd0:	0710      	lsls	r0, r2, #28
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	d458      	bmi.n	8004c88 <__sflush_r+0xc0>
 8004bd6:	684b      	ldr	r3, [r1, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	dc05      	bgt.n	8004be8 <__sflush_r+0x20>
 8004bdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	dc02      	bgt.n	8004be8 <__sflush_r+0x20>
 8004be2:	2000      	movs	r0, #0
 8004be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004be8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bea:	2e00      	cmp	r6, #0
 8004bec:	d0f9      	beq.n	8004be2 <__sflush_r+0x1a>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004bf4:	682f      	ldr	r7, [r5, #0]
 8004bf6:	602b      	str	r3, [r5, #0]
 8004bf8:	d032      	beq.n	8004c60 <__sflush_r+0x98>
 8004bfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	075a      	lsls	r2, r3, #29
 8004c00:	d505      	bpl.n	8004c0e <__sflush_r+0x46>
 8004c02:	6863      	ldr	r3, [r4, #4]
 8004c04:	1ac0      	subs	r0, r0, r3
 8004c06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c08:	b10b      	cbz	r3, 8004c0e <__sflush_r+0x46>
 8004c0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c0c:	1ac0      	subs	r0, r0, r3
 8004c0e:	2300      	movs	r3, #0
 8004c10:	4602      	mov	r2, r0
 8004c12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c14:	6a21      	ldr	r1, [r4, #32]
 8004c16:	4628      	mov	r0, r5
 8004c18:	47b0      	blx	r6
 8004c1a:	1c43      	adds	r3, r0, #1
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	d106      	bne.n	8004c2e <__sflush_r+0x66>
 8004c20:	6829      	ldr	r1, [r5, #0]
 8004c22:	291d      	cmp	r1, #29
 8004c24:	d82c      	bhi.n	8004c80 <__sflush_r+0xb8>
 8004c26:	4a2a      	ldr	r2, [pc, #168]	; (8004cd0 <__sflush_r+0x108>)
 8004c28:	40ca      	lsrs	r2, r1
 8004c2a:	07d6      	lsls	r6, r2, #31
 8004c2c:	d528      	bpl.n	8004c80 <__sflush_r+0xb8>
 8004c2e:	2200      	movs	r2, #0
 8004c30:	6062      	str	r2, [r4, #4]
 8004c32:	04d9      	lsls	r1, r3, #19
 8004c34:	6922      	ldr	r2, [r4, #16]
 8004c36:	6022      	str	r2, [r4, #0]
 8004c38:	d504      	bpl.n	8004c44 <__sflush_r+0x7c>
 8004c3a:	1c42      	adds	r2, r0, #1
 8004c3c:	d101      	bne.n	8004c42 <__sflush_r+0x7a>
 8004c3e:	682b      	ldr	r3, [r5, #0]
 8004c40:	b903      	cbnz	r3, 8004c44 <__sflush_r+0x7c>
 8004c42:	6560      	str	r0, [r4, #84]	; 0x54
 8004c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c46:	602f      	str	r7, [r5, #0]
 8004c48:	2900      	cmp	r1, #0
 8004c4a:	d0ca      	beq.n	8004be2 <__sflush_r+0x1a>
 8004c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c50:	4299      	cmp	r1, r3
 8004c52:	d002      	beq.n	8004c5a <__sflush_r+0x92>
 8004c54:	4628      	mov	r0, r5
 8004c56:	f000 f9d7 	bl	8005008 <_free_r>
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	6360      	str	r0, [r4, #52]	; 0x34
 8004c5e:	e7c1      	b.n	8004be4 <__sflush_r+0x1c>
 8004c60:	6a21      	ldr	r1, [r4, #32]
 8004c62:	2301      	movs	r3, #1
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b0      	blx	r6
 8004c68:	1c41      	adds	r1, r0, #1
 8004c6a:	d1c7      	bne.n	8004bfc <__sflush_r+0x34>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0c4      	beq.n	8004bfc <__sflush_r+0x34>
 8004c72:	2b1d      	cmp	r3, #29
 8004c74:	d001      	beq.n	8004c7a <__sflush_r+0xb2>
 8004c76:	2b16      	cmp	r3, #22
 8004c78:	d101      	bne.n	8004c7e <__sflush_r+0xb6>
 8004c7a:	602f      	str	r7, [r5, #0]
 8004c7c:	e7b1      	b.n	8004be2 <__sflush_r+0x1a>
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c84:	81a3      	strh	r3, [r4, #12]
 8004c86:	e7ad      	b.n	8004be4 <__sflush_r+0x1c>
 8004c88:	690f      	ldr	r7, [r1, #16]
 8004c8a:	2f00      	cmp	r7, #0
 8004c8c:	d0a9      	beq.n	8004be2 <__sflush_r+0x1a>
 8004c8e:	0793      	lsls	r3, r2, #30
 8004c90:	680e      	ldr	r6, [r1, #0]
 8004c92:	bf08      	it	eq
 8004c94:	694b      	ldreq	r3, [r1, #20]
 8004c96:	600f      	str	r7, [r1, #0]
 8004c98:	bf18      	it	ne
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	eba6 0807 	sub.w	r8, r6, r7
 8004ca0:	608b      	str	r3, [r1, #8]
 8004ca2:	f1b8 0f00 	cmp.w	r8, #0
 8004ca6:	dd9c      	ble.n	8004be2 <__sflush_r+0x1a>
 8004ca8:	6a21      	ldr	r1, [r4, #32]
 8004caa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004cac:	4643      	mov	r3, r8
 8004cae:	463a      	mov	r2, r7
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	47b0      	blx	r6
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	dc06      	bgt.n	8004cc6 <__sflush_r+0xfe>
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cbe:	81a3      	strh	r3, [r4, #12]
 8004cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc4:	e78e      	b.n	8004be4 <__sflush_r+0x1c>
 8004cc6:	4407      	add	r7, r0
 8004cc8:	eba8 0800 	sub.w	r8, r8, r0
 8004ccc:	e7e9      	b.n	8004ca2 <__sflush_r+0xda>
 8004cce:	bf00      	nop
 8004cd0:	20400001 	.word	0x20400001

08004cd4 <_fflush_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	690b      	ldr	r3, [r1, #16]
 8004cd8:	4605      	mov	r5, r0
 8004cda:	460c      	mov	r4, r1
 8004cdc:	b913      	cbnz	r3, 8004ce4 <_fflush_r+0x10>
 8004cde:	2500      	movs	r5, #0
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	b118      	cbz	r0, 8004cee <_fflush_r+0x1a>
 8004ce6:	6983      	ldr	r3, [r0, #24]
 8004ce8:	b90b      	cbnz	r3, 8004cee <_fflush_r+0x1a>
 8004cea:	f000 f887 	bl	8004dfc <__sinit>
 8004cee:	4b14      	ldr	r3, [pc, #80]	; (8004d40 <_fflush_r+0x6c>)
 8004cf0:	429c      	cmp	r4, r3
 8004cf2:	d11b      	bne.n	8004d2c <_fflush_r+0x58>
 8004cf4:	686c      	ldr	r4, [r5, #4]
 8004cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0ef      	beq.n	8004cde <_fflush_r+0xa>
 8004cfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d00:	07d0      	lsls	r0, r2, #31
 8004d02:	d404      	bmi.n	8004d0e <_fflush_r+0x3a>
 8004d04:	0599      	lsls	r1, r3, #22
 8004d06:	d402      	bmi.n	8004d0e <_fflush_r+0x3a>
 8004d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d0a:	f000 f915 	bl	8004f38 <__retarget_lock_acquire_recursive>
 8004d0e:	4628      	mov	r0, r5
 8004d10:	4621      	mov	r1, r4
 8004d12:	f7ff ff59 	bl	8004bc8 <__sflush_r>
 8004d16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d18:	07da      	lsls	r2, r3, #31
 8004d1a:	4605      	mov	r5, r0
 8004d1c:	d4e0      	bmi.n	8004ce0 <_fflush_r+0xc>
 8004d1e:	89a3      	ldrh	r3, [r4, #12]
 8004d20:	059b      	lsls	r3, r3, #22
 8004d22:	d4dd      	bmi.n	8004ce0 <_fflush_r+0xc>
 8004d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d26:	f000 f908 	bl	8004f3a <__retarget_lock_release_recursive>
 8004d2a:	e7d9      	b.n	8004ce0 <_fflush_r+0xc>
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <_fflush_r+0x70>)
 8004d2e:	429c      	cmp	r4, r3
 8004d30:	d101      	bne.n	8004d36 <_fflush_r+0x62>
 8004d32:	68ac      	ldr	r4, [r5, #8]
 8004d34:	e7df      	b.n	8004cf6 <_fflush_r+0x22>
 8004d36:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <_fflush_r+0x74>)
 8004d38:	429c      	cmp	r4, r3
 8004d3a:	bf08      	it	eq
 8004d3c:	68ec      	ldreq	r4, [r5, #12]
 8004d3e:	e7da      	b.n	8004cf6 <_fflush_r+0x22>
 8004d40:	0800548c 	.word	0x0800548c
 8004d44:	080054ac 	.word	0x080054ac
 8004d48:	0800546c 	.word	0x0800546c

08004d4c <std>:
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	4604      	mov	r4, r0
 8004d52:	e9c0 3300 	strd	r3, r3, [r0]
 8004d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d5a:	6083      	str	r3, [r0, #8]
 8004d5c:	8181      	strh	r1, [r0, #12]
 8004d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d60:	81c2      	strh	r2, [r0, #14]
 8004d62:	6183      	str	r3, [r0, #24]
 8004d64:	4619      	mov	r1, r3
 8004d66:	2208      	movs	r2, #8
 8004d68:	305c      	adds	r0, #92	; 0x5c
 8004d6a:	f7ff fde7 	bl	800493c <memset>
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <std+0x38>)
 8004d70:	6263      	str	r3, [r4, #36]	; 0x24
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <std+0x3c>)
 8004d74:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <std+0x40>)
 8004d78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d7a:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <std+0x44>)
 8004d7c:	6224      	str	r4, [r4, #32]
 8004d7e:	6323      	str	r3, [r4, #48]	; 0x30
 8004d80:	bd10      	pop	{r4, pc}
 8004d82:	bf00      	nop
 8004d84:	080051e9 	.word	0x080051e9
 8004d88:	0800520b 	.word	0x0800520b
 8004d8c:	08005243 	.word	0x08005243
 8004d90:	08005267 	.word	0x08005267

08004d94 <_cleanup_r>:
 8004d94:	4901      	ldr	r1, [pc, #4]	; (8004d9c <_cleanup_r+0x8>)
 8004d96:	f000 b8af 	b.w	8004ef8 <_fwalk_reent>
 8004d9a:	bf00      	nop
 8004d9c:	08004cd5 	.word	0x08004cd5

08004da0 <__sfmoreglue>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	2268      	movs	r2, #104	; 0x68
 8004da4:	1e4d      	subs	r5, r1, #1
 8004da6:	4355      	muls	r5, r2
 8004da8:	460e      	mov	r6, r1
 8004daa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004dae:	f000 f997 	bl	80050e0 <_malloc_r>
 8004db2:	4604      	mov	r4, r0
 8004db4:	b140      	cbz	r0, 8004dc8 <__sfmoreglue+0x28>
 8004db6:	2100      	movs	r1, #0
 8004db8:	e9c0 1600 	strd	r1, r6, [r0]
 8004dbc:	300c      	adds	r0, #12
 8004dbe:	60a0      	str	r0, [r4, #8]
 8004dc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004dc4:	f7ff fdba 	bl	800493c <memset>
 8004dc8:	4620      	mov	r0, r4
 8004dca:	bd70      	pop	{r4, r5, r6, pc}

08004dcc <__sfp_lock_acquire>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	; (8004dd4 <__sfp_lock_acquire+0x8>)
 8004dce:	f000 b8b3 	b.w	8004f38 <__retarget_lock_acquire_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	20013339 	.word	0x20013339

08004dd8 <__sfp_lock_release>:
 8004dd8:	4801      	ldr	r0, [pc, #4]	; (8004de0 <__sfp_lock_release+0x8>)
 8004dda:	f000 b8ae 	b.w	8004f3a <__retarget_lock_release_recursive>
 8004dde:	bf00      	nop
 8004de0:	20013339 	.word	0x20013339

08004de4 <__sinit_lock_acquire>:
 8004de4:	4801      	ldr	r0, [pc, #4]	; (8004dec <__sinit_lock_acquire+0x8>)
 8004de6:	f000 b8a7 	b.w	8004f38 <__retarget_lock_acquire_recursive>
 8004dea:	bf00      	nop
 8004dec:	2001333a 	.word	0x2001333a

08004df0 <__sinit_lock_release>:
 8004df0:	4801      	ldr	r0, [pc, #4]	; (8004df8 <__sinit_lock_release+0x8>)
 8004df2:	f000 b8a2 	b.w	8004f3a <__retarget_lock_release_recursive>
 8004df6:	bf00      	nop
 8004df8:	2001333a 	.word	0x2001333a

08004dfc <__sinit>:
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	4604      	mov	r4, r0
 8004e00:	f7ff fff0 	bl	8004de4 <__sinit_lock_acquire>
 8004e04:	69a3      	ldr	r3, [r4, #24]
 8004e06:	b11b      	cbz	r3, 8004e10 <__sinit+0x14>
 8004e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e0c:	f7ff bff0 	b.w	8004df0 <__sinit_lock_release>
 8004e10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e14:	6523      	str	r3, [r4, #80]	; 0x50
 8004e16:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <__sinit+0x68>)
 8004e18:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <__sinit+0x6c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	bf04      	itt	eq
 8004e22:	2301      	moveq	r3, #1
 8004e24:	61a3      	streq	r3, [r4, #24]
 8004e26:	4620      	mov	r0, r4
 8004e28:	f000 f820 	bl	8004e6c <__sfp>
 8004e2c:	6060      	str	r0, [r4, #4]
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f000 f81c 	bl	8004e6c <__sfp>
 8004e34:	60a0      	str	r0, [r4, #8]
 8004e36:	4620      	mov	r0, r4
 8004e38:	f000 f818 	bl	8004e6c <__sfp>
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	60e0      	str	r0, [r4, #12]
 8004e40:	2104      	movs	r1, #4
 8004e42:	6860      	ldr	r0, [r4, #4]
 8004e44:	f7ff ff82 	bl	8004d4c <std>
 8004e48:	68a0      	ldr	r0, [r4, #8]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	2109      	movs	r1, #9
 8004e4e:	f7ff ff7d 	bl	8004d4c <std>
 8004e52:	68e0      	ldr	r0, [r4, #12]
 8004e54:	2202      	movs	r2, #2
 8004e56:	2112      	movs	r1, #18
 8004e58:	f7ff ff78 	bl	8004d4c <std>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	61a3      	str	r3, [r4, #24]
 8004e60:	e7d2      	b.n	8004e08 <__sinit+0xc>
 8004e62:	bf00      	nop
 8004e64:	08005468 	.word	0x08005468
 8004e68:	08004d95 	.word	0x08004d95

08004e6c <__sfp>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	4607      	mov	r7, r0
 8004e70:	f7ff ffac 	bl	8004dcc <__sfp_lock_acquire>
 8004e74:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <__sfp+0x84>)
 8004e76:	681e      	ldr	r6, [r3, #0]
 8004e78:	69b3      	ldr	r3, [r6, #24]
 8004e7a:	b913      	cbnz	r3, 8004e82 <__sfp+0x16>
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f7ff ffbd 	bl	8004dfc <__sinit>
 8004e82:	3648      	adds	r6, #72	; 0x48
 8004e84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	d503      	bpl.n	8004e94 <__sfp+0x28>
 8004e8c:	6833      	ldr	r3, [r6, #0]
 8004e8e:	b30b      	cbz	r3, 8004ed4 <__sfp+0x68>
 8004e90:	6836      	ldr	r6, [r6, #0]
 8004e92:	e7f7      	b.n	8004e84 <__sfp+0x18>
 8004e94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e98:	b9d5      	cbnz	r5, 8004ed0 <__sfp+0x64>
 8004e9a:	4b16      	ldr	r3, [pc, #88]	; (8004ef4 <__sfp+0x88>)
 8004e9c:	60e3      	str	r3, [r4, #12]
 8004e9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ea2:	6665      	str	r5, [r4, #100]	; 0x64
 8004ea4:	f000 f847 	bl	8004f36 <__retarget_lock_init_recursive>
 8004ea8:	f7ff ff96 	bl	8004dd8 <__sfp_lock_release>
 8004eac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004eb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004eb4:	6025      	str	r5, [r4, #0]
 8004eb6:	61a5      	str	r5, [r4, #24]
 8004eb8:	2208      	movs	r2, #8
 8004eba:	4629      	mov	r1, r5
 8004ebc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ec0:	f7ff fd3c 	bl	800493c <memset>
 8004ec4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ec8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ecc:	4620      	mov	r0, r4
 8004ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ed0:	3468      	adds	r4, #104	; 0x68
 8004ed2:	e7d9      	b.n	8004e88 <__sfp+0x1c>
 8004ed4:	2104      	movs	r1, #4
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	f7ff ff62 	bl	8004da0 <__sfmoreglue>
 8004edc:	4604      	mov	r4, r0
 8004ede:	6030      	str	r0, [r6, #0]
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d1d5      	bne.n	8004e90 <__sfp+0x24>
 8004ee4:	f7ff ff78 	bl	8004dd8 <__sfp_lock_release>
 8004ee8:	230c      	movs	r3, #12
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	e7ee      	b.n	8004ecc <__sfp+0x60>
 8004eee:	bf00      	nop
 8004ef0:	08005468 	.word	0x08005468
 8004ef4:	ffff0001 	.word	0xffff0001

08004ef8 <_fwalk_reent>:
 8004ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004efc:	4606      	mov	r6, r0
 8004efe:	4688      	mov	r8, r1
 8004f00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f04:	2700      	movs	r7, #0
 8004f06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f0a:	f1b9 0901 	subs.w	r9, r9, #1
 8004f0e:	d505      	bpl.n	8004f1c <_fwalk_reent+0x24>
 8004f10:	6824      	ldr	r4, [r4, #0]
 8004f12:	2c00      	cmp	r4, #0
 8004f14:	d1f7      	bne.n	8004f06 <_fwalk_reent+0xe>
 8004f16:	4638      	mov	r0, r7
 8004f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f1c:	89ab      	ldrh	r3, [r5, #12]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d907      	bls.n	8004f32 <_fwalk_reent+0x3a>
 8004f22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f26:	3301      	adds	r3, #1
 8004f28:	d003      	beq.n	8004f32 <_fwalk_reent+0x3a>
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	47c0      	blx	r8
 8004f30:	4307      	orrs	r7, r0
 8004f32:	3568      	adds	r5, #104	; 0x68
 8004f34:	e7e9      	b.n	8004f0a <_fwalk_reent+0x12>

08004f36 <__retarget_lock_init_recursive>:
 8004f36:	4770      	bx	lr

08004f38 <__retarget_lock_acquire_recursive>:
 8004f38:	4770      	bx	lr

08004f3a <__retarget_lock_release_recursive>:
 8004f3a:	4770      	bx	lr

08004f3c <__swhatbuf_r>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	460e      	mov	r6, r1
 8004f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f44:	2900      	cmp	r1, #0
 8004f46:	b096      	sub	sp, #88	; 0x58
 8004f48:	4614      	mov	r4, r2
 8004f4a:	461d      	mov	r5, r3
 8004f4c:	da08      	bge.n	8004f60 <__swhatbuf_r+0x24>
 8004f4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	602a      	str	r2, [r5, #0]
 8004f56:	061a      	lsls	r2, r3, #24
 8004f58:	d410      	bmi.n	8004f7c <__swhatbuf_r+0x40>
 8004f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f5e:	e00e      	b.n	8004f7e <__swhatbuf_r+0x42>
 8004f60:	466a      	mov	r2, sp
 8004f62:	f000 f9a7 	bl	80052b4 <_fstat_r>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	dbf1      	blt.n	8004f4e <__swhatbuf_r+0x12>
 8004f6a:	9a01      	ldr	r2, [sp, #4]
 8004f6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f74:	425a      	negs	r2, r3
 8004f76:	415a      	adcs	r2, r3
 8004f78:	602a      	str	r2, [r5, #0]
 8004f7a:	e7ee      	b.n	8004f5a <__swhatbuf_r+0x1e>
 8004f7c:	2340      	movs	r3, #64	; 0x40
 8004f7e:	2000      	movs	r0, #0
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	b016      	add	sp, #88	; 0x58
 8004f84:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f88 <__smakebuf_r>:
 8004f88:	898b      	ldrh	r3, [r1, #12]
 8004f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f8c:	079d      	lsls	r5, r3, #30
 8004f8e:	4606      	mov	r6, r0
 8004f90:	460c      	mov	r4, r1
 8004f92:	d507      	bpl.n	8004fa4 <__smakebuf_r+0x1c>
 8004f94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	6123      	str	r3, [r4, #16]
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	6163      	str	r3, [r4, #20]
 8004fa0:	b002      	add	sp, #8
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
 8004fa4:	ab01      	add	r3, sp, #4
 8004fa6:	466a      	mov	r2, sp
 8004fa8:	f7ff ffc8 	bl	8004f3c <__swhatbuf_r>
 8004fac:	9900      	ldr	r1, [sp, #0]
 8004fae:	4605      	mov	r5, r0
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	f000 f895 	bl	80050e0 <_malloc_r>
 8004fb6:	b948      	cbnz	r0, 8004fcc <__smakebuf_r+0x44>
 8004fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fbc:	059a      	lsls	r2, r3, #22
 8004fbe:	d4ef      	bmi.n	8004fa0 <__smakebuf_r+0x18>
 8004fc0:	f023 0303 	bic.w	r3, r3, #3
 8004fc4:	f043 0302 	orr.w	r3, r3, #2
 8004fc8:	81a3      	strh	r3, [r4, #12]
 8004fca:	e7e3      	b.n	8004f94 <__smakebuf_r+0xc>
 8004fcc:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <__smakebuf_r+0x7c>)
 8004fce:	62b3      	str	r3, [r6, #40]	; 0x28
 8004fd0:	89a3      	ldrh	r3, [r4, #12]
 8004fd2:	6020      	str	r0, [r4, #0]
 8004fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd8:	81a3      	strh	r3, [r4, #12]
 8004fda:	9b00      	ldr	r3, [sp, #0]
 8004fdc:	6163      	str	r3, [r4, #20]
 8004fde:	9b01      	ldr	r3, [sp, #4]
 8004fe0:	6120      	str	r0, [r4, #16]
 8004fe2:	b15b      	cbz	r3, 8004ffc <__smakebuf_r+0x74>
 8004fe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f000 f975 	bl	80052d8 <_isatty_r>
 8004fee:	b128      	cbz	r0, 8004ffc <__smakebuf_r+0x74>
 8004ff0:	89a3      	ldrh	r3, [r4, #12]
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	81a3      	strh	r3, [r4, #12]
 8004ffc:	89a0      	ldrh	r0, [r4, #12]
 8004ffe:	4305      	orrs	r5, r0
 8005000:	81a5      	strh	r5, [r4, #12]
 8005002:	e7cd      	b.n	8004fa0 <__smakebuf_r+0x18>
 8005004:	08004d95 	.word	0x08004d95

08005008 <_free_r>:
 8005008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800500a:	2900      	cmp	r1, #0
 800500c:	d044      	beq.n	8005098 <_free_r+0x90>
 800500e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005012:	9001      	str	r0, [sp, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f1a1 0404 	sub.w	r4, r1, #4
 800501a:	bfb8      	it	lt
 800501c:	18e4      	addlt	r4, r4, r3
 800501e:	f000 f97d 	bl	800531c <__malloc_lock>
 8005022:	4a1e      	ldr	r2, [pc, #120]	; (800509c <_free_r+0x94>)
 8005024:	9801      	ldr	r0, [sp, #4]
 8005026:	6813      	ldr	r3, [r2, #0]
 8005028:	b933      	cbnz	r3, 8005038 <_free_r+0x30>
 800502a:	6063      	str	r3, [r4, #4]
 800502c:	6014      	str	r4, [r2, #0]
 800502e:	b003      	add	sp, #12
 8005030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005034:	f000 b978 	b.w	8005328 <__malloc_unlock>
 8005038:	42a3      	cmp	r3, r4
 800503a:	d908      	bls.n	800504e <_free_r+0x46>
 800503c:	6825      	ldr	r5, [r4, #0]
 800503e:	1961      	adds	r1, r4, r5
 8005040:	428b      	cmp	r3, r1
 8005042:	bf01      	itttt	eq
 8005044:	6819      	ldreq	r1, [r3, #0]
 8005046:	685b      	ldreq	r3, [r3, #4]
 8005048:	1949      	addeq	r1, r1, r5
 800504a:	6021      	streq	r1, [r4, #0]
 800504c:	e7ed      	b.n	800502a <_free_r+0x22>
 800504e:	461a      	mov	r2, r3
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	b10b      	cbz	r3, 8005058 <_free_r+0x50>
 8005054:	42a3      	cmp	r3, r4
 8005056:	d9fa      	bls.n	800504e <_free_r+0x46>
 8005058:	6811      	ldr	r1, [r2, #0]
 800505a:	1855      	adds	r5, r2, r1
 800505c:	42a5      	cmp	r5, r4
 800505e:	d10b      	bne.n	8005078 <_free_r+0x70>
 8005060:	6824      	ldr	r4, [r4, #0]
 8005062:	4421      	add	r1, r4
 8005064:	1854      	adds	r4, r2, r1
 8005066:	42a3      	cmp	r3, r4
 8005068:	6011      	str	r1, [r2, #0]
 800506a:	d1e0      	bne.n	800502e <_free_r+0x26>
 800506c:	681c      	ldr	r4, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	6053      	str	r3, [r2, #4]
 8005072:	4421      	add	r1, r4
 8005074:	6011      	str	r1, [r2, #0]
 8005076:	e7da      	b.n	800502e <_free_r+0x26>
 8005078:	d902      	bls.n	8005080 <_free_r+0x78>
 800507a:	230c      	movs	r3, #12
 800507c:	6003      	str	r3, [r0, #0]
 800507e:	e7d6      	b.n	800502e <_free_r+0x26>
 8005080:	6825      	ldr	r5, [r4, #0]
 8005082:	1961      	adds	r1, r4, r5
 8005084:	428b      	cmp	r3, r1
 8005086:	bf04      	itt	eq
 8005088:	6819      	ldreq	r1, [r3, #0]
 800508a:	685b      	ldreq	r3, [r3, #4]
 800508c:	6063      	str	r3, [r4, #4]
 800508e:	bf04      	itt	eq
 8005090:	1949      	addeq	r1, r1, r5
 8005092:	6021      	streq	r1, [r4, #0]
 8005094:	6054      	str	r4, [r2, #4]
 8005096:	e7ca      	b.n	800502e <_free_r+0x26>
 8005098:	b003      	add	sp, #12
 800509a:	bd30      	pop	{r4, r5, pc}
 800509c:	2001333c 	.word	0x2001333c

080050a0 <sbrk_aligned>:
 80050a0:	b570      	push	{r4, r5, r6, lr}
 80050a2:	4e0e      	ldr	r6, [pc, #56]	; (80050dc <sbrk_aligned+0x3c>)
 80050a4:	460c      	mov	r4, r1
 80050a6:	6831      	ldr	r1, [r6, #0]
 80050a8:	4605      	mov	r5, r0
 80050aa:	b911      	cbnz	r1, 80050b2 <sbrk_aligned+0x12>
 80050ac:	f000 f88c 	bl	80051c8 <_sbrk_r>
 80050b0:	6030      	str	r0, [r6, #0]
 80050b2:	4621      	mov	r1, r4
 80050b4:	4628      	mov	r0, r5
 80050b6:	f000 f887 	bl	80051c8 <_sbrk_r>
 80050ba:	1c43      	adds	r3, r0, #1
 80050bc:	d00a      	beq.n	80050d4 <sbrk_aligned+0x34>
 80050be:	1cc4      	adds	r4, r0, #3
 80050c0:	f024 0403 	bic.w	r4, r4, #3
 80050c4:	42a0      	cmp	r0, r4
 80050c6:	d007      	beq.n	80050d8 <sbrk_aligned+0x38>
 80050c8:	1a21      	subs	r1, r4, r0
 80050ca:	4628      	mov	r0, r5
 80050cc:	f000 f87c 	bl	80051c8 <_sbrk_r>
 80050d0:	3001      	adds	r0, #1
 80050d2:	d101      	bne.n	80050d8 <sbrk_aligned+0x38>
 80050d4:	f04f 34ff 	mov.w	r4, #4294967295
 80050d8:	4620      	mov	r0, r4
 80050da:	bd70      	pop	{r4, r5, r6, pc}
 80050dc:	20013340 	.word	0x20013340

080050e0 <_malloc_r>:
 80050e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e4:	1ccd      	adds	r5, r1, #3
 80050e6:	f025 0503 	bic.w	r5, r5, #3
 80050ea:	3508      	adds	r5, #8
 80050ec:	2d0c      	cmp	r5, #12
 80050ee:	bf38      	it	cc
 80050f0:	250c      	movcc	r5, #12
 80050f2:	2d00      	cmp	r5, #0
 80050f4:	4607      	mov	r7, r0
 80050f6:	db01      	blt.n	80050fc <_malloc_r+0x1c>
 80050f8:	42a9      	cmp	r1, r5
 80050fa:	d905      	bls.n	8005108 <_malloc_r+0x28>
 80050fc:	230c      	movs	r3, #12
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	2600      	movs	r6, #0
 8005102:	4630      	mov	r0, r6
 8005104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005108:	4e2e      	ldr	r6, [pc, #184]	; (80051c4 <_malloc_r+0xe4>)
 800510a:	f000 f907 	bl	800531c <__malloc_lock>
 800510e:	6833      	ldr	r3, [r6, #0]
 8005110:	461c      	mov	r4, r3
 8005112:	bb34      	cbnz	r4, 8005162 <_malloc_r+0x82>
 8005114:	4629      	mov	r1, r5
 8005116:	4638      	mov	r0, r7
 8005118:	f7ff ffc2 	bl	80050a0 <sbrk_aligned>
 800511c:	1c43      	adds	r3, r0, #1
 800511e:	4604      	mov	r4, r0
 8005120:	d14d      	bne.n	80051be <_malloc_r+0xde>
 8005122:	6834      	ldr	r4, [r6, #0]
 8005124:	4626      	mov	r6, r4
 8005126:	2e00      	cmp	r6, #0
 8005128:	d140      	bne.n	80051ac <_malloc_r+0xcc>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	4631      	mov	r1, r6
 800512e:	4638      	mov	r0, r7
 8005130:	eb04 0803 	add.w	r8, r4, r3
 8005134:	f000 f848 	bl	80051c8 <_sbrk_r>
 8005138:	4580      	cmp	r8, r0
 800513a:	d13a      	bne.n	80051b2 <_malloc_r+0xd2>
 800513c:	6821      	ldr	r1, [r4, #0]
 800513e:	3503      	adds	r5, #3
 8005140:	1a6d      	subs	r5, r5, r1
 8005142:	f025 0503 	bic.w	r5, r5, #3
 8005146:	3508      	adds	r5, #8
 8005148:	2d0c      	cmp	r5, #12
 800514a:	bf38      	it	cc
 800514c:	250c      	movcc	r5, #12
 800514e:	4629      	mov	r1, r5
 8005150:	4638      	mov	r0, r7
 8005152:	f7ff ffa5 	bl	80050a0 <sbrk_aligned>
 8005156:	3001      	adds	r0, #1
 8005158:	d02b      	beq.n	80051b2 <_malloc_r+0xd2>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	442b      	add	r3, r5
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	e00e      	b.n	8005180 <_malloc_r+0xa0>
 8005162:	6822      	ldr	r2, [r4, #0]
 8005164:	1b52      	subs	r2, r2, r5
 8005166:	d41e      	bmi.n	80051a6 <_malloc_r+0xc6>
 8005168:	2a0b      	cmp	r2, #11
 800516a:	d916      	bls.n	800519a <_malloc_r+0xba>
 800516c:	1961      	adds	r1, r4, r5
 800516e:	42a3      	cmp	r3, r4
 8005170:	6025      	str	r5, [r4, #0]
 8005172:	bf18      	it	ne
 8005174:	6059      	strne	r1, [r3, #4]
 8005176:	6863      	ldr	r3, [r4, #4]
 8005178:	bf08      	it	eq
 800517a:	6031      	streq	r1, [r6, #0]
 800517c:	5162      	str	r2, [r4, r5]
 800517e:	604b      	str	r3, [r1, #4]
 8005180:	4638      	mov	r0, r7
 8005182:	f104 060b 	add.w	r6, r4, #11
 8005186:	f000 f8cf 	bl	8005328 <__malloc_unlock>
 800518a:	f026 0607 	bic.w	r6, r6, #7
 800518e:	1d23      	adds	r3, r4, #4
 8005190:	1af2      	subs	r2, r6, r3
 8005192:	d0b6      	beq.n	8005102 <_malloc_r+0x22>
 8005194:	1b9b      	subs	r3, r3, r6
 8005196:	50a3      	str	r3, [r4, r2]
 8005198:	e7b3      	b.n	8005102 <_malloc_r+0x22>
 800519a:	6862      	ldr	r2, [r4, #4]
 800519c:	42a3      	cmp	r3, r4
 800519e:	bf0c      	ite	eq
 80051a0:	6032      	streq	r2, [r6, #0]
 80051a2:	605a      	strne	r2, [r3, #4]
 80051a4:	e7ec      	b.n	8005180 <_malloc_r+0xa0>
 80051a6:	4623      	mov	r3, r4
 80051a8:	6864      	ldr	r4, [r4, #4]
 80051aa:	e7b2      	b.n	8005112 <_malloc_r+0x32>
 80051ac:	4634      	mov	r4, r6
 80051ae:	6876      	ldr	r6, [r6, #4]
 80051b0:	e7b9      	b.n	8005126 <_malloc_r+0x46>
 80051b2:	230c      	movs	r3, #12
 80051b4:	603b      	str	r3, [r7, #0]
 80051b6:	4638      	mov	r0, r7
 80051b8:	f000 f8b6 	bl	8005328 <__malloc_unlock>
 80051bc:	e7a1      	b.n	8005102 <_malloc_r+0x22>
 80051be:	6025      	str	r5, [r4, #0]
 80051c0:	e7de      	b.n	8005180 <_malloc_r+0xa0>
 80051c2:	bf00      	nop
 80051c4:	2001333c 	.word	0x2001333c

080051c8 <_sbrk_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	4d06      	ldr	r5, [pc, #24]	; (80051e4 <_sbrk_r+0x1c>)
 80051cc:	2300      	movs	r3, #0
 80051ce:	4604      	mov	r4, r0
 80051d0:	4608      	mov	r0, r1
 80051d2:	602b      	str	r3, [r5, #0]
 80051d4:	f7fb fd00 	bl	8000bd8 <_sbrk>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d102      	bne.n	80051e2 <_sbrk_r+0x1a>
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	b103      	cbz	r3, 80051e2 <_sbrk_r+0x1a>
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	20013344 	.word	0x20013344

080051e8 <__sread>:
 80051e8:	b510      	push	{r4, lr}
 80051ea:	460c      	mov	r4, r1
 80051ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f0:	f000 f8a0 	bl	8005334 <_read_r>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	bfab      	itete	ge
 80051f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051fa:	89a3      	ldrhlt	r3, [r4, #12]
 80051fc:	181b      	addge	r3, r3, r0
 80051fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005202:	bfac      	ite	ge
 8005204:	6563      	strge	r3, [r4, #84]	; 0x54
 8005206:	81a3      	strhlt	r3, [r4, #12]
 8005208:	bd10      	pop	{r4, pc}

0800520a <__swrite>:
 800520a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800520e:	461f      	mov	r7, r3
 8005210:	898b      	ldrh	r3, [r1, #12]
 8005212:	05db      	lsls	r3, r3, #23
 8005214:	4605      	mov	r5, r0
 8005216:	460c      	mov	r4, r1
 8005218:	4616      	mov	r6, r2
 800521a:	d505      	bpl.n	8005228 <__swrite+0x1e>
 800521c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005220:	2302      	movs	r3, #2
 8005222:	2200      	movs	r2, #0
 8005224:	f000 f868 	bl	80052f8 <_lseek_r>
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800522e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005232:	81a3      	strh	r3, [r4, #12]
 8005234:	4632      	mov	r2, r6
 8005236:	463b      	mov	r3, r7
 8005238:	4628      	mov	r0, r5
 800523a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800523e:	f000 b817 	b.w	8005270 <_write_r>

08005242 <__sseek>:
 8005242:	b510      	push	{r4, lr}
 8005244:	460c      	mov	r4, r1
 8005246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800524a:	f000 f855 	bl	80052f8 <_lseek_r>
 800524e:	1c43      	adds	r3, r0, #1
 8005250:	89a3      	ldrh	r3, [r4, #12]
 8005252:	bf15      	itete	ne
 8005254:	6560      	strne	r0, [r4, #84]	; 0x54
 8005256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800525a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800525e:	81a3      	strheq	r3, [r4, #12]
 8005260:	bf18      	it	ne
 8005262:	81a3      	strhne	r3, [r4, #12]
 8005264:	bd10      	pop	{r4, pc}

08005266 <__sclose>:
 8005266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800526a:	f000 b813 	b.w	8005294 <_close_r>
	...

08005270 <_write_r>:
 8005270:	b538      	push	{r3, r4, r5, lr}
 8005272:	4d07      	ldr	r5, [pc, #28]	; (8005290 <_write_r+0x20>)
 8005274:	4604      	mov	r4, r0
 8005276:	4608      	mov	r0, r1
 8005278:	4611      	mov	r1, r2
 800527a:	2200      	movs	r2, #0
 800527c:	602a      	str	r2, [r5, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	f7fb fc59 	bl	8000b36 <_write>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d102      	bne.n	800528e <_write_r+0x1e>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	b103      	cbz	r3, 800528e <_write_r+0x1e>
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	bd38      	pop	{r3, r4, r5, pc}
 8005290:	20013344 	.word	0x20013344

08005294 <_close_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	4d06      	ldr	r5, [pc, #24]	; (80052b0 <_close_r+0x1c>)
 8005298:	2300      	movs	r3, #0
 800529a:	4604      	mov	r4, r0
 800529c:	4608      	mov	r0, r1
 800529e:	602b      	str	r3, [r5, #0]
 80052a0:	f7fb fc65 	bl	8000b6e <_close>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	d102      	bne.n	80052ae <_close_r+0x1a>
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	b103      	cbz	r3, 80052ae <_close_r+0x1a>
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	bd38      	pop	{r3, r4, r5, pc}
 80052b0:	20013344 	.word	0x20013344

080052b4 <_fstat_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4d07      	ldr	r5, [pc, #28]	; (80052d4 <_fstat_r+0x20>)
 80052b8:	2300      	movs	r3, #0
 80052ba:	4604      	mov	r4, r0
 80052bc:	4608      	mov	r0, r1
 80052be:	4611      	mov	r1, r2
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	f7fb fc60 	bl	8000b86 <_fstat>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	d102      	bne.n	80052d0 <_fstat_r+0x1c>
 80052ca:	682b      	ldr	r3, [r5, #0]
 80052cc:	b103      	cbz	r3, 80052d0 <_fstat_r+0x1c>
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	bd38      	pop	{r3, r4, r5, pc}
 80052d2:	bf00      	nop
 80052d4:	20013344 	.word	0x20013344

080052d8 <_isatty_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4d06      	ldr	r5, [pc, #24]	; (80052f4 <_isatty_r+0x1c>)
 80052dc:	2300      	movs	r3, #0
 80052de:	4604      	mov	r4, r0
 80052e0:	4608      	mov	r0, r1
 80052e2:	602b      	str	r3, [r5, #0]
 80052e4:	f7fb fc5f 	bl	8000ba6 <_isatty>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_isatty_r+0x1a>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_isatty_r+0x1a>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	20013344 	.word	0x20013344

080052f8 <_lseek_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4d07      	ldr	r5, [pc, #28]	; (8005318 <_lseek_r+0x20>)
 80052fc:	4604      	mov	r4, r0
 80052fe:	4608      	mov	r0, r1
 8005300:	4611      	mov	r1, r2
 8005302:	2200      	movs	r2, #0
 8005304:	602a      	str	r2, [r5, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	f7fb fc58 	bl	8000bbc <_lseek>
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	d102      	bne.n	8005316 <_lseek_r+0x1e>
 8005310:	682b      	ldr	r3, [r5, #0]
 8005312:	b103      	cbz	r3, 8005316 <_lseek_r+0x1e>
 8005314:	6023      	str	r3, [r4, #0]
 8005316:	bd38      	pop	{r3, r4, r5, pc}
 8005318:	20013344 	.word	0x20013344

0800531c <__malloc_lock>:
 800531c:	4801      	ldr	r0, [pc, #4]	; (8005324 <__malloc_lock+0x8>)
 800531e:	f7ff be0b 	b.w	8004f38 <__retarget_lock_acquire_recursive>
 8005322:	bf00      	nop
 8005324:	20013338 	.word	0x20013338

08005328 <__malloc_unlock>:
 8005328:	4801      	ldr	r0, [pc, #4]	; (8005330 <__malloc_unlock+0x8>)
 800532a:	f7ff be06 	b.w	8004f3a <__retarget_lock_release_recursive>
 800532e:	bf00      	nop
 8005330:	20013338 	.word	0x20013338

08005334 <_read_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4d07      	ldr	r5, [pc, #28]	; (8005354 <_read_r+0x20>)
 8005338:	4604      	mov	r4, r0
 800533a:	4608      	mov	r0, r1
 800533c:	4611      	mov	r1, r2
 800533e:	2200      	movs	r2, #0
 8005340:	602a      	str	r2, [r5, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	f7fb fbda 	bl	8000afc <_read>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d102      	bne.n	8005352 <_read_r+0x1e>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	b103      	cbz	r3, 8005352 <_read_r+0x1e>
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	20013344 	.word	0x20013344

08005358 <_init>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr

08005364 <_fini>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr
