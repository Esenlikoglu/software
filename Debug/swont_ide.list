
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005244  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005528  08005528  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005530  08005530  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005530  08005530  00015530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005534  08005534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001327c  20000070  080055a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200132ec  080055a8  000232ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4af  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002616  00000000  00000000  0002d54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0002fb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  000308a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000236c2  00000000  00000000  000314a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffb7  00000000  00000000  00054b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb503  00000000  00000000  00064b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013001c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c50  00000000  00000000  0013006c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053b4 	.word	0x080053b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080053b4 	.word	0x080053b4

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b974 	b.w	80004dc <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	468e      	mov	lr, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d14d      	bne.n	80002b6 <__udivmoddi4+0xaa>
 800021a:	428a      	cmp	r2, r1
 800021c:	4694      	mov	ip, r2
 800021e:	d969      	bls.n	80002f4 <__udivmoddi4+0xe8>
 8000220:	fab2 f282 	clz	r2, r2
 8000224:	b152      	cbz	r2, 800023c <__udivmoddi4+0x30>
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	f1c2 0120 	rsb	r1, r2, #32
 800022e:	fa20 f101 	lsr.w	r1, r0, r1
 8000232:	fa0c fc02 	lsl.w	ip, ip, r2
 8000236:	ea41 0e03 	orr.w	lr, r1, r3
 800023a:	4094      	lsls	r4, r2
 800023c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000240:	0c21      	lsrs	r1, r4, #16
 8000242:	fbbe f6f8 	udiv	r6, lr, r8
 8000246:	fa1f f78c 	uxth.w	r7, ip
 800024a:	fb08 e316 	mls	r3, r8, r6, lr
 800024e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000252:	fb06 f107 	mul.w	r1, r6, r7
 8000256:	4299      	cmp	r1, r3
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x64>
 800025a:	eb1c 0303 	adds.w	r3, ip, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 811f 	bcs.w	80004a4 <__udivmoddi4+0x298>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 811c 	bls.w	80004a4 <__udivmoddi4+0x298>
 800026c:	3e02      	subs	r6, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 f707 	mul.w	r7, r0, r7
 8000284:	42a7      	cmp	r7, r4
 8000286:	d90a      	bls.n	800029e <__udivmoddi4+0x92>
 8000288:	eb1c 0404 	adds.w	r4, ip, r4
 800028c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000290:	f080 810a 	bcs.w	80004a8 <__udivmoddi4+0x29c>
 8000294:	42a7      	cmp	r7, r4
 8000296:	f240 8107 	bls.w	80004a8 <__udivmoddi4+0x29c>
 800029a:	4464      	add	r4, ip
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a2:	1be4      	subs	r4, r4, r7
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa4>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xc2>
 80002ba:	2d00      	cmp	r5, #0
 80002bc:	f000 80ef 	beq.w	800049e <__udivmoddi4+0x292>
 80002c0:	2600      	movs	r6, #0
 80002c2:	e9c5 0100 	strd	r0, r1, [r5]
 80002c6:	4630      	mov	r0, r6
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f683 	clz	r6, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d14a      	bne.n	800036c <__udivmoddi4+0x160>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd4>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80f9 	bhi.w	80004d2 <__udivmoddi4+0x2c6>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	469e      	mov	lr, r3
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa4>
 80002ee:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa4>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xec>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 8092 	bne.w	8000426 <__udivmoddi4+0x21a>
 8000302:	eba1 010c 	sub.w	r1, r1, ip
 8000306:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030a:	fa1f fe8c 	uxth.w	lr, ip
 800030e:	2601      	movs	r6, #1
 8000310:	0c20      	lsrs	r0, r4, #16
 8000312:	fbb1 f3f7 	udiv	r3, r1, r7
 8000316:	fb07 1113 	mls	r1, r7, r3, r1
 800031a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031e:	fb0e f003 	mul.w	r0, lr, r3
 8000322:	4288      	cmp	r0, r1
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x12c>
 8000326:	eb1c 0101 	adds.w	r1, ip, r1
 800032a:	f103 38ff 	add.w	r8, r3, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x12a>
 8000330:	4288      	cmp	r0, r1
 8000332:	f200 80cb 	bhi.w	80004cc <__udivmoddi4+0x2c0>
 8000336:	4643      	mov	r3, r8
 8000338:	1a09      	subs	r1, r1, r0
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000340:	fb07 1110 	mls	r1, r7, r0, r1
 8000344:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000348:	fb0e fe00 	mul.w	lr, lr, r0
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x156>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 31ff 	add.w	r1, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x154>
 800035a:	45a6      	cmp	lr, r4
 800035c:	f200 80bb 	bhi.w	80004d6 <__udivmoddi4+0x2ca>
 8000360:	4608      	mov	r0, r1
 8000362:	eba4 040e 	sub.w	r4, r4, lr
 8000366:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036a:	e79c      	b.n	80002a6 <__udivmoddi4+0x9a>
 800036c:	f1c6 0720 	rsb	r7, r6, #32
 8000370:	40b3      	lsls	r3, r6
 8000372:	fa22 fc07 	lsr.w	ip, r2, r7
 8000376:	ea4c 0c03 	orr.w	ip, ip, r3
 800037a:	fa20 f407 	lsr.w	r4, r0, r7
 800037e:	fa01 f306 	lsl.w	r3, r1, r6
 8000382:	431c      	orrs	r4, r3
 8000384:	40f9      	lsrs	r1, r7
 8000386:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038a:	fa00 f306 	lsl.w	r3, r0, r6
 800038e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000392:	0c20      	lsrs	r0, r4, #16
 8000394:	fa1f fe8c 	uxth.w	lr, ip
 8000398:	fb09 1118 	mls	r1, r9, r8, r1
 800039c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a0:	fb08 f00e 	mul.w	r0, r8, lr
 80003a4:	4288      	cmp	r0, r1
 80003a6:	fa02 f206 	lsl.w	r2, r2, r6
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b8>
 80003ac:	eb1c 0101 	adds.w	r1, ip, r1
 80003b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b4:	f080 8088 	bcs.w	80004c8 <__udivmoddi4+0x2bc>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f240 8085 	bls.w	80004c8 <__udivmoddi4+0x2bc>
 80003be:	f1a8 0802 	sub.w	r8, r8, #2
 80003c2:	4461      	add	r1, ip
 80003c4:	1a09      	subs	r1, r1, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003cc:	fb09 1110 	mls	r1, r9, r0, r1
 80003d0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d8:	458e      	cmp	lr, r1
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1e2>
 80003dc:	eb1c 0101 	adds.w	r1, ip, r1
 80003e0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e4:	d26c      	bcs.n	80004c0 <__udivmoddi4+0x2b4>
 80003e6:	458e      	cmp	lr, r1
 80003e8:	d96a      	bls.n	80004c0 <__udivmoddi4+0x2b4>
 80003ea:	3802      	subs	r0, #2
 80003ec:	4461      	add	r1, ip
 80003ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f2:	fba0 9402 	umull	r9, r4, r0, r2
 80003f6:	eba1 010e 	sub.w	r1, r1, lr
 80003fa:	42a1      	cmp	r1, r4
 80003fc:	46c8      	mov	r8, r9
 80003fe:	46a6      	mov	lr, r4
 8000400:	d356      	bcc.n	80004b0 <__udivmoddi4+0x2a4>
 8000402:	d053      	beq.n	80004ac <__udivmoddi4+0x2a0>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x212>
 8000406:	ebb3 0208 	subs.w	r2, r3, r8
 800040a:	eb61 010e 	sbc.w	r1, r1, lr
 800040e:	fa01 f707 	lsl.w	r7, r1, r7
 8000412:	fa22 f306 	lsr.w	r3, r2, r6
 8000416:	40f1      	lsrs	r1, r6
 8000418:	431f      	orrs	r7, r3
 800041a:	e9c5 7100 	strd	r7, r1, [r5]
 800041e:	2600      	movs	r6, #0
 8000420:	4631      	mov	r1, r6
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	f1c2 0320 	rsb	r3, r2, #32
 800042a:	40d8      	lsrs	r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa21 f303 	lsr.w	r3, r1, r3
 8000434:	4091      	lsls	r1, r2
 8000436:	4301      	orrs	r1, r0
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fbb3 f0f7 	udiv	r0, r3, r7
 8000444:	fb07 3610 	mls	r6, r7, r0, r3
 8000448:	0c0b      	lsrs	r3, r1, #16
 800044a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044e:	fb00 f60e 	mul.w	r6, r0, lr
 8000452:	429e      	cmp	r6, r3
 8000454:	fa04 f402 	lsl.w	r4, r4, r2
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x260>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000462:	d22f      	bcs.n	80004c4 <__udivmoddi4+0x2b8>
 8000464:	429e      	cmp	r6, r3
 8000466:	d92d      	bls.n	80004c4 <__udivmoddi4+0x2b8>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1b9b      	subs	r3, r3, r6
 800046e:	b289      	uxth	r1, r1
 8000470:	fbb3 f6f7 	udiv	r6, r3, r7
 8000474:	fb07 3316 	mls	r3, r7, r6, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb06 f30e 	mul.w	r3, r6, lr
 8000480:	428b      	cmp	r3, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x28a>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f106 38ff 	add.w	r8, r6, #4294967295
 800048c:	d216      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800048e:	428b      	cmp	r3, r1
 8000490:	d914      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000492:	3e02      	subs	r6, #2
 8000494:	4461      	add	r1, ip
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800049c:	e738      	b.n	8000310 <__udivmoddi4+0x104>
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e705      	b.n	80002b0 <__udivmoddi4+0xa4>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e3      	b.n	8000270 <__udivmoddi4+0x64>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6f8      	b.n	800029e <__udivmoddi4+0x92>
 80004ac:	454b      	cmp	r3, r9
 80004ae:	d2a9      	bcs.n	8000404 <__udivmoddi4+0x1f8>
 80004b0:	ebb9 0802 	subs.w	r8, r9, r2
 80004b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7a3      	b.n	8000404 <__udivmoddi4+0x1f8>
 80004bc:	4646      	mov	r6, r8
 80004be:	e7ea      	b.n	8000496 <__udivmoddi4+0x28a>
 80004c0:	4620      	mov	r0, r4
 80004c2:	e794      	b.n	80003ee <__udivmoddi4+0x1e2>
 80004c4:	4640      	mov	r0, r8
 80004c6:	e7d1      	b.n	800046c <__udivmoddi4+0x260>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e77b      	b.n	80003c4 <__udivmoddi4+0x1b8>
 80004cc:	3b02      	subs	r3, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	e732      	b.n	8000338 <__udivmoddi4+0x12c>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e709      	b.n	80002ea <__udivmoddi4+0xde>
 80004d6:	4464      	add	r4, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e742      	b.n	8000362 <__udivmoddi4+0x156>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <Commacounter>:

int beginx;


void Commacounter(UI_t commando)
{
 80004e0:	b084      	sub	sp, #16
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	f107 0c10 	add.w	ip, r7, #16
 80004ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int i;
  for(i=0; i<SIZE_TYPE; i++)
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	e00f      	b.n	8000516 <Commacounter+0x36>
  {
	 // commando.type[i] = input.line_rx_buffer[i];
	  if (input.line_rx_buffer[i] == ',')
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <Commacounter+0x50>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4413      	add	r3, r2
 80004fc:	3301      	adds	r3, #1
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b2c      	cmp	r3, #44	; 0x2c
 8000502:	d105      	bne.n	8000510 <Commacounter+0x30>
	  {
		  commacounter ++;
 8000504:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <Commacounter+0x54>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <Commacounter+0x54>)
 800050c:	6013      	str	r3, [r2, #0]
		  break;
 800050e:	e007      	b.n	8000520 <Commacounter+0x40>
  for(i=0; i<SIZE_TYPE; i++)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3301      	adds	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800051c:	dbeb      	blt.n	80004f6 <Commacounter+0x16>
	  }

  }
}
 800051e:	bf00      	nop
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	b004      	add	sp, #16
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	200000a8 	.word	0x200000a8
 8000534:	2000008c 	.word	0x2000008c

08000538 <API_Getcommand>:
//		   printf("Ik zit in de default");
//	 }
//}

void API_Getcommand(UI_t commando)
{
 8000538:	b084      	sub	sp, #16
 800053a:	b580      	push	{r7, lr}
 800053c:	b084      	sub	sp, #16
 800053e:	af02      	add	r7, sp, #8
 8000540:	f107 0c10 	add.w	ip, r7, #16
 8000544:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int i;

	// Reset some stuff
	input.byte_buffer_rx[0] = 0;
 8000548:	4b3a      	ldr	r3, [pc, #232]	; (8000634 <API_Getcommand+0xfc>)
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
	input.char_counter = 0;
 800054e:	4b39      	ldr	r3, [pc, #228]	; (8000634 <API_Getcommand+0xfc>)
 8000550:	2200      	movs	r2, #0
 8000552:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	input.command_execute_flag = FALSE;
 8000556:	4b37      	ldr	r3, [pc, #220]	; (8000634 <API_Getcommand+0xfc>)
 8000558:	2200      	movs	r2, #0
 800055a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

	Commacounter(commando);
 800055e:	466a      	mov	r2, sp
 8000560:	f107 0320 	add.w	r3, r7, #32
 8000564:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000568:	e882 0003 	stmia.w	r2, {r0, r1}
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000572:	f7ff ffb5 	bl	80004e0 <Commacounter>
	//copy the buffer into the struct
	strcpy(commando.type, input.line_rx_buffer);
 8000576:	4930      	ldr	r1, [pc, #192]	; (8000638 <API_Getcommand+0x100>)
 8000578:	f107 0010 	add.w	r0, r7, #16
 800057c:	f004 fa8a 	bl	8004a94 <strcpy>

    //Comparing the string in the struct with certain strings
	if( strcmp(commando.type, "lijn") == 0 )
 8000580:	492e      	ldr	r1, [pc, #184]	; (800063c <API_Getcommand+0x104>)
 8000582:	f107 0010 	add.w	r0, r7, #16
 8000586:	f7ff fe1f 	bl	80001c8 <strcmp>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d106      	bne.n	800059e <API_Getcommand+0x66>
			 {
				 printf("voer in de data met een comma daartussen\n\n");
 8000590:	482b      	ldr	r0, [pc, #172]	; (8000640 <API_Getcommand+0x108>)
 8000592:	f004 fa77 	bl	8004a84 <puts>
				 printf(" x, y, x’, y’, kleur, dikte\n");
 8000596:	482b      	ldr	r0, [pc, #172]	; (8000644 <API_Getcommand+0x10c>)
 8000598:	f004 fa74 	bl	8004a84 <puts>
 800059c:	e032      	b.n	8000604 <API_Getcommand+0xcc>
			 }

			 else if( strcmp(commando.type, "rechthoek") == 0 )
 800059e:	492a      	ldr	r1, [pc, #168]	; (8000648 <API_Getcommand+0x110>)
 80005a0:	f107 0010 	add.w	r0, r7, #16
 80005a4:	f7ff fe10 	bl	80001c8 <strcmp>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d103      	bne.n	80005b6 <API_Getcommand+0x7e>
			 {
				 printf("het is rechthoek\n");
 80005ae:	4827      	ldr	r0, [pc, #156]	; (800064c <API_Getcommand+0x114>)
 80005b0:	f004 fa68 	bl	8004a84 <puts>
 80005b4:	e026      	b.n	8000604 <API_Getcommand+0xcc>
			 }

			 else if( strcmp(commando.type, "tekst") == 0 )
 80005b6:	4926      	ldr	r1, [pc, #152]	; (8000650 <API_Getcommand+0x118>)
 80005b8:	f107 0010 	add.w	r0, r7, #16
 80005bc:	f7ff fe04 	bl	80001c8 <strcmp>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d103      	bne.n	80005ce <API_Getcommand+0x96>
			 {
				  printf("het is tekst\n");
 80005c6:	4823      	ldr	r0, [pc, #140]	; (8000654 <API_Getcommand+0x11c>)
 80005c8:	f004 fa5c 	bl	8004a84 <puts>
 80005cc:	e01a      	b.n	8000604 <API_Getcommand+0xcc>
			 }

			 else if( strcmp(commando.type, "bitmap") == 0 )
 80005ce:	4922      	ldr	r1, [pc, #136]	; (8000658 <API_Getcommand+0x120>)
 80005d0:	f107 0010 	add.w	r0, r7, #16
 80005d4:	f7ff fdf8 	bl	80001c8 <strcmp>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d103      	bne.n	80005e6 <API_Getcommand+0xae>
			 {
				  printf("het is bitmap\n");
 80005de:	481f      	ldr	r0, [pc, #124]	; (800065c <API_Getcommand+0x124>)
 80005e0:	f004 fa50 	bl	8004a84 <puts>
 80005e4:	e00e      	b.n	8000604 <API_Getcommand+0xcc>
			 }

			 else if( strcmp(commando.type, "clearscreen") == 0 )
 80005e6:	491e      	ldr	r1, [pc, #120]	; (8000660 <API_Getcommand+0x128>)
 80005e8:	f107 0010 	add.w	r0, r7, #16
 80005ec:	f7ff fdec 	bl	80001c8 <strcmp>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d103      	bne.n	80005fe <API_Getcommand+0xc6>
			 {
				  printf("het is clearscreen\n");
 80005f6:	481b      	ldr	r0, [pc, #108]	; (8000664 <API_Getcommand+0x12c>)
 80005f8:	f004 fa44 	bl	8004a84 <puts>
 80005fc:	e002      	b.n	8000604 <API_Getcommand+0xcc>
			 }

			 else
			 {
				 printf("Ongeldig commando \t\n");
 80005fe:	481a      	ldr	r0, [pc, #104]	; (8000668 <API_Getcommand+0x130>)
 8000600:	f004 fa40 	bl	8004a84 <puts>
			 }


			 //clear the buffer
			 for(i = 0; i < LINE_BUFLEN; i++) input.line_rx_buffer[i] = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	e008      	b.n	800061c <API_Getcommand+0xe4>
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <API_Getcommand+0xfc>)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4413      	add	r3, r2
 8000610:	3301      	adds	r3, #1
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3301      	adds	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000622:	dbf2      	blt.n	800060a <API_Getcommand+0xd2>

}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000630:	b004      	add	sp, #16
 8000632:	4770      	bx	lr
 8000634:	200000a8 	.word	0x200000a8
 8000638:	200000a9 	.word	0x200000a9
 800063c:	080053cc 	.word	0x080053cc
 8000640:	080053d4 	.word	0x080053d4
 8000644:	08005400 	.word	0x08005400
 8000648:	08005420 	.word	0x08005420
 800064c:	0800542c 	.word	0x0800542c
 8000650:	08005440 	.word	0x08005440
 8000654:	08005448 	.word	0x08005448
 8000658:	08005458 	.word	0x08005458
 800065c:	08005460 	.word	0x08005460
 8000660:	08005470 	.word	0x08005470
 8000664:	0800547c 	.word	0x0800547c
 8000668:	08005490 	.word	0x08005490

0800066c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_DMA_Init+0x3c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <MX_DMA_Init+0x3c>)
 800067c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_DMA_Init+0x3c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	2044      	movs	r0, #68	; 0x44
 8000694:	f000 ff15 	bl	80014c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000698:	2044      	movs	r0, #68	; 0x44
 800069a:	f000 ff2e 	bl	80014fa <HAL_NVIC_EnableIRQ>

}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800

080006ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	4b32      	ldr	r3, [pc, #200]	; (8000790 <MX_GPIO_Init+0xe4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a31      	ldr	r2, [pc, #196]	; (8000790 <MX_GPIO_Init+0xe4>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <MX_GPIO_Init+0xe4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MX_GPIO_Init+0xe4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a2a      	ldr	r2, [pc, #168]	; (8000790 <MX_GPIO_Init+0xe4>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <MX_GPIO_Init+0xe4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <MX_GPIO_Init+0xe4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a23      	ldr	r2, [pc, #140]	; (8000790 <MX_GPIO_Init+0xe4>)
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <MX_GPIO_Init+0xe4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0310 	and.w	r3, r3, #16
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_GPIO_Init+0xe4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_GPIO_Init+0xe4>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_GPIO_Init+0xe4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000738:	4816      	ldr	r0, [pc, #88]	; (8000794 <MX_GPIO_Init+0xe8>)
 800073a:	f001 fc27 	bl	8001f8c <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000744:	4814      	ldr	r0, [pc, #80]	; (8000798 <MX_GPIO_Init+0xec>)
 8000746:	f001 fc21 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800074a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800074e:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000758:	2303      	movs	r3, #3
 800075a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	480c      	ldr	r0, [pc, #48]	; (8000794 <MX_GPIO_Init+0xe8>)
 8000764:	f001 fa76 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_GPIO_Init+0xec>)
 8000782:	f001 fa67 	bl	8001c54 <HAL_GPIO_Init>

}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40021000 	.word	0x40021000
 8000798:	40020400 	.word	0x40020400

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b083      	sub	sp, #12
 80007a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a2:	f000 fd41 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a6:	f000 f83f 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f7ff ff7f 	bl	80006ac <MX_GPIO_Init>
  MX_DMA_Init();
 80007ae:	f7ff ff5d 	bl	800066c <MX_DMA_Init>
  MX_TIM1_Init();
 80007b2:	f000 fa8f 	bl	8000cd4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007b6:	f000 fadd 	bl	8000d74 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007ba:	f000 fbf3 	bl	8000fa4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 80007be:	f000 fc95 	bl	80010ec <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 fce4 	bl	8001190 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 80007c8:	220a      	movs	r2, #10
 80007ca:	210a      	movs	r1, #10
 80007cc:	200a      	movs	r0, #10
 80007ce:	f000 fd03 	bl	80011d8 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 fcfe 	bl	80011d8 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	f240 103f 	movw	r0, #319	; 0x13f
 80007e4:	f000 fcf8 	bl	80011d8 <UB_VGA_SetPixel>

  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 80007e8:	2201      	movs	r2, #1
 80007ea:	490c      	ldr	r1, [pc, #48]	; (800081c <main+0x80>)
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <main+0x84>)
 80007ee:	f003 f8fb 	bl	80039e8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 if(input.command_execute_flag == TRUE)
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <main+0x80>)
 80007f4:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80007f8:	2bff      	cmp	r3, #255	; 0xff
 80007fa:	d1fa      	bne.n	80007f2 <main+0x56>
	  {
		 API_Getcommand(commandos);
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <main+0x88>)
 80007fe:	466c      	mov	r4, sp
 8000800:	f103 0210 	add.w	r2, r3, #16
 8000804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000808:	e884 0003 	stmia.w	r4, {r0, r1}
 800080c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800080e:	f7ff fe93 	bl	8000538 <API_Getcommand>

	  // When finished reset the flag
	     input.command_execute_flag = FALSE;
 8000812:	4b02      	ldr	r3, [pc, #8]	; (800081c <main+0x80>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	 if(input.command_execute_flag == TRUE)
 800081a:	e7ea      	b.n	80007f2 <main+0x56>
 800081c:	200000a8 	.word	0x200000a8
 8000820:	2000059c 	.word	0x2000059c
 8000824:	20000090 	.word	0x20000090

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	; 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	2230      	movs	r2, #48	; 0x30
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f004 f8ae 	bl	8004998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <SystemClock_Config+0xcc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a27      	ldr	r2, [pc, #156]	; (80008f4 <SystemClock_Config+0xcc>)
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <SystemClock_Config+0xcc>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <SystemClock_Config+0xd0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <SystemClock_Config+0xd0>)
 8000872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <SystemClock_Config+0xd0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800089c:	23a8      	movs	r3, #168	; 0xa8
 800089e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008a4:	2304      	movs	r3, #4
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fb87 	bl	8001fc0 <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b8:	f000 f832 	bl	8000920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c0:	2302      	movs	r3, #2
 80008c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2105      	movs	r1, #5
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fdde 	bl	800249c <HAL_RCC_ClockConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008e6:	f000 f81b 	bl	8000920 <Error_Handler>
  }
}
 80008ea:	bf00      	nop
 80008ec:	3750      	adds	r7, #80	; 0x50
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000

080008fc <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000904:	1d39      	adds	r1, r7, #4
 8000906:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800090a:	2201      	movs	r2, #1
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <__io_putchar+0x20>)
 800090e:	f002 ffd2 	bl	80038b6 <HAL_UART_Transmit>
	return ch;												//Return the character
 8000912:	687b      	ldr	r3, [r7, #4]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000059c 	.word	0x2000059c

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <HAL_MspInit+0x4c>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 fc7a 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009e0:	4828      	ldr	r0, [pc, #160]	; (8000a84 <TIM2_IRQHandler+0xa8>)
 80009e2:	f002 f8b7 	bl	8002b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 80009e6:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <TIM2_IRQHandler+0xa8>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f06f 0208 	mvn.w	r2, #8
 80009ee:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 80009f0:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <TIM2_IRQHandler+0xac>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <TIM2_IRQHandler+0xac>)
 80009fa:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <TIM2_IRQHandler+0xac>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000a04:	d905      	bls.n	8000a12 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <TIM2_IRQHandler+0xac>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000a0c:	4a1f      	ldr	r2, [pc, #124]	; (8000a8c <TIM2_IRQHandler+0xb0>)
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <TIM2_IRQHandler+0xac>)
 8000a10:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <TIM2_IRQHandler+0xac>)
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d802      	bhi.n	8000a20 <TIM2_IRQHandler+0x44>
 8000a1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a1e:	e001      	b.n	8000a24 <TIM2_IRQHandler+0x48>
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	4a1a      	ldr	r2, [pc, #104]	; (8000a90 <TIM2_IRQHandler+0xb4>)
 8000a26:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <TIM2_IRQHandler+0xac>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	2b23      	cmp	r3, #35	; 0x23
 8000a2e:	d927      	bls.n	8000a80 <TIM2_IRQHandler+0xa4>
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <TIM2_IRQHandler+0xac>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	f240 2202 	movw	r2, #514	; 0x202
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d821      	bhi.n	8000a80 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000a3c:	4a15      	ldr	r2, [pc, #84]	; (8000a94 <TIM2_IRQHandler+0xb8>)
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <TIM2_IRQHandler+0xac>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000a44:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <TIM2_IRQHandler+0xb8>)
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <TIM2_IRQHandler+0xac>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <TIM2_IRQHandler+0xbc>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <TIM2_IRQHandler+0xbc>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000a58:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <TIM2_IRQHandler+0xc0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <TIM2_IRQHandler+0xc0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f042 0201 	orr.w	r2, r2, #1
 8000a66:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <TIM2_IRQHandler+0xac>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d005      	beq.n	8000a80 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <TIM2_IRQHandler+0xac>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000a7c:	4a02      	ldr	r2, [pc, #8]	; (8000a88 <TIM2_IRQHandler+0xac>)
 8000a7e:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200004fc 	.word	0x200004fc
 8000a88:	200132cc 	.word	0x200132cc
 8000a8c:	200005dc 	.word	0x200005dc
 8000a90:	40020400 	.word	0x40020400
 8000a94:	40026488 	.word	0x40026488
 8000a98:	40010000 	.word	0x40010000
 8000a9c:	2000053c 	.word	0x2000053c

08000aa0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <USART2_IRQHandler+0x74>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	71fb      	strb	r3, [r7, #7]
//	if(uart_char != LINE_FEED)
//	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b0d      	cmp	r3, #13
 8000ab0:	d002      	beq.n	8000ab8 <USART2_IRQHandler+0x18>
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ab6:	d10e      	bne.n	8000ad6 <USART2_IRQHandler+0x36>
		{
			input.command_execute_flag = TRUE;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <USART2_IRQHandler+0x78>)
 8000aba:	22ff      	movs	r2, #255	; 0xff
 8000abc:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <USART2_IRQHandler+0x78>)
 8000ac2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000ac6:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <USART2_IRQHandler+0x78>)
 8000ac8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <USART2_IRQHandler+0x78>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000ad4:	e011      	b.n	8000afa <USART2_IRQHandler+0x5a>

		}
		else
		{
			input.command_execute_flag = FALSE;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <USART2_IRQHandler+0x78>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <USART2_IRQHandler+0x78>)
 8000ae0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <USART2_IRQHandler+0x78>)
 8000ae6:	4413      	add	r3, r2
 8000ae8:	79fa      	ldrb	r2, [r7, #7]
 8000aea:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <USART2_IRQHandler+0x78>)
 8000aee:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000af2:	3301      	adds	r3, #1
 8000af4:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <USART2_IRQHandler+0x78>)
 8000af6:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000afa:	4808      	ldr	r0, [pc, #32]	; (8000b1c <USART2_IRQHandler+0x7c>)
 8000afc:	f002 ffca 	bl	8003a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000b00:	2201      	movs	r2, #1
 8000b02:	4905      	ldr	r1, [pc, #20]	; (8000b18 <USART2_IRQHandler+0x78>)
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <USART2_IRQHandler+0x7c>)
 8000b06:	f002 ff6f 	bl	80039e8 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */

}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40004400 	.word	0x40004400
 8000b18:	200000a8 	.word	0x200000a8
 8000b1c:	2000059c 	.word	0x2000059c

08000b20 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <DMA2_Stream5_IRQHandler+0x48>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6a1a      	ldr	r2, [r3, #32]
 8000b2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8000b2e:	4013      	ands	r3, r2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10f      	bne.n	8000b54 <DMA2_Stream5_IRQHandler+0x34>
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <DMA2_Stream5_IRQHandler+0x48>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	6a1a      	ldr	r2, [r3, #32]
 8000b3a:	f240 4344 	movw	r3, #1092	; 0x444
 8000b3e:	4013      	ands	r3, r2
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d107      	bne.n	8000b54 <DMA2_Stream5_IRQHandler+0x34>
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <DMA2_Stream5_IRQHandler+0x48>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <DMA2_Stream5_IRQHandler+0x48>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f022 0201 	bic.w	r2, r2, #1
 8000b52:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <DMA2_Stream5_IRQHandler+0x4c>)
 8000b56:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000b5a:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <DMA2_Stream5_IRQHandler+0x50>)
 8000b5e:	f000 fe0f 	bl	8001780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200004bc 	.word	0x200004bc
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	2000053c 	.word	0x2000053c

08000b74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	e00a      	b.n	8000b9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b86:	f3af 8000 	nop.w
 8000b8a:	4601      	mov	r1, r0
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	60ba      	str	r2, [r7, #8]
 8000b92:	b2ca      	uxtb	r2, r1
 8000b94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbf0      	blt.n	8000b86 <_read+0x12>
	}

return len;
 8000ba4:	687b      	ldr	r3, [r7, #4]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	e009      	b.n	8000bd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	60ba      	str	r2, [r7, #8]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fe97 	bl	80008fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697a      	ldr	r2, [r7, #20]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	dbf1      	blt.n	8000bc0 <_write+0x12>
	}
	return len;
 8000bdc:	687b      	ldr	r3, [r7, #4]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <_close>:

int _close(int file)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
	return -1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c0e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_isatty>:

int _isatty(int file)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
	return 1;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x50>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <_sbrk+0x16>
		heap_end = &end;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <_sbrk+0x50>)
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <_sbrk+0x54>)
 8000c64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <_sbrk+0x50>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <_sbrk+0x50>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4413      	add	r3, r2
 8000c74:	466a      	mov	r2, sp
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d907      	bls.n	8000c8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c7a:	f003 fe63 	bl	8004944 <__errno>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	220c      	movs	r2, #12
 8000c82:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	e006      	b.n	8000c98 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <_sbrk+0x50>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a03      	ldr	r2, [pc, #12]	; (8000ca0 <_sbrk+0x50>)
 8000c94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200004b8 	.word	0x200004b8
 8000ca4:	200132f0 	.word	0x200132f0

08000ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <SystemInit+0x28>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <SystemInit+0x28>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SystemInit+0x28>)
 8000cbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <MX_TIM1_Init+0x98>)
 8000cf2:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <MX_TIM1_Init+0x9c>)
 8000cf4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <MX_TIM1_Init+0x98>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <MX_TIM1_Init+0x98>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_TIM1_Init+0x98>)
 8000d04:	220b      	movs	r2, #11
 8000d06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_TIM1_Init+0x98>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_TIM1_Init+0x98>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_TIM1_Init+0x98>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d1a:	4814      	ldr	r0, [pc, #80]	; (8000d6c <MX_TIM1_Init+0x98>)
 8000d1c:	f001 fdde 	bl	80028dc <HAL_TIM_Base_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000d26:	f7ff fdfb 	bl	8000920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d30:	f107 0308 	add.w	r3, r7, #8
 8000d34:	4619      	mov	r1, r3
 8000d36:	480d      	ldr	r0, [pc, #52]	; (8000d6c <MX_TIM1_Init+0x98>)
 8000d38:	f002 f8da 	bl	8002ef0 <HAL_TIM_ConfigClockSource>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000d42:	f7ff fded 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4619      	mov	r1, r3
 8000d52:	4806      	ldr	r0, [pc, #24]	; (8000d6c <MX_TIM1_Init+0x98>)
 8000d54:	f002 fcd2 	bl	80036fc <HAL_TIMEx_MasterConfigSynchronization>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000d5e:	f7ff fddf 	bl	8000920 <Error_Handler>
  }

}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200004bc 	.word	0x200004bc
 8000d70:	40010000 	.word	0x40010000

08000d74 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7a:	f107 0320 	add.w	r3, r7, #32
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]
 8000d92:	615a      	str	r2, [r3, #20]
 8000d94:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <MX_TIM2_Init+0xcc>)
 8000d98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <MX_TIM2_Init+0xcc>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <MX_TIM2_Init+0xcc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000daa:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <MX_TIM2_Init+0xcc>)
 8000dac:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000db0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db2:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <MX_TIM2_Init+0xcc>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db8:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <MX_TIM2_Init+0xcc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dbe:	4820      	ldr	r0, [pc, #128]	; (8000e40 <MX_TIM2_Init+0xcc>)
 8000dc0:	f001 fddb 	bl	800297a <HAL_TIM_PWM_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000dca:	f7ff fda9 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd6:	f107 0320 	add.w	r3, r7, #32
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4818      	ldr	r0, [pc, #96]	; (8000e40 <MX_TIM2_Init+0xcc>)
 8000dde:	f002 fc8d 	bl	80036fc <HAL_TIMEx_MasterConfigSynchronization>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000de8:	f7ff fd9a 	bl	8000920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dec:	2360      	movs	r3, #96	; 0x60
 8000dee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000df0:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000df4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000df6:	2302      	movs	r3, #2
 8000df8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2208      	movs	r2, #8
 8000e02:	4619      	mov	r1, r3
 8000e04:	480e      	ldr	r0, [pc, #56]	; (8000e40 <MX_TIM2_Init+0xcc>)
 8000e06:	f001 ffad 	bl	8002d64 <HAL_TIM_PWM_ConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e10:	f7ff fd86 	bl	8000920 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000e14:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	220c      	movs	r2, #12
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <MX_TIM2_Init+0xcc>)
 8000e22:	f001 ff9f 	bl	8002d64 <HAL_TIM_PWM_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000e2c:	f7ff fd78 	bl	8000920 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000e30:	4803      	ldr	r0, [pc, #12]	; (8000e40 <MX_TIM2_Init+0xcc>)
 8000e32:	f000 f87f 	bl	8000f34 <HAL_TIM_MspPostInit>

}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200004fc 	.word	0x200004fc

08000e44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <HAL_TIM_Base_MspInit+0x94>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d13c      	bne.n	8000ed0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <HAL_TIM_Base_MspInit+0x98>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a1f      	ldr	r2, [pc, #124]	; (8000edc <HAL_TIM_Base_MspInit+0x98>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <HAL_TIM_Base_MspInit+0x98>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e74:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <HAL_TIM_Base_MspInit+0xa0>)
 8000e76:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e7a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000e7e:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e82:	2240      	movs	r2, #64	; 0x40
 8000e84:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e92:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_TIM_Base_MspInit+0x9c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_TIM_Base_MspInit+0x9c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_TIM_Base_MspInit+0x9c>)
 8000ea8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eac:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_TIM_Base_MspInit+0x9c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000eb4:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <HAL_TIM_Base_MspInit+0x9c>)
 8000eb6:	f000 fb3b 	bl	8001530 <HAL_DMA_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000ec0:	f7ff fd2e 	bl	8000920 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_TIM_Base_MspInit+0x9c>)
 8000ec8:	621a      	str	r2, [r3, #32]
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <HAL_TIM_Base_MspInit+0x9c>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40010000 	.word	0x40010000
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	2000053c 	.word	0x2000053c
 8000ee4:	40026488 	.word	0x40026488

08000ee8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef8:	d115      	bne.n	8000f26 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_TIM_PWM_MspInit+0x48>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <HAL_TIM_PWM_MspInit+0x48>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_TIM_PWM_MspInit+0x48>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	201c      	movs	r0, #28
 8000f1c:	f000 fad1 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f20:	201c      	movs	r0, #28
 8000f22:	f000 faea 	bl	80014fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f54:	d11e      	bne.n	8000f94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_TIM_MspPostInit+0x68>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <HAL_TIM_MspPostInit+0x68>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_TIM_MspPostInit+0x68>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8000f72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f84:	2301      	movs	r3, #1
 8000f86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <HAL_TIM_MspPostInit+0x6c>)
 8000f90:	f000 fe60 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020400 	.word	0x40020400

08000fa4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_USART2_UART_Init+0x50>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fdc:	f002 fc1e 	bl	800381c <HAL_UART_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fe6:	f7ff fc9b 	bl	8000920 <Error_Handler>
  }

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000059c 	.word	0x2000059c
 8000ff4:	40004400 	.word	0x40004400

08000ff8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_UART_MspInit+0x94>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d133      	bne.n	8001082 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <HAL_UART_MspInit+0x98>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <HAL_UART_MspInit+0x98>)
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_UART_MspInit+0x98>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_UART_MspInit+0x98>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <HAL_UART_MspInit+0x98>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_UART_MspInit+0x98>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001052:	230c      	movs	r3, #12
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001062:	2307      	movs	r3, #7
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <HAL_UART_MspInit+0x9c>)
 800106e:	f000 fdf1 	bl	8001c54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2026      	movs	r0, #38	; 0x26
 8001078:	f000 fa23 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800107c:	2026      	movs	r0, #38	; 0x26
 800107e:	f000 fa3c 	bl	80014fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40004400 	.word	0x40004400
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000

08001098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800109c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800109e:	e003      	b.n	80010a8 <LoopCopyDataInit>

080010a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010a6:	3104      	adds	r1, #4

080010a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010b0:	d3f6      	bcc.n	80010a0 <CopyDataInit>
  ldr  r2, =_sbss
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010b4:	e002      	b.n	80010bc <LoopFillZerobss>

080010b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010b8:	f842 3b04 	str.w	r3, [r2], #4

080010bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010c0:	d3f9      	bcc.n	80010b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010c2:	f7ff fdf1 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c6:	f003 fc43 	bl	8004950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fb67 	bl	800079c <main>
  bx  lr    
 80010ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010d4:	08005538 	.word	0x08005538
  ldr  r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010dc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80010e0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80010e4:	200132ec 	.word	0x200132ec

080010e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC_IRQHandler>
	...

080010ec <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 80010f0:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <UB_VGA_Screen_Init+0x84>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 80010f6:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <UB_VGA_Screen_Init+0x84>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <UB_VGA_Screen_Init+0x84>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <UB_VGA_Screen_Init+0x88>)
 8001104:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001108:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 800110a:	481b      	ldr	r0, [pc, #108]	; (8001178 <UB_VGA_Screen_Init+0x8c>)
 800110c:	f001 fc11 	bl	8002932 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001110:	210c      	movs	r1, #12
 8001112:	4819      	ldr	r0, [pc, #100]	; (8001178 <UB_VGA_Screen_Init+0x8c>)
 8001114:	f001 fc5c 	bl	80029d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001118:	2108      	movs	r1, #8
 800111a:	4817      	ldr	r0, [pc, #92]	; (8001178 <UB_VGA_Screen_Init+0x8c>)
 800111c:	f001 fc96 	bl	8002a4c <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <UB_VGA_Screen_Init+0x90>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <UB_VGA_Screen_Init+0x90>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800112e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <UB_VGA_Screen_Init+0x90>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <UB_VGA_Screen_Init+0x90>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0201 	orr.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001140:	490f      	ldr	r1, [pc, #60]	; (8001180 <UB_VGA_Screen_Init+0x94>)
 8001142:	f240 1341 	movw	r3, #321	; 0x141
 8001146:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <UB_VGA_Screen_Init+0x98>)
 8001148:	480f      	ldr	r0, [pc, #60]	; (8001188 <UB_VGA_Screen_Init+0x9c>)
 800114a:	f000 fa9f 	bl	800168c <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 800114e:	480e      	ldr	r0, [pc, #56]	; (8001188 <UB_VGA_Screen_Init+0x9c>)
 8001150:	f000 f9ee 	bl	8001530 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <UB_VGA_Screen_Init+0x9c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <UB_VGA_Screen_Init+0x9c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0210 	orr.w	r2, r2, #16
 8001162:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <UB_VGA_Screen_Init+0xa0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a01      	ldr	r2, [pc, #4]	; (8001170 <UB_VGA_Screen_Init+0x84>)
 800116a:	6093      	str	r3, [r2, #8]
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200132cc 	.word	0x200132cc
 8001174:	40020400 	.word	0x40020400
 8001178:	200004fc 	.word	0x200004fc
 800117c:	200004bc 	.word	0x200004bc
 8001180:	200005dc 	.word	0x200005dc
 8001184:	40021015 	.word	0x40021015
 8001188:	2000053c 	.word	0x2000053c
 800118c:	40026488 	.word	0x40026488

08001190 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800119a:	2300      	movs	r3, #0
 800119c:	81bb      	strh	r3, [r7, #12]
 800119e:	e012      	b.n	80011c6 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80011a0:	2300      	movs	r3, #0
 80011a2:	81fb      	strh	r3, [r7, #14]
 80011a4:	e008      	b.n	80011b8 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 80011a6:	79fa      	ldrb	r2, [r7, #7]
 80011a8:	89b9      	ldrh	r1, [r7, #12]
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f813 	bl	80011d8 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80011b2:	89fb      	ldrh	r3, [r7, #14]
 80011b4:	3301      	adds	r3, #1
 80011b6:	81fb      	strh	r3, [r7, #14]
 80011b8:	89fb      	ldrh	r3, [r7, #14]
 80011ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011be:	d3f2      	bcc.n	80011a6 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80011c0:	89bb      	ldrh	r3, [r7, #12]
 80011c2:	3301      	adds	r3, #1
 80011c4:	81bb      	strh	r3, [r7, #12]
 80011c6:	89bb      	ldrh	r3, [r7, #12]
 80011c8:	2bef      	cmp	r3, #239	; 0xef
 80011ca:	d9e9      	bls.n	80011a0 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
 80011e2:	460b      	mov	r3, r1
 80011e4:	80bb      	strh	r3, [r7, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011f0:	d301      	bcc.n	80011f6 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 80011f6:	88bb      	ldrh	r3, [r7, #4]
 80011f8:	2bef      	cmp	r3, #239	; 0xef
 80011fa:	d901      	bls.n	8001200 <UB_VGA_SetPixel+0x28>
    yp = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001200:	88ba      	ldrh	r2, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	019b      	lsls	r3, r3, #6
 800120a:	441a      	add	r2, r3
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	4413      	add	r3, r2
 8001210:	4904      	ldr	r1, [pc, #16]	; (8001224 <UB_VGA_SetPixel+0x4c>)
 8001212:	78fa      	ldrb	r2, [r7, #3]
 8001214:	54ca      	strb	r2, [r1, r3]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	200005dc 	.word	0x200005dc

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f92b 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fb68 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f943 	bl	8001516 <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 f90b 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008
 80012f0:	200132d8 	.word	0x200132d8

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200132d8 	.word	0x200132d8

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <__NVIC_EnableIRQ+0x38>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	; (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	; (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff29 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff3e 	bl	8001354 <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff8e 	bl	8001400 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5d 	bl	80013ac <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff31 	bl	8001370 <__NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffa2 	bl	8001468 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff feda 	bl	80012f4 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e099      	b.n	8001680 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2202      	movs	r2, #2
 8001558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0201 	bic.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800156c:	e00f      	b.n	800158e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800156e:	f7ff fec1 	bl	80012f4 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b05      	cmp	r3, #5
 800157a:	d908      	bls.n	800158e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2220      	movs	r2, #32
 8001580:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2203      	movs	r2, #3
 8001586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e078      	b.n	8001680 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1e8      	bne.n	800156e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	4b38      	ldr	r3, [pc, #224]	; (8001688 <HAL_DMA_Init+0x158>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4313      	orrs	r3, r2
 80015de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d107      	bne.n	80015f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	4313      	orrs	r3, r2
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f023 0307 	bic.w	r3, r3, #7
 800160e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	4313      	orrs	r3, r2
 8001618:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	2b04      	cmp	r3, #4
 8001620:	d117      	bne.n	8001652 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4313      	orrs	r3, r2
 800162a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00e      	beq.n	8001652 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 fa91 	bl	8001b5c <DMA_CheckFifoParam>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2240      	movs	r2, #64	; 0x40
 8001644:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800164e:	2301      	movs	r3, #1
 8001650:	e016      	b.n	8001680 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fa48 	bl	8001af0 <DMA_CalcBaseAndBitshift>
 8001660:	4603      	mov	r3, r0
 8001662:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001668:	223f      	movs	r2, #63	; 0x3f
 800166a:	409a      	lsls	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	f010803f 	.word	0xf010803f

0800168c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_DMA_Start_IT+0x26>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e040      	b.n	8001734 <HAL_DMA_Start_IT+0xa8>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d12f      	bne.n	8001726 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2202      	movs	r2, #2
 80016ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 f9da 	bl	8001a94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e4:	223f      	movs	r2, #63	; 0x3f
 80016e6:	409a      	lsls	r2, r3
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0216 	orr.w	r2, r2, #22
 80016fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	2b00      	cmp	r3, #0
 8001702:	d007      	beq.n	8001714 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0208 	orr.w	r2, r2, #8
 8001712:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e005      	b.n	8001732 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800172e:	2302      	movs	r3, #2
 8001730:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001732:	7dfb      	ldrb	r3, [r7, #23]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d004      	beq.n	800175a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00c      	b.n	8001774 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2205      	movs	r2, #5
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0201 	bic.w	r2, r2, #1
 8001770:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800178c:	4b8e      	ldr	r3, [pc, #568]	; (80019c8 <HAL_DMA_IRQHandler+0x248>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a8e      	ldr	r2, [pc, #568]	; (80019cc <HAL_DMA_IRQHandler+0x24c>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	0a9b      	lsrs	r3, r3, #10
 8001798:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017aa:	2208      	movs	r2, #8
 80017ac:	409a      	lsls	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d01a      	beq.n	80017ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d013      	beq.n	80017ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0204 	bic.w	r2, r2, #4
 80017d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d8:	2208      	movs	r2, #8
 80017da:	409a      	lsls	r2, r3
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f0:	2201      	movs	r2, #1
 80017f2:	409a      	lsls	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d012      	beq.n	8001822 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180e:	2201      	movs	r2, #1
 8001810:	409a      	lsls	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181a:	f043 0202 	orr.w	r2, r3, #2
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001826:	2204      	movs	r2, #4
 8001828:	409a      	lsls	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d012      	beq.n	8001858 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00b      	beq.n	8001858 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001844:	2204      	movs	r2, #4
 8001846:	409a      	lsls	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001850:	f043 0204 	orr.w	r2, r3, #4
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185c:	2210      	movs	r2, #16
 800185e:	409a      	lsls	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4013      	ands	r3, r2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d043      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d03c      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187a:	2210      	movs	r2, #16
 800187c:	409a      	lsls	r2, r3
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d018      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d108      	bne.n	80018b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d024      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	4798      	blx	r3
 80018ae:	e01f      	b.n	80018f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d01b      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4798      	blx	r3
 80018c0:	e016      	b.n	80018f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d107      	bne.n	80018e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0208 	bic.w	r2, r2, #8
 80018de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f4:	2220      	movs	r2, #32
 80018f6:	409a      	lsls	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 808f 	beq.w	8001a20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 8087 	beq.w	8001a20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001916:	2220      	movs	r2, #32
 8001918:	409a      	lsls	r2, r3
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b05      	cmp	r3, #5
 8001928:	d136      	bne.n	8001998 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0216 	bic.w	r2, r2, #22
 8001938:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001948:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	2b00      	cmp	r3, #0
 8001950:	d103      	bne.n	800195a <HAL_DMA_IRQHandler+0x1da>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0208 	bic.w	r2, r2, #8
 8001968:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196e:	223f      	movs	r2, #63	; 0x3f
 8001970:	409a      	lsls	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800198a:	2b00      	cmp	r3, #0
 800198c:	d07e      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	4798      	blx	r3
        }
        return;
 8001996:	e079      	b.n	8001a8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d01d      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10d      	bne.n	80019d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d031      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	4798      	blx	r3
 80019c4:	e02c      	b.n	8001a20 <HAL_DMA_IRQHandler+0x2a0>
 80019c6:	bf00      	nop
 80019c8:	20000000 	.word	0x20000000
 80019cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d023      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4798      	blx	r3
 80019e0:	e01e      	b.n	8001a20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10f      	bne.n	8001a10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0210 	bic.w	r2, r2, #16
 80019fe:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d032      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d022      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2205      	movs	r2, #5
 8001a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d307      	bcc.n	8001a68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f2      	bne.n	8001a4c <HAL_DMA_IRQHandler+0x2cc>
 8001a66:	e000      	b.n	8001a6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a68:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
 8001a8a:	e000      	b.n	8001a8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a8c:	bf00      	nop
    }
  }
}
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ab0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b40      	cmp	r3, #64	; 0x40
 8001ac0:	d108      	bne.n	8001ad4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ad2:	e007      	b.n	8001ae4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	60da      	str	r2, [r3, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	3b10      	subs	r3, #16
 8001b00:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <DMA_CalcBaseAndBitshift+0x64>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b0a:	4a13      	ldr	r2, [pc, #76]	; (8001b58 <DMA_CalcBaseAndBitshift+0x68>)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d909      	bls.n	8001b32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b26:	f023 0303 	bic.w	r3, r3, #3
 8001b2a:	1d1a      	adds	r2, r3, #4
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	659a      	str	r2, [r3, #88]	; 0x58
 8001b30:	e007      	b.n	8001b42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b3a:	f023 0303 	bic.w	r3, r3, #3
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	aaaaaaab 	.word	0xaaaaaaab
 8001b58:	080054bc 	.word	0x080054bc

08001b5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d11f      	bne.n	8001bb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d856      	bhi.n	8001c2a <DMA_CheckFifoParam+0xce>
 8001b7c:	a201      	add	r2, pc, #4	; (adr r2, 8001b84 <DMA_CheckFifoParam+0x28>)
 8001b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b82:	bf00      	nop
 8001b84:	08001b95 	.word	0x08001b95
 8001b88:	08001ba7 	.word	0x08001ba7
 8001b8c:	08001b95 	.word	0x08001b95
 8001b90:	08001c2b 	.word	0x08001c2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d046      	beq.n	8001c2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba4:	e043      	b.n	8001c2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bae:	d140      	bne.n	8001c32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bb4:	e03d      	b.n	8001c32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bbe:	d121      	bne.n	8001c04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d837      	bhi.n	8001c36 <DMA_CheckFifoParam+0xda>
 8001bc6:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <DMA_CheckFifoParam+0x70>)
 8001bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bcc:	08001bdd 	.word	0x08001bdd
 8001bd0:	08001be3 	.word	0x08001be3
 8001bd4:	08001bdd 	.word	0x08001bdd
 8001bd8:	08001bf5 	.word	0x08001bf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
      break;
 8001be0:	e030      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d025      	beq.n	8001c3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bf2:	e022      	b.n	8001c3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bfc:	d11f      	bne.n	8001c3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c02:	e01c      	b.n	8001c3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d903      	bls.n	8001c12 <DMA_CheckFifoParam+0xb6>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d003      	beq.n	8001c18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c10:	e018      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
      break;
 8001c16:	e015      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00e      	beq.n	8001c42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
      break;
 8001c28:	e00b      	b.n	8001c42 <DMA_CheckFifoParam+0xe6>
      break;
 8001c2a:	bf00      	nop
 8001c2c:	e00a      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      break;
 8001c2e:	bf00      	nop
 8001c30:	e008      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      break;
 8001c32:	bf00      	nop
 8001c34:	e006      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      break;
 8001c36:	bf00      	nop
 8001c38:	e004      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      break;
 8001c3a:	bf00      	nop
 8001c3c:	e002      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c3e:	bf00      	nop
 8001c40:	e000      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      break;
 8001c42:	bf00      	nop
    }
  } 
  
  return status; 
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e16b      	b.n	8001f48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c70:	2201      	movs	r2, #1
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	f040 815a 	bne.w	8001f42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d00b      	beq.n	8001cae <HAL_GPIO_Init+0x5a>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca2:	2b11      	cmp	r3, #17
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b12      	cmp	r3, #18
 8001cac:	d130      	bne.n	8001d10 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 0201 	and.w	r2, r3, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0xfc>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b12      	cmp	r3, #18
 8001d4e:	d123      	bne.n	8001d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	08da      	lsrs	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3208      	adds	r2, #8
 8001d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	08da      	lsrs	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3208      	adds	r2, #8
 8001d92:	69b9      	ldr	r1, [r7, #24]
 8001d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80b4 	beq.w	8001f42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b60      	ldr	r3, [pc, #384]	; (8001f60 <HAL_GPIO_Init+0x30c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a5f      	ldr	r2, [pc, #380]	; (8001f60 <HAL_GPIO_Init+0x30c>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b5d      	ldr	r3, [pc, #372]	; (8001f60 <HAL_GPIO_Init+0x30c>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df6:	4a5b      	ldr	r2, [pc, #364]	; (8001f64 <HAL_GPIO_Init+0x310>)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a52      	ldr	r2, [pc, #328]	; (8001f68 <HAL_GPIO_Init+0x314>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d02b      	beq.n	8001e7a <HAL_GPIO_Init+0x226>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a51      	ldr	r2, [pc, #324]	; (8001f6c <HAL_GPIO_Init+0x318>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d025      	beq.n	8001e76 <HAL_GPIO_Init+0x222>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a50      	ldr	r2, [pc, #320]	; (8001f70 <HAL_GPIO_Init+0x31c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01f      	beq.n	8001e72 <HAL_GPIO_Init+0x21e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4f      	ldr	r2, [pc, #316]	; (8001f74 <HAL_GPIO_Init+0x320>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d019      	beq.n	8001e6e <HAL_GPIO_Init+0x21a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4e      	ldr	r2, [pc, #312]	; (8001f78 <HAL_GPIO_Init+0x324>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0x216>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4d      	ldr	r2, [pc, #308]	; (8001f7c <HAL_GPIO_Init+0x328>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00d      	beq.n	8001e66 <HAL_GPIO_Init+0x212>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4c      	ldr	r2, [pc, #304]	; (8001f80 <HAL_GPIO_Init+0x32c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x20e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4b      	ldr	r2, [pc, #300]	; (8001f84 <HAL_GPIO_Init+0x330>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_GPIO_Init+0x20a>
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	e00e      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e5e:	2308      	movs	r3, #8
 8001e60:	e00c      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e62:	2306      	movs	r3, #6
 8001e64:	e00a      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e66:	2305      	movs	r3, #5
 8001e68:	e008      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	e006      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e004      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e002      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	f002 0203 	and.w	r2, r2, #3
 8001e82:	0092      	lsls	r2, r2, #2
 8001e84:	4093      	lsls	r3, r2
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e8c:	4935      	ldr	r1, [pc, #212]	; (8001f64 <HAL_GPIO_Init+0x310>)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	3302      	adds	r3, #2
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ebe:	4a32      	ldr	r2, [pc, #200]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ec4:	4b30      	ldr	r3, [pc, #192]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ee8:	4a27      	ldr	r2, [pc, #156]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f12:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f3c:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3301      	adds	r3, #1
 8001f46:	61fb      	str	r3, [r7, #28]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2b0f      	cmp	r3, #15
 8001f4c:	f67f ae90 	bls.w	8001c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40013800 	.word	0x40013800
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40020800 	.word	0x40020800
 8001f74:	40020c00 	.word	0x40020c00
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40021400 	.word	0x40021400
 8001f80:	40021800 	.word	0x40021800
 8001f84:	40021c00 	.word	0x40021c00
 8001f88:	40013c00 	.word	0x40013c00

08001f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f9c:	787b      	ldrb	r3, [r7, #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa8:	e003      	b.n	8001fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001faa:	887b      	ldrh	r3, [r7, #2]
 8001fac:	041a      	lsls	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	619a      	str	r2, [r3, #24]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e25e      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d075      	beq.n	80020ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fde:	4b88      	ldr	r3, [pc, #544]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d00c      	beq.n	8002004 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fea:	4b85      	ldr	r3, [pc, #532]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d112      	bne.n	800201c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff6:	4b82      	ldr	r3, [pc, #520]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002002:	d10b      	bne.n	800201c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	4b7e      	ldr	r3, [pc, #504]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d05b      	beq.n	80020c8 <HAL_RCC_OscConfig+0x108>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d157      	bne.n	80020c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e239      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002024:	d106      	bne.n	8002034 <HAL_RCC_OscConfig+0x74>
 8002026:	4b76      	ldr	r3, [pc, #472]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a75      	ldr	r2, [pc, #468]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e01d      	b.n	8002070 <HAL_RCC_OscConfig+0xb0>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x98>
 800203e:	4b70      	ldr	r3, [pc, #448]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a6f      	ldr	r2, [pc, #444]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 8002044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b6d      	ldr	r3, [pc, #436]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a6c      	ldr	r2, [pc, #432]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e00b      	b.n	8002070 <HAL_RCC_OscConfig+0xb0>
 8002058:	4b69      	ldr	r3, [pc, #420]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a68      	ldr	r2, [pc, #416]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 800205e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b66      	ldr	r3, [pc, #408]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a65      	ldr	r2, [pc, #404]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 800206a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d013      	beq.n	80020a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff f93c 	bl	80012f4 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002080:	f7ff f938 	bl	80012f4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e1fe      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	4b5b      	ldr	r3, [pc, #364]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0xc0>
 800209e:	e014      	b.n	80020ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7ff f928 	bl	80012f4 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a8:	f7ff f924 	bl	80012f4 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e1ea      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ba:	4b51      	ldr	r3, [pc, #324]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0xe8>
 80020c6:	e000      	b.n	80020ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d063      	beq.n	800219e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020d6:	4b4a      	ldr	r3, [pc, #296]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d11c      	bne.n	8002128 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ee:	4b44      	ldr	r3, [pc, #272]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d116      	bne.n	8002128 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fa:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_RCC_OscConfig+0x152>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e1be      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002112:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4937      	ldr	r1, [pc, #220]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002126:	e03a      	b.n	800219e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d020      	beq.n	8002172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002130:	4b34      	ldr	r3, [pc, #208]	; (8002204 <HAL_RCC_OscConfig+0x244>)
 8002132:	2201      	movs	r2, #1
 8002134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7ff f8dd 	bl	80012f4 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213e:	f7ff f8d9 	bl	80012f4 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e19f      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002150:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215c:	4b28      	ldr	r3, [pc, #160]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4925      	ldr	r1, [pc, #148]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]
 8002170:	e015      	b.n	800219e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_RCC_OscConfig+0x244>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7ff f8bc 	bl	80012f4 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002180:	f7ff f8b8 	bl	80012f4 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e17e      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002192:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d036      	beq.n	8002218 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d016      	beq.n	80021e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_RCC_OscConfig+0x248>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b8:	f7ff f89c 	bl	80012f4 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c0:	f7ff f898 	bl	80012f4 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e15e      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_OscConfig+0x240>)
 80021d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x200>
 80021de:	e01b      	b.n	8002218 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_OscConfig+0x248>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e6:	f7ff f885 	bl	80012f4 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ec:	e00e      	b.n	800220c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ee:	f7ff f881 	bl	80012f4 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d907      	bls.n	800220c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e147      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
 8002200:	40023800 	.word	0x40023800
 8002204:	42470000 	.word	0x42470000
 8002208:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220c:	4b88      	ldr	r3, [pc, #544]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 800220e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1ea      	bne.n	80021ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 8097 	beq.w	8002354 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222a:	4b81      	ldr	r3, [pc, #516]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10f      	bne.n	8002256 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	4b7d      	ldr	r3, [pc, #500]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a7c      	ldr	r2, [pc, #496]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
 8002246:	4b7a      	ldr	r3, [pc, #488]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002252:	2301      	movs	r3, #1
 8002254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002256:	4b77      	ldr	r3, [pc, #476]	; (8002434 <HAL_RCC_OscConfig+0x474>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d118      	bne.n	8002294 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002262:	4b74      	ldr	r3, [pc, #464]	; (8002434 <HAL_RCC_OscConfig+0x474>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a73      	ldr	r2, [pc, #460]	; (8002434 <HAL_RCC_OscConfig+0x474>)
 8002268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226e:	f7ff f841 	bl	80012f4 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002276:	f7ff f83d 	bl	80012f4 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e103      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	4b6a      	ldr	r3, [pc, #424]	; (8002434 <HAL_RCC_OscConfig+0x474>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x2ea>
 800229c:	4b64      	ldr	r3, [pc, #400]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4a63      	ldr	r2, [pc, #396]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70
 80022a8:	e01c      	b.n	80022e4 <HAL_RCC_OscConfig+0x324>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x30c>
 80022b2:	4b5f      	ldr	r3, [pc, #380]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	4a5e      	ldr	r2, [pc, #376]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	6713      	str	r3, [r2, #112]	; 0x70
 80022be:	4b5c      	ldr	r3, [pc, #368]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	4a5b      	ldr	r2, [pc, #364]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ca:	e00b      	b.n	80022e4 <HAL_RCC_OscConfig+0x324>
 80022cc:	4b58      	ldr	r3, [pc, #352]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	4a57      	ldr	r2, [pc, #348]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 80022d2:	f023 0301 	bic.w	r3, r3, #1
 80022d6:	6713      	str	r3, [r2, #112]	; 0x70
 80022d8:	4b55      	ldr	r3, [pc, #340]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	4a54      	ldr	r2, [pc, #336]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 80022de:	f023 0304 	bic.w	r3, r3, #4
 80022e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d015      	beq.n	8002318 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ec:	f7ff f802 	bl	80012f4 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f2:	e00a      	b.n	800230a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f4:	f7fe fffe 	bl	80012f4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e0c2      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230a:	4b49      	ldr	r3, [pc, #292]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0ee      	beq.n	80022f4 <HAL_RCC_OscConfig+0x334>
 8002316:	e014      	b.n	8002342 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002318:	f7fe ffec 	bl	80012f4 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231e:	e00a      	b.n	8002336 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f7fe ffe8 	bl	80012f4 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e0ac      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002336:	4b3e      	ldr	r3, [pc, #248]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1ee      	bne.n	8002320 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002342:	7dfb      	ldrb	r3, [r7, #23]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d105      	bne.n	8002354 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002348:	4b39      	ldr	r3, [pc, #228]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	4a38      	ldr	r2, [pc, #224]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 800234e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002352:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8098 	beq.w	800248e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800235e:	4b34      	ldr	r3, [pc, #208]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b08      	cmp	r3, #8
 8002368:	d05c      	beq.n	8002424 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d141      	bne.n	80023f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002372:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HAL_RCC_OscConfig+0x478>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7fe ffbc 	bl	80012f4 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002380:	f7fe ffb8 	bl	80012f4 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e07e      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002392:	4b27      	ldr	r3, [pc, #156]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69da      	ldr	r2, [r3, #28]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	019b      	lsls	r3, r3, #6
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	085b      	lsrs	r3, r3, #1
 80023b6:	3b01      	subs	r3, #1
 80023b8:	041b      	lsls	r3, r3, #16
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	061b      	lsls	r3, r3, #24
 80023c2:	491b      	ldr	r1, [pc, #108]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_RCC_OscConfig+0x478>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7fe ff91 	bl	80012f4 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d6:	f7fe ff8d 	bl	80012f4 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e053      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x416>
 80023f4:	e04b      	b.n	800248e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_RCC_OscConfig+0x478>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe ff7a 	bl	80012f4 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002404:	f7fe ff76 	bl	80012f4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e03c      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_OscConfig+0x470>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x444>
 8002422:	e034      	b.n	800248e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d107      	bne.n	800243c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e02f      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
 8002430:	40023800 	.word	0x40023800
 8002434:	40007000 	.word	0x40007000
 8002438:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <HAL_RCC_OscConfig+0x4d8>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	429a      	cmp	r2, r3
 800244e:	d11c      	bne.n	800248a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d115      	bne.n	800248a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002464:	4013      	ands	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800246a:	4293      	cmp	r3, r2
 800246c:	d10d      	bne.n	800248a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40023800 	.word	0x40023800

0800249c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0cc      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b0:	4b68      	ldr	r3, [pc, #416]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d90c      	bls.n	80024d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b65      	ldr	r3, [pc, #404]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b63      	ldr	r3, [pc, #396]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0b8      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f0:	4b59      	ldr	r3, [pc, #356]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a58      	ldr	r2, [pc, #352]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002508:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a52      	ldr	r2, [pc, #328]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002514:	4b50      	ldr	r3, [pc, #320]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	494d      	ldr	r1, [pc, #308]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d044      	beq.n	80025bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d119      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e07f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d003      	beq.n	800255a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002556:	2b03      	cmp	r3, #3
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e06f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256a:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e067      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800257a:	4b37      	ldr	r3, [pc, #220]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f023 0203 	bic.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4934      	ldr	r1, [pc, #208]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800258c:	f7fe feb2 	bl	80012f4 <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7fe feae 	bl	80012f4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e04f      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 020c 	and.w	r2, r3, #12
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d1eb      	bne.n	8002594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025bc:	4b25      	ldr	r3, [pc, #148]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d20c      	bcs.n	80025e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e032      	b.n	800264a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4916      	ldr	r1, [pc, #88]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	490e      	ldr	r1, [pc, #56]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002622:	f000 f821 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 8002626:	4602      	mov	r2, r0
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	490a      	ldr	r1, [pc, #40]	; (800265c <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	5ccb      	ldrb	r3, [r1, r3]
 8002636:	fa22 f303 	lsr.w	r3, r2, r3
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_ClockConfig+0x1c8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fe12 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023c00 	.word	0x40023c00
 8002658:	40023800 	.word	0x40023800
 800265c:	080054a4 	.word	0x080054a4
 8002660:	20000000 	.word	0x20000000
 8002664:	20000004 	.word	0x20000004

08002668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800266c:	b094      	sub	sp, #80	; 0x50
 800266e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	647b      	str	r3, [r7, #68]	; 0x44
 8002674:	2300      	movs	r3, #0
 8002676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002678:	2300      	movs	r3, #0
 800267a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002680:	4b79      	ldr	r3, [pc, #484]	; (8002868 <HAL_RCC_GetSysClockFreq+0x200>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b08      	cmp	r3, #8
 800268a:	d00d      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x40>
 800268c:	2b08      	cmp	r3, #8
 800268e:	f200 80e1 	bhi.w	8002854 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_RCC_GetSysClockFreq+0x34>
 8002696:	2b04      	cmp	r3, #4
 8002698:	d003      	beq.n	80026a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800269a:	e0db      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800269c:	4b73      	ldr	r3, [pc, #460]	; (800286c <HAL_RCC_GetSysClockFreq+0x204>)
 800269e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026a0:	e0db      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026a2:	4b73      	ldr	r3, [pc, #460]	; (8002870 <HAL_RCC_GetSysClockFreq+0x208>)
 80026a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026a6:	e0d8      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a8:	4b6f      	ldr	r3, [pc, #444]	; (8002868 <HAL_RCC_GetSysClockFreq+0x200>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026b2:	4b6d      	ldr	r3, [pc, #436]	; (8002868 <HAL_RCC_GetSysClockFreq+0x200>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d063      	beq.n	8002786 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026be:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	099b      	lsrs	r3, r3, #6
 80026c4:	2200      	movs	r2, #0
 80026c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
 80026d2:	2300      	movs	r3, #0
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
 80026d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026da:	4622      	mov	r2, r4
 80026dc:	462b      	mov	r3, r5
 80026de:	f04f 0000 	mov.w	r0, #0
 80026e2:	f04f 0100 	mov.w	r1, #0
 80026e6:	0159      	lsls	r1, r3, #5
 80026e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ec:	0150      	lsls	r0, r2, #5
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4621      	mov	r1, r4
 80026f4:	1a51      	subs	r1, r2, r1
 80026f6:	6139      	str	r1, [r7, #16]
 80026f8:	4629      	mov	r1, r5
 80026fa:	eb63 0301 	sbc.w	r3, r3, r1
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800270c:	4659      	mov	r1, fp
 800270e:	018b      	lsls	r3, r1, #6
 8002710:	4651      	mov	r1, sl
 8002712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002716:	4651      	mov	r1, sl
 8002718:	018a      	lsls	r2, r1, #6
 800271a:	4651      	mov	r1, sl
 800271c:	ebb2 0801 	subs.w	r8, r2, r1
 8002720:	4659      	mov	r1, fp
 8002722:	eb63 0901 	sbc.w	r9, r3, r1
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800273a:	4690      	mov	r8, r2
 800273c:	4699      	mov	r9, r3
 800273e:	4623      	mov	r3, r4
 8002740:	eb18 0303 	adds.w	r3, r8, r3
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	462b      	mov	r3, r5
 8002748:	eb49 0303 	adc.w	r3, r9, r3
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800275a:	4629      	mov	r1, r5
 800275c:	024b      	lsls	r3, r1, #9
 800275e:	4621      	mov	r1, r4
 8002760:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002764:	4621      	mov	r1, r4
 8002766:	024a      	lsls	r2, r1, #9
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800276e:	2200      	movs	r2, #0
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
 8002772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002774:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002778:	f7fd fd30 	bl	80001dc <__aeabi_uldivmod>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4613      	mov	r3, r2
 8002782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002784:	e058      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002786:	4b38      	ldr	r3, [pc, #224]	; (8002868 <HAL_RCC_GetSysClockFreq+0x200>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	099b      	lsrs	r3, r3, #6
 800278c:	2200      	movs	r2, #0
 800278e:	4618      	mov	r0, r3
 8002790:	4611      	mov	r1, r2
 8002792:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002796:	623b      	str	r3, [r7, #32]
 8002798:	2300      	movs	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027a0:	4642      	mov	r2, r8
 80027a2:	464b      	mov	r3, r9
 80027a4:	f04f 0000 	mov.w	r0, #0
 80027a8:	f04f 0100 	mov.w	r1, #0
 80027ac:	0159      	lsls	r1, r3, #5
 80027ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b2:	0150      	lsls	r0, r2, #5
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4641      	mov	r1, r8
 80027ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80027be:	4649      	mov	r1, r9
 80027c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027d8:	ebb2 040a 	subs.w	r4, r2, sl
 80027dc:	eb63 050b 	sbc.w	r5, r3, fp
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	00eb      	lsls	r3, r5, #3
 80027ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ee:	00e2      	lsls	r2, r4, #3
 80027f0:	4614      	mov	r4, r2
 80027f2:	461d      	mov	r5, r3
 80027f4:	4643      	mov	r3, r8
 80027f6:	18e3      	adds	r3, r4, r3
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	464b      	mov	r3, r9
 80027fc:	eb45 0303 	adc.w	r3, r5, r3
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800280e:	4629      	mov	r1, r5
 8002810:	028b      	lsls	r3, r1, #10
 8002812:	4621      	mov	r1, r4
 8002814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002818:	4621      	mov	r1, r4
 800281a:	028a      	lsls	r2, r1, #10
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002822:	2200      	movs	r2, #0
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	61fa      	str	r2, [r7, #28]
 8002828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800282c:	f7fd fcd6 	bl	80001dc <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4613      	mov	r3, r2
 8002836:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_GetSysClockFreq+0x200>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	0c1b      	lsrs	r3, r3, #16
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	3301      	adds	r3, #1
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002848:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800284a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800284c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002850:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002852:	e002      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_RCC_GetSysClockFreq+0x204>)
 8002856:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800285c:	4618      	mov	r0, r3
 800285e:	3750      	adds	r7, #80	; 0x50
 8002860:	46bd      	mov	sp, r7
 8002862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800
 800286c:	00f42400 	.word	0x00f42400
 8002870:	007a1200 	.word	0x007a1200

08002874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_RCC_GetHCLKFreq+0x14>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000000 	.word	0x20000000

0800288c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002890:	f7ff fff0 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	0a9b      	lsrs	r3, r3, #10
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4903      	ldr	r1, [pc, #12]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40023800 	.word	0x40023800
 80028b0:	080054b4 	.word	0x080054b4

080028b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028b8:	f7ff ffdc 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	0b5b      	lsrs	r3, r3, #13
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4903      	ldr	r1, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40023800 	.word	0x40023800
 80028d8:	080054b4 	.word	0x080054b4

080028dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e01d      	b.n	800292a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe fa9e 	bl	8000e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3304      	adds	r3, #4
 8002918:	4619      	mov	r1, r3
 800291a:	4610      	mov	r0, r2
 800291c:	f000 fbde 	bl	80030dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002932:	b480      	push	{r7}
 8002934:	b085      	sub	sp, #20
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2202      	movs	r2, #2
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b06      	cmp	r3, #6
 8002952:	d007      	beq.n	8002964 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e01d      	b.n	80029c8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d106      	bne.n	80029a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7fe faa1 	bl	8000ee8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2202      	movs	r2, #2
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	4619      	mov	r1, r3
 80029b8:	4610      	mov	r0, r2
 80029ba:	f000 fb8f 	bl	80030dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2201      	movs	r2, #1
 80029e0:	6839      	ldr	r1, [r7, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fe64 	bl	80036b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a15      	ldr	r2, [pc, #84]	; (8002a44 <HAL_TIM_PWM_Start+0x74>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d004      	beq.n	80029fc <HAL_TIM_PWM_Start+0x2c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a14      	ldr	r2, [pc, #80]	; (8002a48 <HAL_TIM_PWM_Start+0x78>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d101      	bne.n	8002a00 <HAL_TIM_PWM_Start+0x30>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_TIM_PWM_Start+0x32>
 8002a00:	2300      	movs	r3, #0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b06      	cmp	r3, #6
 8002a26:	d007      	beq.n	8002a38 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40010000 	.word	0x40010000
 8002a48:	40010400 	.word	0x40010400

08002a4c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b0c      	cmp	r3, #12
 8002a5a:	d841      	bhi.n	8002ae0 <HAL_TIM_PWM_Start_IT+0x94>
 8002a5c:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <HAL_TIM_PWM_Start_IT+0x18>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002a99 	.word	0x08002a99
 8002a68:	08002ae1 	.word	0x08002ae1
 8002a6c:	08002ae1 	.word	0x08002ae1
 8002a70:	08002ae1 	.word	0x08002ae1
 8002a74:	08002aab 	.word	0x08002aab
 8002a78:	08002ae1 	.word	0x08002ae1
 8002a7c:	08002ae1 	.word	0x08002ae1
 8002a80:	08002ae1 	.word	0x08002ae1
 8002a84:	08002abd 	.word	0x08002abd
 8002a88:	08002ae1 	.word	0x08002ae1
 8002a8c:	08002ae1 	.word	0x08002ae1
 8002a90:	08002ae1 	.word	0x08002ae1
 8002a94:	08002acf 	.word	0x08002acf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0202 	orr.w	r2, r2, #2
 8002aa6:	60da      	str	r2, [r3, #12]
      break;
 8002aa8:	e01b      	b.n	8002ae2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0204 	orr.w	r2, r2, #4
 8002ab8:	60da      	str	r2, [r3, #12]
      break;
 8002aba:	e012      	b.n	8002ae2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0208 	orr.w	r2, r2, #8
 8002aca:	60da      	str	r2, [r3, #12]
      break;
 8002acc:	e009      	b.n	8002ae2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0210 	orr.w	r2, r2, #16
 8002adc:	60da      	str	r2, [r3, #12]
      break;
 8002ade:	e000      	b.n	8002ae2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002ae0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	6839      	ldr	r1, [r7, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fde0 	bl	80036b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <HAL_TIM_PWM_Start_IT+0x100>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d004      	beq.n	8002b04 <HAL_TIM_PWM_Start_IT+0xb8>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <HAL_TIM_PWM_Start_IT+0x104>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d101      	bne.n	8002b08 <HAL_TIM_PWM_Start_IT+0xbc>
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <HAL_TIM_PWM_Start_IT+0xbe>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d007      	beq.n	8002b1e <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b06      	cmp	r3, #6
 8002b2e:	d007      	beq.n	8002b40 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	40010400 	.word	0x40010400

08002b54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d122      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d11b      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0202 	mvn.w	r2, #2
 8002b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fa82 	bl	80030a0 <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fa74 	bl	800308c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fa85 	bl	80030b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d122      	bne.n	8002c04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d11b      	bne.n	8002c04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0204 	mvn.w	r2, #4
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa58 	bl	80030a0 <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fa4a 	bl	800308c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fa5b 	bl	80030b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d122      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d11b      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0208 	mvn.w	r2, #8
 8002c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fa2e 	bl	80030a0 <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fa20 	bl	800308c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fa31 	bl	80030b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b10      	cmp	r3, #16
 8002c64:	d122      	bne.n	8002cac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b10      	cmp	r3, #16
 8002c72:	d11b      	bne.n	8002cac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0210 	mvn.w	r2, #16
 8002c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2208      	movs	r2, #8
 8002c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa04 	bl	80030a0 <HAL_TIM_IC_CaptureCallback>
 8002c98:	e005      	b.n	8002ca6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f9f6 	bl	800308c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fa07 	bl	80030b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d10e      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0201 	mvn.w	r2, #1
 8002cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f9d0 	bl	8003078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce2:	2b80      	cmp	r3, #128	; 0x80
 8002ce4:	d10e      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf0:	2b80      	cmp	r3, #128	; 0x80
 8002cf2:	d107      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fd82 	bl	8003808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0e:	2b40      	cmp	r3, #64	; 0x40
 8002d10:	d10e      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	2b40      	cmp	r3, #64	; 0x40
 8002d1e:	d107      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f9cc 	bl	80030c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d10e      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d107      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0220 	mvn.w	r2, #32
 8002d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fd4c 	bl	80037f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e0b4      	b.n	8002ee8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b0c      	cmp	r3, #12
 8002d92:	f200 809f 	bhi.w	8002ed4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002d96:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002dd1 	.word	0x08002dd1
 8002da0:	08002ed5 	.word	0x08002ed5
 8002da4:	08002ed5 	.word	0x08002ed5
 8002da8:	08002ed5 	.word	0x08002ed5
 8002dac:	08002e11 	.word	0x08002e11
 8002db0:	08002ed5 	.word	0x08002ed5
 8002db4:	08002ed5 	.word	0x08002ed5
 8002db8:	08002ed5 	.word	0x08002ed5
 8002dbc:	08002e53 	.word	0x08002e53
 8002dc0:	08002ed5 	.word	0x08002ed5
 8002dc4:	08002ed5 	.word	0x08002ed5
 8002dc8:	08002ed5 	.word	0x08002ed5
 8002dcc:	08002e93 	.word	0x08002e93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fa20 	bl	800321c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0208 	orr.w	r2, r2, #8
 8002dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0204 	bic.w	r2, r2, #4
 8002dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6999      	ldr	r1, [r3, #24]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	619a      	str	r2, [r3, #24]
      break;
 8002e0e:	e062      	b.n	8002ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fa70 	bl	80032fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6999      	ldr	r1, [r3, #24]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	021a      	lsls	r2, r3, #8
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	619a      	str	r2, [r3, #24]
      break;
 8002e50:	e041      	b.n	8002ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fac5 	bl	80033e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69da      	ldr	r2, [r3, #28]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0208 	orr.w	r2, r2, #8
 8002e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69da      	ldr	r2, [r3, #28]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0204 	bic.w	r2, r2, #4
 8002e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69d9      	ldr	r1, [r3, #28]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	61da      	str	r2, [r3, #28]
      break;
 8002e90:	e021      	b.n	8002ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fb19 	bl	80034d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69da      	ldr	r2, [r3, #28]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	69d9      	ldr	r1, [r3, #28]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	021a      	lsls	r2, r3, #8
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	61da      	str	r2, [r3, #28]
      break;
 8002ed2:	e000      	b.n	8002ed6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002ed4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_TIM_ConfigClockSource+0x18>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e0b3      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x180>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f40:	d03e      	beq.n	8002fc0 <HAL_TIM_ConfigClockSource+0xd0>
 8002f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f46:	f200 8087 	bhi.w	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4e:	f000 8085 	beq.w	800305c <HAL_TIM_ConfigClockSource+0x16c>
 8002f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f56:	d87f      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f58:	2b70      	cmp	r3, #112	; 0x70
 8002f5a:	d01a      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0xa2>
 8002f5c:	2b70      	cmp	r3, #112	; 0x70
 8002f5e:	d87b      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f60:	2b60      	cmp	r3, #96	; 0x60
 8002f62:	d050      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0x116>
 8002f64:	2b60      	cmp	r3, #96	; 0x60
 8002f66:	d877      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f68:	2b50      	cmp	r3, #80	; 0x50
 8002f6a:	d03c      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0xf6>
 8002f6c:	2b50      	cmp	r3, #80	; 0x50
 8002f6e:	d873      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d058      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x136>
 8002f74:	2b40      	cmp	r3, #64	; 0x40
 8002f76:	d86f      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f78:	2b30      	cmp	r3, #48	; 0x30
 8002f7a:	d064      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x156>
 8002f7c:	2b30      	cmp	r3, #48	; 0x30
 8002f7e:	d86b      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d060      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x156>
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d867      	bhi.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d05c      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x156>
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d05a      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002f90:	e062      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6899      	ldr	r1, [r3, #8]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f000 fb65 	bl	8003670 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	609a      	str	r2, [r3, #8]
      break;
 8002fbe:	e04e      	b.n	800305e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6899      	ldr	r1, [r3, #8]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f000 fb4e 	bl	8003670 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fe2:	609a      	str	r2, [r3, #8]
      break;
 8002fe4:	e03b      	b.n	800305e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f000 fac2 	bl	800357c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2150      	movs	r1, #80	; 0x50
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fb1b 	bl	800363a <TIM_ITRx_SetConfig>
      break;
 8003004:	e02b      	b.n	800305e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	461a      	mov	r2, r3
 8003014:	f000 fae1 	bl	80035da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2160      	movs	r1, #96	; 0x60
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fb0b 	bl	800363a <TIM_ITRx_SetConfig>
      break;
 8003024:	e01b      	b.n	800305e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	461a      	mov	r2, r3
 8003034:	f000 faa2 	bl	800357c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2140      	movs	r1, #64	; 0x40
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fafb 	bl	800363a <TIM_ITRx_SetConfig>
      break;
 8003044:	e00b      	b.n	800305e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4619      	mov	r1, r3
 8003050:	4610      	mov	r0, r2
 8003052:	f000 faf2 	bl	800363a <TIM_ITRx_SetConfig>
      break;
 8003056:	e002      	b.n	800305e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003058:	bf00      	nop
 800305a:	e000      	b.n	800305e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800305c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a40      	ldr	r2, [pc, #256]	; (80031f0 <TIM_Base_SetConfig+0x114>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d013      	beq.n	800311c <TIM_Base_SetConfig+0x40>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fa:	d00f      	beq.n	800311c <TIM_Base_SetConfig+0x40>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a3d      	ldr	r2, [pc, #244]	; (80031f4 <TIM_Base_SetConfig+0x118>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00b      	beq.n	800311c <TIM_Base_SetConfig+0x40>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3c      	ldr	r2, [pc, #240]	; (80031f8 <TIM_Base_SetConfig+0x11c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d007      	beq.n	800311c <TIM_Base_SetConfig+0x40>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a3b      	ldr	r2, [pc, #236]	; (80031fc <TIM_Base_SetConfig+0x120>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <TIM_Base_SetConfig+0x40>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a3a      	ldr	r2, [pc, #232]	; (8003200 <TIM_Base_SetConfig+0x124>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d108      	bne.n	800312e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a2f      	ldr	r2, [pc, #188]	; (80031f0 <TIM_Base_SetConfig+0x114>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d02b      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313c:	d027      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a2c      	ldr	r2, [pc, #176]	; (80031f4 <TIM_Base_SetConfig+0x118>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d023      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a2b      	ldr	r2, [pc, #172]	; (80031f8 <TIM_Base_SetConfig+0x11c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01f      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a2a      	ldr	r2, [pc, #168]	; (80031fc <TIM_Base_SetConfig+0x120>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01b      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a29      	ldr	r2, [pc, #164]	; (8003200 <TIM_Base_SetConfig+0x124>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d017      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a28      	ldr	r2, [pc, #160]	; (8003204 <TIM_Base_SetConfig+0x128>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a27      	ldr	r2, [pc, #156]	; (8003208 <TIM_Base_SetConfig+0x12c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00f      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a26      	ldr	r2, [pc, #152]	; (800320c <TIM_Base_SetConfig+0x130>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00b      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a25      	ldr	r2, [pc, #148]	; (8003210 <TIM_Base_SetConfig+0x134>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a24      	ldr	r2, [pc, #144]	; (8003214 <TIM_Base_SetConfig+0x138>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d003      	beq.n	800318e <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a23      	ldr	r2, [pc, #140]	; (8003218 <TIM_Base_SetConfig+0x13c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d108      	bne.n	80031a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <TIM_Base_SetConfig+0x114>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_Base_SetConfig+0xf8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <TIM_Base_SetConfig+0x124>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d103      	bne.n	80031dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	615a      	str	r2, [r3, #20]
}
 80031e2:	bf00      	nop
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40010000 	.word	0x40010000
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800
 80031fc:	40000c00 	.word	0x40000c00
 8003200:	40010400 	.word	0x40010400
 8003204:	40014000 	.word	0x40014000
 8003208:	40014400 	.word	0x40014400
 800320c:	40014800 	.word	0x40014800
 8003210:	40001800 	.word	0x40001800
 8003214:	40001c00 	.word	0x40001c00
 8003218:	40002000 	.word	0x40002000

0800321c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	f023 0201 	bic.w	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0303 	bic.w	r3, r3, #3
 8003252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f023 0302 	bic.w	r3, r3, #2
 8003264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a20      	ldr	r2, [pc, #128]	; (80032f4 <TIM_OC1_SetConfig+0xd8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d003      	beq.n	8003280 <TIM_OC1_SetConfig+0x64>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <TIM_OC1_SetConfig+0xdc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d10c      	bne.n	800329a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f023 0308 	bic.w	r3, r3, #8
 8003286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f023 0304 	bic.w	r3, r3, #4
 8003298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <TIM_OC1_SetConfig+0xd8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d003      	beq.n	80032aa <TIM_OC1_SetConfig+0x8e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <TIM_OC1_SetConfig+0xdc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d111      	bne.n	80032ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	621a      	str	r2, [r3, #32]
}
 80032e8:	bf00      	nop
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40010000 	.word	0x40010000
 80032f8:	40010400 	.word	0x40010400

080032fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	f023 0210 	bic.w	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800332a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f023 0320 	bic.w	r3, r3, #32
 8003346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a22      	ldr	r2, [pc, #136]	; (80033e0 <TIM_OC2_SetConfig+0xe4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d003      	beq.n	8003364 <TIM_OC2_SetConfig+0x68>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a21      	ldr	r2, [pc, #132]	; (80033e4 <TIM_OC2_SetConfig+0xe8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d10d      	bne.n	8003380 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800336a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800337e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a17      	ldr	r2, [pc, #92]	; (80033e0 <TIM_OC2_SetConfig+0xe4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d003      	beq.n	8003390 <TIM_OC2_SetConfig+0x94>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a16      	ldr	r2, [pc, #88]	; (80033e4 <TIM_OC2_SetConfig+0xe8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d113      	bne.n	80033b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800339e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	621a      	str	r2, [r3, #32]
}
 80033d2:	bf00      	nop
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40010000 	.word	0x40010000
 80033e4:	40010400 	.word	0x40010400

080033e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0303 	bic.w	r3, r3, #3
 800341e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a21      	ldr	r2, [pc, #132]	; (80034c8 <TIM_OC3_SetConfig+0xe0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d003      	beq.n	800344e <TIM_OC3_SetConfig+0x66>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a20      	ldr	r2, [pc, #128]	; (80034cc <TIM_OC3_SetConfig+0xe4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d10d      	bne.n	800346a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a16      	ldr	r2, [pc, #88]	; (80034c8 <TIM_OC3_SetConfig+0xe0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d003      	beq.n	800347a <TIM_OC3_SetConfig+0x92>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a15      	ldr	r2, [pc, #84]	; (80034cc <TIM_OC3_SetConfig+0xe4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d113      	bne.n	80034a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	621a      	str	r2, [r3, #32]
}
 80034bc:	bf00      	nop
 80034be:	371c      	adds	r7, #28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	40010000 	.word	0x40010000
 80034cc:	40010400 	.word	0x40010400

080034d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800351a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	031b      	lsls	r3, r3, #12
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a12      	ldr	r2, [pc, #72]	; (8003574 <TIM_OC4_SetConfig+0xa4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_OC4_SetConfig+0x68>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a11      	ldr	r2, [pc, #68]	; (8003578 <TIM_OC4_SetConfig+0xa8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d109      	bne.n	800354c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800353e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	019b      	lsls	r3, r3, #6
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	621a      	str	r2, [r3, #32]
}
 8003566:	bf00      	nop
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40010000 	.word	0x40010000
 8003578:	40010400 	.word	0x40010400

0800357c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	f023 0201 	bic.w	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f023 030a 	bic.w	r3, r3, #10
 80035b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	621a      	str	r2, [r3, #32]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035da:	b480      	push	{r7}
 80035dc:	b087      	sub	sp, #28
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0210 	bic.w	r2, r3, #16
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	031b      	lsls	r3, r3, #12
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003616:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	621a      	str	r2, [r3, #32]
}
 800362e:	bf00      	nop
 8003630:	371c      	adds	r7, #28
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800363a:	b480      	push	{r7}
 800363c:	b085      	sub	sp, #20
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	f043 0307 	orr.w	r3, r3, #7
 800365c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	609a      	str	r2, [r3, #8]
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800368a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	021a      	lsls	r2, r3, #8
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	431a      	orrs	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4313      	orrs	r3, r2
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	609a      	str	r2, [r3, #8]
}
 80036a4:	bf00      	nop
 80036a6:	371c      	adds	r7, #28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2201      	movs	r2, #1
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a1a      	ldr	r2, [r3, #32]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	401a      	ands	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a1a      	ldr	r2, [r3, #32]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	621a      	str	r2, [r3, #32]
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003710:	2302      	movs	r3, #2
 8003712:	e05a      	b.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a21      	ldr	r2, [pc, #132]	; (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d022      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003760:	d01d      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d018      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1a      	ldr	r2, [pc, #104]	; (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00e      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a18      	ldr	r2, [pc, #96]	; (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d009      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a17      	ldr	r2, [pc, #92]	; (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d004      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10c      	bne.n	80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40010000 	.word	0x40010000
 80037dc:	40000400 	.word	0x40000400
 80037e0:	40000800 	.word	0x40000800
 80037e4:	40000c00 	.word	0x40000c00
 80037e8:	40010400 	.word	0x40010400
 80037ec:	40014000 	.word	0x40014000
 80037f0:	40001800 	.word	0x40001800

080037f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e03f      	b.n	80038ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd fbd8 	bl	8000ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2224      	movs	r2, #36	; 0x24
 800384c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800385e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fba1 	bl	8003fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b088      	sub	sp, #32
 80038ba:	af02      	add	r7, sp, #8
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	4613      	mov	r3, r2
 80038c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	f040 8083 	bne.w	80039de <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_UART_Transmit+0x2e>
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e07b      	b.n	80039e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_UART_Transmit+0x40>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e074      	b.n	80039e0 <HAL_UART_Transmit+0x12a>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2221      	movs	r2, #33	; 0x21
 8003908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800390c:	f7fd fcf2 	bl	80012f4 <HAL_GetTick>
 8003910:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	88fa      	ldrh	r2, [r7, #6]
 800391c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003926:	e042      	b.n	80039ae <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393e:	d122      	bne.n	8003986 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2200      	movs	r2, #0
 8003948:	2180      	movs	r1, #128	; 0x80
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f9c0 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e042      	b.n	80039e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800396c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d103      	bne.n	800397e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	3302      	adds	r3, #2
 800397a:	60bb      	str	r3, [r7, #8]
 800397c:	e017      	b.n	80039ae <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	3301      	adds	r3, #1
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	e013      	b.n	80039ae <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2200      	movs	r2, #0
 800398e:	2180      	movs	r1, #128	; 0x80
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f99d 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e01f      	b.n	80039e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	60ba      	str	r2, [r7, #8]
 80039a6:	781a      	ldrb	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1b7      	bne.n	8003928 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2200      	movs	r2, #0
 80039c0:	2140      	movs	r1, #64	; 0x40
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f984 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e006      	b.n	80039e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	e000      	b.n	80039e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80039de:	2302      	movs	r3, #2
  }
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	4613      	mov	r3, r2
 80039f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d140      	bne.n	8003a84 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_UART_Receive_IT+0x26>
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e039      	b.n	8003a86 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_UART_Receive_IT+0x38>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e032      	b.n	8003a86 <HAL_UART_Receive_IT+0x9e>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	88fa      	ldrh	r2, [r7, #6]
 8003a32:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2222      	movs	r2, #34	; 0x22
 8003a44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a5e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0220 	orr.w	r2, r2, #32
 8003a7e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	e000      	b.n	8003a86 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
  }
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10d      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x52>
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f9e0 	bl	8003ea4 <UART_Receive_IT>
      return;
 8003ae4:	e0d0      	b.n	8003c88 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80b0 	beq.w	8003c4e <HAL_UART_IRQHandler+0x1ba>
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d105      	bne.n	8003b04 <HAL_UART_IRQHandler+0x70>
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80a5 	beq.w	8003c4e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_UART_IRQHandler+0x90>
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	f043 0201 	orr.w	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_UART_IRQHandler+0xb0>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	f043 0202 	orr.w	r2, r3, #2
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_UART_IRQHandler+0xd0>
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5c:	f043 0204 	orr.w	r2, r3, #4
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00f      	beq.n	8003b8e <HAL_UART_IRQHandler+0xfa>
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d104      	bne.n	8003b82 <HAL_UART_IRQHandler+0xee>
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	f043 0208 	orr.w	r2, r3, #8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d077      	beq.n	8003c86 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x11c>
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f97a 	bl	8003ea4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	bf0c      	ite	eq
 8003bbe:	2301      	moveq	r3, #1
 8003bc0:	2300      	movne	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d102      	bne.n	8003bd8 <HAL_UART_IRQHandler+0x144>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d031      	beq.n	8003c3c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f8c3 	bl	8003d64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d123      	bne.n	8003c34 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695a      	ldr	r2, [r3, #20]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d013      	beq.n	8003c2c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c08:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <HAL_UART_IRQHandler+0x1fc>)
 8003c0a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fd fd93 	bl	800173c <HAL_DMA_Abort_IT>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d016      	beq.n	8003c4a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c26:	4610      	mov	r0, r2
 8003c28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2a:	e00e      	b.n	8003c4a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f845 	bl	8003cbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c32:	e00a      	b.n	8003c4a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f841 	bl	8003cbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3a:	e006      	b.n	8003c4a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f83d 	bl	8003cbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003c48:	e01d      	b.n	8003c86 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4a:	bf00      	nop
    return;
 8003c4c:	e01b      	b.n	8003c86 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_UART_IRQHandler+0x1d6>
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8b0 	bl	8003dc8 <UART_Transmit_IT>
    return;
 8003c68:	e00e      	b.n	8003c88 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d009      	beq.n	8003c88 <HAL_UART_IRQHandler+0x1f4>
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f8f8 	bl	8003e74 <UART_EndTransmit_IT>
    return;
 8003c84:	e000      	b.n	8003c88 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003c86:	bf00      	nop
  }
}
 8003c88:	3720      	adds	r7, #32
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	08003da1 	.word	0x08003da1

08003c94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce0:	e02c      	b.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d028      	beq.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cf0:	f7fd fb00 	bl	80012f4 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d21d      	bcs.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d0e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695a      	ldr	r2, [r3, #20]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0201 	bic.w	r2, r2, #1
 8003d1e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e00f      	b.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4013      	ands	r3, r2
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	bf0c      	ite	eq
 8003d4c:	2301      	moveq	r3, #1
 8003d4e:	2300      	movne	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d0c3      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d7a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7ff ff7e 	bl	8003cbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b21      	cmp	r3, #33	; 0x21
 8003dda:	d144      	bne.n	8003e66 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de4:	d11a      	bne.n	8003e1c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dfa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	1c9a      	adds	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	621a      	str	r2, [r3, #32]
 8003e0e:	e00e      	b.n	8003e2e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	621a      	str	r2, [r3, #32]
 8003e1a:	e008      	b.n	8003e2e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	1c59      	adds	r1, r3, #1
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6211      	str	r1, [r2, #32]
 8003e26:	781a      	ldrb	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10f      	bne.n	8003e62 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e000      	b.n	8003e68 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
  }
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff fefd 	bl	8003c94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b22      	cmp	r3, #34	; 0x22
 8003eb6:	d171      	bne.n	8003f9c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec0:	d123      	bne.n	8003f0a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10e      	bne.n	8003eee <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	1c9a      	adds	r2, r3, #2
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28
 8003eec:	e029      	b.n	8003f42 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28
 8003f08:	e01b      	b.n	8003f42 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6858      	ldr	r0, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	1c59      	adds	r1, r3, #1
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6291      	str	r1, [r2, #40]	; 0x28
 8003f22:	b2c2      	uxtb	r2, r0
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	e00c      	b.n	8003f42 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	1c58      	adds	r0, r3, #1
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	6288      	str	r0, [r1, #40]	; 0x28
 8003f3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	4619      	mov	r1, r3
 8003f50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d120      	bne.n	8003f98 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0220 	bic.w	r2, r2, #32
 8003f64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695a      	ldr	r2, [r3, #20]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fe8a 	bl	8003ca8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	e002      	b.n	8003f9e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e000      	b.n	8003f9e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003f9c:	2302      	movs	r3, #2
  }
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fac:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fc2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fc6:	68d9      	ldr	r1, [r3, #12]
 8003fc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	ea40 0301 	orr.w	r3, r0, r1
 8003fd2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fd4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8003ff6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004002:	f021 010c 	bic.w	r1, r1, #12
 8004006:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004010:	430b      	orrs	r3, r1
 8004012:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004014:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004020:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004024:	6999      	ldr	r1, [r3, #24]
 8004026:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	ea40 0301 	orr.w	r3, r0, r1
 8004030:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004032:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800403c:	f040 824a 	bne.w	80044d4 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004040:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4b96      	ldr	r3, [pc, #600]	; (80042a0 <UART_SetConfig+0x2f8>)
 8004048:	429a      	cmp	r2, r3
 800404a:	d006      	beq.n	800405a <UART_SetConfig+0xb2>
 800404c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4b94      	ldr	r3, [pc, #592]	; (80042a4 <UART_SetConfig+0x2fc>)
 8004054:	429a      	cmp	r2, r3
 8004056:	f040 8129 	bne.w	80042ac <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800405a:	f7fe fc2b 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 800405e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004062:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004066:	2200      	movs	r2, #0
 8004068:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800406c:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004070:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004074:	4622      	mov	r2, r4
 8004076:	462b      	mov	r3, r5
 8004078:	1891      	adds	r1, r2, r2
 800407a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800407e:	415b      	adcs	r3, r3
 8004080:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004084:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004088:	4621      	mov	r1, r4
 800408a:	1851      	adds	r1, r2, r1
 800408c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004090:	4629      	mov	r1, r5
 8004092:	414b      	adcs	r3, r1
 8004094:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80040a4:	4649      	mov	r1, r9
 80040a6:	00cb      	lsls	r3, r1, #3
 80040a8:	4641      	mov	r1, r8
 80040aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ae:	4641      	mov	r1, r8
 80040b0:	00ca      	lsls	r2, r1, #3
 80040b2:	4610      	mov	r0, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	4622      	mov	r2, r4
 80040ba:	189b      	adds	r3, r3, r2
 80040bc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80040c0:	462b      	mov	r3, r5
 80040c2:	460a      	mov	r2, r1
 80040c4:	eb42 0303 	adc.w	r3, r2, r3
 80040c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80040cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80040d8:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80040dc:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80040e0:	460b      	mov	r3, r1
 80040e2:	18db      	adds	r3, r3, r3
 80040e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040e8:	4613      	mov	r3, r2
 80040ea:	eb42 0303 	adc.w	r3, r2, r3
 80040ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040f2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80040f6:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80040fa:	f7fc f86f 	bl	80001dc <__aeabi_uldivmod>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4b69      	ldr	r3, [pc, #420]	; (80042a8 <UART_SetConfig+0x300>)
 8004104:	fba3 2302 	umull	r2, r3, r3, r2
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	011c      	lsls	r4, r3, #4
 800410c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004110:	2200      	movs	r2, #0
 8004112:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004116:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800411a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800411e:	4642      	mov	r2, r8
 8004120:	464b      	mov	r3, r9
 8004122:	1891      	adds	r1, r2, r2
 8004124:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004128:	415b      	adcs	r3, r3
 800412a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800412e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004132:	4641      	mov	r1, r8
 8004134:	1851      	adds	r1, r2, r1
 8004136:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800413a:	4649      	mov	r1, r9
 800413c:	414b      	adcs	r3, r1
 800413e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800414e:	4659      	mov	r1, fp
 8004150:	00cb      	lsls	r3, r1, #3
 8004152:	4651      	mov	r1, sl
 8004154:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004158:	4651      	mov	r1, sl
 800415a:	00ca      	lsls	r2, r1, #3
 800415c:	4610      	mov	r0, r2
 800415e:	4619      	mov	r1, r3
 8004160:	4603      	mov	r3, r0
 8004162:	4642      	mov	r2, r8
 8004164:	189b      	adds	r3, r3, r2
 8004166:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800416a:	464b      	mov	r3, r9
 800416c:	460a      	mov	r2, r1
 800416e:	eb42 0303 	adc.w	r3, r2, r3
 8004172:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8004176:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004182:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8004186:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800418a:	460b      	mov	r3, r1
 800418c:	18db      	adds	r3, r3, r3
 800418e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004192:	4613      	mov	r3, r2
 8004194:	eb42 0303 	adc.w	r3, r2, r3
 8004198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800419c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80041a0:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80041a4:	f7fc f81a 	bl	80001dc <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4611      	mov	r1, r2
 80041ae:	4b3e      	ldr	r3, [pc, #248]	; (80042a8 <UART_SetConfig+0x300>)
 80041b0:	fba3 2301 	umull	r2, r3, r3, r1
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	2264      	movs	r2, #100	; 0x64
 80041b8:	fb02 f303 	mul.w	r3, r2, r3
 80041bc:	1acb      	subs	r3, r1, r3
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041c4:	4b38      	ldr	r3, [pc, #224]	; (80042a8 <UART_SetConfig+0x300>)
 80041c6:	fba3 2302 	umull	r2, r3, r3, r2
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041d2:	441c      	add	r4, r3
 80041d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041d8:	2200      	movs	r2, #0
 80041da:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80041de:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80041e2:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80041e6:	4642      	mov	r2, r8
 80041e8:	464b      	mov	r3, r9
 80041ea:	1891      	adds	r1, r2, r2
 80041ec:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80041f0:	415b      	adcs	r3, r3
 80041f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80041f6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80041fa:	4641      	mov	r1, r8
 80041fc:	1851      	adds	r1, r2, r1
 80041fe:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004202:	4649      	mov	r1, r9
 8004204:	414b      	adcs	r3, r1
 8004206:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8004216:	4659      	mov	r1, fp
 8004218:	00cb      	lsls	r3, r1, #3
 800421a:	4651      	mov	r1, sl
 800421c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004220:	4651      	mov	r1, sl
 8004222:	00ca      	lsls	r2, r1, #3
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	4603      	mov	r3, r0
 800422a:	4642      	mov	r2, r8
 800422c:	189b      	adds	r3, r3, r2
 800422e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004232:	464b      	mov	r3, r9
 8004234:	460a      	mov	r2, r1
 8004236:	eb42 0303 	adc.w	r3, r2, r3
 800423a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800423e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800424a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800424e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8004252:	460b      	mov	r3, r1
 8004254:	18db      	adds	r3, r3, r3
 8004256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800425a:	4613      	mov	r3, r2
 800425c:	eb42 0303 	adc.w	r3, r2, r3
 8004260:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004264:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004268:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800426c:	f7fb ffb6 	bl	80001dc <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <UART_SetConfig+0x300>)
 8004276:	fba3 1302 	umull	r1, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2164      	movs	r1, #100	; 0x64
 800427e:	fb01 f303 	mul.w	r3, r1, r3
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	3332      	adds	r3, #50	; 0x32
 8004288:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <UART_SetConfig+0x300>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	f003 0207 	and.w	r2, r3, #7
 8004294:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4422      	add	r2, r4
 800429c:	609a      	str	r2, [r3, #8]
 800429e:	e349      	b.n	8004934 <UART_SetConfig+0x98c>
 80042a0:	40011000 	.word	0x40011000
 80042a4:	40011400 	.word	0x40011400
 80042a8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ac:	f7fe faee 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 80042b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80042be:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80042c2:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80042c6:	4622      	mov	r2, r4
 80042c8:	462b      	mov	r3, r5
 80042ca:	1891      	adds	r1, r2, r2
 80042cc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80042d0:	415b      	adcs	r3, r3
 80042d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80042d6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80042da:	4621      	mov	r1, r4
 80042dc:	eb12 0a01 	adds.w	sl, r2, r1
 80042e0:	4629      	mov	r1, r5
 80042e2:	eb43 0b01 	adc.w	fp, r3, r1
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042fa:	4692      	mov	sl, r2
 80042fc:	469b      	mov	fp, r3
 80042fe:	4623      	mov	r3, r4
 8004300:	eb1a 0303 	adds.w	r3, sl, r3
 8004304:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004308:	462b      	mov	r3, r5
 800430a:	eb4b 0303 	adc.w	r3, fp, r3
 800430e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004312:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800431e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004322:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004326:	460b      	mov	r3, r1
 8004328:	18db      	adds	r3, r3, r3
 800432a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800432e:	4613      	mov	r3, r2
 8004330:	eb42 0303 	adc.w	r3, r2, r3
 8004334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004338:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800433c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004340:	f7fb ff4c 	bl	80001dc <__aeabi_uldivmod>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4b61      	ldr	r3, [pc, #388]	; (80044d0 <UART_SetConfig+0x528>)
 800434a:	fba3 2302 	umull	r2, r3, r3, r2
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	011c      	lsls	r4, r3, #4
 8004352:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004356:	2200      	movs	r2, #0
 8004358:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800435c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004360:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004364:	4642      	mov	r2, r8
 8004366:	464b      	mov	r3, r9
 8004368:	1891      	adds	r1, r2, r2
 800436a:	67b9      	str	r1, [r7, #120]	; 0x78
 800436c:	415b      	adcs	r3, r3
 800436e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004370:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004374:	4641      	mov	r1, r8
 8004376:	1851      	adds	r1, r2, r1
 8004378:	6739      	str	r1, [r7, #112]	; 0x70
 800437a:	4649      	mov	r1, r9
 800437c:	414b      	adcs	r3, r1
 800437e:	677b      	str	r3, [r7, #116]	; 0x74
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 800438c:	4659      	mov	r1, fp
 800438e:	00cb      	lsls	r3, r1, #3
 8004390:	4651      	mov	r1, sl
 8004392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004396:	4651      	mov	r1, sl
 8004398:	00ca      	lsls	r2, r1, #3
 800439a:	4610      	mov	r0, r2
 800439c:	4619      	mov	r1, r3
 800439e:	4603      	mov	r3, r0
 80043a0:	4642      	mov	r2, r8
 80043a2:	189b      	adds	r3, r3, r2
 80043a4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80043a8:	464b      	mov	r3, r9
 80043aa:	460a      	mov	r2, r1
 80043ac:	eb42 0303 	adc.w	r3, r2, r3
 80043b0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80043b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80043c0:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80043c4:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80043c8:	460b      	mov	r3, r1
 80043ca:	18db      	adds	r3, r3, r3
 80043cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80043ce:	4613      	mov	r3, r2
 80043d0:	eb42 0303 	adc.w	r3, r2, r3
 80043d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80043da:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80043de:	f7fb fefd 	bl	80001dc <__aeabi_uldivmod>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4611      	mov	r1, r2
 80043e8:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <UART_SetConfig+0x528>)
 80043ea:	fba3 2301 	umull	r2, r3, r3, r1
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2264      	movs	r2, #100	; 0x64
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	1acb      	subs	r3, r1, r3
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043fe:	4b34      	ldr	r3, [pc, #208]	; (80044d0 <UART_SetConfig+0x528>)
 8004400:	fba3 2302 	umull	r2, r3, r3, r2
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800440c:	441c      	add	r4, r3
 800440e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004412:	2200      	movs	r2, #0
 8004414:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004418:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800441c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004420:	4642      	mov	r2, r8
 8004422:	464b      	mov	r3, r9
 8004424:	1891      	adds	r1, r2, r2
 8004426:	6639      	str	r1, [r7, #96]	; 0x60
 8004428:	415b      	adcs	r3, r3
 800442a:	667b      	str	r3, [r7, #100]	; 0x64
 800442c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004430:	4641      	mov	r1, r8
 8004432:	1851      	adds	r1, r2, r1
 8004434:	65b9      	str	r1, [r7, #88]	; 0x58
 8004436:	4649      	mov	r1, r9
 8004438:	414b      	adcs	r3, r1
 800443a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004448:	4659      	mov	r1, fp
 800444a:	00cb      	lsls	r3, r1, #3
 800444c:	4651      	mov	r1, sl
 800444e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004452:	4651      	mov	r1, sl
 8004454:	00ca      	lsls	r2, r1, #3
 8004456:	4610      	mov	r0, r2
 8004458:	4619      	mov	r1, r3
 800445a:	4603      	mov	r3, r0
 800445c:	4642      	mov	r2, r8
 800445e:	189b      	adds	r3, r3, r2
 8004460:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004464:	464b      	mov	r3, r9
 8004466:	460a      	mov	r2, r1
 8004468:	eb42 0303 	adc.w	r3, r2, r3
 800446c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004470:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800447c:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004480:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004484:	460b      	mov	r3, r1
 8004486:	18db      	adds	r3, r3, r3
 8004488:	653b      	str	r3, [r7, #80]	; 0x50
 800448a:	4613      	mov	r3, r2
 800448c:	eb42 0303 	adc.w	r3, r2, r3
 8004490:	657b      	str	r3, [r7, #84]	; 0x54
 8004492:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004496:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800449a:	f7fb fe9f 	bl	80001dc <__aeabi_uldivmod>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <UART_SetConfig+0x528>)
 80044a4:	fba3 1302 	umull	r1, r3, r3, r2
 80044a8:	095b      	lsrs	r3, r3, #5
 80044aa:	2164      	movs	r1, #100	; 0x64
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	3332      	adds	r3, #50	; 0x32
 80044b6:	4a06      	ldr	r2, [pc, #24]	; (80044d0 <UART_SetConfig+0x528>)
 80044b8:	fba2 2303 	umull	r2, r3, r2, r3
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	f003 0207 	and.w	r2, r3, #7
 80044c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4422      	add	r2, r4
 80044ca:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80044cc:	e232      	b.n	8004934 <UART_SetConfig+0x98c>
 80044ce:	bf00      	nop
 80044d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	4b8d      	ldr	r3, [pc, #564]	; (8004710 <UART_SetConfig+0x768>)
 80044dc:	429a      	cmp	r2, r3
 80044de:	d006      	beq.n	80044ee <UART_SetConfig+0x546>
 80044e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4b8b      	ldr	r3, [pc, #556]	; (8004714 <UART_SetConfig+0x76c>)
 80044e8:	429a      	cmp	r2, r3
 80044ea:	f040 8117 	bne.w	800471c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80044ee:	f7fe f9e1 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 80044f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004500:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004504:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004508:	4622      	mov	r2, r4
 800450a:	462b      	mov	r3, r5
 800450c:	1891      	adds	r1, r2, r2
 800450e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004510:	415b      	adcs	r3, r3
 8004512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004514:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004518:	4621      	mov	r1, r4
 800451a:	eb12 0801 	adds.w	r8, r2, r1
 800451e:	4629      	mov	r1, r5
 8004520:	eb43 0901 	adc.w	r9, r3, r1
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004530:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004534:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004538:	4690      	mov	r8, r2
 800453a:	4699      	mov	r9, r3
 800453c:	4623      	mov	r3, r4
 800453e:	eb18 0303 	adds.w	r3, r8, r3
 8004542:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004546:	462b      	mov	r3, r5
 8004548:	eb49 0303 	adc.w	r3, r9, r3
 800454c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004550:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800455c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800456c:	4629      	mov	r1, r5
 800456e:	008b      	lsls	r3, r1, #2
 8004570:	4621      	mov	r1, r4
 8004572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004576:	4621      	mov	r1, r4
 8004578:	008a      	lsls	r2, r1, #2
 800457a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 800457e:	f7fb fe2d 	bl	80001dc <__aeabi_uldivmod>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4b64      	ldr	r3, [pc, #400]	; (8004718 <UART_SetConfig+0x770>)
 8004588:	fba3 2302 	umull	r2, r3, r3, r2
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	011c      	lsls	r4, r3, #4
 8004590:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004594:	2200      	movs	r2, #0
 8004596:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800459a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800459e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80045a2:	4642      	mov	r2, r8
 80045a4:	464b      	mov	r3, r9
 80045a6:	1891      	adds	r1, r2, r2
 80045a8:	6439      	str	r1, [r7, #64]	; 0x40
 80045aa:	415b      	adcs	r3, r3
 80045ac:	647b      	str	r3, [r7, #68]	; 0x44
 80045ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045b2:	4641      	mov	r1, r8
 80045b4:	1851      	adds	r1, r2, r1
 80045b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80045b8:	4649      	mov	r1, r9
 80045ba:	414b      	adcs	r3, r1
 80045bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80045ca:	4659      	mov	r1, fp
 80045cc:	00cb      	lsls	r3, r1, #3
 80045ce:	4651      	mov	r1, sl
 80045d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045d4:	4651      	mov	r1, sl
 80045d6:	00ca      	lsls	r2, r1, #3
 80045d8:	4610      	mov	r0, r2
 80045da:	4619      	mov	r1, r3
 80045dc:	4603      	mov	r3, r0
 80045de:	4642      	mov	r2, r8
 80045e0:	189b      	adds	r3, r3, r2
 80045e2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80045e6:	464b      	mov	r3, r9
 80045e8:	460a      	mov	r2, r1
 80045ea:	eb42 0303 	adc.w	r3, r2, r3
 80045ee:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80045f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80045fe:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800460e:	4649      	mov	r1, r9
 8004610:	008b      	lsls	r3, r1, #2
 8004612:	4641      	mov	r1, r8
 8004614:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004618:	4641      	mov	r1, r8
 800461a:	008a      	lsls	r2, r1, #2
 800461c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004620:	f7fb fddc 	bl	80001dc <__aeabi_uldivmod>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4b3b      	ldr	r3, [pc, #236]	; (8004718 <UART_SetConfig+0x770>)
 800462a:	fba3 1302 	umull	r1, r3, r3, r2
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	2164      	movs	r1, #100	; 0x64
 8004632:	fb01 f303 	mul.w	r3, r1, r3
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	3332      	adds	r3, #50	; 0x32
 800463c:	4a36      	ldr	r2, [pc, #216]	; (8004718 <UART_SetConfig+0x770>)
 800463e:	fba2 2303 	umull	r2, r3, r2, r3
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004648:	441c      	add	r4, r3
 800464a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800464e:	2200      	movs	r2, #0
 8004650:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004654:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004658:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800465c:	4642      	mov	r2, r8
 800465e:	464b      	mov	r3, r9
 8004660:	1891      	adds	r1, r2, r2
 8004662:	6339      	str	r1, [r7, #48]	; 0x30
 8004664:	415b      	adcs	r3, r3
 8004666:	637b      	str	r3, [r7, #52]	; 0x34
 8004668:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800466c:	4641      	mov	r1, r8
 800466e:	1851      	adds	r1, r2, r1
 8004670:	62b9      	str	r1, [r7, #40]	; 0x28
 8004672:	4649      	mov	r1, r9
 8004674:	414b      	adcs	r3, r1
 8004676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004684:	4659      	mov	r1, fp
 8004686:	00cb      	lsls	r3, r1, #3
 8004688:	4651      	mov	r1, sl
 800468a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800468e:	4651      	mov	r1, sl
 8004690:	00ca      	lsls	r2, r1, #3
 8004692:	4610      	mov	r0, r2
 8004694:	4619      	mov	r1, r3
 8004696:	4603      	mov	r3, r0
 8004698:	4642      	mov	r2, r8
 800469a:	189b      	adds	r3, r3, r2
 800469c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80046a0:	464b      	mov	r3, r9
 80046a2:	460a      	mov	r2, r1
 80046a4:	eb42 0303 	adc.w	r3, r2, r3
 80046a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80046ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80046b8:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80046c8:	4649      	mov	r1, r9
 80046ca:	008b      	lsls	r3, r1, #2
 80046cc:	4641      	mov	r1, r8
 80046ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d2:	4641      	mov	r1, r8
 80046d4:	008a      	lsls	r2, r1, #2
 80046d6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80046da:	f7fb fd7f 	bl	80001dc <__aeabi_uldivmod>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <UART_SetConfig+0x770>)
 80046e4:	fba3 1302 	umull	r1, r3, r3, r2
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	2164      	movs	r1, #100	; 0x64
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	3332      	adds	r3, #50	; 0x32
 80046f6:	4a08      	ldr	r2, [pc, #32]	; (8004718 <UART_SetConfig+0x770>)
 80046f8:	fba2 2303 	umull	r2, r3, r2, r3
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	f003 020f 	and.w	r2, r3, #15
 8004702:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4422      	add	r2, r4
 800470a:	609a      	str	r2, [r3, #8]
 800470c:	e112      	b.n	8004934 <UART_SetConfig+0x98c>
 800470e:	bf00      	nop
 8004710:	40011000 	.word	0x40011000
 8004714:	40011400 	.word	0x40011400
 8004718:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800471c:	f7fe f8b6 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 8004720:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004724:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004728:	2200      	movs	r2, #0
 800472a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800472e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004732:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004736:	4642      	mov	r2, r8
 8004738:	464b      	mov	r3, r9
 800473a:	1891      	adds	r1, r2, r2
 800473c:	6239      	str	r1, [r7, #32]
 800473e:	415b      	adcs	r3, r3
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
 8004742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004746:	4641      	mov	r1, r8
 8004748:	1854      	adds	r4, r2, r1
 800474a:	4649      	mov	r1, r9
 800474c:	eb43 0501 	adc.w	r5, r3, r1
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	00eb      	lsls	r3, r5, #3
 800475a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800475e:	00e2      	lsls	r2, r4, #3
 8004760:	4614      	mov	r4, r2
 8004762:	461d      	mov	r5, r3
 8004764:	4643      	mov	r3, r8
 8004766:	18e3      	adds	r3, r4, r3
 8004768:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800476c:	464b      	mov	r3, r9
 800476e:	eb45 0303 	adc.w	r3, r5, r3
 8004772:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004776:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004782:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004792:	4629      	mov	r1, r5
 8004794:	008b      	lsls	r3, r1, #2
 8004796:	4621      	mov	r1, r4
 8004798:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800479c:	4621      	mov	r1, r4
 800479e:	008a      	lsls	r2, r1, #2
 80047a0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80047a4:	f7fb fd1a 	bl	80001dc <__aeabi_uldivmod>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4b64      	ldr	r3, [pc, #400]	; (8004940 <UART_SetConfig+0x998>)
 80047ae:	fba3 2302 	umull	r2, r3, r3, r2
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	011c      	lsls	r4, r3, #4
 80047b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047c0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80047c4:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80047c8:	4642      	mov	r2, r8
 80047ca:	464b      	mov	r3, r9
 80047cc:	1891      	adds	r1, r2, r2
 80047ce:	61b9      	str	r1, [r7, #24]
 80047d0:	415b      	adcs	r3, r3
 80047d2:	61fb      	str	r3, [r7, #28]
 80047d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047d8:	4641      	mov	r1, r8
 80047da:	1851      	adds	r1, r2, r1
 80047dc:	6139      	str	r1, [r7, #16]
 80047de:	4649      	mov	r1, r9
 80047e0:	414b      	adcs	r3, r1
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047f0:	4659      	mov	r1, fp
 80047f2:	00cb      	lsls	r3, r1, #3
 80047f4:	4651      	mov	r1, sl
 80047f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047fa:	4651      	mov	r1, sl
 80047fc:	00ca      	lsls	r2, r1, #3
 80047fe:	4610      	mov	r0, r2
 8004800:	4619      	mov	r1, r3
 8004802:	4603      	mov	r3, r0
 8004804:	4642      	mov	r2, r8
 8004806:	189b      	adds	r3, r3, r2
 8004808:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800480c:	464b      	mov	r3, r9
 800480e:	460a      	mov	r2, r1
 8004810:	eb42 0303 	adc.w	r3, r2, r3
 8004814:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004818:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004824:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004834:	4649      	mov	r1, r9
 8004836:	008b      	lsls	r3, r1, #2
 8004838:	4641      	mov	r1, r8
 800483a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800483e:	4641      	mov	r1, r8
 8004840:	008a      	lsls	r2, r1, #2
 8004842:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004846:	f7fb fcc9 	bl	80001dc <__aeabi_uldivmod>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4b3c      	ldr	r3, [pc, #240]	; (8004940 <UART_SetConfig+0x998>)
 8004850:	fba3 1302 	umull	r1, r3, r3, r2
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	2164      	movs	r1, #100	; 0x64
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	3332      	adds	r3, #50	; 0x32
 8004862:	4a37      	ldr	r2, [pc, #220]	; (8004940 <UART_SetConfig+0x998>)
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800486e:	441c      	add	r4, r3
 8004870:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004874:	2200      	movs	r2, #0
 8004876:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800487a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800487e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004882:	4642      	mov	r2, r8
 8004884:	464b      	mov	r3, r9
 8004886:	1891      	adds	r1, r2, r2
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	415b      	adcs	r3, r3
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004892:	4641      	mov	r1, r8
 8004894:	1851      	adds	r1, r2, r1
 8004896:	6039      	str	r1, [r7, #0]
 8004898:	4649      	mov	r1, r9
 800489a:	414b      	adcs	r3, r1
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048aa:	4659      	mov	r1, fp
 80048ac:	00cb      	lsls	r3, r1, #3
 80048ae:	4651      	mov	r1, sl
 80048b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b4:	4651      	mov	r1, sl
 80048b6:	00ca      	lsls	r2, r1, #3
 80048b8:	4610      	mov	r0, r2
 80048ba:	4619      	mov	r1, r3
 80048bc:	4603      	mov	r3, r0
 80048be:	4642      	mov	r2, r8
 80048c0:	189b      	adds	r3, r3, r2
 80048c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048c6:	464b      	mov	r3, r9
 80048c8:	460a      	mov	r2, r1
 80048ca:	eb42 0303 	adc.w	r3, r2, r3
 80048ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80048ee:	4649      	mov	r1, r9
 80048f0:	008b      	lsls	r3, r1, #2
 80048f2:	4641      	mov	r1, r8
 80048f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f8:	4641      	mov	r1, r8
 80048fa:	008a      	lsls	r2, r1, #2
 80048fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004900:	f7fb fc6c 	bl	80001dc <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <UART_SetConfig+0x998>)
 800490a:	fba3 1302 	umull	r1, r3, r3, r2
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	2164      	movs	r1, #100	; 0x64
 8004912:	fb01 f303 	mul.w	r3, r1, r3
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	3332      	adds	r3, #50	; 0x32
 800491c:	4a08      	ldr	r2, [pc, #32]	; (8004940 <UART_SetConfig+0x998>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	f003 020f 	and.w	r2, r3, #15
 8004928:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4422      	add	r2, r4
 8004930:	609a      	str	r2, [r3, #8]
}
 8004932:	e7ff      	b.n	8004934 <UART_SetConfig+0x98c>
 8004934:	bf00      	nop
 8004936:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800493a:	46bd      	mov	sp, r7
 800493c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004940:	51eb851f 	.word	0x51eb851f

08004944 <__errno>:
 8004944:	4b01      	ldr	r3, [pc, #4]	; (800494c <__errno+0x8>)
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	2000000c 	.word	0x2000000c

08004950 <__libc_init_array>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	4d0d      	ldr	r5, [pc, #52]	; (8004988 <__libc_init_array+0x38>)
 8004954:	4c0d      	ldr	r4, [pc, #52]	; (800498c <__libc_init_array+0x3c>)
 8004956:	1b64      	subs	r4, r4, r5
 8004958:	10a4      	asrs	r4, r4, #2
 800495a:	2600      	movs	r6, #0
 800495c:	42a6      	cmp	r6, r4
 800495e:	d109      	bne.n	8004974 <__libc_init_array+0x24>
 8004960:	4d0b      	ldr	r5, [pc, #44]	; (8004990 <__libc_init_array+0x40>)
 8004962:	4c0c      	ldr	r4, [pc, #48]	; (8004994 <__libc_init_array+0x44>)
 8004964:	f000 fd26 	bl	80053b4 <_init>
 8004968:	1b64      	subs	r4, r4, r5
 800496a:	10a4      	asrs	r4, r4, #2
 800496c:	2600      	movs	r6, #0
 800496e:	42a6      	cmp	r6, r4
 8004970:	d105      	bne.n	800497e <__libc_init_array+0x2e>
 8004972:	bd70      	pop	{r4, r5, r6, pc}
 8004974:	f855 3b04 	ldr.w	r3, [r5], #4
 8004978:	4798      	blx	r3
 800497a:	3601      	adds	r6, #1
 800497c:	e7ee      	b.n	800495c <__libc_init_array+0xc>
 800497e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004982:	4798      	blx	r3
 8004984:	3601      	adds	r6, #1
 8004986:	e7f2      	b.n	800496e <__libc_init_array+0x1e>
 8004988:	08005530 	.word	0x08005530
 800498c:	08005530 	.word	0x08005530
 8004990:	08005530 	.word	0x08005530
 8004994:	08005534 	.word	0x08005534

08004998 <memset>:
 8004998:	4402      	add	r2, r0
 800499a:	4603      	mov	r3, r0
 800499c:	4293      	cmp	r3, r2
 800499e:	d100      	bne.n	80049a2 <memset+0xa>
 80049a0:	4770      	bx	lr
 80049a2:	f803 1b01 	strb.w	r1, [r3], #1
 80049a6:	e7f9      	b.n	800499c <memset+0x4>

080049a8 <_puts_r>:
 80049a8:	b570      	push	{r4, r5, r6, lr}
 80049aa:	460e      	mov	r6, r1
 80049ac:	4605      	mov	r5, r0
 80049ae:	b118      	cbz	r0, 80049b8 <_puts_r+0x10>
 80049b0:	6983      	ldr	r3, [r0, #24]
 80049b2:	b90b      	cbnz	r3, 80049b8 <_puts_r+0x10>
 80049b4:	f000 fa50 	bl	8004e58 <__sinit>
 80049b8:	69ab      	ldr	r3, [r5, #24]
 80049ba:	68ac      	ldr	r4, [r5, #8]
 80049bc:	b913      	cbnz	r3, 80049c4 <_puts_r+0x1c>
 80049be:	4628      	mov	r0, r5
 80049c0:	f000 fa4a 	bl	8004e58 <__sinit>
 80049c4:	4b2c      	ldr	r3, [pc, #176]	; (8004a78 <_puts_r+0xd0>)
 80049c6:	429c      	cmp	r4, r3
 80049c8:	d120      	bne.n	8004a0c <_puts_r+0x64>
 80049ca:	686c      	ldr	r4, [r5, #4]
 80049cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049ce:	07db      	lsls	r3, r3, #31
 80049d0:	d405      	bmi.n	80049de <_puts_r+0x36>
 80049d2:	89a3      	ldrh	r3, [r4, #12]
 80049d4:	0598      	lsls	r0, r3, #22
 80049d6:	d402      	bmi.n	80049de <_puts_r+0x36>
 80049d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049da:	f000 fadb 	bl	8004f94 <__retarget_lock_acquire_recursive>
 80049de:	89a3      	ldrh	r3, [r4, #12]
 80049e0:	0719      	lsls	r1, r3, #28
 80049e2:	d51d      	bpl.n	8004a20 <_puts_r+0x78>
 80049e4:	6923      	ldr	r3, [r4, #16]
 80049e6:	b1db      	cbz	r3, 8004a20 <_puts_r+0x78>
 80049e8:	3e01      	subs	r6, #1
 80049ea:	68a3      	ldr	r3, [r4, #8]
 80049ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049f0:	3b01      	subs	r3, #1
 80049f2:	60a3      	str	r3, [r4, #8]
 80049f4:	bb39      	cbnz	r1, 8004a46 <_puts_r+0x9e>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	da38      	bge.n	8004a6c <_puts_r+0xc4>
 80049fa:	4622      	mov	r2, r4
 80049fc:	210a      	movs	r1, #10
 80049fe:	4628      	mov	r0, r5
 8004a00:	f000 f850 	bl	8004aa4 <__swbuf_r>
 8004a04:	3001      	adds	r0, #1
 8004a06:	d011      	beq.n	8004a2c <_puts_r+0x84>
 8004a08:	250a      	movs	r5, #10
 8004a0a:	e011      	b.n	8004a30 <_puts_r+0x88>
 8004a0c:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <_puts_r+0xd4>)
 8004a0e:	429c      	cmp	r4, r3
 8004a10:	d101      	bne.n	8004a16 <_puts_r+0x6e>
 8004a12:	68ac      	ldr	r4, [r5, #8]
 8004a14:	e7da      	b.n	80049cc <_puts_r+0x24>
 8004a16:	4b1a      	ldr	r3, [pc, #104]	; (8004a80 <_puts_r+0xd8>)
 8004a18:	429c      	cmp	r4, r3
 8004a1a:	bf08      	it	eq
 8004a1c:	68ec      	ldreq	r4, [r5, #12]
 8004a1e:	e7d5      	b.n	80049cc <_puts_r+0x24>
 8004a20:	4621      	mov	r1, r4
 8004a22:	4628      	mov	r0, r5
 8004a24:	f000 f890 	bl	8004b48 <__swsetup_r>
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d0dd      	beq.n	80049e8 <_puts_r+0x40>
 8004a2c:	f04f 35ff 	mov.w	r5, #4294967295
 8004a30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a32:	07da      	lsls	r2, r3, #31
 8004a34:	d405      	bmi.n	8004a42 <_puts_r+0x9a>
 8004a36:	89a3      	ldrh	r3, [r4, #12]
 8004a38:	059b      	lsls	r3, r3, #22
 8004a3a:	d402      	bmi.n	8004a42 <_puts_r+0x9a>
 8004a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a3e:	f000 faaa 	bl	8004f96 <__retarget_lock_release_recursive>
 8004a42:	4628      	mov	r0, r5
 8004a44:	bd70      	pop	{r4, r5, r6, pc}
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da04      	bge.n	8004a54 <_puts_r+0xac>
 8004a4a:	69a2      	ldr	r2, [r4, #24]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	dc06      	bgt.n	8004a5e <_puts_r+0xb6>
 8004a50:	290a      	cmp	r1, #10
 8004a52:	d004      	beq.n	8004a5e <_puts_r+0xb6>
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	6022      	str	r2, [r4, #0]
 8004a5a:	7019      	strb	r1, [r3, #0]
 8004a5c:	e7c5      	b.n	80049ea <_puts_r+0x42>
 8004a5e:	4622      	mov	r2, r4
 8004a60:	4628      	mov	r0, r5
 8004a62:	f000 f81f 	bl	8004aa4 <__swbuf_r>
 8004a66:	3001      	adds	r0, #1
 8004a68:	d1bf      	bne.n	80049ea <_puts_r+0x42>
 8004a6a:	e7df      	b.n	8004a2c <_puts_r+0x84>
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	250a      	movs	r5, #10
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	6022      	str	r2, [r4, #0]
 8004a74:	701d      	strb	r5, [r3, #0]
 8004a76:	e7db      	b.n	8004a30 <_puts_r+0x88>
 8004a78:	080054e8 	.word	0x080054e8
 8004a7c:	08005508 	.word	0x08005508
 8004a80:	080054c8 	.word	0x080054c8

08004a84 <puts>:
 8004a84:	4b02      	ldr	r3, [pc, #8]	; (8004a90 <puts+0xc>)
 8004a86:	4601      	mov	r1, r0
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	f7ff bf8d 	b.w	80049a8 <_puts_r>
 8004a8e:	bf00      	nop
 8004a90:	2000000c 	.word	0x2000000c

08004a94 <strcpy>:
 8004a94:	4603      	mov	r3, r0
 8004a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a9a:	f803 2b01 	strb.w	r2, [r3], #1
 8004a9e:	2a00      	cmp	r2, #0
 8004aa0:	d1f9      	bne.n	8004a96 <strcpy+0x2>
 8004aa2:	4770      	bx	lr

08004aa4 <__swbuf_r>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	460e      	mov	r6, r1
 8004aa8:	4614      	mov	r4, r2
 8004aaa:	4605      	mov	r5, r0
 8004aac:	b118      	cbz	r0, 8004ab6 <__swbuf_r+0x12>
 8004aae:	6983      	ldr	r3, [r0, #24]
 8004ab0:	b90b      	cbnz	r3, 8004ab6 <__swbuf_r+0x12>
 8004ab2:	f000 f9d1 	bl	8004e58 <__sinit>
 8004ab6:	4b21      	ldr	r3, [pc, #132]	; (8004b3c <__swbuf_r+0x98>)
 8004ab8:	429c      	cmp	r4, r3
 8004aba:	d12b      	bne.n	8004b14 <__swbuf_r+0x70>
 8004abc:	686c      	ldr	r4, [r5, #4]
 8004abe:	69a3      	ldr	r3, [r4, #24]
 8004ac0:	60a3      	str	r3, [r4, #8]
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	071a      	lsls	r2, r3, #28
 8004ac6:	d52f      	bpl.n	8004b28 <__swbuf_r+0x84>
 8004ac8:	6923      	ldr	r3, [r4, #16]
 8004aca:	b36b      	cbz	r3, 8004b28 <__swbuf_r+0x84>
 8004acc:	6923      	ldr	r3, [r4, #16]
 8004ace:	6820      	ldr	r0, [r4, #0]
 8004ad0:	1ac0      	subs	r0, r0, r3
 8004ad2:	6963      	ldr	r3, [r4, #20]
 8004ad4:	b2f6      	uxtb	r6, r6
 8004ad6:	4283      	cmp	r3, r0
 8004ad8:	4637      	mov	r7, r6
 8004ada:	dc04      	bgt.n	8004ae6 <__swbuf_r+0x42>
 8004adc:	4621      	mov	r1, r4
 8004ade:	4628      	mov	r0, r5
 8004ae0:	f000 f926 	bl	8004d30 <_fflush_r>
 8004ae4:	bb30      	cbnz	r0, 8004b34 <__swbuf_r+0x90>
 8004ae6:	68a3      	ldr	r3, [r4, #8]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	60a3      	str	r3, [r4, #8]
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	6022      	str	r2, [r4, #0]
 8004af2:	701e      	strb	r6, [r3, #0]
 8004af4:	6963      	ldr	r3, [r4, #20]
 8004af6:	3001      	adds	r0, #1
 8004af8:	4283      	cmp	r3, r0
 8004afa:	d004      	beq.n	8004b06 <__swbuf_r+0x62>
 8004afc:	89a3      	ldrh	r3, [r4, #12]
 8004afe:	07db      	lsls	r3, r3, #31
 8004b00:	d506      	bpl.n	8004b10 <__swbuf_r+0x6c>
 8004b02:	2e0a      	cmp	r6, #10
 8004b04:	d104      	bne.n	8004b10 <__swbuf_r+0x6c>
 8004b06:	4621      	mov	r1, r4
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f000 f911 	bl	8004d30 <_fflush_r>
 8004b0e:	b988      	cbnz	r0, 8004b34 <__swbuf_r+0x90>
 8004b10:	4638      	mov	r0, r7
 8004b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b14:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <__swbuf_r+0x9c>)
 8004b16:	429c      	cmp	r4, r3
 8004b18:	d101      	bne.n	8004b1e <__swbuf_r+0x7a>
 8004b1a:	68ac      	ldr	r4, [r5, #8]
 8004b1c:	e7cf      	b.n	8004abe <__swbuf_r+0x1a>
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <__swbuf_r+0xa0>)
 8004b20:	429c      	cmp	r4, r3
 8004b22:	bf08      	it	eq
 8004b24:	68ec      	ldreq	r4, [r5, #12]
 8004b26:	e7ca      	b.n	8004abe <__swbuf_r+0x1a>
 8004b28:	4621      	mov	r1, r4
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f000 f80c 	bl	8004b48 <__swsetup_r>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d0cb      	beq.n	8004acc <__swbuf_r+0x28>
 8004b34:	f04f 37ff 	mov.w	r7, #4294967295
 8004b38:	e7ea      	b.n	8004b10 <__swbuf_r+0x6c>
 8004b3a:	bf00      	nop
 8004b3c:	080054e8 	.word	0x080054e8
 8004b40:	08005508 	.word	0x08005508
 8004b44:	080054c8 	.word	0x080054c8

08004b48 <__swsetup_r>:
 8004b48:	4b32      	ldr	r3, [pc, #200]	; (8004c14 <__swsetup_r+0xcc>)
 8004b4a:	b570      	push	{r4, r5, r6, lr}
 8004b4c:	681d      	ldr	r5, [r3, #0]
 8004b4e:	4606      	mov	r6, r0
 8004b50:	460c      	mov	r4, r1
 8004b52:	b125      	cbz	r5, 8004b5e <__swsetup_r+0x16>
 8004b54:	69ab      	ldr	r3, [r5, #24]
 8004b56:	b913      	cbnz	r3, 8004b5e <__swsetup_r+0x16>
 8004b58:	4628      	mov	r0, r5
 8004b5a:	f000 f97d 	bl	8004e58 <__sinit>
 8004b5e:	4b2e      	ldr	r3, [pc, #184]	; (8004c18 <__swsetup_r+0xd0>)
 8004b60:	429c      	cmp	r4, r3
 8004b62:	d10f      	bne.n	8004b84 <__swsetup_r+0x3c>
 8004b64:	686c      	ldr	r4, [r5, #4]
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b6c:	0719      	lsls	r1, r3, #28
 8004b6e:	d42c      	bmi.n	8004bca <__swsetup_r+0x82>
 8004b70:	06dd      	lsls	r5, r3, #27
 8004b72:	d411      	bmi.n	8004b98 <__swsetup_r+0x50>
 8004b74:	2309      	movs	r3, #9
 8004b76:	6033      	str	r3, [r6, #0]
 8004b78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b7c:	81a3      	strh	r3, [r4, #12]
 8004b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b82:	e03e      	b.n	8004c02 <__swsetup_r+0xba>
 8004b84:	4b25      	ldr	r3, [pc, #148]	; (8004c1c <__swsetup_r+0xd4>)
 8004b86:	429c      	cmp	r4, r3
 8004b88:	d101      	bne.n	8004b8e <__swsetup_r+0x46>
 8004b8a:	68ac      	ldr	r4, [r5, #8]
 8004b8c:	e7eb      	b.n	8004b66 <__swsetup_r+0x1e>
 8004b8e:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <__swsetup_r+0xd8>)
 8004b90:	429c      	cmp	r4, r3
 8004b92:	bf08      	it	eq
 8004b94:	68ec      	ldreq	r4, [r5, #12]
 8004b96:	e7e6      	b.n	8004b66 <__swsetup_r+0x1e>
 8004b98:	0758      	lsls	r0, r3, #29
 8004b9a:	d512      	bpl.n	8004bc2 <__swsetup_r+0x7a>
 8004b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b9e:	b141      	cbz	r1, 8004bb2 <__swsetup_r+0x6a>
 8004ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ba4:	4299      	cmp	r1, r3
 8004ba6:	d002      	beq.n	8004bae <__swsetup_r+0x66>
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f000 fa5b 	bl	8005064 <_free_r>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	6363      	str	r3, [r4, #52]	; 0x34
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bb8:	81a3      	strh	r3, [r4, #12]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	6063      	str	r3, [r4, #4]
 8004bbe:	6923      	ldr	r3, [r4, #16]
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	f043 0308 	orr.w	r3, r3, #8
 8004bc8:	81a3      	strh	r3, [r4, #12]
 8004bca:	6923      	ldr	r3, [r4, #16]
 8004bcc:	b94b      	cbnz	r3, 8004be2 <__swsetup_r+0x9a>
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd8:	d003      	beq.n	8004be2 <__swsetup_r+0x9a>
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4630      	mov	r0, r6
 8004bde:	f000 fa01 	bl	8004fe4 <__smakebuf_r>
 8004be2:	89a0      	ldrh	r0, [r4, #12]
 8004be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004be8:	f010 0301 	ands.w	r3, r0, #1
 8004bec:	d00a      	beq.n	8004c04 <__swsetup_r+0xbc>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60a3      	str	r3, [r4, #8]
 8004bf2:	6963      	ldr	r3, [r4, #20]
 8004bf4:	425b      	negs	r3, r3
 8004bf6:	61a3      	str	r3, [r4, #24]
 8004bf8:	6923      	ldr	r3, [r4, #16]
 8004bfa:	b943      	cbnz	r3, 8004c0e <__swsetup_r+0xc6>
 8004bfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c00:	d1ba      	bne.n	8004b78 <__swsetup_r+0x30>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	0781      	lsls	r1, r0, #30
 8004c06:	bf58      	it	pl
 8004c08:	6963      	ldrpl	r3, [r4, #20]
 8004c0a:	60a3      	str	r3, [r4, #8]
 8004c0c:	e7f4      	b.n	8004bf8 <__swsetup_r+0xb0>
 8004c0e:	2000      	movs	r0, #0
 8004c10:	e7f7      	b.n	8004c02 <__swsetup_r+0xba>
 8004c12:	bf00      	nop
 8004c14:	2000000c 	.word	0x2000000c
 8004c18:	080054e8 	.word	0x080054e8
 8004c1c:	08005508 	.word	0x08005508
 8004c20:	080054c8 	.word	0x080054c8

08004c24 <__sflush_r>:
 8004c24:	898a      	ldrh	r2, [r1, #12]
 8004c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2a:	4605      	mov	r5, r0
 8004c2c:	0710      	lsls	r0, r2, #28
 8004c2e:	460c      	mov	r4, r1
 8004c30:	d458      	bmi.n	8004ce4 <__sflush_r+0xc0>
 8004c32:	684b      	ldr	r3, [r1, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	dc05      	bgt.n	8004c44 <__sflush_r+0x20>
 8004c38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	dc02      	bgt.n	8004c44 <__sflush_r+0x20>
 8004c3e:	2000      	movs	r0, #0
 8004c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c46:	2e00      	cmp	r6, #0
 8004c48:	d0f9      	beq.n	8004c3e <__sflush_r+0x1a>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c50:	682f      	ldr	r7, [r5, #0]
 8004c52:	602b      	str	r3, [r5, #0]
 8004c54:	d032      	beq.n	8004cbc <__sflush_r+0x98>
 8004c56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	075a      	lsls	r2, r3, #29
 8004c5c:	d505      	bpl.n	8004c6a <__sflush_r+0x46>
 8004c5e:	6863      	ldr	r3, [r4, #4]
 8004c60:	1ac0      	subs	r0, r0, r3
 8004c62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c64:	b10b      	cbz	r3, 8004c6a <__sflush_r+0x46>
 8004c66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c68:	1ac0      	subs	r0, r0, r3
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c70:	6a21      	ldr	r1, [r4, #32]
 8004c72:	4628      	mov	r0, r5
 8004c74:	47b0      	blx	r6
 8004c76:	1c43      	adds	r3, r0, #1
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	d106      	bne.n	8004c8a <__sflush_r+0x66>
 8004c7c:	6829      	ldr	r1, [r5, #0]
 8004c7e:	291d      	cmp	r1, #29
 8004c80:	d82c      	bhi.n	8004cdc <__sflush_r+0xb8>
 8004c82:	4a2a      	ldr	r2, [pc, #168]	; (8004d2c <__sflush_r+0x108>)
 8004c84:	40ca      	lsrs	r2, r1
 8004c86:	07d6      	lsls	r6, r2, #31
 8004c88:	d528      	bpl.n	8004cdc <__sflush_r+0xb8>
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	6062      	str	r2, [r4, #4]
 8004c8e:	04d9      	lsls	r1, r3, #19
 8004c90:	6922      	ldr	r2, [r4, #16]
 8004c92:	6022      	str	r2, [r4, #0]
 8004c94:	d504      	bpl.n	8004ca0 <__sflush_r+0x7c>
 8004c96:	1c42      	adds	r2, r0, #1
 8004c98:	d101      	bne.n	8004c9e <__sflush_r+0x7a>
 8004c9a:	682b      	ldr	r3, [r5, #0]
 8004c9c:	b903      	cbnz	r3, 8004ca0 <__sflush_r+0x7c>
 8004c9e:	6560      	str	r0, [r4, #84]	; 0x54
 8004ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ca2:	602f      	str	r7, [r5, #0]
 8004ca4:	2900      	cmp	r1, #0
 8004ca6:	d0ca      	beq.n	8004c3e <__sflush_r+0x1a>
 8004ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cac:	4299      	cmp	r1, r3
 8004cae:	d002      	beq.n	8004cb6 <__sflush_r+0x92>
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f000 f9d7 	bl	8005064 <_free_r>
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	6360      	str	r0, [r4, #52]	; 0x34
 8004cba:	e7c1      	b.n	8004c40 <__sflush_r+0x1c>
 8004cbc:	6a21      	ldr	r1, [r4, #32]
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	47b0      	blx	r6
 8004cc4:	1c41      	adds	r1, r0, #1
 8004cc6:	d1c7      	bne.n	8004c58 <__sflush_r+0x34>
 8004cc8:	682b      	ldr	r3, [r5, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0c4      	beq.n	8004c58 <__sflush_r+0x34>
 8004cce:	2b1d      	cmp	r3, #29
 8004cd0:	d001      	beq.n	8004cd6 <__sflush_r+0xb2>
 8004cd2:	2b16      	cmp	r3, #22
 8004cd4:	d101      	bne.n	8004cda <__sflush_r+0xb6>
 8004cd6:	602f      	str	r7, [r5, #0]
 8004cd8:	e7b1      	b.n	8004c3e <__sflush_r+0x1a>
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ce0:	81a3      	strh	r3, [r4, #12]
 8004ce2:	e7ad      	b.n	8004c40 <__sflush_r+0x1c>
 8004ce4:	690f      	ldr	r7, [r1, #16]
 8004ce6:	2f00      	cmp	r7, #0
 8004ce8:	d0a9      	beq.n	8004c3e <__sflush_r+0x1a>
 8004cea:	0793      	lsls	r3, r2, #30
 8004cec:	680e      	ldr	r6, [r1, #0]
 8004cee:	bf08      	it	eq
 8004cf0:	694b      	ldreq	r3, [r1, #20]
 8004cf2:	600f      	str	r7, [r1, #0]
 8004cf4:	bf18      	it	ne
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	eba6 0807 	sub.w	r8, r6, r7
 8004cfc:	608b      	str	r3, [r1, #8]
 8004cfe:	f1b8 0f00 	cmp.w	r8, #0
 8004d02:	dd9c      	ble.n	8004c3e <__sflush_r+0x1a>
 8004d04:	6a21      	ldr	r1, [r4, #32]
 8004d06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d08:	4643      	mov	r3, r8
 8004d0a:	463a      	mov	r2, r7
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b0      	blx	r6
 8004d10:	2800      	cmp	r0, #0
 8004d12:	dc06      	bgt.n	8004d22 <__sflush_r+0xfe>
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d1a:	81a3      	strh	r3, [r4, #12]
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d20:	e78e      	b.n	8004c40 <__sflush_r+0x1c>
 8004d22:	4407      	add	r7, r0
 8004d24:	eba8 0800 	sub.w	r8, r8, r0
 8004d28:	e7e9      	b.n	8004cfe <__sflush_r+0xda>
 8004d2a:	bf00      	nop
 8004d2c:	20400001 	.word	0x20400001

08004d30 <_fflush_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	690b      	ldr	r3, [r1, #16]
 8004d34:	4605      	mov	r5, r0
 8004d36:	460c      	mov	r4, r1
 8004d38:	b913      	cbnz	r3, 8004d40 <_fflush_r+0x10>
 8004d3a:	2500      	movs	r5, #0
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	bd38      	pop	{r3, r4, r5, pc}
 8004d40:	b118      	cbz	r0, 8004d4a <_fflush_r+0x1a>
 8004d42:	6983      	ldr	r3, [r0, #24]
 8004d44:	b90b      	cbnz	r3, 8004d4a <_fflush_r+0x1a>
 8004d46:	f000 f887 	bl	8004e58 <__sinit>
 8004d4a:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <_fflush_r+0x6c>)
 8004d4c:	429c      	cmp	r4, r3
 8004d4e:	d11b      	bne.n	8004d88 <_fflush_r+0x58>
 8004d50:	686c      	ldr	r4, [r5, #4]
 8004d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0ef      	beq.n	8004d3a <_fflush_r+0xa>
 8004d5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d5c:	07d0      	lsls	r0, r2, #31
 8004d5e:	d404      	bmi.n	8004d6a <_fflush_r+0x3a>
 8004d60:	0599      	lsls	r1, r3, #22
 8004d62:	d402      	bmi.n	8004d6a <_fflush_r+0x3a>
 8004d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d66:	f000 f915 	bl	8004f94 <__retarget_lock_acquire_recursive>
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	f7ff ff59 	bl	8004c24 <__sflush_r>
 8004d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d74:	07da      	lsls	r2, r3, #31
 8004d76:	4605      	mov	r5, r0
 8004d78:	d4e0      	bmi.n	8004d3c <_fflush_r+0xc>
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	059b      	lsls	r3, r3, #22
 8004d7e:	d4dd      	bmi.n	8004d3c <_fflush_r+0xc>
 8004d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d82:	f000 f908 	bl	8004f96 <__retarget_lock_release_recursive>
 8004d86:	e7d9      	b.n	8004d3c <_fflush_r+0xc>
 8004d88:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <_fflush_r+0x70>)
 8004d8a:	429c      	cmp	r4, r3
 8004d8c:	d101      	bne.n	8004d92 <_fflush_r+0x62>
 8004d8e:	68ac      	ldr	r4, [r5, #8]
 8004d90:	e7df      	b.n	8004d52 <_fflush_r+0x22>
 8004d92:	4b04      	ldr	r3, [pc, #16]	; (8004da4 <_fflush_r+0x74>)
 8004d94:	429c      	cmp	r4, r3
 8004d96:	bf08      	it	eq
 8004d98:	68ec      	ldreq	r4, [r5, #12]
 8004d9a:	e7da      	b.n	8004d52 <_fflush_r+0x22>
 8004d9c:	080054e8 	.word	0x080054e8
 8004da0:	08005508 	.word	0x08005508
 8004da4:	080054c8 	.word	0x080054c8

08004da8 <std>:
 8004da8:	2300      	movs	r3, #0
 8004daa:	b510      	push	{r4, lr}
 8004dac:	4604      	mov	r4, r0
 8004dae:	e9c0 3300 	strd	r3, r3, [r0]
 8004db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004db6:	6083      	str	r3, [r0, #8]
 8004db8:	8181      	strh	r1, [r0, #12]
 8004dba:	6643      	str	r3, [r0, #100]	; 0x64
 8004dbc:	81c2      	strh	r2, [r0, #14]
 8004dbe:	6183      	str	r3, [r0, #24]
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	2208      	movs	r2, #8
 8004dc4:	305c      	adds	r0, #92	; 0x5c
 8004dc6:	f7ff fde7 	bl	8004998 <memset>
 8004dca:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <std+0x38>)
 8004dcc:	6263      	str	r3, [r4, #36]	; 0x24
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <std+0x3c>)
 8004dd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <std+0x40>)
 8004dd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <std+0x44>)
 8004dd8:	6224      	str	r4, [r4, #32]
 8004dda:	6323      	str	r3, [r4, #48]	; 0x30
 8004ddc:	bd10      	pop	{r4, pc}
 8004dde:	bf00      	nop
 8004de0:	08005245 	.word	0x08005245
 8004de4:	08005267 	.word	0x08005267
 8004de8:	0800529f 	.word	0x0800529f
 8004dec:	080052c3 	.word	0x080052c3

08004df0 <_cleanup_r>:
 8004df0:	4901      	ldr	r1, [pc, #4]	; (8004df8 <_cleanup_r+0x8>)
 8004df2:	f000 b8af 	b.w	8004f54 <_fwalk_reent>
 8004df6:	bf00      	nop
 8004df8:	08004d31 	.word	0x08004d31

08004dfc <__sfmoreglue>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	2268      	movs	r2, #104	; 0x68
 8004e00:	1e4d      	subs	r5, r1, #1
 8004e02:	4355      	muls	r5, r2
 8004e04:	460e      	mov	r6, r1
 8004e06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e0a:	f000 f997 	bl	800513c <_malloc_r>
 8004e0e:	4604      	mov	r4, r0
 8004e10:	b140      	cbz	r0, 8004e24 <__sfmoreglue+0x28>
 8004e12:	2100      	movs	r1, #0
 8004e14:	e9c0 1600 	strd	r1, r6, [r0]
 8004e18:	300c      	adds	r0, #12
 8004e1a:	60a0      	str	r0, [r4, #8]
 8004e1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e20:	f7ff fdba 	bl	8004998 <memset>
 8004e24:	4620      	mov	r0, r4
 8004e26:	bd70      	pop	{r4, r5, r6, pc}

08004e28 <__sfp_lock_acquire>:
 8004e28:	4801      	ldr	r0, [pc, #4]	; (8004e30 <__sfp_lock_acquire+0x8>)
 8004e2a:	f000 b8b3 	b.w	8004f94 <__retarget_lock_acquire_recursive>
 8004e2e:	bf00      	nop
 8004e30:	200132dd 	.word	0x200132dd

08004e34 <__sfp_lock_release>:
 8004e34:	4801      	ldr	r0, [pc, #4]	; (8004e3c <__sfp_lock_release+0x8>)
 8004e36:	f000 b8ae 	b.w	8004f96 <__retarget_lock_release_recursive>
 8004e3a:	bf00      	nop
 8004e3c:	200132dd 	.word	0x200132dd

08004e40 <__sinit_lock_acquire>:
 8004e40:	4801      	ldr	r0, [pc, #4]	; (8004e48 <__sinit_lock_acquire+0x8>)
 8004e42:	f000 b8a7 	b.w	8004f94 <__retarget_lock_acquire_recursive>
 8004e46:	bf00      	nop
 8004e48:	200132de 	.word	0x200132de

08004e4c <__sinit_lock_release>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	; (8004e54 <__sinit_lock_release+0x8>)
 8004e4e:	f000 b8a2 	b.w	8004f96 <__retarget_lock_release_recursive>
 8004e52:	bf00      	nop
 8004e54:	200132de 	.word	0x200132de

08004e58 <__sinit>:
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	f7ff fff0 	bl	8004e40 <__sinit_lock_acquire>
 8004e60:	69a3      	ldr	r3, [r4, #24]
 8004e62:	b11b      	cbz	r3, 8004e6c <__sinit+0x14>
 8004e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e68:	f7ff bff0 	b.w	8004e4c <__sinit_lock_release>
 8004e6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e70:	6523      	str	r3, [r4, #80]	; 0x50
 8004e72:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <__sinit+0x68>)
 8004e74:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <__sinit+0x6c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e7a:	42a3      	cmp	r3, r4
 8004e7c:	bf04      	itt	eq
 8004e7e:	2301      	moveq	r3, #1
 8004e80:	61a3      	streq	r3, [r4, #24]
 8004e82:	4620      	mov	r0, r4
 8004e84:	f000 f820 	bl	8004ec8 <__sfp>
 8004e88:	6060      	str	r0, [r4, #4]
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	f000 f81c 	bl	8004ec8 <__sfp>
 8004e90:	60a0      	str	r0, [r4, #8]
 8004e92:	4620      	mov	r0, r4
 8004e94:	f000 f818 	bl	8004ec8 <__sfp>
 8004e98:	2200      	movs	r2, #0
 8004e9a:	60e0      	str	r0, [r4, #12]
 8004e9c:	2104      	movs	r1, #4
 8004e9e:	6860      	ldr	r0, [r4, #4]
 8004ea0:	f7ff ff82 	bl	8004da8 <std>
 8004ea4:	68a0      	ldr	r0, [r4, #8]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	2109      	movs	r1, #9
 8004eaa:	f7ff ff7d 	bl	8004da8 <std>
 8004eae:	68e0      	ldr	r0, [r4, #12]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	2112      	movs	r1, #18
 8004eb4:	f7ff ff78 	bl	8004da8 <std>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	61a3      	str	r3, [r4, #24]
 8004ebc:	e7d2      	b.n	8004e64 <__sinit+0xc>
 8004ebe:	bf00      	nop
 8004ec0:	080054c4 	.word	0x080054c4
 8004ec4:	08004df1 	.word	0x08004df1

08004ec8 <__sfp>:
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	4607      	mov	r7, r0
 8004ecc:	f7ff ffac 	bl	8004e28 <__sfp_lock_acquire>
 8004ed0:	4b1e      	ldr	r3, [pc, #120]	; (8004f4c <__sfp+0x84>)
 8004ed2:	681e      	ldr	r6, [r3, #0]
 8004ed4:	69b3      	ldr	r3, [r6, #24]
 8004ed6:	b913      	cbnz	r3, 8004ede <__sfp+0x16>
 8004ed8:	4630      	mov	r0, r6
 8004eda:	f7ff ffbd 	bl	8004e58 <__sinit>
 8004ede:	3648      	adds	r6, #72	; 0x48
 8004ee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	d503      	bpl.n	8004ef0 <__sfp+0x28>
 8004ee8:	6833      	ldr	r3, [r6, #0]
 8004eea:	b30b      	cbz	r3, 8004f30 <__sfp+0x68>
 8004eec:	6836      	ldr	r6, [r6, #0]
 8004eee:	e7f7      	b.n	8004ee0 <__sfp+0x18>
 8004ef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ef4:	b9d5      	cbnz	r5, 8004f2c <__sfp+0x64>
 8004ef6:	4b16      	ldr	r3, [pc, #88]	; (8004f50 <__sfp+0x88>)
 8004ef8:	60e3      	str	r3, [r4, #12]
 8004efa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004efe:	6665      	str	r5, [r4, #100]	; 0x64
 8004f00:	f000 f847 	bl	8004f92 <__retarget_lock_init_recursive>
 8004f04:	f7ff ff96 	bl	8004e34 <__sfp_lock_release>
 8004f08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f10:	6025      	str	r5, [r4, #0]
 8004f12:	61a5      	str	r5, [r4, #24]
 8004f14:	2208      	movs	r2, #8
 8004f16:	4629      	mov	r1, r5
 8004f18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f1c:	f7ff fd3c 	bl	8004998 <memset>
 8004f20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f28:	4620      	mov	r0, r4
 8004f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f2c:	3468      	adds	r4, #104	; 0x68
 8004f2e:	e7d9      	b.n	8004ee4 <__sfp+0x1c>
 8004f30:	2104      	movs	r1, #4
 8004f32:	4638      	mov	r0, r7
 8004f34:	f7ff ff62 	bl	8004dfc <__sfmoreglue>
 8004f38:	4604      	mov	r4, r0
 8004f3a:	6030      	str	r0, [r6, #0]
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d1d5      	bne.n	8004eec <__sfp+0x24>
 8004f40:	f7ff ff78 	bl	8004e34 <__sfp_lock_release>
 8004f44:	230c      	movs	r3, #12
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	e7ee      	b.n	8004f28 <__sfp+0x60>
 8004f4a:	bf00      	nop
 8004f4c:	080054c4 	.word	0x080054c4
 8004f50:	ffff0001 	.word	0xffff0001

08004f54 <_fwalk_reent>:
 8004f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f58:	4606      	mov	r6, r0
 8004f5a:	4688      	mov	r8, r1
 8004f5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f60:	2700      	movs	r7, #0
 8004f62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f66:	f1b9 0901 	subs.w	r9, r9, #1
 8004f6a:	d505      	bpl.n	8004f78 <_fwalk_reent+0x24>
 8004f6c:	6824      	ldr	r4, [r4, #0]
 8004f6e:	2c00      	cmp	r4, #0
 8004f70:	d1f7      	bne.n	8004f62 <_fwalk_reent+0xe>
 8004f72:	4638      	mov	r0, r7
 8004f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f78:	89ab      	ldrh	r3, [r5, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d907      	bls.n	8004f8e <_fwalk_reent+0x3a>
 8004f7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f82:	3301      	adds	r3, #1
 8004f84:	d003      	beq.n	8004f8e <_fwalk_reent+0x3a>
 8004f86:	4629      	mov	r1, r5
 8004f88:	4630      	mov	r0, r6
 8004f8a:	47c0      	blx	r8
 8004f8c:	4307      	orrs	r7, r0
 8004f8e:	3568      	adds	r5, #104	; 0x68
 8004f90:	e7e9      	b.n	8004f66 <_fwalk_reent+0x12>

08004f92 <__retarget_lock_init_recursive>:
 8004f92:	4770      	bx	lr

08004f94 <__retarget_lock_acquire_recursive>:
 8004f94:	4770      	bx	lr

08004f96 <__retarget_lock_release_recursive>:
 8004f96:	4770      	bx	lr

08004f98 <__swhatbuf_r>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	460e      	mov	r6, r1
 8004f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	b096      	sub	sp, #88	; 0x58
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	461d      	mov	r5, r3
 8004fa8:	da08      	bge.n	8004fbc <__swhatbuf_r+0x24>
 8004faa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	602a      	str	r2, [r5, #0]
 8004fb2:	061a      	lsls	r2, r3, #24
 8004fb4:	d410      	bmi.n	8004fd8 <__swhatbuf_r+0x40>
 8004fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fba:	e00e      	b.n	8004fda <__swhatbuf_r+0x42>
 8004fbc:	466a      	mov	r2, sp
 8004fbe:	f000 f9a7 	bl	8005310 <_fstat_r>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	dbf1      	blt.n	8004faa <__swhatbuf_r+0x12>
 8004fc6:	9a01      	ldr	r2, [sp, #4]
 8004fc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fd0:	425a      	negs	r2, r3
 8004fd2:	415a      	adcs	r2, r3
 8004fd4:	602a      	str	r2, [r5, #0]
 8004fd6:	e7ee      	b.n	8004fb6 <__swhatbuf_r+0x1e>
 8004fd8:	2340      	movs	r3, #64	; 0x40
 8004fda:	2000      	movs	r0, #0
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	b016      	add	sp, #88	; 0x58
 8004fe0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004fe4 <__smakebuf_r>:
 8004fe4:	898b      	ldrh	r3, [r1, #12]
 8004fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fe8:	079d      	lsls	r5, r3, #30
 8004fea:	4606      	mov	r6, r0
 8004fec:	460c      	mov	r4, r1
 8004fee:	d507      	bpl.n	8005000 <__smakebuf_r+0x1c>
 8004ff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	6123      	str	r3, [r4, #16]
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	6163      	str	r3, [r4, #20]
 8004ffc:	b002      	add	sp, #8
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	ab01      	add	r3, sp, #4
 8005002:	466a      	mov	r2, sp
 8005004:	f7ff ffc8 	bl	8004f98 <__swhatbuf_r>
 8005008:	9900      	ldr	r1, [sp, #0]
 800500a:	4605      	mov	r5, r0
 800500c:	4630      	mov	r0, r6
 800500e:	f000 f895 	bl	800513c <_malloc_r>
 8005012:	b948      	cbnz	r0, 8005028 <__smakebuf_r+0x44>
 8005014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005018:	059a      	lsls	r2, r3, #22
 800501a:	d4ef      	bmi.n	8004ffc <__smakebuf_r+0x18>
 800501c:	f023 0303 	bic.w	r3, r3, #3
 8005020:	f043 0302 	orr.w	r3, r3, #2
 8005024:	81a3      	strh	r3, [r4, #12]
 8005026:	e7e3      	b.n	8004ff0 <__smakebuf_r+0xc>
 8005028:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <__smakebuf_r+0x7c>)
 800502a:	62b3      	str	r3, [r6, #40]	; 0x28
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	6020      	str	r0, [r4, #0]
 8005030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005034:	81a3      	strh	r3, [r4, #12]
 8005036:	9b00      	ldr	r3, [sp, #0]
 8005038:	6163      	str	r3, [r4, #20]
 800503a:	9b01      	ldr	r3, [sp, #4]
 800503c:	6120      	str	r0, [r4, #16]
 800503e:	b15b      	cbz	r3, 8005058 <__smakebuf_r+0x74>
 8005040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005044:	4630      	mov	r0, r6
 8005046:	f000 f975 	bl	8005334 <_isatty_r>
 800504a:	b128      	cbz	r0, 8005058 <__smakebuf_r+0x74>
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	f023 0303 	bic.w	r3, r3, #3
 8005052:	f043 0301 	orr.w	r3, r3, #1
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	89a0      	ldrh	r0, [r4, #12]
 800505a:	4305      	orrs	r5, r0
 800505c:	81a5      	strh	r5, [r4, #12]
 800505e:	e7cd      	b.n	8004ffc <__smakebuf_r+0x18>
 8005060:	08004df1 	.word	0x08004df1

08005064 <_free_r>:
 8005064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005066:	2900      	cmp	r1, #0
 8005068:	d044      	beq.n	80050f4 <_free_r+0x90>
 800506a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800506e:	9001      	str	r0, [sp, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	f1a1 0404 	sub.w	r4, r1, #4
 8005076:	bfb8      	it	lt
 8005078:	18e4      	addlt	r4, r4, r3
 800507a:	f000 f97d 	bl	8005378 <__malloc_lock>
 800507e:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <_free_r+0x94>)
 8005080:	9801      	ldr	r0, [sp, #4]
 8005082:	6813      	ldr	r3, [r2, #0]
 8005084:	b933      	cbnz	r3, 8005094 <_free_r+0x30>
 8005086:	6063      	str	r3, [r4, #4]
 8005088:	6014      	str	r4, [r2, #0]
 800508a:	b003      	add	sp, #12
 800508c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005090:	f000 b978 	b.w	8005384 <__malloc_unlock>
 8005094:	42a3      	cmp	r3, r4
 8005096:	d908      	bls.n	80050aa <_free_r+0x46>
 8005098:	6825      	ldr	r5, [r4, #0]
 800509a:	1961      	adds	r1, r4, r5
 800509c:	428b      	cmp	r3, r1
 800509e:	bf01      	itttt	eq
 80050a0:	6819      	ldreq	r1, [r3, #0]
 80050a2:	685b      	ldreq	r3, [r3, #4]
 80050a4:	1949      	addeq	r1, r1, r5
 80050a6:	6021      	streq	r1, [r4, #0]
 80050a8:	e7ed      	b.n	8005086 <_free_r+0x22>
 80050aa:	461a      	mov	r2, r3
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	b10b      	cbz	r3, 80050b4 <_free_r+0x50>
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d9fa      	bls.n	80050aa <_free_r+0x46>
 80050b4:	6811      	ldr	r1, [r2, #0]
 80050b6:	1855      	adds	r5, r2, r1
 80050b8:	42a5      	cmp	r5, r4
 80050ba:	d10b      	bne.n	80050d4 <_free_r+0x70>
 80050bc:	6824      	ldr	r4, [r4, #0]
 80050be:	4421      	add	r1, r4
 80050c0:	1854      	adds	r4, r2, r1
 80050c2:	42a3      	cmp	r3, r4
 80050c4:	6011      	str	r1, [r2, #0]
 80050c6:	d1e0      	bne.n	800508a <_free_r+0x26>
 80050c8:	681c      	ldr	r4, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	6053      	str	r3, [r2, #4]
 80050ce:	4421      	add	r1, r4
 80050d0:	6011      	str	r1, [r2, #0]
 80050d2:	e7da      	b.n	800508a <_free_r+0x26>
 80050d4:	d902      	bls.n	80050dc <_free_r+0x78>
 80050d6:	230c      	movs	r3, #12
 80050d8:	6003      	str	r3, [r0, #0]
 80050da:	e7d6      	b.n	800508a <_free_r+0x26>
 80050dc:	6825      	ldr	r5, [r4, #0]
 80050de:	1961      	adds	r1, r4, r5
 80050e0:	428b      	cmp	r3, r1
 80050e2:	bf04      	itt	eq
 80050e4:	6819      	ldreq	r1, [r3, #0]
 80050e6:	685b      	ldreq	r3, [r3, #4]
 80050e8:	6063      	str	r3, [r4, #4]
 80050ea:	bf04      	itt	eq
 80050ec:	1949      	addeq	r1, r1, r5
 80050ee:	6021      	streq	r1, [r4, #0]
 80050f0:	6054      	str	r4, [r2, #4]
 80050f2:	e7ca      	b.n	800508a <_free_r+0x26>
 80050f4:	b003      	add	sp, #12
 80050f6:	bd30      	pop	{r4, r5, pc}
 80050f8:	200132e0 	.word	0x200132e0

080050fc <sbrk_aligned>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	4e0e      	ldr	r6, [pc, #56]	; (8005138 <sbrk_aligned+0x3c>)
 8005100:	460c      	mov	r4, r1
 8005102:	6831      	ldr	r1, [r6, #0]
 8005104:	4605      	mov	r5, r0
 8005106:	b911      	cbnz	r1, 800510e <sbrk_aligned+0x12>
 8005108:	f000 f88c 	bl	8005224 <_sbrk_r>
 800510c:	6030      	str	r0, [r6, #0]
 800510e:	4621      	mov	r1, r4
 8005110:	4628      	mov	r0, r5
 8005112:	f000 f887 	bl	8005224 <_sbrk_r>
 8005116:	1c43      	adds	r3, r0, #1
 8005118:	d00a      	beq.n	8005130 <sbrk_aligned+0x34>
 800511a:	1cc4      	adds	r4, r0, #3
 800511c:	f024 0403 	bic.w	r4, r4, #3
 8005120:	42a0      	cmp	r0, r4
 8005122:	d007      	beq.n	8005134 <sbrk_aligned+0x38>
 8005124:	1a21      	subs	r1, r4, r0
 8005126:	4628      	mov	r0, r5
 8005128:	f000 f87c 	bl	8005224 <_sbrk_r>
 800512c:	3001      	adds	r0, #1
 800512e:	d101      	bne.n	8005134 <sbrk_aligned+0x38>
 8005130:	f04f 34ff 	mov.w	r4, #4294967295
 8005134:	4620      	mov	r0, r4
 8005136:	bd70      	pop	{r4, r5, r6, pc}
 8005138:	200132e4 	.word	0x200132e4

0800513c <_malloc_r>:
 800513c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005140:	1ccd      	adds	r5, r1, #3
 8005142:	f025 0503 	bic.w	r5, r5, #3
 8005146:	3508      	adds	r5, #8
 8005148:	2d0c      	cmp	r5, #12
 800514a:	bf38      	it	cc
 800514c:	250c      	movcc	r5, #12
 800514e:	2d00      	cmp	r5, #0
 8005150:	4607      	mov	r7, r0
 8005152:	db01      	blt.n	8005158 <_malloc_r+0x1c>
 8005154:	42a9      	cmp	r1, r5
 8005156:	d905      	bls.n	8005164 <_malloc_r+0x28>
 8005158:	230c      	movs	r3, #12
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	2600      	movs	r6, #0
 800515e:	4630      	mov	r0, r6
 8005160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005164:	4e2e      	ldr	r6, [pc, #184]	; (8005220 <_malloc_r+0xe4>)
 8005166:	f000 f907 	bl	8005378 <__malloc_lock>
 800516a:	6833      	ldr	r3, [r6, #0]
 800516c:	461c      	mov	r4, r3
 800516e:	bb34      	cbnz	r4, 80051be <_malloc_r+0x82>
 8005170:	4629      	mov	r1, r5
 8005172:	4638      	mov	r0, r7
 8005174:	f7ff ffc2 	bl	80050fc <sbrk_aligned>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	4604      	mov	r4, r0
 800517c:	d14d      	bne.n	800521a <_malloc_r+0xde>
 800517e:	6834      	ldr	r4, [r6, #0]
 8005180:	4626      	mov	r6, r4
 8005182:	2e00      	cmp	r6, #0
 8005184:	d140      	bne.n	8005208 <_malloc_r+0xcc>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	4631      	mov	r1, r6
 800518a:	4638      	mov	r0, r7
 800518c:	eb04 0803 	add.w	r8, r4, r3
 8005190:	f000 f848 	bl	8005224 <_sbrk_r>
 8005194:	4580      	cmp	r8, r0
 8005196:	d13a      	bne.n	800520e <_malloc_r+0xd2>
 8005198:	6821      	ldr	r1, [r4, #0]
 800519a:	3503      	adds	r5, #3
 800519c:	1a6d      	subs	r5, r5, r1
 800519e:	f025 0503 	bic.w	r5, r5, #3
 80051a2:	3508      	adds	r5, #8
 80051a4:	2d0c      	cmp	r5, #12
 80051a6:	bf38      	it	cc
 80051a8:	250c      	movcc	r5, #12
 80051aa:	4629      	mov	r1, r5
 80051ac:	4638      	mov	r0, r7
 80051ae:	f7ff ffa5 	bl	80050fc <sbrk_aligned>
 80051b2:	3001      	adds	r0, #1
 80051b4:	d02b      	beq.n	800520e <_malloc_r+0xd2>
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	442b      	add	r3, r5
 80051ba:	6023      	str	r3, [r4, #0]
 80051bc:	e00e      	b.n	80051dc <_malloc_r+0xa0>
 80051be:	6822      	ldr	r2, [r4, #0]
 80051c0:	1b52      	subs	r2, r2, r5
 80051c2:	d41e      	bmi.n	8005202 <_malloc_r+0xc6>
 80051c4:	2a0b      	cmp	r2, #11
 80051c6:	d916      	bls.n	80051f6 <_malloc_r+0xba>
 80051c8:	1961      	adds	r1, r4, r5
 80051ca:	42a3      	cmp	r3, r4
 80051cc:	6025      	str	r5, [r4, #0]
 80051ce:	bf18      	it	ne
 80051d0:	6059      	strne	r1, [r3, #4]
 80051d2:	6863      	ldr	r3, [r4, #4]
 80051d4:	bf08      	it	eq
 80051d6:	6031      	streq	r1, [r6, #0]
 80051d8:	5162      	str	r2, [r4, r5]
 80051da:	604b      	str	r3, [r1, #4]
 80051dc:	4638      	mov	r0, r7
 80051de:	f104 060b 	add.w	r6, r4, #11
 80051e2:	f000 f8cf 	bl	8005384 <__malloc_unlock>
 80051e6:	f026 0607 	bic.w	r6, r6, #7
 80051ea:	1d23      	adds	r3, r4, #4
 80051ec:	1af2      	subs	r2, r6, r3
 80051ee:	d0b6      	beq.n	800515e <_malloc_r+0x22>
 80051f0:	1b9b      	subs	r3, r3, r6
 80051f2:	50a3      	str	r3, [r4, r2]
 80051f4:	e7b3      	b.n	800515e <_malloc_r+0x22>
 80051f6:	6862      	ldr	r2, [r4, #4]
 80051f8:	42a3      	cmp	r3, r4
 80051fa:	bf0c      	ite	eq
 80051fc:	6032      	streq	r2, [r6, #0]
 80051fe:	605a      	strne	r2, [r3, #4]
 8005200:	e7ec      	b.n	80051dc <_malloc_r+0xa0>
 8005202:	4623      	mov	r3, r4
 8005204:	6864      	ldr	r4, [r4, #4]
 8005206:	e7b2      	b.n	800516e <_malloc_r+0x32>
 8005208:	4634      	mov	r4, r6
 800520a:	6876      	ldr	r6, [r6, #4]
 800520c:	e7b9      	b.n	8005182 <_malloc_r+0x46>
 800520e:	230c      	movs	r3, #12
 8005210:	603b      	str	r3, [r7, #0]
 8005212:	4638      	mov	r0, r7
 8005214:	f000 f8b6 	bl	8005384 <__malloc_unlock>
 8005218:	e7a1      	b.n	800515e <_malloc_r+0x22>
 800521a:	6025      	str	r5, [r4, #0]
 800521c:	e7de      	b.n	80051dc <_malloc_r+0xa0>
 800521e:	bf00      	nop
 8005220:	200132e0 	.word	0x200132e0

08005224 <_sbrk_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4d06      	ldr	r5, [pc, #24]	; (8005240 <_sbrk_r+0x1c>)
 8005228:	2300      	movs	r3, #0
 800522a:	4604      	mov	r4, r0
 800522c:	4608      	mov	r0, r1
 800522e:	602b      	str	r3, [r5, #0]
 8005230:	f7fb fd0e 	bl	8000c50 <_sbrk>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	d102      	bne.n	800523e <_sbrk_r+0x1a>
 8005238:	682b      	ldr	r3, [r5, #0]
 800523a:	b103      	cbz	r3, 800523e <_sbrk_r+0x1a>
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	200132e8 	.word	0x200132e8

08005244 <__sread>:
 8005244:	b510      	push	{r4, lr}
 8005246:	460c      	mov	r4, r1
 8005248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800524c:	f000 f8a0 	bl	8005390 <_read_r>
 8005250:	2800      	cmp	r0, #0
 8005252:	bfab      	itete	ge
 8005254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005256:	89a3      	ldrhlt	r3, [r4, #12]
 8005258:	181b      	addge	r3, r3, r0
 800525a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800525e:	bfac      	ite	ge
 8005260:	6563      	strge	r3, [r4, #84]	; 0x54
 8005262:	81a3      	strhlt	r3, [r4, #12]
 8005264:	bd10      	pop	{r4, pc}

08005266 <__swrite>:
 8005266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526a:	461f      	mov	r7, r3
 800526c:	898b      	ldrh	r3, [r1, #12]
 800526e:	05db      	lsls	r3, r3, #23
 8005270:	4605      	mov	r5, r0
 8005272:	460c      	mov	r4, r1
 8005274:	4616      	mov	r6, r2
 8005276:	d505      	bpl.n	8005284 <__swrite+0x1e>
 8005278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800527c:	2302      	movs	r3, #2
 800527e:	2200      	movs	r2, #0
 8005280:	f000 f868 	bl	8005354 <_lseek_r>
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800528a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800528e:	81a3      	strh	r3, [r4, #12]
 8005290:	4632      	mov	r2, r6
 8005292:	463b      	mov	r3, r7
 8005294:	4628      	mov	r0, r5
 8005296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800529a:	f000 b817 	b.w	80052cc <_write_r>

0800529e <__sseek>:
 800529e:	b510      	push	{r4, lr}
 80052a0:	460c      	mov	r4, r1
 80052a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a6:	f000 f855 	bl	8005354 <_lseek_r>
 80052aa:	1c43      	adds	r3, r0, #1
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	bf15      	itete	ne
 80052b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052ba:	81a3      	strheq	r3, [r4, #12]
 80052bc:	bf18      	it	ne
 80052be:	81a3      	strhne	r3, [r4, #12]
 80052c0:	bd10      	pop	{r4, pc}

080052c2 <__sclose>:
 80052c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c6:	f000 b813 	b.w	80052f0 <_close_r>
	...

080052cc <_write_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4d07      	ldr	r5, [pc, #28]	; (80052ec <_write_r+0x20>)
 80052d0:	4604      	mov	r4, r0
 80052d2:	4608      	mov	r0, r1
 80052d4:	4611      	mov	r1, r2
 80052d6:	2200      	movs	r2, #0
 80052d8:	602a      	str	r2, [r5, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	f7fb fc67 	bl	8000bae <_write>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d102      	bne.n	80052ea <_write_r+0x1e>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	b103      	cbz	r3, 80052ea <_write_r+0x1e>
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	200132e8 	.word	0x200132e8

080052f0 <_close_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4d06      	ldr	r5, [pc, #24]	; (800530c <_close_r+0x1c>)
 80052f4:	2300      	movs	r3, #0
 80052f6:	4604      	mov	r4, r0
 80052f8:	4608      	mov	r0, r1
 80052fa:	602b      	str	r3, [r5, #0]
 80052fc:	f7fb fc73 	bl	8000be6 <_close>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d102      	bne.n	800530a <_close_r+0x1a>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	b103      	cbz	r3, 800530a <_close_r+0x1a>
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	200132e8 	.word	0x200132e8

08005310 <_fstat_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4d07      	ldr	r5, [pc, #28]	; (8005330 <_fstat_r+0x20>)
 8005314:	2300      	movs	r3, #0
 8005316:	4604      	mov	r4, r0
 8005318:	4608      	mov	r0, r1
 800531a:	4611      	mov	r1, r2
 800531c:	602b      	str	r3, [r5, #0]
 800531e:	f7fb fc6e 	bl	8000bfe <_fstat>
 8005322:	1c43      	adds	r3, r0, #1
 8005324:	d102      	bne.n	800532c <_fstat_r+0x1c>
 8005326:	682b      	ldr	r3, [r5, #0]
 8005328:	b103      	cbz	r3, 800532c <_fstat_r+0x1c>
 800532a:	6023      	str	r3, [r4, #0]
 800532c:	bd38      	pop	{r3, r4, r5, pc}
 800532e:	bf00      	nop
 8005330:	200132e8 	.word	0x200132e8

08005334 <_isatty_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4d06      	ldr	r5, [pc, #24]	; (8005350 <_isatty_r+0x1c>)
 8005338:	2300      	movs	r3, #0
 800533a:	4604      	mov	r4, r0
 800533c:	4608      	mov	r0, r1
 800533e:	602b      	str	r3, [r5, #0]
 8005340:	f7fb fc6d 	bl	8000c1e <_isatty>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d102      	bne.n	800534e <_isatty_r+0x1a>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	b103      	cbz	r3, 800534e <_isatty_r+0x1a>
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	200132e8 	.word	0x200132e8

08005354 <_lseek_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	4d07      	ldr	r5, [pc, #28]	; (8005374 <_lseek_r+0x20>)
 8005358:	4604      	mov	r4, r0
 800535a:	4608      	mov	r0, r1
 800535c:	4611      	mov	r1, r2
 800535e:	2200      	movs	r2, #0
 8005360:	602a      	str	r2, [r5, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	f7fb fc66 	bl	8000c34 <_lseek>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d102      	bne.n	8005372 <_lseek_r+0x1e>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	b103      	cbz	r3, 8005372 <_lseek_r+0x1e>
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	200132e8 	.word	0x200132e8

08005378 <__malloc_lock>:
 8005378:	4801      	ldr	r0, [pc, #4]	; (8005380 <__malloc_lock+0x8>)
 800537a:	f7ff be0b 	b.w	8004f94 <__retarget_lock_acquire_recursive>
 800537e:	bf00      	nop
 8005380:	200132dc 	.word	0x200132dc

08005384 <__malloc_unlock>:
 8005384:	4801      	ldr	r0, [pc, #4]	; (800538c <__malloc_unlock+0x8>)
 8005386:	f7ff be06 	b.w	8004f96 <__retarget_lock_release_recursive>
 800538a:	bf00      	nop
 800538c:	200132dc 	.word	0x200132dc

08005390 <_read_r>:
 8005390:	b538      	push	{r3, r4, r5, lr}
 8005392:	4d07      	ldr	r5, [pc, #28]	; (80053b0 <_read_r+0x20>)
 8005394:	4604      	mov	r4, r0
 8005396:	4608      	mov	r0, r1
 8005398:	4611      	mov	r1, r2
 800539a:	2200      	movs	r2, #0
 800539c:	602a      	str	r2, [r5, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	f7fb fbe8 	bl	8000b74 <_read>
 80053a4:	1c43      	adds	r3, r0, #1
 80053a6:	d102      	bne.n	80053ae <_read_r+0x1e>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	b103      	cbz	r3, 80053ae <_read_r+0x1e>
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	bd38      	pop	{r3, r4, r5, pc}
 80053b0:	200132e8 	.word	0x200132e8

080053b4 <_init>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	bf00      	nop
 80053b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ba:	bc08      	pop	{r3}
 80053bc:	469e      	mov	lr, r3
 80053be:	4770      	bx	lr

080053c0 <_fini>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	bf00      	nop
 80053c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c6:	bc08      	pop	{r3}
 80053c8:	469e      	mov	lr, r3
 80053ca:	4770      	bx	lr
