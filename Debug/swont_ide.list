
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000569c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800582c  0800582c  0001582c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800594c  0800594c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800594c  0800594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005954  08005954  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005954  08005954  00015954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005958  08005958  00015958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800595c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013260  20000070  080059cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200132d0  080059cc  000232d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d22f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254b  00000000  00000000  0002d2cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0002f820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  00030560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233ab  00000000  00000000  00031158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f951  00000000  00000000  00054503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb479  00000000  00000000  00063e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f2cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d38  00000000  00000000  0012f320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005814 	.word	0x08005814

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005814 	.word	0x08005814

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <errorno_test>:

#include <errno.h>
#include "LL_API_G2.h"

void errorno_test (void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	printf("errno value: %d\n",errno);
 8000578:	f004 f98c 	bl	8004894 <__errno>
 800057c:	4603      	mov	r3, r0
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	4802      	ldr	r0, [pc, #8]	; (800058c <errorno_test+0x18>)
 8000584:	f004 f9b8 	bl	80048f8 <iprintf>

}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	0800582c 	.word	0x0800582c

08000590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_DMA_Init+0x3c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <MX_DMA_Init+0x3c>)
 80005a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_DMA_Init+0x3c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	2044      	movs	r0, #68	; 0x44
 80005b8:	f000 ff2b 	bl	8001412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80005bc:	2044      	movs	r0, #68	; 0x44
 80005be:	f000 ff44 	bl	800144a <HAL_NVIC_EnableIRQ>

}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800

080005d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	4b32      	ldr	r3, [pc, #200]	; (80006b4 <MX_GPIO_Init+0xe4>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a31      	ldr	r2, [pc, #196]	; (80006b4 <MX_GPIO_Init+0xe4>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <MX_GPIO_Init+0xe4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <MX_GPIO_Init+0xe4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a2a      	ldr	r2, [pc, #168]	; (80006b4 <MX_GPIO_Init+0xe4>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <MX_GPIO_Init+0xe4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <MX_GPIO_Init+0xe4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a23      	ldr	r2, [pc, #140]	; (80006b4 <MX_GPIO_Init+0xe4>)
 8000628:	f043 0310 	orr.w	r3, r3, #16
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <MX_GPIO_Init+0xe4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0310 	and.w	r3, r3, #16
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <MX_GPIO_Init+0xe4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <MX_GPIO_Init+0xe4>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_GPIO_Init+0xe4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800065c:	4816      	ldr	r0, [pc, #88]	; (80006b8 <MX_GPIO_Init+0xe8>)
 800065e:	f001 fc3d 	bl	8001edc <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000668:	4814      	ldr	r0, [pc, #80]	; (80006bc <MX_GPIO_Init+0xec>)
 800066a:	f001 fc37 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800066e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000672:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067c:	2303      	movs	r3, #3
 800067e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	480c      	ldr	r0, [pc, #48]	; (80006b8 <MX_GPIO_Init+0xe8>)
 8000688:	f001 fa8c 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_GPIO_Init+0xec>)
 80006a6:	f001 fa7d 	bl	8001ba4 <HAL_GPIO_Init>

}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40020400 	.word	0x40020400

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 fd57 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f857 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f7ff ff7f 	bl	80005d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d2:	f7ff ff5d 	bl	8000590 <MX_DMA_Init>
  MX_TIM1_Init();
 80006d6:	f000 faa5 	bl	8000c24 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006da:	f000 faf3 	bl	8000cc4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80006de:	f000 fc09 	bl	8000ef4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80006e2:	4b24      	ldr	r3, [pc, #144]	; (8000774 <main+0xb4>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	68da      	ldr	r2, [r3, #12]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <main+0xb4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f042 0220 	orr.w	r2, r2, #32
 80006f0:	60da      	str	r2, [r3, #12]

  UB_VGA_Screen_Init(); // Init VGA-Screen
 80006f2:	f000 fca3 	bl	800103c <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_RED);
 80006f6:	20e0      	movs	r0, #224	; 0xe0
 80006f8:	f000 fcf2 	bl	80010e0 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 80006fc:	220a      	movs	r2, #10
 80006fe:	210a      	movs	r1, #10
 8000700:	200a      	movs	r0, #10
 8000702:	f000 fd11 	bl	8001128 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fd0c 	bl	8001128 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	f240 103f 	movw	r0, #319	; 0x13f
 8000718:	f000 fd06 	bl	8001128 <UB_VGA_SetPixel>

  int i;

  for(i = 0; i < LINE_BUFLEN; i++)
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	e008      	b.n	8000734 <main+0x74>
	  input.line_rx_buffer[i] = 0;
 8000722:	4a15      	ldr	r2, [pc, #84]	; (8000778 <main+0xb8>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	3301      	adds	r3, #1
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3301      	adds	r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800073a:	dbf2      	blt.n	8000722 <main+0x62>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <main+0xb8>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <main+0xb8>)
 8000744:	2200      	movs	r2, #0
 8000746:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <main+0xb8>)
 800074c:	2200      	movs	r2, #0
 800074e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000752:	2201      	movs	r2, #1
 8000754:	4908      	ldr	r1, [pc, #32]	; (8000778 <main+0xb8>)
 8000756:	4807      	ldr	r0, [pc, #28]	; (8000774 <main+0xb4>)
 8000758:	f003 f8ee 	bl	8003938 <HAL_UART_Receive_IT>


  while (1)
  {

	  if(input.command_execute_flag == TRUE)
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <main+0xb8>)
 800075e:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000762:	2bff      	cmp	r3, #255	; 0xff
 8000764:	d1fa      	bne.n	800075c <main+0x9c>
	  {
		  errorno_test ();
 8000766:	f7ff ff05 	bl	8000574 <errorno_test>
//		  printf("yes\n");
//		  colorTest = ~colorTest; // Toggle screen color
//		  UB_VGA_FillScreen(colorTest);
//
//		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 800076a:	4b03      	ldr	r3, [pc, #12]	; (8000778 <main+0xb8>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 8000772:	e7f3      	b.n	800075c <main+0x9c>
 8000774:	20000580 	.word	0x20000580
 8000778:	2000008c 	.word	0x2000008c

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	; 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	; 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f004 f8ac 	bl	80048e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	4a27      	ldr	r2, [pc, #156]	; (8000848 <SystemClock_Config+0xcc>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <SystemClock_Config+0xcc>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a21      	ldr	r2, [pc, #132]	; (800084c <SystemClock_Config+0xd0>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <SystemClock_Config+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d8:	2301      	movs	r3, #1
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ec:	2304      	movs	r3, #4
 80007ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007f0:	23a8      	movs	r3, #168	; 0xa8
 80007f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	4618      	mov	r0, r3
 8000802:	f001 fb85 	bl	8001f10 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800080c:	f000 f832 	bl	8000874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000814:	2302      	movs	r3, #2
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800081c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000826:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2105      	movs	r1, #5
 800082e:	4618      	mov	r0, r3
 8000830:	f001 fddc 	bl	80023ec <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800083a:	f000 f81b 	bl	8000874 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	; 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000858:	1d39      	adds	r1, r7, #4
 800085a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085e:	2201      	movs	r2, #1
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <__io_putchar+0x20>)
 8000862:	f002 ffd0 	bl	8003806 <HAL_UART_Transmit>
	return ch;												//Return the character
 8000866:	687b      	ldr	r3, [r7, #4]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000580 	.word	0x20000580

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <HAL_MspInit+0x4c>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000898:	6453      	str	r3, [r2, #68]	; 0x44
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <MemManage_Handler+0x4>

080008ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000928:	f000 fc78 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000934:	4828      	ldr	r0, [pc, #160]	; (80009d8 <TIM2_IRQHandler+0xa8>)
 8000936:	f002 f8b5 	bl	8002aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 800093a:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <TIM2_IRQHandler+0xa8>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f06f 0208 	mvn.w	r2, #8
 8000942:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000944:	4b25      	ldr	r3, [pc, #148]	; (80009dc <TIM2_IRQHandler+0xac>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	b29a      	uxth	r2, r3
 800094c:	4b23      	ldr	r3, [pc, #140]	; (80009dc <TIM2_IRQHandler+0xac>)
 800094e:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <TIM2_IRQHandler+0xac>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000958:	d905      	bls.n	8000966 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <TIM2_IRQHandler+0xac>)
 800095c:	2200      	movs	r2, #0
 800095e:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000960:	4a1f      	ldr	r2, [pc, #124]	; (80009e0 <TIM2_IRQHandler+0xb0>)
 8000962:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <TIM2_IRQHandler+0xac>)
 8000964:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <TIM2_IRQHandler+0xac>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d802      	bhi.n	8000974 <TIM2_IRQHandler+0x44>
 800096e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000972:	e001      	b.n	8000978 <TIM2_IRQHandler+0x48>
 8000974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000978:	4a1a      	ldr	r2, [pc, #104]	; (80009e4 <TIM2_IRQHandler+0xb4>)
 800097a:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <TIM2_IRQHandler+0xac>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	2b23      	cmp	r3, #35	; 0x23
 8000982:	d927      	bls.n	80009d4 <TIM2_IRQHandler+0xa4>
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <TIM2_IRQHandler+0xac>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	f240 2202 	movw	r2, #514	; 0x202
 800098c:	4293      	cmp	r3, r2
 800098e:	d821      	bhi.n	80009d4 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000990:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <TIM2_IRQHandler+0xb8>)
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <TIM2_IRQHandler+0xac>)
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000998:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <TIM2_IRQHandler+0xb8>)
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <TIM2_IRQHandler+0xac>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <TIM2_IRQHandler+0xbc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a11      	ldr	r2, [pc, #68]	; (80009ec <TIM2_IRQHandler+0xbc>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <TIM2_IRQHandler+0xc0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <TIM2_IRQHandler+0xc0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f042 0201 	orr.w	r2, r2, #1
 80009ba:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <TIM2_IRQHandler+0xac>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d005      	beq.n	80009d4 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <TIM2_IRQHandler+0xac>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f203 1341 	addw	r3, r3, #321	; 0x141
 80009d0:	4a02      	ldr	r2, [pc, #8]	; (80009dc <TIM2_IRQHandler+0xac>)
 80009d2:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200004e0 	.word	0x200004e0
 80009dc:	200132b0 	.word	0x200132b0
 80009e0:	200005c0 	.word	0x200005c0
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40026488 	.word	0x40026488
 80009ec:	40010000 	.word	0x40010000
 80009f0:	20000520 	.word	0x20000520

080009f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <USART2_IRQHandler+0x70>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	71fb      	strb	r3, [r7, #7]


	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b0a      	cmp	r3, #10
 8000a04:	d026      	beq.n	8000a54 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b0d      	cmp	r3, #13
 8000a0a:	d002      	beq.n	8000a12 <USART2_IRQHandler+0x1e>
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8000a10:	d10e      	bne.n	8000a30 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <USART2_IRQHandler+0x74>)
 8000a14:	22ff      	movs	r2, #255	; 0xff
 8000a16:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <USART2_IRQHandler+0x74>)
 8000a1c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a20:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <USART2_IRQHandler+0x74>)
 8000a22:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <USART2_IRQHandler+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000a2e:	e011      	b.n	8000a54 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000a30:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <USART2_IRQHandler+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <USART2_IRQHandler+0x74>)
 8000a3a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <USART2_IRQHandler+0x74>)
 8000a40:	4413      	add	r3, r2
 8000a42:	79fa      	ldrb	r2, [r7, #7]
 8000a44:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <USART2_IRQHandler+0x74>)
 8000a48:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <USART2_IRQHandler+0x74>)
 8000a50:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <USART2_IRQHandler+0x78>)
 8000a56:	f002 ffc5 	bl	80039e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
//  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);

  /* USER CODE END USART2_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40004400 	.word	0x40004400
 8000a68:	2000008c 	.word	0x2000008c
 8000a6c:	20000580 	.word	0x20000580

08000a70 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <DMA2_Stream5_IRQHandler+0x48>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6a1a      	ldr	r2, [r3, #32]
 8000a7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8000a7e:	4013      	ands	r3, r2
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d10f      	bne.n	8000aa4 <DMA2_Stream5_IRQHandler+0x34>
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <DMA2_Stream5_IRQHandler+0x48>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6a1a      	ldr	r2, [r3, #32]
 8000a8a:	f240 4344 	movw	r3, #1092	; 0x444
 8000a8e:	4013      	ands	r3, r2
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d107      	bne.n	8000aa4 <DMA2_Stream5_IRQHandler+0x34>
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <DMA2_Stream5_IRQHandler+0x48>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <DMA2_Stream5_IRQHandler+0x48>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f022 0201 	bic.w	r2, r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <DMA2_Stream5_IRQHandler+0x4c>)
 8000aa6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000aaa:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <DMA2_Stream5_IRQHandler+0x50>)
 8000aae:	f000 fe0f 	bl	80016d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200004a0 	.word	0x200004a0
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	20000520 	.word	0x20000520

08000ac4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e00a      	b.n	8000aec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ad6:	f3af 8000 	nop.w
 8000ada:	4601      	mov	r1, r0
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	60ba      	str	r2, [r7, #8]
 8000ae2:	b2ca      	uxtb	r2, r1
 8000ae4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	dbf0      	blt.n	8000ad6 <_read+0x12>
	}

return len;
 8000af4:	687b      	ldr	r3, [r7, #4]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	e009      	b.n	8000b24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fe99 	bl	8000850 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf1      	blt.n	8000b10 <_write+0x12>
	}
	return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_close>:

int _close(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_isatty>:

int _isatty(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_sbrk+0x50>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <_sbrk+0x16>
		heap_end = &end;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <_sbrk+0x50>)
 8000bb2:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <_sbrk+0x54>)
 8000bb4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <_sbrk+0x50>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <_sbrk+0x50>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	466a      	mov	r2, sp
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d907      	bls.n	8000bda <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000bca:	f003 fe63 	bl	8004894 <__errno>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	220c      	movs	r2, #12
 8000bd2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd8:	e006      	b.n	8000be8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <_sbrk+0x50>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a03      	ldr	r2, [pc, #12]	; (8000bf0 <_sbrk+0x50>)
 8000be4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000049c 	.word	0x2000049c
 8000bf4:	200132d0 	.word	0x200132d0

08000bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <SystemInit+0x28>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <SystemInit+0x28>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SystemInit+0x28>)
 8000c0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c12:	609a      	str	r2, [r3, #8]
#endif
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000c40:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <MX_TIM1_Init+0x98>)
 8000c42:	4a1f      	ldr	r2, [pc, #124]	; (8000cc0 <MX_TIM1_Init+0x9c>)
 8000c44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000c46:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <MX_TIM1_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <MX_TIM1_Init+0x98>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_TIM1_Init+0x98>)
 8000c54:	220b      	movs	r2, #11
 8000c56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_TIM1_Init+0x98>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_TIM1_Init+0x98>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c64:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_TIM1_Init+0x98>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c6a:	4814      	ldr	r0, [pc, #80]	; (8000cbc <MX_TIM1_Init+0x98>)
 8000c6c:	f001 fdde 	bl	800282c <HAL_TIM_Base_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000c76:	f7ff fdfd 	bl	8000874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	4619      	mov	r1, r3
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <MX_TIM1_Init+0x98>)
 8000c88:	f002 f8da 	bl	8002e40 <HAL_TIM_ConfigClockSource>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000c92:	f7ff fdef 	bl	8000874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <MX_TIM1_Init+0x98>)
 8000ca4:	f002 fcd2 	bl	800364c <HAL_TIMEx_MasterConfigSynchronization>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000cae:	f7ff fde1 	bl	8000874 <Error_Handler>
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200004a0 	.word	0x200004a0
 8000cc0:	40010000 	.word	0x40010000

08000cc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cca:	f107 0320 	add.w	r3, r7, #32
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]
 8000ce2:	615a      	str	r2, [r3, #20]
 8000ce4:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <MX_TIM2_Init+0xcc>)
 8000ce8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000cee:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <MX_TIM2_Init+0xcc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <MX_TIM2_Init+0xcc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000cfa:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <MX_TIM2_Init+0xcc>)
 8000cfc:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000d00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <MX_TIM2_Init+0xcc>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <MX_TIM2_Init+0xcc>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d0e:	4820      	ldr	r0, [pc, #128]	; (8000d90 <MX_TIM2_Init+0xcc>)
 8000d10:	f001 fddb 	bl	80028ca <HAL_TIM_PWM_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d1a:	f7ff fdab 	bl	8000874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4818      	ldr	r0, [pc, #96]	; (8000d90 <MX_TIM2_Init+0xcc>)
 8000d2e:	f002 fc8d 	bl	800364c <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d38:	f7ff fd9c 	bl	8000874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3c:	2360      	movs	r3, #96	; 0x60
 8000d3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000d40:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000d44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000d46:	2302      	movs	r3, #2
 8000d48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2208      	movs	r2, #8
 8000d52:	4619      	mov	r1, r3
 8000d54:	480e      	ldr	r0, [pc, #56]	; (8000d90 <MX_TIM2_Init+0xcc>)
 8000d56:	f001 ffad 	bl	8002cb4 <HAL_TIM_PWM_ConfigChannel>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000d60:	f7ff fd88 	bl	8000874 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000d64:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	220c      	movs	r2, #12
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4807      	ldr	r0, [pc, #28]	; (8000d90 <MX_TIM2_Init+0xcc>)
 8000d72:	f001 ff9f 	bl	8002cb4 <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000d7c:	f7ff fd7a 	bl	8000874 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <MX_TIM2_Init+0xcc>)
 8000d82:	f000 f87f 	bl	8000e84 <HAL_TIM_MspPostInit>

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200004e0 	.word	0x200004e0

08000d94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a21      	ldr	r2, [pc, #132]	; (8000e28 <HAL_TIM_Base_MspInit+0x94>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d13c      	bne.n	8000e20 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <HAL_TIM_Base_MspInit+0x98>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <HAL_TIM_Base_MspInit+0x98>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_TIM_Base_MspInit+0x98>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_TIM_Base_MspInit+0x9c>)
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <HAL_TIM_Base_MspInit+0xa0>)
 8000dc6:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_TIM_Base_MspInit+0x9c>)
 8000dca:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000dce:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_TIM_Base_MspInit+0x9c>)
 8000dd2:	2240      	movs	r2, #64	; 0x40
 8000dd4:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_TIM_Base_MspInit+0x9c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_TIM_Base_MspInit+0x9c>)
 8000dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de2:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_TIM_Base_MspInit+0x9c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_TIM_Base_MspInit+0x9c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_TIM_Base_MspInit+0x9c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_TIM_Base_MspInit+0x9c>)
 8000df8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dfc:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HAL_TIM_Base_MspInit+0x9c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000e04:	480a      	ldr	r0, [pc, #40]	; (8000e30 <HAL_TIM_Base_MspInit+0x9c>)
 8000e06:	f000 fb3b 	bl	8001480 <HAL_DMA_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000e10:	f7ff fd30 	bl	8000874 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_TIM_Base_MspInit+0x9c>)
 8000e18:	621a      	str	r2, [r3, #32]
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <HAL_TIM_Base_MspInit+0x9c>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	20000520 	.word	0x20000520
 8000e34:	40026488 	.word	0x40026488

08000e38 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e48:	d115      	bne.n	8000e76 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_TIM_PWM_MspInit+0x48>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <HAL_TIM_PWM_MspInit+0x48>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_TIM_PWM_MspInit+0x48>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	201c      	movs	r0, #28
 8000e6c:	f000 fad1 	bl	8001412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e70:	201c      	movs	r0, #28
 8000e72:	f000 faea 	bl	800144a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800

08000e84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea4:	d11e      	bne.n	8000ee4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_TIM_MspPostInit+0x68>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <HAL_TIM_MspPostInit+0x68>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_TIM_MspPostInit+0x68>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8000ec2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ec6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	4619      	mov	r1, r3
 8000ede:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <HAL_TIM_MspPostInit+0x6c>)
 8000ee0:	f000 fe60 	bl	8001ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020400 	.word	0x40020400

08000ef4 <MX_USART2_UART_Init>:
/* USART2 init function */



void MX_USART2_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <MX_USART2_UART_Init+0x50>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f2c:	f002 fc1e 	bl	800376c <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f36:	f7ff fc9d 	bl	8000874 <Error_Handler>
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000580 	.word	0x20000580
 8000f44:	40004400 	.word	0x40004400

08000f48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <HAL_UART_MspInit+0x94>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d133      	bne.n	8000fd2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_UART_MspInit+0x98>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <HAL_UART_MspInit+0x9c>)
 8000fbe:	f000 fdf1 	bl	8001ba4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2026      	movs	r0, #38	; 0x26
 8000fc8:	f000 fa23 	bl	8001412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fcc:	2026      	movs	r0, #38	; 0x26
 8000fce:	f000 fa3c 	bl	800144a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40004400 	.word	0x40004400
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fee:	e003      	b.n	8000ff8 <LoopCopyDataInit>

08000ff0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ff2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ff4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ff6:	3104      	adds	r1, #4

08000ff8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ffc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ffe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001000:	d3f6      	bcc.n	8000ff0 <CopyDataInit>
  ldr  r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001004:	e002      	b.n	800100c <LoopFillZerobss>

08001006 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001006:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001008:	f842 3b04 	str.w	r3, [r2], #4

0800100c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800100e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001010:	d3f9      	bcc.n	8001006 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001012:	f7ff fdf1 	bl	8000bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001016:	f003 fc43 	bl	80048a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fb51 	bl	80006c0 <main>
  bx  lr    
 800101e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001020:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001024:	0800595c 	.word	0x0800595c
  ldr  r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800102c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001030:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001034:	200132d0 	.word	0x200132d0

08001038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC_IRQHandler>
	...

0800103c <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <UB_VGA_Screen_Init+0x84>)
 8001042:	2200      	movs	r2, #0
 8001044:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <UB_VGA_Screen_Init+0x84>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <UB_VGA_Screen_Init+0x84>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <UB_VGA_Screen_Init+0x88>)
 8001054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001058:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 800105a:	481b      	ldr	r0, [pc, #108]	; (80010c8 <UB_VGA_Screen_Init+0x8c>)
 800105c:	f001 fc11 	bl	8002882 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001060:	210c      	movs	r1, #12
 8001062:	4819      	ldr	r0, [pc, #100]	; (80010c8 <UB_VGA_Screen_Init+0x8c>)
 8001064:	f001 fc5c 	bl	8002920 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001068:	2108      	movs	r1, #8
 800106a:	4817      	ldr	r0, [pc, #92]	; (80010c8 <UB_VGA_Screen_Init+0x8c>)
 800106c:	f001 fc96 	bl	800299c <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <UB_VGA_Screen_Init+0x90>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <UB_VGA_Screen_Init+0x90>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800107e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <UB_VGA_Screen_Init+0x90>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <UB_VGA_Screen_Init+0x90>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0201 	orr.w	r2, r2, #1
 800108e:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001090:	490f      	ldr	r1, [pc, #60]	; (80010d0 <UB_VGA_Screen_Init+0x94>)
 8001092:	f240 1341 	movw	r3, #321	; 0x141
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <UB_VGA_Screen_Init+0x98>)
 8001098:	480f      	ldr	r0, [pc, #60]	; (80010d8 <UB_VGA_Screen_Init+0x9c>)
 800109a:	f000 fa9f 	bl	80015dc <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 800109e:	480e      	ldr	r0, [pc, #56]	; (80010d8 <UB_VGA_Screen_Init+0x9c>)
 80010a0:	f000 f9ee 	bl	8001480 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <UB_VGA_Screen_Init+0x9c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <UB_VGA_Screen_Init+0x9c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0210 	orr.w	r2, r2, #16
 80010b2:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <UB_VGA_Screen_Init+0xa0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a01      	ldr	r2, [pc, #4]	; (80010c0 <UB_VGA_Screen_Init+0x84>)
 80010ba:	6093      	str	r3, [r2, #8]
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200132b0 	.word	0x200132b0
 80010c4:	40020400 	.word	0x40020400
 80010c8:	200004e0 	.word	0x200004e0
 80010cc:	200004a0 	.word	0x200004a0
 80010d0:	200005c0 	.word	0x200005c0
 80010d4:	40021015 	.word	0x40021015
 80010d8:	20000520 	.word	0x20000520
 80010dc:	40026488 	.word	0x40026488

080010e0 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80010ea:	2300      	movs	r3, #0
 80010ec:	81bb      	strh	r3, [r7, #12]
 80010ee:	e012      	b.n	8001116 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80010f0:	2300      	movs	r3, #0
 80010f2:	81fb      	strh	r3, [r7, #14]
 80010f4:	e008      	b.n	8001108 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 80010f6:	79fa      	ldrb	r2, [r7, #7]
 80010f8:	89b9      	ldrh	r1, [r7, #12]
 80010fa:	89fb      	ldrh	r3, [r7, #14]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f813 	bl	8001128 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	3301      	adds	r3, #1
 8001106:	81fb      	strh	r3, [r7, #14]
 8001108:	89fb      	ldrh	r3, [r7, #14]
 800110a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800110e:	d3f2      	bcc.n	80010f6 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001110:	89bb      	ldrh	r3, [r7, #12]
 8001112:	3301      	adds	r3, #1
 8001114:	81bb      	strh	r3, [r7, #12]
 8001116:	89bb      	ldrh	r3, [r7, #12]
 8001118:	2bef      	cmp	r3, #239	; 0xef
 800111a:	d9e9      	bls.n	80010f0 <UB_VGA_FillScreen+0x10>
    }
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
 8001132:	460b      	mov	r3, r1
 8001134:	80bb      	strh	r3, [r7, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001140:	d301      	bcc.n	8001146 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	2bef      	cmp	r3, #239	; 0xef
 800114a:	d901      	bls.n	8001150 <UB_VGA_SetPixel+0x28>
    yp = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001150:	88ba      	ldrh	r2, [r7, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	019b      	lsls	r3, r3, #6
 800115a:	441a      	add	r2, r3
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	4413      	add	r3, r2
 8001160:	4904      	ldr	r1, [pc, #16]	; (8001174 <UB_VGA_SetPixel+0x4c>)
 8001162:	78fa      	ldrb	r2, [r7, #3]
 8001164:	54ca      	strb	r2, [r1, r3]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200005c0 	.word	0x200005c0

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <HAL_Init+0x40>)
 8001182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_Init+0x40>)
 800118e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_Init+0x40>)
 800119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f92b 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 f808 	bl	80011bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ac:	f7ff fb6a 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023c00 	.word	0x40023c00

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x54>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x58>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f943 	bl	8001466 <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00e      	b.n	8001208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d80a      	bhi.n	8001206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f000 f90b 	bl	8001412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_InitTick+0x5c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e000      	b.n	8001208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000000 	.word	0x20000000
 8001214:	20000008 	.word	0x20000008
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x20>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x24>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_IncTick+0x24>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000008 	.word	0x20000008
 8001240:	200132bc 	.word	0x200132bc

08001244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_GetTick+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	200132bc 	.word	0x200132bc

0800125c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db0b      	blt.n	80012ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	4907      	ldr	r1, [pc, #28]	; (80012f8 <__NVIC_EnableIRQ+0x38>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2001      	movs	r0, #1
 80012e2:	fa00 f202 	lsl.w	r2, r0, r2
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff8e 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff29 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001424:	f7ff ff3e 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 8001428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f7ff ff8e 	bl	8001350 <NVIC_EncodePriority>
 8001434:	4602      	mov	r2, r0
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff5d 	bl	80012fc <__NVIC_SetPriority>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff31 	bl	80012c0 <__NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffa2 	bl	80013b8 <SysTick_Config>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff feda 	bl	8001244 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e099      	b.n	80015d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2202      	movs	r2, #2
 80014a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014bc:	e00f      	b.n	80014de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014be:	f7ff fec1 	bl	8001244 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	d908      	bls.n	80014de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2220      	movs	r2, #32
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2203      	movs	r2, #3
 80014d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e078      	b.n	80015d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1e8      	bne.n	80014be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <HAL_DMA_Init+0x158>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001516:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001522:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4313      	orrs	r3, r2
 800152e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	2b04      	cmp	r3, #4
 8001536:	d107      	bne.n	8001548 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	4313      	orrs	r3, r2
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	4313      	orrs	r3, r2
 8001546:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f023 0307 	bic.w	r3, r3, #7
 800155e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	4313      	orrs	r3, r2
 8001568:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	2b04      	cmp	r3, #4
 8001570:	d117      	bne.n	80015a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4313      	orrs	r3, r2
 800157a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00e      	beq.n	80015a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fa91 	bl	8001aac <DMA_CheckFifoParam>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d008      	beq.n	80015a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2240      	movs	r2, #64	; 0x40
 8001594:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800159e:	2301      	movs	r3, #1
 80015a0:	e016      	b.n	80015d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fa48 	bl	8001a40 <DMA_CalcBaseAndBitshift>
 80015b0:	4603      	mov	r3, r0
 80015b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b8:	223f      	movs	r2, #63	; 0x3f
 80015ba:	409a      	lsls	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	f010803f 	.word	0xf010803f

080015dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_DMA_Start_IT+0x26>
 80015fe:	2302      	movs	r3, #2
 8001600:	e040      	b.n	8001684 <HAL_DMA_Start_IT+0xa8>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b01      	cmp	r3, #1
 8001614:	d12f      	bne.n	8001676 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2202      	movs	r2, #2
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 f9da 	bl	80019e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001634:	223f      	movs	r2, #63	; 0x3f
 8001636:	409a      	lsls	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0216 	orr.w	r2, r2, #22
 800164a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	2b00      	cmp	r3, #0
 8001652:	d007      	beq.n	8001664 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0208 	orr.w	r2, r2, #8
 8001662:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e005      	b.n	8001682 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800167e:	2302      	movs	r3, #2
 8001680:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001682:	7dfb      	ldrb	r3, [r7, #23]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d004      	beq.n	80016aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00c      	b.n	80016c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2205      	movs	r2, #5
 80016ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0201 	bic.w	r2, r2, #1
 80016c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016dc:	4b8e      	ldr	r3, [pc, #568]	; (8001918 <HAL_DMA_IRQHandler+0x248>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a8e      	ldr	r2, [pc, #568]	; (800191c <HAL_DMA_IRQHandler+0x24c>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0a9b      	lsrs	r3, r3, #10
 80016e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	2208      	movs	r2, #8
 80016fc:	409a      	lsls	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4013      	ands	r3, r2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01a      	beq.n	800173c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d013      	beq.n	800173c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0204 	bic.w	r2, r2, #4
 8001722:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001728:	2208      	movs	r2, #8
 800172a:	409a      	lsls	r2, r3
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001734:	f043 0201 	orr.w	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001740:	2201      	movs	r2, #1
 8001742:	409a      	lsls	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d012      	beq.n	8001772 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00b      	beq.n	8001772 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	2201      	movs	r2, #1
 8001760:	409a      	lsls	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176a:	f043 0202 	orr.w	r2, r3, #2
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001776:	2204      	movs	r2, #4
 8001778:	409a      	lsls	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4013      	ands	r3, r2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d012      	beq.n	80017a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00b      	beq.n	80017a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001794:	2204      	movs	r2, #4
 8001796:	409a      	lsls	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a0:	f043 0204 	orr.w	r2, r3, #4
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ac:	2210      	movs	r2, #16
 80017ae:	409a      	lsls	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d043      	beq.n	8001840 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d03c      	beq.n	8001840 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ca:	2210      	movs	r2, #16
 80017cc:	409a      	lsls	r2, r3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d018      	beq.n	8001812 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d108      	bne.n	8001800 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d024      	beq.n	8001840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	4798      	blx	r3
 80017fe:	e01f      	b.n	8001840 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01b      	beq.n	8001840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4798      	blx	r3
 8001810:	e016      	b.n	8001840 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d107      	bne.n	8001830 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0208 	bic.w	r2, r2, #8
 800182e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001844:	2220      	movs	r2, #32
 8001846:	409a      	lsls	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 808f 	beq.w	8001970 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 8087 	beq.w	8001970 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001866:	2220      	movs	r2, #32
 8001868:	409a      	lsls	r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b05      	cmp	r3, #5
 8001878:	d136      	bne.n	80018e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0216 	bic.w	r2, r2, #22
 8001888:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001898:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d103      	bne.n	80018aa <HAL_DMA_IRQHandler+0x1da>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0208 	bic.w	r2, r2, #8
 80018b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018be:	223f      	movs	r2, #63	; 0x3f
 80018c0:	409a      	lsls	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d07e      	beq.n	80019dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	4798      	blx	r3
        }
        return;
 80018e6:	e079      	b.n	80019dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d01d      	beq.n	8001932 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10d      	bne.n	8001920 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	2b00      	cmp	r3, #0
 800190a:	d031      	beq.n	8001970 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4798      	blx	r3
 8001914:	e02c      	b.n	8001970 <HAL_DMA_IRQHandler+0x2a0>
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000
 800191c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001924:	2b00      	cmp	r3, #0
 8001926:	d023      	beq.n	8001970 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
 8001930:	e01e      	b.n	8001970 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10f      	bne.n	8001960 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0210 	bic.w	r2, r2, #16
 800194e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001974:	2b00      	cmp	r3, #0
 8001976:	d032      	beq.n	80019de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d022      	beq.n	80019ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2205      	movs	r2, #5
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	3301      	adds	r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d307      	bcc.n	80019b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f2      	bne.n	800199c <HAL_DMA_IRQHandler+0x2cc>
 80019b6:	e000      	b.n	80019ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019b8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d005      	beq.n	80019de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	4798      	blx	r3
 80019da:	e000      	b.n	80019de <HAL_DMA_IRQHandler+0x30e>
        return;
 80019dc:	bf00      	nop
    }
  }
}
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b40      	cmp	r3, #64	; 0x40
 8001a10:	d108      	bne.n	8001a24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a22:	e007      	b.n	8001a34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	60da      	str	r2, [r3, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	3b10      	subs	r3, #16
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <DMA_CalcBaseAndBitshift+0x64>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <DMA_CalcBaseAndBitshift+0x68>)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d909      	bls.n	8001a82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a76:	f023 0303 	bic.w	r3, r3, #3
 8001a7a:	1d1a      	adds	r2, r3, #4
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a80:	e007      	b.n	8001a92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a8a:	f023 0303 	bic.w	r3, r3, #3
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	aaaaaaab 	.word	0xaaaaaaab
 8001aa8:	080058ac 	.word	0x080058ac

08001aac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d11f      	bne.n	8001b06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d856      	bhi.n	8001b7a <DMA_CheckFifoParam+0xce>
 8001acc:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <DMA_CheckFifoParam+0x28>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001ae5 	.word	0x08001ae5
 8001ad8:	08001af7 	.word	0x08001af7
 8001adc:	08001ae5 	.word	0x08001ae5
 8001ae0:	08001b7b 	.word	0x08001b7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d046      	beq.n	8001b7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001af4:	e043      	b.n	8001b7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001afe:	d140      	bne.n	8001b82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b04:	e03d      	b.n	8001b82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b0e:	d121      	bne.n	8001b54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d837      	bhi.n	8001b86 <DMA_CheckFifoParam+0xda>
 8001b16:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <DMA_CheckFifoParam+0x70>)
 8001b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1c:	08001b2d 	.word	0x08001b2d
 8001b20:	08001b33 	.word	0x08001b33
 8001b24:	08001b2d 	.word	0x08001b2d
 8001b28:	08001b45 	.word	0x08001b45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b30:	e030      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d025      	beq.n	8001b8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b42:	e022      	b.n	8001b8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b4c:	d11f      	bne.n	8001b8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b52:	e01c      	b.n	8001b8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d903      	bls.n	8001b62 <DMA_CheckFifoParam+0xb6>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d003      	beq.n	8001b68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b60:	e018      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
      break;
 8001b66:	e015      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00e      	beq.n	8001b92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
      break;
 8001b78:	e00b      	b.n	8001b92 <DMA_CheckFifoParam+0xe6>
      break;
 8001b7a:	bf00      	nop
 8001b7c:	e00a      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b7e:	bf00      	nop
 8001b80:	e008      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b82:	bf00      	nop
 8001b84:	e006      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b86:	bf00      	nop
 8001b88:	e004      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b8a:	bf00      	nop
 8001b8c:	e002      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b8e:	bf00      	nop
 8001b90:	e000      	b.n	8001b94 <DMA_CheckFifoParam+0xe8>
      break;
 8001b92:	bf00      	nop
    }
  } 
  
  return status; 
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop

08001ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	; 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	e16b      	b.n	8001e98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	f040 815a 	bne.w	8001e92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d00b      	beq.n	8001bfe <HAL_GPIO_Init+0x5a>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d007      	beq.n	8001bfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bf2:	2b11      	cmp	r3, #17
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b12      	cmp	r3, #18
 8001bfc:	d130      	bne.n	8001c60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c34:	2201      	movs	r2, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 0201 	and.w	r2, r3, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0xfc>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b12      	cmp	r3, #18
 8001c9e:	d123      	bne.n	8001ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	08da      	lsrs	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3208      	adds	r2, #8
 8001ce2:	69b9      	ldr	r1, [r7, #24]
 8001ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0203 	and.w	r2, r3, #3
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80b4 	beq.w	8001e92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b60      	ldr	r3, [pc, #384]	; (8001eb0 <HAL_GPIO_Init+0x30c>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	4a5f      	ldr	r2, [pc, #380]	; (8001eb0 <HAL_GPIO_Init+0x30c>)
 8001d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d38:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <HAL_GPIO_Init+0x30c>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d46:	4a5b      	ldr	r2, [pc, #364]	; (8001eb4 <HAL_GPIO_Init+0x310>)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a52      	ldr	r2, [pc, #328]	; (8001eb8 <HAL_GPIO_Init+0x314>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d02b      	beq.n	8001dca <HAL_GPIO_Init+0x226>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a51      	ldr	r2, [pc, #324]	; (8001ebc <HAL_GPIO_Init+0x318>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d025      	beq.n	8001dc6 <HAL_GPIO_Init+0x222>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a50      	ldr	r2, [pc, #320]	; (8001ec0 <HAL_GPIO_Init+0x31c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d01f      	beq.n	8001dc2 <HAL_GPIO_Init+0x21e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4f      	ldr	r2, [pc, #316]	; (8001ec4 <HAL_GPIO_Init+0x320>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d019      	beq.n	8001dbe <HAL_GPIO_Init+0x21a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4e      	ldr	r2, [pc, #312]	; (8001ec8 <HAL_GPIO_Init+0x324>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <HAL_GPIO_Init+0x216>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4d      	ldr	r2, [pc, #308]	; (8001ecc <HAL_GPIO_Init+0x328>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00d      	beq.n	8001db6 <HAL_GPIO_Init+0x212>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4c      	ldr	r2, [pc, #304]	; (8001ed0 <HAL_GPIO_Init+0x32c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d007      	beq.n	8001db2 <HAL_GPIO_Init+0x20e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4b      	ldr	r2, [pc, #300]	; (8001ed4 <HAL_GPIO_Init+0x330>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d101      	bne.n	8001dae <HAL_GPIO_Init+0x20a>
 8001daa:	2307      	movs	r3, #7
 8001dac:	e00e      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001dae:	2308      	movs	r3, #8
 8001db0:	e00c      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001db2:	2306      	movs	r3, #6
 8001db4:	e00a      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001db6:	2305      	movs	r3, #5
 8001db8:	e008      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001dba:	2304      	movs	r3, #4
 8001dbc:	e006      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e004      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e002      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_GPIO_Init+0x228>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	f002 0203 	and.w	r2, r2, #3
 8001dd2:	0092      	lsls	r2, r2, #2
 8001dd4:	4093      	lsls	r3, r2
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ddc:	4935      	ldr	r1, [pc, #212]	; (8001eb4 <HAL_GPIO_Init+0x310>)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	3302      	adds	r3, #2
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dea:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <HAL_GPIO_Init+0x334>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e0e:	4a32      	ldr	r2, [pc, #200]	; (8001ed8 <HAL_GPIO_Init+0x334>)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e14:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <HAL_GPIO_Init+0x334>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e38:	4a27      	ldr	r2, [pc, #156]	; (8001ed8 <HAL_GPIO_Init+0x334>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_GPIO_Init+0x334>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <HAL_GPIO_Init+0x334>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <HAL_GPIO_Init+0x334>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <HAL_GPIO_Init+0x334>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3301      	adds	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b0f      	cmp	r3, #15
 8001e9c:	f67f ae90 	bls.w	8001bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3724      	adds	r7, #36	; 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40013800 	.word	0x40013800
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	40020400 	.word	0x40020400
 8001ec0:	40020800 	.word	0x40020800
 8001ec4:	40020c00 	.word	0x40020c00
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40021400 	.word	0x40021400
 8001ed0:	40021800 	.word	0x40021800
 8001ed4:	40021c00 	.word	0x40021c00
 8001ed8:	40013c00 	.word	0x40013c00

08001edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef8:	e003      	b.n	8001f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	041a      	lsls	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	619a      	str	r2, [r3, #24]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e25e      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d075      	beq.n	800201a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2e:	4b88      	ldr	r3, [pc, #544]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d00c      	beq.n	8001f54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f3a:	4b85      	ldr	r3, [pc, #532]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d112      	bne.n	8001f6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f46:	4b82      	ldr	r3, [pc, #520]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f52:	d10b      	bne.n	8001f6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	4b7e      	ldr	r3, [pc, #504]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d05b      	beq.n	8002018 <HAL_RCC_OscConfig+0x108>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d157      	bne.n	8002018 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e239      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f74:	d106      	bne.n	8001f84 <HAL_RCC_OscConfig+0x74>
 8001f76:	4b76      	ldr	r3, [pc, #472]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a75      	ldr	r2, [pc, #468]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e01d      	b.n	8001fc0 <HAL_RCC_OscConfig+0xb0>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x98>
 8001f8e:	4b70      	ldr	r3, [pc, #448]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a6f      	ldr	r2, [pc, #444]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b6d      	ldr	r3, [pc, #436]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a6c      	ldr	r2, [pc, #432]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0xb0>
 8001fa8:	4b69      	ldr	r3, [pc, #420]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a68      	ldr	r2, [pc, #416]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	4b66      	ldr	r3, [pc, #408]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a65      	ldr	r2, [pc, #404]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d013      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff f93c 	bl	8001244 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7ff f938 	bl	8001244 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e1fe      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4b5b      	ldr	r3, [pc, #364]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0xc0>
 8001fee:	e014      	b.n	800201a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff f928 	bl	8001244 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7ff f924 	bl	8001244 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e1ea      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200a:	4b51      	ldr	r3, [pc, #324]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xe8>
 8002016:	e000      	b.n	800201a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d063      	beq.n	80020ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002026:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00b      	beq.n	800204a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002032:	4b47      	ldr	r3, [pc, #284]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800203a:	2b08      	cmp	r3, #8
 800203c:	d11c      	bne.n	8002078 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800203e:	4b44      	ldr	r3, [pc, #272]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d116      	bne.n	8002078 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_RCC_OscConfig+0x152>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d001      	beq.n	8002062 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e1be      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002062:	4b3b      	ldr	r3, [pc, #236]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4937      	ldr	r1, [pc, #220]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002076:	e03a      	b.n	80020ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002080:	4b34      	ldr	r3, [pc, #208]	; (8002154 <HAL_RCC_OscConfig+0x244>)
 8002082:	2201      	movs	r2, #1
 8002084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7ff f8dd 	bl	8001244 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208e:	f7ff f8d9 	bl	8001244 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e19f      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ac:	4b28      	ldr	r3, [pc, #160]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4925      	ldr	r1, [pc, #148]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	600b      	str	r3, [r1, #0]
 80020c0:	e015      	b.n	80020ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c2:	4b24      	ldr	r3, [pc, #144]	; (8002154 <HAL_RCC_OscConfig+0x244>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7ff f8bc 	bl	8001244 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d0:	f7ff f8b8 	bl	8001244 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e17e      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d036      	beq.n	8002168 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d016      	beq.n	8002130 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_RCC_OscConfig+0x248>)
 8002104:	2201      	movs	r2, #1
 8002106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7ff f89c 	bl	8001244 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff f898 	bl	8001244 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e15e      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_OscConfig+0x240>)
 8002124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x200>
 800212e:	e01b      	b.n	8002168 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_OscConfig+0x248>)
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002136:	f7ff f885 	bl	8001244 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800213c:	e00e      	b.n	800215c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800213e:	f7ff f881 	bl	8001244 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d907      	bls.n	800215c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e147      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
 8002150:	40023800 	.word	0x40023800
 8002154:	42470000 	.word	0x42470000
 8002158:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	4b88      	ldr	r3, [pc, #544]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800215e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ea      	bne.n	800213e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 8097 	beq.w	80022a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217a:	4b81      	ldr	r3, [pc, #516]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10f      	bne.n	80021a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	4b7d      	ldr	r3, [pc, #500]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a7c      	ldr	r2, [pc, #496]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b7a      	ldr	r3, [pc, #488]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a6:	4b77      	ldr	r3, [pc, #476]	; (8002384 <HAL_RCC_OscConfig+0x474>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d118      	bne.n	80021e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b2:	4b74      	ldr	r3, [pc, #464]	; (8002384 <HAL_RCC_OscConfig+0x474>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a73      	ldr	r2, [pc, #460]	; (8002384 <HAL_RCC_OscConfig+0x474>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021be:	f7ff f841 	bl	8001244 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c6:	f7ff f83d 	bl	8001244 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e103      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_RCC_OscConfig+0x474>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x2ea>
 80021ec:	4b64      	ldr	r3, [pc, #400]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	4a63      	ldr	r2, [pc, #396]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6713      	str	r3, [r2, #112]	; 0x70
 80021f8:	e01c      	b.n	8002234 <HAL_RCC_OscConfig+0x324>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x30c>
 8002202:	4b5f      	ldr	r3, [pc, #380]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	4a5e      	ldr	r2, [pc, #376]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6713      	str	r3, [r2, #112]	; 0x70
 800220e:	4b5c      	ldr	r3, [pc, #368]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a5b      	ldr	r2, [pc, #364]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0x324>
 800221c:	4b58      	ldr	r3, [pc, #352]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	4a57      	ldr	r2, [pc, #348]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	6713      	str	r3, [r2, #112]	; 0x70
 8002228:	4b55      	ldr	r3, [pc, #340]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	4a54      	ldr	r2, [pc, #336]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800222e:	f023 0304 	bic.w	r3, r3, #4
 8002232:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d015      	beq.n	8002268 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223c:	f7ff f802 	bl	8001244 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002242:	e00a      	b.n	800225a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7fe fffe 	bl	8001244 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0c2      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225a:	4b49      	ldr	r3, [pc, #292]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0ee      	beq.n	8002244 <HAL_RCC_OscConfig+0x334>
 8002266:	e014      	b.n	8002292 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002268:	f7fe ffec 	bl	8001244 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226e:	e00a      	b.n	8002286 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7fe ffe8 	bl	8001244 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e0ac      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002286:	4b3e      	ldr	r3, [pc, #248]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1ee      	bne.n	8002270 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d105      	bne.n	80022a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002298:	4b39      	ldr	r3, [pc, #228]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	4a38      	ldr	r2, [pc, #224]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800229e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8098 	beq.w	80023de <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ae:	4b34      	ldr	r3, [pc, #208]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d05c      	beq.n	8002374 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d141      	bne.n	8002346 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4b31      	ldr	r3, [pc, #196]	; (8002388 <HAL_RCC_OscConfig+0x478>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe ffbc 	bl	8001244 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d0:	f7fe ffb8 	bl	8001244 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e07e      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e2:	4b27      	ldr	r3, [pc, #156]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	019b      	lsls	r3, r3, #6
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	3b01      	subs	r3, #1
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	061b      	lsls	r3, r3, #24
 8002312:	491b      	ldr	r1, [pc, #108]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_RCC_OscConfig+0x478>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe ff91 	bl	8001244 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002326:	f7fe ff8d 	bl	8001244 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e053      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x416>
 8002344:	e04b      	b.n	80023de <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <HAL_RCC_OscConfig+0x478>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7fe ff7a 	bl	8001244 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002354:	f7fe ff76 	bl	8001244 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e03c      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_RCC_OscConfig+0x470>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x444>
 8002372:	e034      	b.n	80023de <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d107      	bne.n	800238c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e02f      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
 8002380:	40023800 	.word	0x40023800
 8002384:	40007000 	.word	0x40007000
 8002388:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <HAL_RCC_OscConfig+0x4d8>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	429a      	cmp	r2, r3
 800239e:	d11c      	bne.n	80023da <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d115      	bne.n	80023da <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023b4:	4013      	ands	r3, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10d      	bne.n	80023da <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d001      	beq.n	80023de <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0cc      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002400:	4b68      	ldr	r3, [pc, #416]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d90c      	bls.n	8002428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b65      	ldr	r3, [pc, #404]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b63      	ldr	r3, [pc, #396]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0b8      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002440:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a58      	ldr	r2, [pc, #352]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800244a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002458:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4a52      	ldr	r2, [pc, #328]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b50      	ldr	r3, [pc, #320]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	494d      	ldr	r1, [pc, #308]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d044      	beq.n	800250c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d119      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e07f      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d003      	beq.n	80024aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024aa:	4b3f      	ldr	r3, [pc, #252]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06f      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ba:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e067      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ca:	4b37      	ldr	r3, [pc, #220]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f023 0203 	bic.w	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4934      	ldr	r1, [pc, #208]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024dc:	f7fe feb2 	bl	8001244 <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e4:	f7fe feae 	bl	8001244 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e04f      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 020c 	and.w	r2, r3, #12
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	429a      	cmp	r2, r3
 800250a:	d1eb      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800250c:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d20c      	bcs.n	8002534 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e032      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4916      	ldr	r1, [pc, #88]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d009      	beq.n	8002572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	490e      	ldr	r1, [pc, #56]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002572:	f000 f821 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8002576:	4602      	mov	r2, r0
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	490a      	ldr	r1, [pc, #40]	; (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	5ccb      	ldrb	r3, [r1, r3]
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a09      	ldr	r2, [pc, #36]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fe12 	bl	80011bc <HAL_InitTick>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023c00 	.word	0x40023c00
 80025a8:	40023800 	.word	0x40023800
 80025ac:	08005894 	.word	0x08005894
 80025b0:	20000000 	.word	0x20000000
 80025b4:	20000004 	.word	0x20000004

080025b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025bc:	b094      	sub	sp, #80	; 0x50
 80025be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	647b      	str	r3, [r7, #68]	; 0x44
 80025c4:	2300      	movs	r3, #0
 80025c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025c8:	2300      	movs	r3, #0
 80025ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d0:	4b79      	ldr	r3, [pc, #484]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d00d      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x40>
 80025dc:	2b08      	cmp	r3, #8
 80025de:	f200 80e1 	bhi.w	80027a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x34>
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d003      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ea:	e0db      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025ec:	4b73      	ldr	r3, [pc, #460]	; (80027bc <HAL_RCC_GetSysClockFreq+0x204>)
 80025ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025f0:	e0db      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025f2:	4b73      	ldr	r3, [pc, #460]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80025f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025f6:	e0d8      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f8:	4b6f      	ldr	r3, [pc, #444]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002600:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002602:	4b6d      	ldr	r3, [pc, #436]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d063      	beq.n	80026d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260e:	4b6a      	ldr	r3, [pc, #424]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	099b      	lsrs	r3, r3, #6
 8002614:	2200      	movs	r2, #0
 8002616:	63bb      	str	r3, [r7, #56]	; 0x38
 8002618:	63fa      	str	r2, [r7, #60]	; 0x3c
 800261a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
 8002622:	2300      	movs	r3, #0
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
 8002626:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800262a:	4622      	mov	r2, r4
 800262c:	462b      	mov	r3, r5
 800262e:	f04f 0000 	mov.w	r0, #0
 8002632:	f04f 0100 	mov.w	r1, #0
 8002636:	0159      	lsls	r1, r3, #5
 8002638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800263c:	0150      	lsls	r0, r2, #5
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4621      	mov	r1, r4
 8002644:	1a51      	subs	r1, r2, r1
 8002646:	6139      	str	r1, [r7, #16]
 8002648:	4629      	mov	r1, r5
 800264a:	eb63 0301 	sbc.w	r3, r3, r1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800265c:	4659      	mov	r1, fp
 800265e:	018b      	lsls	r3, r1, #6
 8002660:	4651      	mov	r1, sl
 8002662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002666:	4651      	mov	r1, sl
 8002668:	018a      	lsls	r2, r1, #6
 800266a:	4651      	mov	r1, sl
 800266c:	ebb2 0801 	subs.w	r8, r2, r1
 8002670:	4659      	mov	r1, fp
 8002672:	eb63 0901 	sbc.w	r9, r3, r1
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800268a:	4690      	mov	r8, r2
 800268c:	4699      	mov	r9, r3
 800268e:	4623      	mov	r3, r4
 8002690:	eb18 0303 	adds.w	r3, r8, r3
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	462b      	mov	r3, r5
 8002698:	eb49 0303 	adc.w	r3, r9, r3
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026aa:	4629      	mov	r1, r5
 80026ac:	024b      	lsls	r3, r1, #9
 80026ae:	4621      	mov	r1, r4
 80026b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026b4:	4621      	mov	r1, r4
 80026b6:	024a      	lsls	r2, r1, #9
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026be:	2200      	movs	r2, #0
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026c8:	f7fd fdd2 	bl	8000270 <__aeabi_uldivmod>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4613      	mov	r3, r2
 80026d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026d4:	e058      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d6:	4b38      	ldr	r3, [pc, #224]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	099b      	lsrs	r3, r3, #6
 80026dc:	2200      	movs	r2, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	4611      	mov	r1, r2
 80026e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026e6:	623b      	str	r3, [r7, #32]
 80026e8:	2300      	movs	r3, #0
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
 80026ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026f0:	4642      	mov	r2, r8
 80026f2:	464b      	mov	r3, r9
 80026f4:	f04f 0000 	mov.w	r0, #0
 80026f8:	f04f 0100 	mov.w	r1, #0
 80026fc:	0159      	lsls	r1, r3, #5
 80026fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002702:	0150      	lsls	r0, r2, #5
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4641      	mov	r1, r8
 800270a:	ebb2 0a01 	subs.w	sl, r2, r1
 800270e:	4649      	mov	r1, r9
 8002710:	eb63 0b01 	sbc.w	fp, r3, r1
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002720:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002724:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002728:	ebb2 040a 	subs.w	r4, r2, sl
 800272c:	eb63 050b 	sbc.w	r5, r3, fp
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	00eb      	lsls	r3, r5, #3
 800273a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800273e:	00e2      	lsls	r2, r4, #3
 8002740:	4614      	mov	r4, r2
 8002742:	461d      	mov	r5, r3
 8002744:	4643      	mov	r3, r8
 8002746:	18e3      	adds	r3, r4, r3
 8002748:	603b      	str	r3, [r7, #0]
 800274a:	464b      	mov	r3, r9
 800274c:	eb45 0303 	adc.w	r3, r5, r3
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800275e:	4629      	mov	r1, r5
 8002760:	028b      	lsls	r3, r1, #10
 8002762:	4621      	mov	r1, r4
 8002764:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002768:	4621      	mov	r1, r4
 800276a:	028a      	lsls	r2, r1, #10
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002772:	2200      	movs	r2, #0
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	61fa      	str	r2, [r7, #28]
 8002778:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800277c:	f7fd fd78 	bl	8000270 <__aeabi_uldivmod>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4613      	mov	r3, r2
 8002786:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	0c1b      	lsrs	r3, r3, #16
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	3301      	adds	r3, #1
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002798:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800279a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027a2:	e002      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_RCC_GetSysClockFreq+0x204>)
 80027a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3750      	adds	r7, #80	; 0x50
 80027b0:	46bd      	mov	sp, r7
 80027b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800
 80027bc:	00f42400 	.word	0x00f42400
 80027c0:	007a1200 	.word	0x007a1200

080027c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000000 	.word	0x20000000

080027dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027e0:	f7ff fff0 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	0a9b      	lsrs	r3, r3, #10
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4903      	ldr	r1, [pc, #12]	; (8002800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	080058a4 	.word	0x080058a4

08002804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002808:	f7ff ffdc 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 800280c:	4602      	mov	r2, r0
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	0b5b      	lsrs	r3, r3, #13
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	4903      	ldr	r1, [pc, #12]	; (8002828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800281a:	5ccb      	ldrb	r3, [r1, r3]
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40023800 	.word	0x40023800
 8002828:	080058a4 	.word	0x080058a4

0800282c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e01d      	b.n	800287a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe fa9e 	bl	8000d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f000 fbde 	bl	800302c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2202      	movs	r2, #2
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b06      	cmp	r3, #6
 80028a2:	d007      	beq.n	80028b4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e01d      	b.n	8002918 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d106      	bne.n	80028f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7fe faa1 	bl	8000e38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2202      	movs	r2, #2
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3304      	adds	r3, #4
 8002906:	4619      	mov	r1, r3
 8002908:	4610      	mov	r0, r2
 800290a:	f000 fb8f 	bl	800302c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2201      	movs	r2, #1
 8002930:	6839      	ldr	r1, [r7, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fe64 	bl	8003600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a15      	ldr	r2, [pc, #84]	; (8002994 <HAL_TIM_PWM_Start+0x74>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d004      	beq.n	800294c <HAL_TIM_PWM_Start+0x2c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a14      	ldr	r2, [pc, #80]	; (8002998 <HAL_TIM_PWM_Start+0x78>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d101      	bne.n	8002950 <HAL_TIM_PWM_Start+0x30>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_TIM_PWM_Start+0x32>
 8002950:	2300      	movs	r3, #0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b06      	cmp	r3, #6
 8002976:	d007      	beq.n	8002988 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40010000 	.word	0x40010000
 8002998:	40010400 	.word	0x40010400

0800299c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b0c      	cmp	r3, #12
 80029aa:	d841      	bhi.n	8002a30 <HAL_TIM_PWM_Start_IT+0x94>
 80029ac:	a201      	add	r2, pc, #4	; (adr r2, 80029b4 <HAL_TIM_PWM_Start_IT+0x18>)
 80029ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b2:	bf00      	nop
 80029b4:	080029e9 	.word	0x080029e9
 80029b8:	08002a31 	.word	0x08002a31
 80029bc:	08002a31 	.word	0x08002a31
 80029c0:	08002a31 	.word	0x08002a31
 80029c4:	080029fb 	.word	0x080029fb
 80029c8:	08002a31 	.word	0x08002a31
 80029cc:	08002a31 	.word	0x08002a31
 80029d0:	08002a31 	.word	0x08002a31
 80029d4:	08002a0d 	.word	0x08002a0d
 80029d8:	08002a31 	.word	0x08002a31
 80029dc:	08002a31 	.word	0x08002a31
 80029e0:	08002a31 	.word	0x08002a31
 80029e4:	08002a1f 	.word	0x08002a1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0202 	orr.w	r2, r2, #2
 80029f6:	60da      	str	r2, [r3, #12]
      break;
 80029f8:	e01b      	b.n	8002a32 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0204 	orr.w	r2, r2, #4
 8002a08:	60da      	str	r2, [r3, #12]
      break;
 8002a0a:	e012      	b.n	8002a32 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0208 	orr.w	r2, r2, #8
 8002a1a:	60da      	str	r2, [r3, #12]
      break;
 8002a1c:	e009      	b.n	8002a32 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0210 	orr.w	r2, r2, #16
 8002a2c:	60da      	str	r2, [r3, #12]
      break;
 8002a2e:	e000      	b.n	8002a32 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002a30:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2201      	movs	r2, #1
 8002a38:	6839      	ldr	r1, [r7, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fde0 	bl	8003600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a15      	ldr	r2, [pc, #84]	; (8002a9c <HAL_TIM_PWM_Start_IT+0x100>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d004      	beq.n	8002a54 <HAL_TIM_PWM_Start_IT+0xb8>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <HAL_TIM_PWM_Start_IT+0x104>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d101      	bne.n	8002a58 <HAL_TIM_PWM_Start_IT+0xbc>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <HAL_TIM_PWM_Start_IT+0xbe>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b06      	cmp	r3, #6
 8002a7e:	d007      	beq.n	8002a90 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40010400 	.word	0x40010400

08002aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d122      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d11b      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0202 	mvn.w	r2, #2
 8002ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fa82 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
 8002aec:	e005      	b.n	8002afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa74 	bl	8002fdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fa85 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d122      	bne.n	8002b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d11b      	bne.n	8002b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0204 	mvn.w	r2, #4
 8002b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fa58 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
 8002b40:	e005      	b.n	8002b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa4a 	bl	8002fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fa5b 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d122      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d11b      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0208 	mvn.w	r2, #8
 8002b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa2e 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
 8002b94:	e005      	b.n	8002ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fa20 	bl	8002fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fa31 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b10      	cmp	r3, #16
 8002bb4:	d122      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d11b      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0210 	mvn.w	r2, #16
 8002bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fa04 	bl	8002ff0 <HAL_TIM_IC_CaptureCallback>
 8002be8:	e005      	b.n	8002bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f9f6 	bl	8002fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fa07 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d10e      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d107      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0201 	mvn.w	r2, #1
 8002c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f9d0 	bl	8002fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c32:	2b80      	cmp	r3, #128	; 0x80
 8002c34:	d10e      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c40:	2b80      	cmp	r3, #128	; 0x80
 8002c42:	d107      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fd82 	bl	8003758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6c:	2b40      	cmp	r3, #64	; 0x40
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f9cc 	bl	8003018 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d10e      	bne.n	8002cac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d107      	bne.n	8002cac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0220 	mvn.w	r2, #32
 8002ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fd4c 	bl	8003744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e0b4      	b.n	8002e38 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b0c      	cmp	r3, #12
 8002ce2:	f200 809f 	bhi.w	8002e24 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002ce6:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cec:	08002d21 	.word	0x08002d21
 8002cf0:	08002e25 	.word	0x08002e25
 8002cf4:	08002e25 	.word	0x08002e25
 8002cf8:	08002e25 	.word	0x08002e25
 8002cfc:	08002d61 	.word	0x08002d61
 8002d00:	08002e25 	.word	0x08002e25
 8002d04:	08002e25 	.word	0x08002e25
 8002d08:	08002e25 	.word	0x08002e25
 8002d0c:	08002da3 	.word	0x08002da3
 8002d10:	08002e25 	.word	0x08002e25
 8002d14:	08002e25 	.word	0x08002e25
 8002d18:	08002e25 	.word	0x08002e25
 8002d1c:	08002de3 	.word	0x08002de3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fa20 	bl	800316c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0208 	orr.w	r2, r2, #8
 8002d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0204 	bic.w	r2, r2, #4
 8002d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6999      	ldr	r1, [r3, #24]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	619a      	str	r2, [r3, #24]
      break;
 8002d5e:	e062      	b.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fa70 	bl	800324c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6999      	ldr	r1, [r3, #24]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	021a      	lsls	r2, r3, #8
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	619a      	str	r2, [r3, #24]
      break;
 8002da0:	e041      	b.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fac5 	bl	8003338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0208 	orr.w	r2, r2, #8
 8002dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0204 	bic.w	r2, r2, #4
 8002dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69d9      	ldr	r1, [r3, #28]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	61da      	str	r2, [r3, #28]
      break;
 8002de0:	e021      	b.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fb19 	bl	8003420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69d9      	ldr	r1, [r3, #28]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	021a      	lsls	r2, r3, #8
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	61da      	str	r2, [r3, #28]
      break;
 8002e22:	e000      	b.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002e24:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_TIM_ConfigClockSource+0x18>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e0b3      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x180>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e90:	d03e      	beq.n	8002f10 <HAL_TIM_ConfigClockSource+0xd0>
 8002e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e96:	f200 8087 	bhi.w	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9e:	f000 8085 	beq.w	8002fac <HAL_TIM_ConfigClockSource+0x16c>
 8002ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea6:	d87f      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002ea8:	2b70      	cmp	r3, #112	; 0x70
 8002eaa:	d01a      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0xa2>
 8002eac:	2b70      	cmp	r3, #112	; 0x70
 8002eae:	d87b      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002eb0:	2b60      	cmp	r3, #96	; 0x60
 8002eb2:	d050      	beq.n	8002f56 <HAL_TIM_ConfigClockSource+0x116>
 8002eb4:	2b60      	cmp	r3, #96	; 0x60
 8002eb6:	d877      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002eb8:	2b50      	cmp	r3, #80	; 0x50
 8002eba:	d03c      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0xf6>
 8002ebc:	2b50      	cmp	r3, #80	; 0x50
 8002ebe:	d873      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002ec0:	2b40      	cmp	r3, #64	; 0x40
 8002ec2:	d058      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x136>
 8002ec4:	2b40      	cmp	r3, #64	; 0x40
 8002ec6:	d86f      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002ec8:	2b30      	cmp	r3, #48	; 0x30
 8002eca:	d064      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x156>
 8002ecc:	2b30      	cmp	r3, #48	; 0x30
 8002ece:	d86b      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d060      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x156>
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d867      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d05c      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x156>
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d05a      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ee0:	e062      	b.n	8002fa8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6899      	ldr	r1, [r3, #8]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f000 fb65 	bl	80035c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	609a      	str	r2, [r3, #8]
      break;
 8002f0e:	e04e      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	6899      	ldr	r1, [r3, #8]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f000 fb4e 	bl	80035c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f32:	609a      	str	r2, [r3, #8]
      break;
 8002f34:	e03b      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f000 fac2 	bl	80034cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2150      	movs	r1, #80	; 0x50
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fb1b 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8002f54:	e02b      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6859      	ldr	r1, [r3, #4]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f000 fae1 	bl	800352a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2160      	movs	r1, #96	; 0x60
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fb0b 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8002f74:	e01b      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6859      	ldr	r1, [r3, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f000 faa2 	bl	80034cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2140      	movs	r1, #64	; 0x40
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fafb 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8002f94:	e00b      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	f000 faf2 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8002fa6:	e002      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fa8:	bf00      	nop
 8002faa:	e000      	b.n	8002fae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a40      	ldr	r2, [pc, #256]	; (8003140 <TIM_Base_SetConfig+0x114>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d013      	beq.n	800306c <TIM_Base_SetConfig+0x40>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304a:	d00f      	beq.n	800306c <TIM_Base_SetConfig+0x40>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a3d      	ldr	r2, [pc, #244]	; (8003144 <TIM_Base_SetConfig+0x118>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00b      	beq.n	800306c <TIM_Base_SetConfig+0x40>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a3c      	ldr	r2, [pc, #240]	; (8003148 <TIM_Base_SetConfig+0x11c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d007      	beq.n	800306c <TIM_Base_SetConfig+0x40>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a3b      	ldr	r2, [pc, #236]	; (800314c <TIM_Base_SetConfig+0x120>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d003      	beq.n	800306c <TIM_Base_SetConfig+0x40>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a3a      	ldr	r2, [pc, #232]	; (8003150 <TIM_Base_SetConfig+0x124>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d108      	bne.n	800307e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a2f      	ldr	r2, [pc, #188]	; (8003140 <TIM_Base_SetConfig+0x114>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d02b      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308c:	d027      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a2c      	ldr	r2, [pc, #176]	; (8003144 <TIM_Base_SetConfig+0x118>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d023      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a2b      	ldr	r2, [pc, #172]	; (8003148 <TIM_Base_SetConfig+0x11c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01f      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a2a      	ldr	r2, [pc, #168]	; (800314c <TIM_Base_SetConfig+0x120>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01b      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a29      	ldr	r2, [pc, #164]	; (8003150 <TIM_Base_SetConfig+0x124>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d017      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a28      	ldr	r2, [pc, #160]	; (8003154 <TIM_Base_SetConfig+0x128>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a27      	ldr	r2, [pc, #156]	; (8003158 <TIM_Base_SetConfig+0x12c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00f      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a26      	ldr	r2, [pc, #152]	; (800315c <TIM_Base_SetConfig+0x130>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00b      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a25      	ldr	r2, [pc, #148]	; (8003160 <TIM_Base_SetConfig+0x134>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a24      	ldr	r2, [pc, #144]	; (8003164 <TIM_Base_SetConfig+0x138>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d003      	beq.n	80030de <TIM_Base_SetConfig+0xb2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a23      	ldr	r2, [pc, #140]	; (8003168 <TIM_Base_SetConfig+0x13c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d108      	bne.n	80030f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <TIM_Base_SetConfig+0x114>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <TIM_Base_SetConfig+0xf8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a0c      	ldr	r2, [pc, #48]	; (8003150 <TIM_Base_SetConfig+0x124>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d103      	bne.n	800312c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	615a      	str	r2, [r3, #20]
}
 8003132:	bf00      	nop
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40010000 	.word	0x40010000
 8003144:	40000400 	.word	0x40000400
 8003148:	40000800 	.word	0x40000800
 800314c:	40000c00 	.word	0x40000c00
 8003150:	40010400 	.word	0x40010400
 8003154:	40014000 	.word	0x40014000
 8003158:	40014400 	.word	0x40014400
 800315c:	40014800 	.word	0x40014800
 8003160:	40001800 	.word	0x40001800
 8003164:	40001c00 	.word	0x40001c00
 8003168:	40002000 	.word	0x40002000

0800316c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f023 0201 	bic.w	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0303 	bic.w	r3, r3, #3
 80031a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f023 0302 	bic.w	r3, r3, #2
 80031b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a20      	ldr	r2, [pc, #128]	; (8003244 <TIM_OC1_SetConfig+0xd8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d003      	beq.n	80031d0 <TIM_OC1_SetConfig+0x64>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a1f      	ldr	r2, [pc, #124]	; (8003248 <TIM_OC1_SetConfig+0xdc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d10c      	bne.n	80031ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f023 0308 	bic.w	r3, r3, #8
 80031d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f023 0304 	bic.w	r3, r3, #4
 80031e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a15      	ldr	r2, [pc, #84]	; (8003244 <TIM_OC1_SetConfig+0xd8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_OC1_SetConfig+0x8e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a14      	ldr	r2, [pc, #80]	; (8003248 <TIM_OC1_SetConfig+0xdc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d111      	bne.n	800321e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	621a      	str	r2, [r3, #32]
}
 8003238:	bf00      	nop
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	40010000 	.word	0x40010000
 8003248:	40010400 	.word	0x40010400

0800324c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f023 0210 	bic.w	r2, r3, #16
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f023 0320 	bic.w	r3, r3, #32
 8003296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a22      	ldr	r2, [pc, #136]	; (8003330 <TIM_OC2_SetConfig+0xe4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <TIM_OC2_SetConfig+0x68>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a21      	ldr	r2, [pc, #132]	; (8003334 <TIM_OC2_SetConfig+0xe8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d10d      	bne.n	80032d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a17      	ldr	r2, [pc, #92]	; (8003330 <TIM_OC2_SetConfig+0xe4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d003      	beq.n	80032e0 <TIM_OC2_SetConfig+0x94>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a16      	ldr	r2, [pc, #88]	; (8003334 <TIM_OC2_SetConfig+0xe8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d113      	bne.n	8003308 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40010000 	.word	0x40010000
 8003334:	40010400 	.word	0x40010400

08003338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0303 	bic.w	r3, r3, #3
 800336e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	4313      	orrs	r3, r2
 800338c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a21      	ldr	r2, [pc, #132]	; (8003418 <TIM_OC3_SetConfig+0xe0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d003      	beq.n	800339e <TIM_OC3_SetConfig+0x66>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a20      	ldr	r2, [pc, #128]	; (800341c <TIM_OC3_SetConfig+0xe4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d10d      	bne.n	80033ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a16      	ldr	r2, [pc, #88]	; (8003418 <TIM_OC3_SetConfig+0xe0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d003      	beq.n	80033ca <TIM_OC3_SetConfig+0x92>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a15      	ldr	r2, [pc, #84]	; (800341c <TIM_OC3_SetConfig+0xe4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d113      	bne.n	80033f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	621a      	str	r2, [r3, #32]
}
 800340c:	bf00      	nop
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40010000 	.word	0x40010000
 800341c:	40010400 	.word	0x40010400

08003420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800346a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	031b      	lsls	r3, r3, #12
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a12      	ldr	r2, [pc, #72]	; (80034c4 <TIM_OC4_SetConfig+0xa4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_OC4_SetConfig+0x68>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a11      	ldr	r2, [pc, #68]	; (80034c8 <TIM_OC4_SetConfig+0xa8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d109      	bne.n	800349c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800348e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	019b      	lsls	r3, r3, #6
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	621a      	str	r2, [r3, #32]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40010400 	.word	0x40010400

080034cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f023 0201 	bic.w	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f023 030a 	bic.w	r3, r3, #10
 8003508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	621a      	str	r2, [r3, #32]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800352a:	b480      	push	{r7}
 800352c:	b087      	sub	sp, #28
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f023 0210 	bic.w	r2, r3, #16
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	031b      	lsls	r3, r3, #12
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003566:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	621a      	str	r2, [r3, #32]
}
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800358a:	b480      	push	{r7}
 800358c:	b085      	sub	sp, #20
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f043 0307 	orr.w	r3, r3, #7
 80035ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	609a      	str	r2, [r3, #8]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	021a      	lsls	r2, r3, #8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	bf00      	nop
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2201      	movs	r2, #1
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a1a      	ldr	r2, [r3, #32]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	43db      	mvns	r3, r3
 8003622:	401a      	ands	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1a      	ldr	r2, [r3, #32]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	431a      	orrs	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	621a      	str	r2, [r3, #32]
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003660:	2302      	movs	r3, #2
 8003662:	e05a      	b.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a21      	ldr	r2, [pc, #132]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d022      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b0:	d01d      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1d      	ldr	r2, [pc, #116]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d018      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1b      	ldr	r2, [pc, #108]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d013      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1a      	ldr	r2, [pc, #104]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00e      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a18      	ldr	r2, [pc, #96]	; (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d009      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a17      	ldr	r2, [pc, #92]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a15      	ldr	r2, [pc, #84]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d10c      	bne.n	8003708 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40010000 	.word	0x40010000
 800372c:	40000400 	.word	0x40000400
 8003730:	40000800 	.word	0x40000800
 8003734:	40000c00 	.word	0x40000c00
 8003738:	40010400 	.word	0x40010400
 800373c:	40014000 	.word	0x40014000
 8003740:	40001800 	.word	0x40001800

08003744 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e03f      	b.n	80037fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd fbd8 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	; 0x24
 800379c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fba1 	bl	8003ef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b088      	sub	sp, #32
 800380a:	af02      	add	r7, sp, #8
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	4613      	mov	r3, r2
 8003814:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b20      	cmp	r3, #32
 8003824:	f040 8083 	bne.w	800392e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_UART_Transmit+0x2e>
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e07b      	b.n	8003930 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_UART_Transmit+0x40>
 8003842:	2302      	movs	r3, #2
 8003844:	e074      	b.n	8003930 <HAL_UART_Transmit+0x12a>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2221      	movs	r2, #33	; 0x21
 8003858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800385c:	f7fd fcf2 	bl	8001244 <HAL_GetTick>
 8003860:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	88fa      	ldrh	r2, [r7, #6]
 8003866:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	88fa      	ldrh	r2, [r7, #6]
 800386c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003876:	e042      	b.n	80038fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388e:	d122      	bne.n	80038d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2200      	movs	r2, #0
 8003898:	2180      	movs	r1, #128	; 0x80
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f9c0 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e042      	b.n	8003930 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d103      	bne.n	80038ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3302      	adds	r3, #2
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	e017      	b.n	80038fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	3301      	adds	r3, #1
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	e013      	b.n	80038fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	2180      	movs	r1, #128	; 0x80
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f99d 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e01f      	b.n	8003930 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	60ba      	str	r2, [r7, #8]
 80038f6:	781a      	ldrb	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1b7      	bne.n	8003878 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2200      	movs	r2, #0
 8003910:	2140      	movs	r1, #64	; 0x40
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f984 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e006      	b.n	8003930 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b20      	cmp	r3, #32
 8003950:	d140      	bne.n	80039d4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_UART_Receive_IT+0x26>
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e039      	b.n	80039d6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_UART_Receive_IT+0x38>
 800396c:	2302      	movs	r3, #2
 800396e:	e032      	b.n	80039d6 <HAL_UART_Receive_IT+0x9e>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	88fa      	ldrh	r2, [r7, #6]
 8003982:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	88fa      	ldrh	r2, [r7, #6]
 8003988:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2222      	movs	r2, #34	; 0x22
 8003994:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0220 	orr.w	r2, r2, #32
 80039ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10d      	bne.n	8003a36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_UART_IRQHandler+0x52>
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f9e0 	bl	8003df4 <UART_Receive_IT>
      return;
 8003a34:	e0d0      	b.n	8003bd8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80b0 	beq.w	8003b9e <HAL_UART_IRQHandler+0x1ba>
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d105      	bne.n	8003a54 <HAL_UART_IRQHandler+0x70>
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80a5 	beq.w	8003b9e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_UART_IRQHandler+0x90>
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6c:	f043 0201 	orr.w	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_UART_IRQHandler+0xb0>
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	f043 0202 	orr.w	r2, r3, #2
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_UART_IRQHandler+0xd0>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aac:	f043 0204 	orr.w	r2, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00f      	beq.n	8003ade <HAL_UART_IRQHandler+0xfa>
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f003 0320 	and.w	r3, r3, #32
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d104      	bne.n	8003ad2 <HAL_UART_IRQHandler+0xee>
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad6:	f043 0208 	orr.w	r2, r3, #8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d077      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <HAL_UART_IRQHandler+0x11c>
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f97a 	bl	8003df4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b40      	cmp	r3, #64	; 0x40
 8003b0c:	bf0c      	ite	eq
 8003b0e:	2301      	moveq	r3, #1
 8003b10:	2300      	movne	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <HAL_UART_IRQHandler+0x144>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d031      	beq.n	8003b8c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f8c3 	bl	8003cb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b38:	2b40      	cmp	r3, #64	; 0x40
 8003b3a:	d123      	bne.n	8003b84 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d013      	beq.n	8003b7c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b58:	4a21      	ldr	r2, [pc, #132]	; (8003be0 <HAL_UART_IRQHandler+0x1fc>)
 8003b5a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fd fd93 	bl	800168c <HAL_DMA_Abort_IT>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d016      	beq.n	8003b9a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b76:	4610      	mov	r0, r2
 8003b78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7a:	e00e      	b.n	8003b9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f845 	bl	8003c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b82:	e00a      	b.n	8003b9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f841 	bl	8003c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8a:	e006      	b.n	8003b9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f83d 	bl	8003c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003b98:	e01d      	b.n	8003bd6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9a:	bf00      	nop
    return;
 8003b9c:	e01b      	b.n	8003bd6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_UART_IRQHandler+0x1d6>
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f8b0 	bl	8003d18 <UART_Transmit_IT>
    return;
 8003bb8:	e00e      	b.n	8003bd8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x1f4>
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d004      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f8f8 	bl	8003dc4 <UART_EndTransmit_IT>
    return;
 8003bd4:	e000      	b.n	8003bd8 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003bd6:	bf00      	nop
  }
}
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	08003cf1 	.word	0x08003cf1

08003be4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c30:	e02c      	b.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	d028      	beq.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c40:	f7fd fb00 	bl	8001244 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d21d      	bcs.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0201 	bic.w	r2, r2, #1
 8003c6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e00f      	b.n	8003cac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4013      	ands	r3, r2
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d0c3      	beq.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695a      	ldr	r2, [r3, #20]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f7ff ff7e 	bl	8003c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b21      	cmp	r3, #33	; 0x21
 8003d2a:	d144      	bne.n	8003db6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d34:	d11a      	bne.n	8003d6c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d4a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d105      	bne.n	8003d60 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	1c9a      	adds	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	621a      	str	r2, [r3, #32]
 8003d5e:	e00e      	b.n	8003d7e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	621a      	str	r2, [r3, #32]
 8003d6a:	e008      	b.n	8003d7e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	1c59      	adds	r1, r3, #1
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6211      	str	r1, [r2, #32]
 8003d76:	781a      	ldrb	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10f      	bne.n	8003db2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003da0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003db0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	e000      	b.n	8003db8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003db6:	2302      	movs	r3, #2
  }
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff fefd 	bl	8003be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b22      	cmp	r3, #34	; 0x22
 8003e06:	d171      	bne.n	8003eec <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e10:	d123      	bne.n	8003e5a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10e      	bne.n	8003e3e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	1c9a      	adds	r2, r3, #2
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e3c:	e029      	b.n	8003e92 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	629a      	str	r2, [r3, #40]	; 0x28
 8003e58:	e01b      	b.n	8003e92 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10a      	bne.n	8003e78 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6858      	ldr	r0, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	1c59      	adds	r1, r3, #1
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6291      	str	r1, [r2, #40]	; 0x28
 8003e72:	b2c2      	uxtb	r2, r0
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	e00c      	b.n	8003e92 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	1c58      	adds	r0, r3, #1
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	6288      	str	r0, [r1, #40]	; 0x28
 8003e8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d120      	bne.n	8003ee8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0220 	bic.w	r2, r2, #32
 8003eb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ec4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff fe8a 	bl	8003bf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e002      	b.n	8003eee <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e000      	b.n	8003eee <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003efc:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f06:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f16:	68d9      	ldr	r1, [r3, #12]
 8003f18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	ea40 0301 	orr.w	r3, r0, r1
 8003f22:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8003f46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f52:	f021 010c 	bic.w	r1, r1, #12
 8003f56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003f60:	430b      	orrs	r3, r1
 8003f62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f74:	6999      	ldr	r1, [r3, #24]
 8003f76:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	ea40 0301 	orr.w	r3, r0, r1
 8003f80:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f82:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8c:	f040 824a 	bne.w	8004424 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	4b96      	ldr	r3, [pc, #600]	; (80041f0 <UART_SetConfig+0x2f8>)
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d006      	beq.n	8003faa <UART_SetConfig+0xb2>
 8003f9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4b94      	ldr	r3, [pc, #592]	; (80041f4 <UART_SetConfig+0x2fc>)
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	f040 8129 	bne.w	80041fc <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003faa:	f7fe fc2b 	bl	8002804 <HAL_RCC_GetPCLK2Freq>
 8003fae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8003fbc:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8003fc0:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8003fc4:	4622      	mov	r2, r4
 8003fc6:	462b      	mov	r3, r5
 8003fc8:	1891      	adds	r1, r2, r2
 8003fca:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003fce:	415b      	adcs	r3, r3
 8003fd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003fd4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003fd8:	4621      	mov	r1, r4
 8003fda:	1851      	adds	r1, r2, r1
 8003fdc:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	414b      	adcs	r3, r1
 8003fe4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	00cb      	lsls	r3, r1, #3
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ffe:	4641      	mov	r1, r8
 8004000:	00ca      	lsls	r2, r1, #3
 8004002:	4610      	mov	r0, r2
 8004004:	4619      	mov	r1, r3
 8004006:	4603      	mov	r3, r0
 8004008:	4622      	mov	r2, r4
 800400a:	189b      	adds	r3, r3, r2
 800400c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004010:	462b      	mov	r3, r5
 8004012:	460a      	mov	r2, r1
 8004014:	eb42 0303 	adc.w	r3, r2, r3
 8004018:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800401c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004028:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 800402c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004030:	460b      	mov	r3, r1
 8004032:	18db      	adds	r3, r3, r3
 8004034:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004038:	4613      	mov	r3, r2
 800403a:	eb42 0303 	adc.w	r3, r2, r3
 800403e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004042:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004046:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800404a:	f7fc f911 	bl	8000270 <__aeabi_uldivmod>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4b69      	ldr	r3, [pc, #420]	; (80041f8 <UART_SetConfig+0x300>)
 8004054:	fba3 2302 	umull	r2, r3, r3, r2
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	011c      	lsls	r4, r3, #4
 800405c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004060:	2200      	movs	r2, #0
 8004062:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004066:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800406a:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800406e:	4642      	mov	r2, r8
 8004070:	464b      	mov	r3, r9
 8004072:	1891      	adds	r1, r2, r2
 8004074:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004078:	415b      	adcs	r3, r3
 800407a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800407e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004082:	4641      	mov	r1, r8
 8004084:	1851      	adds	r1, r2, r1
 8004086:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800408a:	4649      	mov	r1, r9
 800408c:	414b      	adcs	r3, r1
 800408e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800409e:	4659      	mov	r1, fp
 80040a0:	00cb      	lsls	r3, r1, #3
 80040a2:	4651      	mov	r1, sl
 80040a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040a8:	4651      	mov	r1, sl
 80040aa:	00ca      	lsls	r2, r1, #3
 80040ac:	4610      	mov	r0, r2
 80040ae:	4619      	mov	r1, r3
 80040b0:	4603      	mov	r3, r0
 80040b2:	4642      	mov	r2, r8
 80040b4:	189b      	adds	r3, r3, r2
 80040b6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80040ba:	464b      	mov	r3, r9
 80040bc:	460a      	mov	r2, r1
 80040be:	eb42 0303 	adc.w	r3, r2, r3
 80040c2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80040c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80040d2:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80040d6:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80040da:	460b      	mov	r3, r1
 80040dc:	18db      	adds	r3, r3, r3
 80040de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040e2:	4613      	mov	r3, r2
 80040e4:	eb42 0303 	adc.w	r3, r2, r3
 80040e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040ec:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80040f0:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80040f4:	f7fc f8bc 	bl	8000270 <__aeabi_uldivmod>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4611      	mov	r1, r2
 80040fe:	4b3e      	ldr	r3, [pc, #248]	; (80041f8 <UART_SetConfig+0x300>)
 8004100:	fba3 2301 	umull	r2, r3, r3, r1
 8004104:	095b      	lsrs	r3, r3, #5
 8004106:	2264      	movs	r2, #100	; 0x64
 8004108:	fb02 f303 	mul.w	r3, r2, r3
 800410c:	1acb      	subs	r3, r1, r3
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004114:	4b38      	ldr	r3, [pc, #224]	; (80041f8 <UART_SetConfig+0x300>)
 8004116:	fba3 2302 	umull	r2, r3, r3, r2
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004122:	441c      	add	r4, r3
 8004124:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004128:	2200      	movs	r2, #0
 800412a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800412e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004132:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8004136:	4642      	mov	r2, r8
 8004138:	464b      	mov	r3, r9
 800413a:	1891      	adds	r1, r2, r2
 800413c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004140:	415b      	adcs	r3, r3
 8004142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004146:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800414a:	4641      	mov	r1, r8
 800414c:	1851      	adds	r1, r2, r1
 800414e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004152:	4649      	mov	r1, r9
 8004154:	414b      	adcs	r3, r1
 8004156:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8004166:	4659      	mov	r1, fp
 8004168:	00cb      	lsls	r3, r1, #3
 800416a:	4651      	mov	r1, sl
 800416c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004170:	4651      	mov	r1, sl
 8004172:	00ca      	lsls	r2, r1, #3
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	4603      	mov	r3, r0
 800417a:	4642      	mov	r2, r8
 800417c:	189b      	adds	r3, r3, r2
 800417e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004182:	464b      	mov	r3, r9
 8004184:	460a      	mov	r2, r1
 8004186:	eb42 0303 	adc.w	r3, r2, r3
 800418a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800418e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800419a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800419e:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80041a2:	460b      	mov	r3, r1
 80041a4:	18db      	adds	r3, r3, r3
 80041a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041aa:	4613      	mov	r3, r2
 80041ac:	eb42 0303 	adc.w	r3, r2, r3
 80041b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041b4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80041b8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80041bc:	f7fc f858 	bl	8000270 <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <UART_SetConfig+0x300>)
 80041c6:	fba3 1302 	umull	r1, r3, r3, r2
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2164      	movs	r1, #100	; 0x64
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	3332      	adds	r3, #50	; 0x32
 80041d8:	4a07      	ldr	r2, [pc, #28]	; (80041f8 <UART_SetConfig+0x300>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	f003 0207 	and.w	r2, r3, #7
 80041e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4422      	add	r2, r4
 80041ec:	609a      	str	r2, [r3, #8]
 80041ee:	e349      	b.n	8004884 <UART_SetConfig+0x98c>
 80041f0:	40011000 	.word	0x40011000
 80041f4:	40011400 	.word	0x40011400
 80041f8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041fc:	f7fe faee 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 8004200:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004204:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004208:	2200      	movs	r2, #0
 800420a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800420e:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8004212:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8004216:	4622      	mov	r2, r4
 8004218:	462b      	mov	r3, r5
 800421a:	1891      	adds	r1, r2, r2
 800421c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004220:	415b      	adcs	r3, r3
 8004222:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004226:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800422a:	4621      	mov	r1, r4
 800422c:	eb12 0a01 	adds.w	sl, r2, r1
 8004230:	4629      	mov	r1, r5
 8004232:	eb43 0b01 	adc.w	fp, r3, r1
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004242:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004246:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800424a:	4692      	mov	sl, r2
 800424c:	469b      	mov	fp, r3
 800424e:	4623      	mov	r3, r4
 8004250:	eb1a 0303 	adds.w	r3, sl, r3
 8004254:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004258:	462b      	mov	r3, r5
 800425a:	eb4b 0303 	adc.w	r3, fp, r3
 800425e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004262:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800426e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004272:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004276:	460b      	mov	r3, r1
 8004278:	18db      	adds	r3, r3, r3
 800427a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800427e:	4613      	mov	r3, r2
 8004280:	eb42 0303 	adc.w	r3, r2, r3
 8004284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004288:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800428c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004290:	f7fb ffee 	bl	8000270 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4b61      	ldr	r3, [pc, #388]	; (8004420 <UART_SetConfig+0x528>)
 800429a:	fba3 2302 	umull	r2, r3, r3, r2
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	011c      	lsls	r4, r3, #4
 80042a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80042ac:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80042b0:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80042b4:	4642      	mov	r2, r8
 80042b6:	464b      	mov	r3, r9
 80042b8:	1891      	adds	r1, r2, r2
 80042ba:	67b9      	str	r1, [r7, #120]	; 0x78
 80042bc:	415b      	adcs	r3, r3
 80042be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042c0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80042c4:	4641      	mov	r1, r8
 80042c6:	1851      	adds	r1, r2, r1
 80042c8:	6739      	str	r1, [r7, #112]	; 0x70
 80042ca:	4649      	mov	r1, r9
 80042cc:	414b      	adcs	r3, r1
 80042ce:	677b      	str	r3, [r7, #116]	; 0x74
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80042dc:	4659      	mov	r1, fp
 80042de:	00cb      	lsls	r3, r1, #3
 80042e0:	4651      	mov	r1, sl
 80042e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042e6:	4651      	mov	r1, sl
 80042e8:	00ca      	lsls	r2, r1, #3
 80042ea:	4610      	mov	r0, r2
 80042ec:	4619      	mov	r1, r3
 80042ee:	4603      	mov	r3, r0
 80042f0:	4642      	mov	r2, r8
 80042f2:	189b      	adds	r3, r3, r2
 80042f4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80042f8:	464b      	mov	r3, r9
 80042fa:	460a      	mov	r2, r1
 80042fc:	eb42 0303 	adc.w	r3, r2, r3
 8004300:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004304:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004310:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004314:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8004318:	460b      	mov	r3, r1
 800431a:	18db      	adds	r3, r3, r3
 800431c:	66bb      	str	r3, [r7, #104]	; 0x68
 800431e:	4613      	mov	r3, r2
 8004320:	eb42 0303 	adc.w	r3, r2, r3
 8004324:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004326:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800432a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800432e:	f7fb ff9f 	bl	8000270 <__aeabi_uldivmod>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4611      	mov	r1, r2
 8004338:	4b39      	ldr	r3, [pc, #228]	; (8004420 <UART_SetConfig+0x528>)
 800433a:	fba3 2301 	umull	r2, r3, r3, r1
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2264      	movs	r2, #100	; 0x64
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	1acb      	subs	r3, r1, r3
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800434e:	4b34      	ldr	r3, [pc, #208]	; (8004420 <UART_SetConfig+0x528>)
 8004350:	fba3 2302 	umull	r2, r3, r3, r2
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800435c:	441c      	add	r4, r3
 800435e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004362:	2200      	movs	r2, #0
 8004364:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004368:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800436c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004370:	4642      	mov	r2, r8
 8004372:	464b      	mov	r3, r9
 8004374:	1891      	adds	r1, r2, r2
 8004376:	6639      	str	r1, [r7, #96]	; 0x60
 8004378:	415b      	adcs	r3, r3
 800437a:	667b      	str	r3, [r7, #100]	; 0x64
 800437c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004380:	4641      	mov	r1, r8
 8004382:	1851      	adds	r1, r2, r1
 8004384:	65b9      	str	r1, [r7, #88]	; 0x58
 8004386:	4649      	mov	r1, r9
 8004388:	414b      	adcs	r3, r1
 800438a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004398:	4659      	mov	r1, fp
 800439a:	00cb      	lsls	r3, r1, #3
 800439c:	4651      	mov	r1, sl
 800439e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043a2:	4651      	mov	r1, sl
 80043a4:	00ca      	lsls	r2, r1, #3
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	4603      	mov	r3, r0
 80043ac:	4642      	mov	r2, r8
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80043b4:	464b      	mov	r3, r9
 80043b6:	460a      	mov	r2, r1
 80043b8:	eb42 0303 	adc.w	r3, r2, r3
 80043bc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80043c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80043cc:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80043d0:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80043d4:	460b      	mov	r3, r1
 80043d6:	18db      	adds	r3, r3, r3
 80043d8:	653b      	str	r3, [r7, #80]	; 0x50
 80043da:	4613      	mov	r3, r2
 80043dc:	eb42 0303 	adc.w	r3, r2, r3
 80043e0:	657b      	str	r3, [r7, #84]	; 0x54
 80043e2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043e6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80043ea:	f7fb ff41 	bl	8000270 <__aeabi_uldivmod>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <UART_SetConfig+0x528>)
 80043f4:	fba3 1302 	umull	r1, r3, r3, r2
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	2164      	movs	r1, #100	; 0x64
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	3332      	adds	r3, #50	; 0x32
 8004406:	4a06      	ldr	r2, [pc, #24]	; (8004420 <UART_SetConfig+0x528>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	f003 0207 	and.w	r2, r3, #7
 8004412:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4422      	add	r2, r4
 800441a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800441c:	e232      	b.n	8004884 <UART_SetConfig+0x98c>
 800441e:	bf00      	nop
 8004420:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004424:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	4b8d      	ldr	r3, [pc, #564]	; (8004660 <UART_SetConfig+0x768>)
 800442c:	429a      	cmp	r2, r3
 800442e:	d006      	beq.n	800443e <UART_SetConfig+0x546>
 8004430:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4b8b      	ldr	r3, [pc, #556]	; (8004664 <UART_SetConfig+0x76c>)
 8004438:	429a      	cmp	r2, r3
 800443a:	f040 8117 	bne.w	800466c <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800443e:	f7fe f9e1 	bl	8002804 <HAL_RCC_GetPCLK2Freq>
 8004442:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004446:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800444a:	2200      	movs	r2, #0
 800444c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004450:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004454:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004458:	4622      	mov	r2, r4
 800445a:	462b      	mov	r3, r5
 800445c:	1891      	adds	r1, r2, r2
 800445e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004460:	415b      	adcs	r3, r3
 8004462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004464:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004468:	4621      	mov	r1, r4
 800446a:	eb12 0801 	adds.w	r8, r2, r1
 800446e:	4629      	mov	r1, r5
 8004470:	eb43 0901 	adc.w	r9, r3, r1
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004480:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004484:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004488:	4690      	mov	r8, r2
 800448a:	4699      	mov	r9, r3
 800448c:	4623      	mov	r3, r4
 800448e:	eb18 0303 	adds.w	r3, r8, r3
 8004492:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004496:	462b      	mov	r3, r5
 8004498:	eb49 0303 	adc.w	r3, r9, r3
 800449c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80044a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80044ac:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80044bc:	4629      	mov	r1, r5
 80044be:	008b      	lsls	r3, r1, #2
 80044c0:	4621      	mov	r1, r4
 80044c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044c6:	4621      	mov	r1, r4
 80044c8:	008a      	lsls	r2, r1, #2
 80044ca:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80044ce:	f7fb fecf 	bl	8000270 <__aeabi_uldivmod>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4b64      	ldr	r3, [pc, #400]	; (8004668 <UART_SetConfig+0x770>)
 80044d8:	fba3 2302 	umull	r2, r3, r3, r2
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	011c      	lsls	r4, r3, #4
 80044e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044e4:	2200      	movs	r2, #0
 80044e6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80044ea:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80044ee:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80044f2:	4642      	mov	r2, r8
 80044f4:	464b      	mov	r3, r9
 80044f6:	1891      	adds	r1, r2, r2
 80044f8:	6439      	str	r1, [r7, #64]	; 0x40
 80044fa:	415b      	adcs	r3, r3
 80044fc:	647b      	str	r3, [r7, #68]	; 0x44
 80044fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004502:	4641      	mov	r1, r8
 8004504:	1851      	adds	r1, r2, r1
 8004506:	63b9      	str	r1, [r7, #56]	; 0x38
 8004508:	4649      	mov	r1, r9
 800450a:	414b      	adcs	r3, r1
 800450c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800451a:	4659      	mov	r1, fp
 800451c:	00cb      	lsls	r3, r1, #3
 800451e:	4651      	mov	r1, sl
 8004520:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004524:	4651      	mov	r1, sl
 8004526:	00ca      	lsls	r2, r1, #3
 8004528:	4610      	mov	r0, r2
 800452a:	4619      	mov	r1, r3
 800452c:	4603      	mov	r3, r0
 800452e:	4642      	mov	r2, r8
 8004530:	189b      	adds	r3, r3, r2
 8004532:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004536:	464b      	mov	r3, r9
 8004538:	460a      	mov	r2, r1
 800453a:	eb42 0303 	adc.w	r3, r2, r3
 800453e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004542:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800454e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800455e:	4649      	mov	r1, r9
 8004560:	008b      	lsls	r3, r1, #2
 8004562:	4641      	mov	r1, r8
 8004564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004568:	4641      	mov	r1, r8
 800456a:	008a      	lsls	r2, r1, #2
 800456c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004570:	f7fb fe7e 	bl	8000270 <__aeabi_uldivmod>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4b3b      	ldr	r3, [pc, #236]	; (8004668 <UART_SetConfig+0x770>)
 800457a:	fba3 1302 	umull	r1, r3, r3, r2
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	2164      	movs	r1, #100	; 0x64
 8004582:	fb01 f303 	mul.w	r3, r1, r3
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	3332      	adds	r3, #50	; 0x32
 800458c:	4a36      	ldr	r2, [pc, #216]	; (8004668 <UART_SetConfig+0x770>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004598:	441c      	add	r4, r3
 800459a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80045a4:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80045a8:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 80045ac:	4642      	mov	r2, r8
 80045ae:	464b      	mov	r3, r9
 80045b0:	1891      	adds	r1, r2, r2
 80045b2:	6339      	str	r1, [r7, #48]	; 0x30
 80045b4:	415b      	adcs	r3, r3
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34
 80045b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045bc:	4641      	mov	r1, r8
 80045be:	1851      	adds	r1, r2, r1
 80045c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80045c2:	4649      	mov	r1, r9
 80045c4:	414b      	adcs	r3, r1
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80045d4:	4659      	mov	r1, fp
 80045d6:	00cb      	lsls	r3, r1, #3
 80045d8:	4651      	mov	r1, sl
 80045da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045de:	4651      	mov	r1, sl
 80045e0:	00ca      	lsls	r2, r1, #3
 80045e2:	4610      	mov	r0, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	4603      	mov	r3, r0
 80045e8:	4642      	mov	r2, r8
 80045ea:	189b      	adds	r3, r3, r2
 80045ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80045f0:	464b      	mov	r3, r9
 80045f2:	460a      	mov	r2, r1
 80045f4:	eb42 0303 	adc.w	r3, r2, r3
 80045f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80045fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004608:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8004618:	4649      	mov	r1, r9
 800461a:	008b      	lsls	r3, r1, #2
 800461c:	4641      	mov	r1, r8
 800461e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004622:	4641      	mov	r1, r8
 8004624:	008a      	lsls	r2, r1, #2
 8004626:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800462a:	f7fb fe21 	bl	8000270 <__aeabi_uldivmod>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4b0d      	ldr	r3, [pc, #52]	; (8004668 <UART_SetConfig+0x770>)
 8004634:	fba3 1302 	umull	r1, r3, r3, r2
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	2164      	movs	r1, #100	; 0x64
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	3332      	adds	r3, #50	; 0x32
 8004646:	4a08      	ldr	r2, [pc, #32]	; (8004668 <UART_SetConfig+0x770>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	095b      	lsrs	r3, r3, #5
 800464e:	f003 020f 	and.w	r2, r3, #15
 8004652:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4422      	add	r2, r4
 800465a:	609a      	str	r2, [r3, #8]
 800465c:	e112      	b.n	8004884 <UART_SetConfig+0x98c>
 800465e:	bf00      	nop
 8004660:	40011000 	.word	0x40011000
 8004664:	40011400 	.word	0x40011400
 8004668:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800466c:	f7fe f8b6 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 8004670:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004674:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004678:	2200      	movs	r2, #0
 800467a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800467e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004682:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004686:	4642      	mov	r2, r8
 8004688:	464b      	mov	r3, r9
 800468a:	1891      	adds	r1, r2, r2
 800468c:	6239      	str	r1, [r7, #32]
 800468e:	415b      	adcs	r3, r3
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
 8004692:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004696:	4641      	mov	r1, r8
 8004698:	1854      	adds	r4, r2, r1
 800469a:	4649      	mov	r1, r9
 800469c:	eb43 0501 	adc.w	r5, r3, r1
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	00eb      	lsls	r3, r5, #3
 80046aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ae:	00e2      	lsls	r2, r4, #3
 80046b0:	4614      	mov	r4, r2
 80046b2:	461d      	mov	r5, r3
 80046b4:	4643      	mov	r3, r8
 80046b6:	18e3      	adds	r3, r4, r3
 80046b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80046bc:	464b      	mov	r3, r9
 80046be:	eb45 0303 	adc.w	r3, r5, r3
 80046c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80046c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80046d2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80046e2:	4629      	mov	r1, r5
 80046e4:	008b      	lsls	r3, r1, #2
 80046e6:	4621      	mov	r1, r4
 80046e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ec:	4621      	mov	r1, r4
 80046ee:	008a      	lsls	r2, r1, #2
 80046f0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80046f4:	f7fb fdbc 	bl	8000270 <__aeabi_uldivmod>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4b64      	ldr	r3, [pc, #400]	; (8004890 <UART_SetConfig+0x998>)
 80046fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	011c      	lsls	r4, r3, #4
 8004706:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800470a:	2200      	movs	r2, #0
 800470c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004710:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004714:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004718:	4642      	mov	r2, r8
 800471a:	464b      	mov	r3, r9
 800471c:	1891      	adds	r1, r2, r2
 800471e:	61b9      	str	r1, [r7, #24]
 8004720:	415b      	adcs	r3, r3
 8004722:	61fb      	str	r3, [r7, #28]
 8004724:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004728:	4641      	mov	r1, r8
 800472a:	1851      	adds	r1, r2, r1
 800472c:	6139      	str	r1, [r7, #16]
 800472e:	4649      	mov	r1, r9
 8004730:	414b      	adcs	r3, r1
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004740:	4659      	mov	r1, fp
 8004742:	00cb      	lsls	r3, r1, #3
 8004744:	4651      	mov	r1, sl
 8004746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800474a:	4651      	mov	r1, sl
 800474c:	00ca      	lsls	r2, r1, #3
 800474e:	4610      	mov	r0, r2
 8004750:	4619      	mov	r1, r3
 8004752:	4603      	mov	r3, r0
 8004754:	4642      	mov	r2, r8
 8004756:	189b      	adds	r3, r3, r2
 8004758:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800475c:	464b      	mov	r3, r9
 800475e:	460a      	mov	r2, r1
 8004760:	eb42 0303 	adc.w	r3, r2, r3
 8004764:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004768:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004774:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004784:	4649      	mov	r1, r9
 8004786:	008b      	lsls	r3, r1, #2
 8004788:	4641      	mov	r1, r8
 800478a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800478e:	4641      	mov	r1, r8
 8004790:	008a      	lsls	r2, r1, #2
 8004792:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004796:	f7fb fd6b 	bl	8000270 <__aeabi_uldivmod>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4b3c      	ldr	r3, [pc, #240]	; (8004890 <UART_SetConfig+0x998>)
 80047a0:	fba3 1302 	umull	r1, r3, r3, r2
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	2164      	movs	r1, #100	; 0x64
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	3332      	adds	r3, #50	; 0x32
 80047b2:	4a37      	ldr	r2, [pc, #220]	; (8004890 <UART_SetConfig+0x998>)
 80047b4:	fba2 2303 	umull	r2, r3, r2, r3
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047be:	441c      	add	r4, r3
 80047c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047c4:	2200      	movs	r2, #0
 80047c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047ce:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80047d2:	4642      	mov	r2, r8
 80047d4:	464b      	mov	r3, r9
 80047d6:	1891      	adds	r1, r2, r2
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	415b      	adcs	r3, r3
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047e2:	4641      	mov	r1, r8
 80047e4:	1851      	adds	r1, r2, r1
 80047e6:	6039      	str	r1, [r7, #0]
 80047e8:	4649      	mov	r1, r9
 80047ea:	414b      	adcs	r3, r1
 80047ec:	607b      	str	r3, [r7, #4]
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047fa:	4659      	mov	r1, fp
 80047fc:	00cb      	lsls	r3, r1, #3
 80047fe:	4651      	mov	r1, sl
 8004800:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004804:	4651      	mov	r1, sl
 8004806:	00ca      	lsls	r2, r1, #3
 8004808:	4610      	mov	r0, r2
 800480a:	4619      	mov	r1, r3
 800480c:	4603      	mov	r3, r0
 800480e:	4642      	mov	r2, r8
 8004810:	189b      	adds	r3, r3, r2
 8004812:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004816:	464b      	mov	r3, r9
 8004818:	460a      	mov	r2, r1
 800481a:	eb42 0303 	adc.w	r3, r2, r3
 800481e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004822:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800482e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800483e:	4649      	mov	r1, r9
 8004840:	008b      	lsls	r3, r1, #2
 8004842:	4641      	mov	r1, r8
 8004844:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004848:	4641      	mov	r1, r8
 800484a:	008a      	lsls	r2, r1, #2
 800484c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004850:	f7fb fd0e 	bl	8000270 <__aeabi_uldivmod>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <UART_SetConfig+0x998>)
 800485a:	fba3 1302 	umull	r1, r3, r3, r2
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	2164      	movs	r1, #100	; 0x64
 8004862:	fb01 f303 	mul.w	r3, r1, r3
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	3332      	adds	r3, #50	; 0x32
 800486c:	4a08      	ldr	r2, [pc, #32]	; (8004890 <UART_SetConfig+0x998>)
 800486e:	fba2 2303 	umull	r2, r3, r2, r3
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	f003 020f 	and.w	r2, r3, #15
 8004878:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4422      	add	r2, r4
 8004880:	609a      	str	r2, [r3, #8]
}
 8004882:	e7ff      	b.n	8004884 <UART_SetConfig+0x98c>
 8004884:	bf00      	nop
 8004886:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800488a:	46bd      	mov	sp, r7
 800488c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004890:	51eb851f 	.word	0x51eb851f

08004894 <__errno>:
 8004894:	4b01      	ldr	r3, [pc, #4]	; (800489c <__errno+0x8>)
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	2000000c 	.word	0x2000000c

080048a0 <__libc_init_array>:
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	4d0d      	ldr	r5, [pc, #52]	; (80048d8 <__libc_init_array+0x38>)
 80048a4:	4c0d      	ldr	r4, [pc, #52]	; (80048dc <__libc_init_array+0x3c>)
 80048a6:	1b64      	subs	r4, r4, r5
 80048a8:	10a4      	asrs	r4, r4, #2
 80048aa:	2600      	movs	r6, #0
 80048ac:	42a6      	cmp	r6, r4
 80048ae:	d109      	bne.n	80048c4 <__libc_init_array+0x24>
 80048b0:	4d0b      	ldr	r5, [pc, #44]	; (80048e0 <__libc_init_array+0x40>)
 80048b2:	4c0c      	ldr	r4, [pc, #48]	; (80048e4 <__libc_init_array+0x44>)
 80048b4:	f000 ffae 	bl	8005814 <_init>
 80048b8:	1b64      	subs	r4, r4, r5
 80048ba:	10a4      	asrs	r4, r4, #2
 80048bc:	2600      	movs	r6, #0
 80048be:	42a6      	cmp	r6, r4
 80048c0:	d105      	bne.n	80048ce <__libc_init_array+0x2e>
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c8:	4798      	blx	r3
 80048ca:	3601      	adds	r6, #1
 80048cc:	e7ee      	b.n	80048ac <__libc_init_array+0xc>
 80048ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d2:	4798      	blx	r3
 80048d4:	3601      	adds	r6, #1
 80048d6:	e7f2      	b.n	80048be <__libc_init_array+0x1e>
 80048d8:	08005954 	.word	0x08005954
 80048dc:	08005954 	.word	0x08005954
 80048e0:	08005954 	.word	0x08005954
 80048e4:	08005958 	.word	0x08005958

080048e8 <memset>:
 80048e8:	4402      	add	r2, r0
 80048ea:	4603      	mov	r3, r0
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d100      	bne.n	80048f2 <memset+0xa>
 80048f0:	4770      	bx	lr
 80048f2:	f803 1b01 	strb.w	r1, [r3], #1
 80048f6:	e7f9      	b.n	80048ec <memset+0x4>

080048f8 <iprintf>:
 80048f8:	b40f      	push	{r0, r1, r2, r3}
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <iprintf+0x2c>)
 80048fc:	b513      	push	{r0, r1, r4, lr}
 80048fe:	681c      	ldr	r4, [r3, #0]
 8004900:	b124      	cbz	r4, 800490c <iprintf+0x14>
 8004902:	69a3      	ldr	r3, [r4, #24]
 8004904:	b913      	cbnz	r3, 800490c <iprintf+0x14>
 8004906:	4620      	mov	r0, r4
 8004908:	f000 f866 	bl	80049d8 <__sinit>
 800490c:	ab05      	add	r3, sp, #20
 800490e:	9a04      	ldr	r2, [sp, #16]
 8004910:	68a1      	ldr	r1, [r4, #8]
 8004912:	9301      	str	r3, [sp, #4]
 8004914:	4620      	mov	r0, r4
 8004916:	f000 f9bd 	bl	8004c94 <_vfiprintf_r>
 800491a:	b002      	add	sp, #8
 800491c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004920:	b004      	add	sp, #16
 8004922:	4770      	bx	lr
 8004924:	2000000c 	.word	0x2000000c

08004928 <std>:
 8004928:	2300      	movs	r3, #0
 800492a:	b510      	push	{r4, lr}
 800492c:	4604      	mov	r4, r0
 800492e:	e9c0 3300 	strd	r3, r3, [r0]
 8004932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004936:	6083      	str	r3, [r0, #8]
 8004938:	8181      	strh	r1, [r0, #12]
 800493a:	6643      	str	r3, [r0, #100]	; 0x64
 800493c:	81c2      	strh	r2, [r0, #14]
 800493e:	6183      	str	r3, [r0, #24]
 8004940:	4619      	mov	r1, r3
 8004942:	2208      	movs	r2, #8
 8004944:	305c      	adds	r0, #92	; 0x5c
 8004946:	f7ff ffcf 	bl	80048e8 <memset>
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <std+0x38>)
 800494c:	6263      	str	r3, [r4, #36]	; 0x24
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <std+0x3c>)
 8004950:	62a3      	str	r3, [r4, #40]	; 0x28
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <std+0x40>)
 8004954:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <std+0x44>)
 8004958:	6224      	str	r4, [r4, #32]
 800495a:	6323      	str	r3, [r4, #48]	; 0x30
 800495c:	bd10      	pop	{r4, pc}
 800495e:	bf00      	nop
 8004960:	0800523d 	.word	0x0800523d
 8004964:	0800525f 	.word	0x0800525f
 8004968:	08005297 	.word	0x08005297
 800496c:	080052bb 	.word	0x080052bb

08004970 <_cleanup_r>:
 8004970:	4901      	ldr	r1, [pc, #4]	; (8004978 <_cleanup_r+0x8>)
 8004972:	f000 b8af 	b.w	8004ad4 <_fwalk_reent>
 8004976:	bf00      	nop
 8004978:	08005595 	.word	0x08005595

0800497c <__sfmoreglue>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	2268      	movs	r2, #104	; 0x68
 8004980:	1e4d      	subs	r5, r1, #1
 8004982:	4355      	muls	r5, r2
 8004984:	460e      	mov	r6, r1
 8004986:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800498a:	f000 f8e5 	bl	8004b58 <_malloc_r>
 800498e:	4604      	mov	r4, r0
 8004990:	b140      	cbz	r0, 80049a4 <__sfmoreglue+0x28>
 8004992:	2100      	movs	r1, #0
 8004994:	e9c0 1600 	strd	r1, r6, [r0]
 8004998:	300c      	adds	r0, #12
 800499a:	60a0      	str	r0, [r4, #8]
 800499c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049a0:	f7ff ffa2 	bl	80048e8 <memset>
 80049a4:	4620      	mov	r0, r4
 80049a6:	bd70      	pop	{r4, r5, r6, pc}

080049a8 <__sfp_lock_acquire>:
 80049a8:	4801      	ldr	r0, [pc, #4]	; (80049b0 <__sfp_lock_acquire+0x8>)
 80049aa:	f000 b8b3 	b.w	8004b14 <__retarget_lock_acquire_recursive>
 80049ae:	bf00      	nop
 80049b0:	200132c1 	.word	0x200132c1

080049b4 <__sfp_lock_release>:
 80049b4:	4801      	ldr	r0, [pc, #4]	; (80049bc <__sfp_lock_release+0x8>)
 80049b6:	f000 b8ae 	b.w	8004b16 <__retarget_lock_release_recursive>
 80049ba:	bf00      	nop
 80049bc:	200132c1 	.word	0x200132c1

080049c0 <__sinit_lock_acquire>:
 80049c0:	4801      	ldr	r0, [pc, #4]	; (80049c8 <__sinit_lock_acquire+0x8>)
 80049c2:	f000 b8a7 	b.w	8004b14 <__retarget_lock_acquire_recursive>
 80049c6:	bf00      	nop
 80049c8:	200132c2 	.word	0x200132c2

080049cc <__sinit_lock_release>:
 80049cc:	4801      	ldr	r0, [pc, #4]	; (80049d4 <__sinit_lock_release+0x8>)
 80049ce:	f000 b8a2 	b.w	8004b16 <__retarget_lock_release_recursive>
 80049d2:	bf00      	nop
 80049d4:	200132c2 	.word	0x200132c2

080049d8 <__sinit>:
 80049d8:	b510      	push	{r4, lr}
 80049da:	4604      	mov	r4, r0
 80049dc:	f7ff fff0 	bl	80049c0 <__sinit_lock_acquire>
 80049e0:	69a3      	ldr	r3, [r4, #24]
 80049e2:	b11b      	cbz	r3, 80049ec <__sinit+0x14>
 80049e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e8:	f7ff bff0 	b.w	80049cc <__sinit_lock_release>
 80049ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049f0:	6523      	str	r3, [r4, #80]	; 0x50
 80049f2:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <__sinit+0x68>)
 80049f4:	4a13      	ldr	r2, [pc, #76]	; (8004a44 <__sinit+0x6c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80049fa:	42a3      	cmp	r3, r4
 80049fc:	bf04      	itt	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	61a3      	streq	r3, [r4, #24]
 8004a02:	4620      	mov	r0, r4
 8004a04:	f000 f820 	bl	8004a48 <__sfp>
 8004a08:	6060      	str	r0, [r4, #4]
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f000 f81c 	bl	8004a48 <__sfp>
 8004a10:	60a0      	str	r0, [r4, #8]
 8004a12:	4620      	mov	r0, r4
 8004a14:	f000 f818 	bl	8004a48 <__sfp>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	60e0      	str	r0, [r4, #12]
 8004a1c:	2104      	movs	r1, #4
 8004a1e:	6860      	ldr	r0, [r4, #4]
 8004a20:	f7ff ff82 	bl	8004928 <std>
 8004a24:	68a0      	ldr	r0, [r4, #8]
 8004a26:	2201      	movs	r2, #1
 8004a28:	2109      	movs	r1, #9
 8004a2a:	f7ff ff7d 	bl	8004928 <std>
 8004a2e:	68e0      	ldr	r0, [r4, #12]
 8004a30:	2202      	movs	r2, #2
 8004a32:	2112      	movs	r1, #18
 8004a34:	f7ff ff78 	bl	8004928 <std>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	61a3      	str	r3, [r4, #24]
 8004a3c:	e7d2      	b.n	80049e4 <__sinit+0xc>
 8004a3e:	bf00      	nop
 8004a40:	080058b4 	.word	0x080058b4
 8004a44:	08004971 	.word	0x08004971

08004a48 <__sfp>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	4607      	mov	r7, r0
 8004a4c:	f7ff ffac 	bl	80049a8 <__sfp_lock_acquire>
 8004a50:	4b1e      	ldr	r3, [pc, #120]	; (8004acc <__sfp+0x84>)
 8004a52:	681e      	ldr	r6, [r3, #0]
 8004a54:	69b3      	ldr	r3, [r6, #24]
 8004a56:	b913      	cbnz	r3, 8004a5e <__sfp+0x16>
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f7ff ffbd 	bl	80049d8 <__sinit>
 8004a5e:	3648      	adds	r6, #72	; 0x48
 8004a60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	d503      	bpl.n	8004a70 <__sfp+0x28>
 8004a68:	6833      	ldr	r3, [r6, #0]
 8004a6a:	b30b      	cbz	r3, 8004ab0 <__sfp+0x68>
 8004a6c:	6836      	ldr	r6, [r6, #0]
 8004a6e:	e7f7      	b.n	8004a60 <__sfp+0x18>
 8004a70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a74:	b9d5      	cbnz	r5, 8004aac <__sfp+0x64>
 8004a76:	4b16      	ldr	r3, [pc, #88]	; (8004ad0 <__sfp+0x88>)
 8004a78:	60e3      	str	r3, [r4, #12]
 8004a7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a7e:	6665      	str	r5, [r4, #100]	; 0x64
 8004a80:	f000 f847 	bl	8004b12 <__retarget_lock_init_recursive>
 8004a84:	f7ff ff96 	bl	80049b4 <__sfp_lock_release>
 8004a88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a90:	6025      	str	r5, [r4, #0]
 8004a92:	61a5      	str	r5, [r4, #24]
 8004a94:	2208      	movs	r2, #8
 8004a96:	4629      	mov	r1, r5
 8004a98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a9c:	f7ff ff24 	bl	80048e8 <memset>
 8004aa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004aa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aac:	3468      	adds	r4, #104	; 0x68
 8004aae:	e7d9      	b.n	8004a64 <__sfp+0x1c>
 8004ab0:	2104      	movs	r1, #4
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	f7ff ff62 	bl	800497c <__sfmoreglue>
 8004ab8:	4604      	mov	r4, r0
 8004aba:	6030      	str	r0, [r6, #0]
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d1d5      	bne.n	8004a6c <__sfp+0x24>
 8004ac0:	f7ff ff78 	bl	80049b4 <__sfp_lock_release>
 8004ac4:	230c      	movs	r3, #12
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	e7ee      	b.n	8004aa8 <__sfp+0x60>
 8004aca:	bf00      	nop
 8004acc:	080058b4 	.word	0x080058b4
 8004ad0:	ffff0001 	.word	0xffff0001

08004ad4 <_fwalk_reent>:
 8004ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad8:	4606      	mov	r6, r0
 8004ada:	4688      	mov	r8, r1
 8004adc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ae0:	2700      	movs	r7, #0
 8004ae2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ae6:	f1b9 0901 	subs.w	r9, r9, #1
 8004aea:	d505      	bpl.n	8004af8 <_fwalk_reent+0x24>
 8004aec:	6824      	ldr	r4, [r4, #0]
 8004aee:	2c00      	cmp	r4, #0
 8004af0:	d1f7      	bne.n	8004ae2 <_fwalk_reent+0xe>
 8004af2:	4638      	mov	r0, r7
 8004af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004af8:	89ab      	ldrh	r3, [r5, #12]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d907      	bls.n	8004b0e <_fwalk_reent+0x3a>
 8004afe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b02:	3301      	adds	r3, #1
 8004b04:	d003      	beq.n	8004b0e <_fwalk_reent+0x3a>
 8004b06:	4629      	mov	r1, r5
 8004b08:	4630      	mov	r0, r6
 8004b0a:	47c0      	blx	r8
 8004b0c:	4307      	orrs	r7, r0
 8004b0e:	3568      	adds	r5, #104	; 0x68
 8004b10:	e7e9      	b.n	8004ae6 <_fwalk_reent+0x12>

08004b12 <__retarget_lock_init_recursive>:
 8004b12:	4770      	bx	lr

08004b14 <__retarget_lock_acquire_recursive>:
 8004b14:	4770      	bx	lr

08004b16 <__retarget_lock_release_recursive>:
 8004b16:	4770      	bx	lr

08004b18 <sbrk_aligned>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4e0e      	ldr	r6, [pc, #56]	; (8004b54 <sbrk_aligned+0x3c>)
 8004b1c:	460c      	mov	r4, r1
 8004b1e:	6831      	ldr	r1, [r6, #0]
 8004b20:	4605      	mov	r5, r0
 8004b22:	b911      	cbnz	r1, 8004b2a <sbrk_aligned+0x12>
 8004b24:	f000 fb7a 	bl	800521c <_sbrk_r>
 8004b28:	6030      	str	r0, [r6, #0]
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f000 fb75 	bl	800521c <_sbrk_r>
 8004b32:	1c43      	adds	r3, r0, #1
 8004b34:	d00a      	beq.n	8004b4c <sbrk_aligned+0x34>
 8004b36:	1cc4      	adds	r4, r0, #3
 8004b38:	f024 0403 	bic.w	r4, r4, #3
 8004b3c:	42a0      	cmp	r0, r4
 8004b3e:	d007      	beq.n	8004b50 <sbrk_aligned+0x38>
 8004b40:	1a21      	subs	r1, r4, r0
 8004b42:	4628      	mov	r0, r5
 8004b44:	f000 fb6a 	bl	800521c <_sbrk_r>
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d101      	bne.n	8004b50 <sbrk_aligned+0x38>
 8004b4c:	f04f 34ff 	mov.w	r4, #4294967295
 8004b50:	4620      	mov	r0, r4
 8004b52:	bd70      	pop	{r4, r5, r6, pc}
 8004b54:	200132c8 	.word	0x200132c8

08004b58 <_malloc_r>:
 8004b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b5c:	1ccd      	adds	r5, r1, #3
 8004b5e:	f025 0503 	bic.w	r5, r5, #3
 8004b62:	3508      	adds	r5, #8
 8004b64:	2d0c      	cmp	r5, #12
 8004b66:	bf38      	it	cc
 8004b68:	250c      	movcc	r5, #12
 8004b6a:	2d00      	cmp	r5, #0
 8004b6c:	4607      	mov	r7, r0
 8004b6e:	db01      	blt.n	8004b74 <_malloc_r+0x1c>
 8004b70:	42a9      	cmp	r1, r5
 8004b72:	d905      	bls.n	8004b80 <_malloc_r+0x28>
 8004b74:	230c      	movs	r3, #12
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	2600      	movs	r6, #0
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b80:	4e2e      	ldr	r6, [pc, #184]	; (8004c3c <_malloc_r+0xe4>)
 8004b82:	f000 fdbb 	bl	80056fc <__malloc_lock>
 8004b86:	6833      	ldr	r3, [r6, #0]
 8004b88:	461c      	mov	r4, r3
 8004b8a:	bb34      	cbnz	r4, 8004bda <_malloc_r+0x82>
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	4638      	mov	r0, r7
 8004b90:	f7ff ffc2 	bl	8004b18 <sbrk_aligned>
 8004b94:	1c43      	adds	r3, r0, #1
 8004b96:	4604      	mov	r4, r0
 8004b98:	d14d      	bne.n	8004c36 <_malloc_r+0xde>
 8004b9a:	6834      	ldr	r4, [r6, #0]
 8004b9c:	4626      	mov	r6, r4
 8004b9e:	2e00      	cmp	r6, #0
 8004ba0:	d140      	bne.n	8004c24 <_malloc_r+0xcc>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	eb04 0803 	add.w	r8, r4, r3
 8004bac:	f000 fb36 	bl	800521c <_sbrk_r>
 8004bb0:	4580      	cmp	r8, r0
 8004bb2:	d13a      	bne.n	8004c2a <_malloc_r+0xd2>
 8004bb4:	6821      	ldr	r1, [r4, #0]
 8004bb6:	3503      	adds	r5, #3
 8004bb8:	1a6d      	subs	r5, r5, r1
 8004bba:	f025 0503 	bic.w	r5, r5, #3
 8004bbe:	3508      	adds	r5, #8
 8004bc0:	2d0c      	cmp	r5, #12
 8004bc2:	bf38      	it	cc
 8004bc4:	250c      	movcc	r5, #12
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	4638      	mov	r0, r7
 8004bca:	f7ff ffa5 	bl	8004b18 <sbrk_aligned>
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d02b      	beq.n	8004c2a <_malloc_r+0xd2>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	442b      	add	r3, r5
 8004bd6:	6023      	str	r3, [r4, #0]
 8004bd8:	e00e      	b.n	8004bf8 <_malloc_r+0xa0>
 8004bda:	6822      	ldr	r2, [r4, #0]
 8004bdc:	1b52      	subs	r2, r2, r5
 8004bde:	d41e      	bmi.n	8004c1e <_malloc_r+0xc6>
 8004be0:	2a0b      	cmp	r2, #11
 8004be2:	d916      	bls.n	8004c12 <_malloc_r+0xba>
 8004be4:	1961      	adds	r1, r4, r5
 8004be6:	42a3      	cmp	r3, r4
 8004be8:	6025      	str	r5, [r4, #0]
 8004bea:	bf18      	it	ne
 8004bec:	6059      	strne	r1, [r3, #4]
 8004bee:	6863      	ldr	r3, [r4, #4]
 8004bf0:	bf08      	it	eq
 8004bf2:	6031      	streq	r1, [r6, #0]
 8004bf4:	5162      	str	r2, [r4, r5]
 8004bf6:	604b      	str	r3, [r1, #4]
 8004bf8:	4638      	mov	r0, r7
 8004bfa:	f104 060b 	add.w	r6, r4, #11
 8004bfe:	f000 fd83 	bl	8005708 <__malloc_unlock>
 8004c02:	f026 0607 	bic.w	r6, r6, #7
 8004c06:	1d23      	adds	r3, r4, #4
 8004c08:	1af2      	subs	r2, r6, r3
 8004c0a:	d0b6      	beq.n	8004b7a <_malloc_r+0x22>
 8004c0c:	1b9b      	subs	r3, r3, r6
 8004c0e:	50a3      	str	r3, [r4, r2]
 8004c10:	e7b3      	b.n	8004b7a <_malloc_r+0x22>
 8004c12:	6862      	ldr	r2, [r4, #4]
 8004c14:	42a3      	cmp	r3, r4
 8004c16:	bf0c      	ite	eq
 8004c18:	6032      	streq	r2, [r6, #0]
 8004c1a:	605a      	strne	r2, [r3, #4]
 8004c1c:	e7ec      	b.n	8004bf8 <_malloc_r+0xa0>
 8004c1e:	4623      	mov	r3, r4
 8004c20:	6864      	ldr	r4, [r4, #4]
 8004c22:	e7b2      	b.n	8004b8a <_malloc_r+0x32>
 8004c24:	4634      	mov	r4, r6
 8004c26:	6876      	ldr	r6, [r6, #4]
 8004c28:	e7b9      	b.n	8004b9e <_malloc_r+0x46>
 8004c2a:	230c      	movs	r3, #12
 8004c2c:	603b      	str	r3, [r7, #0]
 8004c2e:	4638      	mov	r0, r7
 8004c30:	f000 fd6a 	bl	8005708 <__malloc_unlock>
 8004c34:	e7a1      	b.n	8004b7a <_malloc_r+0x22>
 8004c36:	6025      	str	r5, [r4, #0]
 8004c38:	e7de      	b.n	8004bf8 <_malloc_r+0xa0>
 8004c3a:	bf00      	nop
 8004c3c:	200132c4 	.word	0x200132c4

08004c40 <__sfputc_r>:
 8004c40:	6893      	ldr	r3, [r2, #8]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	b410      	push	{r4}
 8004c48:	6093      	str	r3, [r2, #8]
 8004c4a:	da08      	bge.n	8004c5e <__sfputc_r+0x1e>
 8004c4c:	6994      	ldr	r4, [r2, #24]
 8004c4e:	42a3      	cmp	r3, r4
 8004c50:	db01      	blt.n	8004c56 <__sfputc_r+0x16>
 8004c52:	290a      	cmp	r1, #10
 8004c54:	d103      	bne.n	8004c5e <__sfputc_r+0x1e>
 8004c56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c5a:	f000 bb33 	b.w	80052c4 <__swbuf_r>
 8004c5e:	6813      	ldr	r3, [r2, #0]
 8004c60:	1c58      	adds	r0, r3, #1
 8004c62:	6010      	str	r0, [r2, #0]
 8004c64:	7019      	strb	r1, [r3, #0]
 8004c66:	4608      	mov	r0, r1
 8004c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <__sfputs_r>:
 8004c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c70:	4606      	mov	r6, r0
 8004c72:	460f      	mov	r7, r1
 8004c74:	4614      	mov	r4, r2
 8004c76:	18d5      	adds	r5, r2, r3
 8004c78:	42ac      	cmp	r4, r5
 8004c7a:	d101      	bne.n	8004c80 <__sfputs_r+0x12>
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	e007      	b.n	8004c90 <__sfputs_r+0x22>
 8004c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c84:	463a      	mov	r2, r7
 8004c86:	4630      	mov	r0, r6
 8004c88:	f7ff ffda 	bl	8004c40 <__sfputc_r>
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	d1f3      	bne.n	8004c78 <__sfputs_r+0xa>
 8004c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c94 <_vfiprintf_r>:
 8004c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c98:	460d      	mov	r5, r1
 8004c9a:	b09d      	sub	sp, #116	; 0x74
 8004c9c:	4614      	mov	r4, r2
 8004c9e:	4698      	mov	r8, r3
 8004ca0:	4606      	mov	r6, r0
 8004ca2:	b118      	cbz	r0, 8004cac <_vfiprintf_r+0x18>
 8004ca4:	6983      	ldr	r3, [r0, #24]
 8004ca6:	b90b      	cbnz	r3, 8004cac <_vfiprintf_r+0x18>
 8004ca8:	f7ff fe96 	bl	80049d8 <__sinit>
 8004cac:	4b89      	ldr	r3, [pc, #548]	; (8004ed4 <_vfiprintf_r+0x240>)
 8004cae:	429d      	cmp	r5, r3
 8004cb0:	d11b      	bne.n	8004cea <_vfiprintf_r+0x56>
 8004cb2:	6875      	ldr	r5, [r6, #4]
 8004cb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cb6:	07d9      	lsls	r1, r3, #31
 8004cb8:	d405      	bmi.n	8004cc6 <_vfiprintf_r+0x32>
 8004cba:	89ab      	ldrh	r3, [r5, #12]
 8004cbc:	059a      	lsls	r2, r3, #22
 8004cbe:	d402      	bmi.n	8004cc6 <_vfiprintf_r+0x32>
 8004cc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cc2:	f7ff ff27 	bl	8004b14 <__retarget_lock_acquire_recursive>
 8004cc6:	89ab      	ldrh	r3, [r5, #12]
 8004cc8:	071b      	lsls	r3, r3, #28
 8004cca:	d501      	bpl.n	8004cd0 <_vfiprintf_r+0x3c>
 8004ccc:	692b      	ldr	r3, [r5, #16]
 8004cce:	b9eb      	cbnz	r3, 8004d0c <_vfiprintf_r+0x78>
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	f000 fb5a 	bl	800538c <__swsetup_r>
 8004cd8:	b1c0      	cbz	r0, 8004d0c <_vfiprintf_r+0x78>
 8004cda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cdc:	07dc      	lsls	r4, r3, #31
 8004cde:	d50e      	bpl.n	8004cfe <_vfiprintf_r+0x6a>
 8004ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce4:	b01d      	add	sp, #116	; 0x74
 8004ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cea:	4b7b      	ldr	r3, [pc, #492]	; (8004ed8 <_vfiprintf_r+0x244>)
 8004cec:	429d      	cmp	r5, r3
 8004cee:	d101      	bne.n	8004cf4 <_vfiprintf_r+0x60>
 8004cf0:	68b5      	ldr	r5, [r6, #8]
 8004cf2:	e7df      	b.n	8004cb4 <_vfiprintf_r+0x20>
 8004cf4:	4b79      	ldr	r3, [pc, #484]	; (8004edc <_vfiprintf_r+0x248>)
 8004cf6:	429d      	cmp	r5, r3
 8004cf8:	bf08      	it	eq
 8004cfa:	68f5      	ldreq	r5, [r6, #12]
 8004cfc:	e7da      	b.n	8004cb4 <_vfiprintf_r+0x20>
 8004cfe:	89ab      	ldrh	r3, [r5, #12]
 8004d00:	0598      	lsls	r0, r3, #22
 8004d02:	d4ed      	bmi.n	8004ce0 <_vfiprintf_r+0x4c>
 8004d04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d06:	f7ff ff06 	bl	8004b16 <__retarget_lock_release_recursive>
 8004d0a:	e7e9      	b.n	8004ce0 <_vfiprintf_r+0x4c>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d10:	2320      	movs	r3, #32
 8004d12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d16:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d1a:	2330      	movs	r3, #48	; 0x30
 8004d1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004ee0 <_vfiprintf_r+0x24c>
 8004d20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d24:	f04f 0901 	mov.w	r9, #1
 8004d28:	4623      	mov	r3, r4
 8004d2a:	469a      	mov	sl, r3
 8004d2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d30:	b10a      	cbz	r2, 8004d36 <_vfiprintf_r+0xa2>
 8004d32:	2a25      	cmp	r2, #37	; 0x25
 8004d34:	d1f9      	bne.n	8004d2a <_vfiprintf_r+0x96>
 8004d36:	ebba 0b04 	subs.w	fp, sl, r4
 8004d3a:	d00b      	beq.n	8004d54 <_vfiprintf_r+0xc0>
 8004d3c:	465b      	mov	r3, fp
 8004d3e:	4622      	mov	r2, r4
 8004d40:	4629      	mov	r1, r5
 8004d42:	4630      	mov	r0, r6
 8004d44:	f7ff ff93 	bl	8004c6e <__sfputs_r>
 8004d48:	3001      	adds	r0, #1
 8004d4a:	f000 80aa 	beq.w	8004ea2 <_vfiprintf_r+0x20e>
 8004d4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d50:	445a      	add	r2, fp
 8004d52:	9209      	str	r2, [sp, #36]	; 0x24
 8004d54:	f89a 3000 	ldrb.w	r3, [sl]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 80a2 	beq.w	8004ea2 <_vfiprintf_r+0x20e>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f04f 32ff 	mov.w	r2, #4294967295
 8004d64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d68:	f10a 0a01 	add.w	sl, sl, #1
 8004d6c:	9304      	str	r3, [sp, #16]
 8004d6e:	9307      	str	r3, [sp, #28]
 8004d70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d74:	931a      	str	r3, [sp, #104]	; 0x68
 8004d76:	4654      	mov	r4, sl
 8004d78:	2205      	movs	r2, #5
 8004d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d7e:	4858      	ldr	r0, [pc, #352]	; (8004ee0 <_vfiprintf_r+0x24c>)
 8004d80:	f7fb fa26 	bl	80001d0 <memchr>
 8004d84:	9a04      	ldr	r2, [sp, #16]
 8004d86:	b9d8      	cbnz	r0, 8004dc0 <_vfiprintf_r+0x12c>
 8004d88:	06d1      	lsls	r1, r2, #27
 8004d8a:	bf44      	itt	mi
 8004d8c:	2320      	movmi	r3, #32
 8004d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d92:	0713      	lsls	r3, r2, #28
 8004d94:	bf44      	itt	mi
 8004d96:	232b      	movmi	r3, #43	; 0x2b
 8004d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004da0:	2b2a      	cmp	r3, #42	; 0x2a
 8004da2:	d015      	beq.n	8004dd0 <_vfiprintf_r+0x13c>
 8004da4:	9a07      	ldr	r2, [sp, #28]
 8004da6:	4654      	mov	r4, sl
 8004da8:	2000      	movs	r0, #0
 8004daa:	f04f 0c0a 	mov.w	ip, #10
 8004dae:	4621      	mov	r1, r4
 8004db0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004db4:	3b30      	subs	r3, #48	; 0x30
 8004db6:	2b09      	cmp	r3, #9
 8004db8:	d94e      	bls.n	8004e58 <_vfiprintf_r+0x1c4>
 8004dba:	b1b0      	cbz	r0, 8004dea <_vfiprintf_r+0x156>
 8004dbc:	9207      	str	r2, [sp, #28]
 8004dbe:	e014      	b.n	8004dea <_vfiprintf_r+0x156>
 8004dc0:	eba0 0308 	sub.w	r3, r0, r8
 8004dc4:	fa09 f303 	lsl.w	r3, r9, r3
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	9304      	str	r3, [sp, #16]
 8004dcc:	46a2      	mov	sl, r4
 8004dce:	e7d2      	b.n	8004d76 <_vfiprintf_r+0xe2>
 8004dd0:	9b03      	ldr	r3, [sp, #12]
 8004dd2:	1d19      	adds	r1, r3, #4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	9103      	str	r1, [sp, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bfbb      	ittet	lt
 8004ddc:	425b      	neglt	r3, r3
 8004dde:	f042 0202 	orrlt.w	r2, r2, #2
 8004de2:	9307      	strge	r3, [sp, #28]
 8004de4:	9307      	strlt	r3, [sp, #28]
 8004de6:	bfb8      	it	lt
 8004de8:	9204      	strlt	r2, [sp, #16]
 8004dea:	7823      	ldrb	r3, [r4, #0]
 8004dec:	2b2e      	cmp	r3, #46	; 0x2e
 8004dee:	d10c      	bne.n	8004e0a <_vfiprintf_r+0x176>
 8004df0:	7863      	ldrb	r3, [r4, #1]
 8004df2:	2b2a      	cmp	r3, #42	; 0x2a
 8004df4:	d135      	bne.n	8004e62 <_vfiprintf_r+0x1ce>
 8004df6:	9b03      	ldr	r3, [sp, #12]
 8004df8:	1d1a      	adds	r2, r3, #4
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	9203      	str	r2, [sp, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bfb8      	it	lt
 8004e02:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e06:	3402      	adds	r4, #2
 8004e08:	9305      	str	r3, [sp, #20]
 8004e0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004ef0 <_vfiprintf_r+0x25c>
 8004e0e:	7821      	ldrb	r1, [r4, #0]
 8004e10:	2203      	movs	r2, #3
 8004e12:	4650      	mov	r0, sl
 8004e14:	f7fb f9dc 	bl	80001d0 <memchr>
 8004e18:	b140      	cbz	r0, 8004e2c <_vfiprintf_r+0x198>
 8004e1a:	2340      	movs	r3, #64	; 0x40
 8004e1c:	eba0 000a 	sub.w	r0, r0, sl
 8004e20:	fa03 f000 	lsl.w	r0, r3, r0
 8004e24:	9b04      	ldr	r3, [sp, #16]
 8004e26:	4303      	orrs	r3, r0
 8004e28:	3401      	adds	r4, #1
 8004e2a:	9304      	str	r3, [sp, #16]
 8004e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e30:	482c      	ldr	r0, [pc, #176]	; (8004ee4 <_vfiprintf_r+0x250>)
 8004e32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e36:	2206      	movs	r2, #6
 8004e38:	f7fb f9ca 	bl	80001d0 <memchr>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d03f      	beq.n	8004ec0 <_vfiprintf_r+0x22c>
 8004e40:	4b29      	ldr	r3, [pc, #164]	; (8004ee8 <_vfiprintf_r+0x254>)
 8004e42:	bb1b      	cbnz	r3, 8004e8c <_vfiprintf_r+0x1f8>
 8004e44:	9b03      	ldr	r3, [sp, #12]
 8004e46:	3307      	adds	r3, #7
 8004e48:	f023 0307 	bic.w	r3, r3, #7
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	9303      	str	r3, [sp, #12]
 8004e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e52:	443b      	add	r3, r7
 8004e54:	9309      	str	r3, [sp, #36]	; 0x24
 8004e56:	e767      	b.n	8004d28 <_vfiprintf_r+0x94>
 8004e58:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	2001      	movs	r0, #1
 8004e60:	e7a5      	b.n	8004dae <_vfiprintf_r+0x11a>
 8004e62:	2300      	movs	r3, #0
 8004e64:	3401      	adds	r4, #1
 8004e66:	9305      	str	r3, [sp, #20]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f04f 0c0a 	mov.w	ip, #10
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e74:	3a30      	subs	r2, #48	; 0x30
 8004e76:	2a09      	cmp	r2, #9
 8004e78:	d903      	bls.n	8004e82 <_vfiprintf_r+0x1ee>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0c5      	beq.n	8004e0a <_vfiprintf_r+0x176>
 8004e7e:	9105      	str	r1, [sp, #20]
 8004e80:	e7c3      	b.n	8004e0a <_vfiprintf_r+0x176>
 8004e82:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e86:	4604      	mov	r4, r0
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e7f0      	b.n	8004e6e <_vfiprintf_r+0x1da>
 8004e8c:	ab03      	add	r3, sp, #12
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	462a      	mov	r2, r5
 8004e92:	4b16      	ldr	r3, [pc, #88]	; (8004eec <_vfiprintf_r+0x258>)
 8004e94:	a904      	add	r1, sp, #16
 8004e96:	4630      	mov	r0, r6
 8004e98:	f3af 8000 	nop.w
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	1c78      	adds	r0, r7, #1
 8004ea0:	d1d6      	bne.n	8004e50 <_vfiprintf_r+0x1bc>
 8004ea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ea4:	07d9      	lsls	r1, r3, #31
 8004ea6:	d405      	bmi.n	8004eb4 <_vfiprintf_r+0x220>
 8004ea8:	89ab      	ldrh	r3, [r5, #12]
 8004eaa:	059a      	lsls	r2, r3, #22
 8004eac:	d402      	bmi.n	8004eb4 <_vfiprintf_r+0x220>
 8004eae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eb0:	f7ff fe31 	bl	8004b16 <__retarget_lock_release_recursive>
 8004eb4:	89ab      	ldrh	r3, [r5, #12]
 8004eb6:	065b      	lsls	r3, r3, #25
 8004eb8:	f53f af12 	bmi.w	8004ce0 <_vfiprintf_r+0x4c>
 8004ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ebe:	e711      	b.n	8004ce4 <_vfiprintf_r+0x50>
 8004ec0:	ab03      	add	r3, sp, #12
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	462a      	mov	r2, r5
 8004ec6:	4b09      	ldr	r3, [pc, #36]	; (8004eec <_vfiprintf_r+0x258>)
 8004ec8:	a904      	add	r1, sp, #16
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f000 f880 	bl	8004fd0 <_printf_i>
 8004ed0:	e7e4      	b.n	8004e9c <_vfiprintf_r+0x208>
 8004ed2:	bf00      	nop
 8004ed4:	080058d8 	.word	0x080058d8
 8004ed8:	080058f8 	.word	0x080058f8
 8004edc:	080058b8 	.word	0x080058b8
 8004ee0:	08005918 	.word	0x08005918
 8004ee4:	08005922 	.word	0x08005922
 8004ee8:	00000000 	.word	0x00000000
 8004eec:	08004c6f 	.word	0x08004c6f
 8004ef0:	0800591e 	.word	0x0800591e

08004ef4 <_printf_common>:
 8004ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef8:	4616      	mov	r6, r2
 8004efa:	4699      	mov	r9, r3
 8004efc:	688a      	ldr	r2, [r1, #8]
 8004efe:	690b      	ldr	r3, [r1, #16]
 8004f00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f04:	4293      	cmp	r3, r2
 8004f06:	bfb8      	it	lt
 8004f08:	4613      	movlt	r3, r2
 8004f0a:	6033      	str	r3, [r6, #0]
 8004f0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f10:	4607      	mov	r7, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	b10a      	cbz	r2, 8004f1a <_printf_common+0x26>
 8004f16:	3301      	adds	r3, #1
 8004f18:	6033      	str	r3, [r6, #0]
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	0699      	lsls	r1, r3, #26
 8004f1e:	bf42      	ittt	mi
 8004f20:	6833      	ldrmi	r3, [r6, #0]
 8004f22:	3302      	addmi	r3, #2
 8004f24:	6033      	strmi	r3, [r6, #0]
 8004f26:	6825      	ldr	r5, [r4, #0]
 8004f28:	f015 0506 	ands.w	r5, r5, #6
 8004f2c:	d106      	bne.n	8004f3c <_printf_common+0x48>
 8004f2e:	f104 0a19 	add.w	sl, r4, #25
 8004f32:	68e3      	ldr	r3, [r4, #12]
 8004f34:	6832      	ldr	r2, [r6, #0]
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	42ab      	cmp	r3, r5
 8004f3a:	dc26      	bgt.n	8004f8a <_printf_common+0x96>
 8004f3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f40:	1e13      	subs	r3, r2, #0
 8004f42:	6822      	ldr	r2, [r4, #0]
 8004f44:	bf18      	it	ne
 8004f46:	2301      	movne	r3, #1
 8004f48:	0692      	lsls	r2, r2, #26
 8004f4a:	d42b      	bmi.n	8004fa4 <_printf_common+0xb0>
 8004f4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f50:	4649      	mov	r1, r9
 8004f52:	4638      	mov	r0, r7
 8004f54:	47c0      	blx	r8
 8004f56:	3001      	adds	r0, #1
 8004f58:	d01e      	beq.n	8004f98 <_printf_common+0xa4>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	68e5      	ldr	r5, [r4, #12]
 8004f5e:	6832      	ldr	r2, [r6, #0]
 8004f60:	f003 0306 	and.w	r3, r3, #6
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	bf08      	it	eq
 8004f68:	1aad      	subeq	r5, r5, r2
 8004f6a:	68a3      	ldr	r3, [r4, #8]
 8004f6c:	6922      	ldr	r2, [r4, #16]
 8004f6e:	bf0c      	ite	eq
 8004f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f74:	2500      	movne	r5, #0
 8004f76:	4293      	cmp	r3, r2
 8004f78:	bfc4      	itt	gt
 8004f7a:	1a9b      	subgt	r3, r3, r2
 8004f7c:	18ed      	addgt	r5, r5, r3
 8004f7e:	2600      	movs	r6, #0
 8004f80:	341a      	adds	r4, #26
 8004f82:	42b5      	cmp	r5, r6
 8004f84:	d11a      	bne.n	8004fbc <_printf_common+0xc8>
 8004f86:	2000      	movs	r0, #0
 8004f88:	e008      	b.n	8004f9c <_printf_common+0xa8>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4652      	mov	r2, sl
 8004f8e:	4649      	mov	r1, r9
 8004f90:	4638      	mov	r0, r7
 8004f92:	47c0      	blx	r8
 8004f94:	3001      	adds	r0, #1
 8004f96:	d103      	bne.n	8004fa0 <_printf_common+0xac>
 8004f98:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa0:	3501      	adds	r5, #1
 8004fa2:	e7c6      	b.n	8004f32 <_printf_common+0x3e>
 8004fa4:	18e1      	adds	r1, r4, r3
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	2030      	movs	r0, #48	; 0x30
 8004faa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fae:	4422      	add	r2, r4
 8004fb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fb8:	3302      	adds	r3, #2
 8004fba:	e7c7      	b.n	8004f4c <_printf_common+0x58>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	47c0      	blx	r8
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d0e6      	beq.n	8004f98 <_printf_common+0xa4>
 8004fca:	3601      	adds	r6, #1
 8004fcc:	e7d9      	b.n	8004f82 <_printf_common+0x8e>
	...

08004fd0 <_printf_i>:
 8004fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd4:	7e0f      	ldrb	r7, [r1, #24]
 8004fd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fd8:	2f78      	cmp	r7, #120	; 0x78
 8004fda:	4691      	mov	r9, r2
 8004fdc:	4680      	mov	r8, r0
 8004fde:	460c      	mov	r4, r1
 8004fe0:	469a      	mov	sl, r3
 8004fe2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fe6:	d807      	bhi.n	8004ff8 <_printf_i+0x28>
 8004fe8:	2f62      	cmp	r7, #98	; 0x62
 8004fea:	d80a      	bhi.n	8005002 <_printf_i+0x32>
 8004fec:	2f00      	cmp	r7, #0
 8004fee:	f000 80d8 	beq.w	80051a2 <_printf_i+0x1d2>
 8004ff2:	2f58      	cmp	r7, #88	; 0x58
 8004ff4:	f000 80a3 	beq.w	800513e <_printf_i+0x16e>
 8004ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ffc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005000:	e03a      	b.n	8005078 <_printf_i+0xa8>
 8005002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005006:	2b15      	cmp	r3, #21
 8005008:	d8f6      	bhi.n	8004ff8 <_printf_i+0x28>
 800500a:	a101      	add	r1, pc, #4	; (adr r1, 8005010 <_printf_i+0x40>)
 800500c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005010:	08005069 	.word	0x08005069
 8005014:	0800507d 	.word	0x0800507d
 8005018:	08004ff9 	.word	0x08004ff9
 800501c:	08004ff9 	.word	0x08004ff9
 8005020:	08004ff9 	.word	0x08004ff9
 8005024:	08004ff9 	.word	0x08004ff9
 8005028:	0800507d 	.word	0x0800507d
 800502c:	08004ff9 	.word	0x08004ff9
 8005030:	08004ff9 	.word	0x08004ff9
 8005034:	08004ff9 	.word	0x08004ff9
 8005038:	08004ff9 	.word	0x08004ff9
 800503c:	08005189 	.word	0x08005189
 8005040:	080050ad 	.word	0x080050ad
 8005044:	0800516b 	.word	0x0800516b
 8005048:	08004ff9 	.word	0x08004ff9
 800504c:	08004ff9 	.word	0x08004ff9
 8005050:	080051ab 	.word	0x080051ab
 8005054:	08004ff9 	.word	0x08004ff9
 8005058:	080050ad 	.word	0x080050ad
 800505c:	08004ff9 	.word	0x08004ff9
 8005060:	08004ff9 	.word	0x08004ff9
 8005064:	08005173 	.word	0x08005173
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	1d1a      	adds	r2, r3, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	602a      	str	r2, [r5, #0]
 8005070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005078:	2301      	movs	r3, #1
 800507a:	e0a3      	b.n	80051c4 <_printf_i+0x1f4>
 800507c:	6820      	ldr	r0, [r4, #0]
 800507e:	6829      	ldr	r1, [r5, #0]
 8005080:	0606      	lsls	r6, r0, #24
 8005082:	f101 0304 	add.w	r3, r1, #4
 8005086:	d50a      	bpl.n	800509e <_printf_i+0xce>
 8005088:	680e      	ldr	r6, [r1, #0]
 800508a:	602b      	str	r3, [r5, #0]
 800508c:	2e00      	cmp	r6, #0
 800508e:	da03      	bge.n	8005098 <_printf_i+0xc8>
 8005090:	232d      	movs	r3, #45	; 0x2d
 8005092:	4276      	negs	r6, r6
 8005094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005098:	485e      	ldr	r0, [pc, #376]	; (8005214 <_printf_i+0x244>)
 800509a:	230a      	movs	r3, #10
 800509c:	e019      	b.n	80050d2 <_printf_i+0x102>
 800509e:	680e      	ldr	r6, [r1, #0]
 80050a0:	602b      	str	r3, [r5, #0]
 80050a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050a6:	bf18      	it	ne
 80050a8:	b236      	sxthne	r6, r6
 80050aa:	e7ef      	b.n	800508c <_printf_i+0xbc>
 80050ac:	682b      	ldr	r3, [r5, #0]
 80050ae:	6820      	ldr	r0, [r4, #0]
 80050b0:	1d19      	adds	r1, r3, #4
 80050b2:	6029      	str	r1, [r5, #0]
 80050b4:	0601      	lsls	r1, r0, #24
 80050b6:	d501      	bpl.n	80050bc <_printf_i+0xec>
 80050b8:	681e      	ldr	r6, [r3, #0]
 80050ba:	e002      	b.n	80050c2 <_printf_i+0xf2>
 80050bc:	0646      	lsls	r6, r0, #25
 80050be:	d5fb      	bpl.n	80050b8 <_printf_i+0xe8>
 80050c0:	881e      	ldrh	r6, [r3, #0]
 80050c2:	4854      	ldr	r0, [pc, #336]	; (8005214 <_printf_i+0x244>)
 80050c4:	2f6f      	cmp	r7, #111	; 0x6f
 80050c6:	bf0c      	ite	eq
 80050c8:	2308      	moveq	r3, #8
 80050ca:	230a      	movne	r3, #10
 80050cc:	2100      	movs	r1, #0
 80050ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050d2:	6865      	ldr	r5, [r4, #4]
 80050d4:	60a5      	str	r5, [r4, #8]
 80050d6:	2d00      	cmp	r5, #0
 80050d8:	bfa2      	ittt	ge
 80050da:	6821      	ldrge	r1, [r4, #0]
 80050dc:	f021 0104 	bicge.w	r1, r1, #4
 80050e0:	6021      	strge	r1, [r4, #0]
 80050e2:	b90e      	cbnz	r6, 80050e8 <_printf_i+0x118>
 80050e4:	2d00      	cmp	r5, #0
 80050e6:	d04d      	beq.n	8005184 <_printf_i+0x1b4>
 80050e8:	4615      	mov	r5, r2
 80050ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80050ee:	fb03 6711 	mls	r7, r3, r1, r6
 80050f2:	5dc7      	ldrb	r7, [r0, r7]
 80050f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050f8:	4637      	mov	r7, r6
 80050fa:	42bb      	cmp	r3, r7
 80050fc:	460e      	mov	r6, r1
 80050fe:	d9f4      	bls.n	80050ea <_printf_i+0x11a>
 8005100:	2b08      	cmp	r3, #8
 8005102:	d10b      	bne.n	800511c <_printf_i+0x14c>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	07de      	lsls	r6, r3, #31
 8005108:	d508      	bpl.n	800511c <_printf_i+0x14c>
 800510a:	6923      	ldr	r3, [r4, #16]
 800510c:	6861      	ldr	r1, [r4, #4]
 800510e:	4299      	cmp	r1, r3
 8005110:	bfde      	ittt	le
 8005112:	2330      	movle	r3, #48	; 0x30
 8005114:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005118:	f105 35ff 	addle.w	r5, r5, #4294967295
 800511c:	1b52      	subs	r2, r2, r5
 800511e:	6122      	str	r2, [r4, #16]
 8005120:	f8cd a000 	str.w	sl, [sp]
 8005124:	464b      	mov	r3, r9
 8005126:	aa03      	add	r2, sp, #12
 8005128:	4621      	mov	r1, r4
 800512a:	4640      	mov	r0, r8
 800512c:	f7ff fee2 	bl	8004ef4 <_printf_common>
 8005130:	3001      	adds	r0, #1
 8005132:	d14c      	bne.n	80051ce <_printf_i+0x1fe>
 8005134:	f04f 30ff 	mov.w	r0, #4294967295
 8005138:	b004      	add	sp, #16
 800513a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513e:	4835      	ldr	r0, [pc, #212]	; (8005214 <_printf_i+0x244>)
 8005140:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005144:	6829      	ldr	r1, [r5, #0]
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	f851 6b04 	ldr.w	r6, [r1], #4
 800514c:	6029      	str	r1, [r5, #0]
 800514e:	061d      	lsls	r5, r3, #24
 8005150:	d514      	bpl.n	800517c <_printf_i+0x1ac>
 8005152:	07df      	lsls	r7, r3, #31
 8005154:	bf44      	itt	mi
 8005156:	f043 0320 	orrmi.w	r3, r3, #32
 800515a:	6023      	strmi	r3, [r4, #0]
 800515c:	b91e      	cbnz	r6, 8005166 <_printf_i+0x196>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	f023 0320 	bic.w	r3, r3, #32
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	2310      	movs	r3, #16
 8005168:	e7b0      	b.n	80050cc <_printf_i+0xfc>
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	f043 0320 	orr.w	r3, r3, #32
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	2378      	movs	r3, #120	; 0x78
 8005174:	4828      	ldr	r0, [pc, #160]	; (8005218 <_printf_i+0x248>)
 8005176:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800517a:	e7e3      	b.n	8005144 <_printf_i+0x174>
 800517c:	0659      	lsls	r1, r3, #25
 800517e:	bf48      	it	mi
 8005180:	b2b6      	uxthmi	r6, r6
 8005182:	e7e6      	b.n	8005152 <_printf_i+0x182>
 8005184:	4615      	mov	r5, r2
 8005186:	e7bb      	b.n	8005100 <_printf_i+0x130>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	6826      	ldr	r6, [r4, #0]
 800518c:	6961      	ldr	r1, [r4, #20]
 800518e:	1d18      	adds	r0, r3, #4
 8005190:	6028      	str	r0, [r5, #0]
 8005192:	0635      	lsls	r5, r6, #24
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	d501      	bpl.n	800519c <_printf_i+0x1cc>
 8005198:	6019      	str	r1, [r3, #0]
 800519a:	e002      	b.n	80051a2 <_printf_i+0x1d2>
 800519c:	0670      	lsls	r0, r6, #25
 800519e:	d5fb      	bpl.n	8005198 <_printf_i+0x1c8>
 80051a0:	8019      	strh	r1, [r3, #0]
 80051a2:	2300      	movs	r3, #0
 80051a4:	6123      	str	r3, [r4, #16]
 80051a6:	4615      	mov	r5, r2
 80051a8:	e7ba      	b.n	8005120 <_printf_i+0x150>
 80051aa:	682b      	ldr	r3, [r5, #0]
 80051ac:	1d1a      	adds	r2, r3, #4
 80051ae:	602a      	str	r2, [r5, #0]
 80051b0:	681d      	ldr	r5, [r3, #0]
 80051b2:	6862      	ldr	r2, [r4, #4]
 80051b4:	2100      	movs	r1, #0
 80051b6:	4628      	mov	r0, r5
 80051b8:	f7fb f80a 	bl	80001d0 <memchr>
 80051bc:	b108      	cbz	r0, 80051c2 <_printf_i+0x1f2>
 80051be:	1b40      	subs	r0, r0, r5
 80051c0:	6060      	str	r0, [r4, #4]
 80051c2:	6863      	ldr	r3, [r4, #4]
 80051c4:	6123      	str	r3, [r4, #16]
 80051c6:	2300      	movs	r3, #0
 80051c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051cc:	e7a8      	b.n	8005120 <_printf_i+0x150>
 80051ce:	6923      	ldr	r3, [r4, #16]
 80051d0:	462a      	mov	r2, r5
 80051d2:	4649      	mov	r1, r9
 80051d4:	4640      	mov	r0, r8
 80051d6:	47d0      	blx	sl
 80051d8:	3001      	adds	r0, #1
 80051da:	d0ab      	beq.n	8005134 <_printf_i+0x164>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	079b      	lsls	r3, r3, #30
 80051e0:	d413      	bmi.n	800520a <_printf_i+0x23a>
 80051e2:	68e0      	ldr	r0, [r4, #12]
 80051e4:	9b03      	ldr	r3, [sp, #12]
 80051e6:	4298      	cmp	r0, r3
 80051e8:	bfb8      	it	lt
 80051ea:	4618      	movlt	r0, r3
 80051ec:	e7a4      	b.n	8005138 <_printf_i+0x168>
 80051ee:	2301      	movs	r3, #1
 80051f0:	4632      	mov	r2, r6
 80051f2:	4649      	mov	r1, r9
 80051f4:	4640      	mov	r0, r8
 80051f6:	47d0      	blx	sl
 80051f8:	3001      	adds	r0, #1
 80051fa:	d09b      	beq.n	8005134 <_printf_i+0x164>
 80051fc:	3501      	adds	r5, #1
 80051fe:	68e3      	ldr	r3, [r4, #12]
 8005200:	9903      	ldr	r1, [sp, #12]
 8005202:	1a5b      	subs	r3, r3, r1
 8005204:	42ab      	cmp	r3, r5
 8005206:	dcf2      	bgt.n	80051ee <_printf_i+0x21e>
 8005208:	e7eb      	b.n	80051e2 <_printf_i+0x212>
 800520a:	2500      	movs	r5, #0
 800520c:	f104 0619 	add.w	r6, r4, #25
 8005210:	e7f5      	b.n	80051fe <_printf_i+0x22e>
 8005212:	bf00      	nop
 8005214:	08005929 	.word	0x08005929
 8005218:	0800593a 	.word	0x0800593a

0800521c <_sbrk_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4d06      	ldr	r5, [pc, #24]	; (8005238 <_sbrk_r+0x1c>)
 8005220:	2300      	movs	r3, #0
 8005222:	4604      	mov	r4, r0
 8005224:	4608      	mov	r0, r1
 8005226:	602b      	str	r3, [r5, #0]
 8005228:	f7fb fcba 	bl	8000ba0 <_sbrk>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_sbrk_r+0x1a>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	b103      	cbz	r3, 8005236 <_sbrk_r+0x1a>
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	200132cc 	.word	0x200132cc

0800523c <__sread>:
 800523c:	b510      	push	{r4, lr}
 800523e:	460c      	mov	r4, r1
 8005240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005244:	f000 fab2 	bl	80057ac <_read_r>
 8005248:	2800      	cmp	r0, #0
 800524a:	bfab      	itete	ge
 800524c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800524e:	89a3      	ldrhlt	r3, [r4, #12]
 8005250:	181b      	addge	r3, r3, r0
 8005252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005256:	bfac      	ite	ge
 8005258:	6563      	strge	r3, [r4, #84]	; 0x54
 800525a:	81a3      	strhlt	r3, [r4, #12]
 800525c:	bd10      	pop	{r4, pc}

0800525e <__swrite>:
 800525e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005262:	461f      	mov	r7, r3
 8005264:	898b      	ldrh	r3, [r1, #12]
 8005266:	05db      	lsls	r3, r3, #23
 8005268:	4605      	mov	r5, r0
 800526a:	460c      	mov	r4, r1
 800526c:	4616      	mov	r6, r2
 800526e:	d505      	bpl.n	800527c <__swrite+0x1e>
 8005270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005274:	2302      	movs	r3, #2
 8005276:	2200      	movs	r2, #0
 8005278:	f000 f9c8 	bl	800560c <_lseek_r>
 800527c:	89a3      	ldrh	r3, [r4, #12]
 800527e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005286:	81a3      	strh	r3, [r4, #12]
 8005288:	4632      	mov	r2, r6
 800528a:	463b      	mov	r3, r7
 800528c:	4628      	mov	r0, r5
 800528e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005292:	f000 b869 	b.w	8005368 <_write_r>

08005296 <__sseek>:
 8005296:	b510      	push	{r4, lr}
 8005298:	460c      	mov	r4, r1
 800529a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529e:	f000 f9b5 	bl	800560c <_lseek_r>
 80052a2:	1c43      	adds	r3, r0, #1
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	bf15      	itete	ne
 80052a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80052aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052b2:	81a3      	strheq	r3, [r4, #12]
 80052b4:	bf18      	it	ne
 80052b6:	81a3      	strhne	r3, [r4, #12]
 80052b8:	bd10      	pop	{r4, pc}

080052ba <__sclose>:
 80052ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052be:	f000 b8d3 	b.w	8005468 <_close_r>
	...

080052c4 <__swbuf_r>:
 80052c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c6:	460e      	mov	r6, r1
 80052c8:	4614      	mov	r4, r2
 80052ca:	4605      	mov	r5, r0
 80052cc:	b118      	cbz	r0, 80052d6 <__swbuf_r+0x12>
 80052ce:	6983      	ldr	r3, [r0, #24]
 80052d0:	b90b      	cbnz	r3, 80052d6 <__swbuf_r+0x12>
 80052d2:	f7ff fb81 	bl	80049d8 <__sinit>
 80052d6:	4b21      	ldr	r3, [pc, #132]	; (800535c <__swbuf_r+0x98>)
 80052d8:	429c      	cmp	r4, r3
 80052da:	d12b      	bne.n	8005334 <__swbuf_r+0x70>
 80052dc:	686c      	ldr	r4, [r5, #4]
 80052de:	69a3      	ldr	r3, [r4, #24]
 80052e0:	60a3      	str	r3, [r4, #8]
 80052e2:	89a3      	ldrh	r3, [r4, #12]
 80052e4:	071a      	lsls	r2, r3, #28
 80052e6:	d52f      	bpl.n	8005348 <__swbuf_r+0x84>
 80052e8:	6923      	ldr	r3, [r4, #16]
 80052ea:	b36b      	cbz	r3, 8005348 <__swbuf_r+0x84>
 80052ec:	6923      	ldr	r3, [r4, #16]
 80052ee:	6820      	ldr	r0, [r4, #0]
 80052f0:	1ac0      	subs	r0, r0, r3
 80052f2:	6963      	ldr	r3, [r4, #20]
 80052f4:	b2f6      	uxtb	r6, r6
 80052f6:	4283      	cmp	r3, r0
 80052f8:	4637      	mov	r7, r6
 80052fa:	dc04      	bgt.n	8005306 <__swbuf_r+0x42>
 80052fc:	4621      	mov	r1, r4
 80052fe:	4628      	mov	r0, r5
 8005300:	f000 f948 	bl	8005594 <_fflush_r>
 8005304:	bb30      	cbnz	r0, 8005354 <__swbuf_r+0x90>
 8005306:	68a3      	ldr	r3, [r4, #8]
 8005308:	3b01      	subs	r3, #1
 800530a:	60a3      	str	r3, [r4, #8]
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	6022      	str	r2, [r4, #0]
 8005312:	701e      	strb	r6, [r3, #0]
 8005314:	6963      	ldr	r3, [r4, #20]
 8005316:	3001      	adds	r0, #1
 8005318:	4283      	cmp	r3, r0
 800531a:	d004      	beq.n	8005326 <__swbuf_r+0x62>
 800531c:	89a3      	ldrh	r3, [r4, #12]
 800531e:	07db      	lsls	r3, r3, #31
 8005320:	d506      	bpl.n	8005330 <__swbuf_r+0x6c>
 8005322:	2e0a      	cmp	r6, #10
 8005324:	d104      	bne.n	8005330 <__swbuf_r+0x6c>
 8005326:	4621      	mov	r1, r4
 8005328:	4628      	mov	r0, r5
 800532a:	f000 f933 	bl	8005594 <_fflush_r>
 800532e:	b988      	cbnz	r0, 8005354 <__swbuf_r+0x90>
 8005330:	4638      	mov	r0, r7
 8005332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <__swbuf_r+0x9c>)
 8005336:	429c      	cmp	r4, r3
 8005338:	d101      	bne.n	800533e <__swbuf_r+0x7a>
 800533a:	68ac      	ldr	r4, [r5, #8]
 800533c:	e7cf      	b.n	80052de <__swbuf_r+0x1a>
 800533e:	4b09      	ldr	r3, [pc, #36]	; (8005364 <__swbuf_r+0xa0>)
 8005340:	429c      	cmp	r4, r3
 8005342:	bf08      	it	eq
 8005344:	68ec      	ldreq	r4, [r5, #12]
 8005346:	e7ca      	b.n	80052de <__swbuf_r+0x1a>
 8005348:	4621      	mov	r1, r4
 800534a:	4628      	mov	r0, r5
 800534c:	f000 f81e 	bl	800538c <__swsetup_r>
 8005350:	2800      	cmp	r0, #0
 8005352:	d0cb      	beq.n	80052ec <__swbuf_r+0x28>
 8005354:	f04f 37ff 	mov.w	r7, #4294967295
 8005358:	e7ea      	b.n	8005330 <__swbuf_r+0x6c>
 800535a:	bf00      	nop
 800535c:	080058d8 	.word	0x080058d8
 8005360:	080058f8 	.word	0x080058f8
 8005364:	080058b8 	.word	0x080058b8

08005368 <_write_r>:
 8005368:	b538      	push	{r3, r4, r5, lr}
 800536a:	4d07      	ldr	r5, [pc, #28]	; (8005388 <_write_r+0x20>)
 800536c:	4604      	mov	r4, r0
 800536e:	4608      	mov	r0, r1
 8005370:	4611      	mov	r1, r2
 8005372:	2200      	movs	r2, #0
 8005374:	602a      	str	r2, [r5, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	f7fb fbc1 	bl	8000afe <_write>
 800537c:	1c43      	adds	r3, r0, #1
 800537e:	d102      	bne.n	8005386 <_write_r+0x1e>
 8005380:	682b      	ldr	r3, [r5, #0]
 8005382:	b103      	cbz	r3, 8005386 <_write_r+0x1e>
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	bd38      	pop	{r3, r4, r5, pc}
 8005388:	200132cc 	.word	0x200132cc

0800538c <__swsetup_r>:
 800538c:	4b32      	ldr	r3, [pc, #200]	; (8005458 <__swsetup_r+0xcc>)
 800538e:	b570      	push	{r4, r5, r6, lr}
 8005390:	681d      	ldr	r5, [r3, #0]
 8005392:	4606      	mov	r6, r0
 8005394:	460c      	mov	r4, r1
 8005396:	b125      	cbz	r5, 80053a2 <__swsetup_r+0x16>
 8005398:	69ab      	ldr	r3, [r5, #24]
 800539a:	b913      	cbnz	r3, 80053a2 <__swsetup_r+0x16>
 800539c:	4628      	mov	r0, r5
 800539e:	f7ff fb1b 	bl	80049d8 <__sinit>
 80053a2:	4b2e      	ldr	r3, [pc, #184]	; (800545c <__swsetup_r+0xd0>)
 80053a4:	429c      	cmp	r4, r3
 80053a6:	d10f      	bne.n	80053c8 <__swsetup_r+0x3c>
 80053a8:	686c      	ldr	r4, [r5, #4]
 80053aa:	89a3      	ldrh	r3, [r4, #12]
 80053ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053b0:	0719      	lsls	r1, r3, #28
 80053b2:	d42c      	bmi.n	800540e <__swsetup_r+0x82>
 80053b4:	06dd      	lsls	r5, r3, #27
 80053b6:	d411      	bmi.n	80053dc <__swsetup_r+0x50>
 80053b8:	2309      	movs	r3, #9
 80053ba:	6033      	str	r3, [r6, #0]
 80053bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053c0:	81a3      	strh	r3, [r4, #12]
 80053c2:	f04f 30ff 	mov.w	r0, #4294967295
 80053c6:	e03e      	b.n	8005446 <__swsetup_r+0xba>
 80053c8:	4b25      	ldr	r3, [pc, #148]	; (8005460 <__swsetup_r+0xd4>)
 80053ca:	429c      	cmp	r4, r3
 80053cc:	d101      	bne.n	80053d2 <__swsetup_r+0x46>
 80053ce:	68ac      	ldr	r4, [r5, #8]
 80053d0:	e7eb      	b.n	80053aa <__swsetup_r+0x1e>
 80053d2:	4b24      	ldr	r3, [pc, #144]	; (8005464 <__swsetup_r+0xd8>)
 80053d4:	429c      	cmp	r4, r3
 80053d6:	bf08      	it	eq
 80053d8:	68ec      	ldreq	r4, [r5, #12]
 80053da:	e7e6      	b.n	80053aa <__swsetup_r+0x1e>
 80053dc:	0758      	lsls	r0, r3, #29
 80053de:	d512      	bpl.n	8005406 <__swsetup_r+0x7a>
 80053e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053e2:	b141      	cbz	r1, 80053f6 <__swsetup_r+0x6a>
 80053e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053e8:	4299      	cmp	r1, r3
 80053ea:	d002      	beq.n	80053f2 <__swsetup_r+0x66>
 80053ec:	4630      	mov	r0, r6
 80053ee:	f000 f991 	bl	8005714 <_free_r>
 80053f2:	2300      	movs	r3, #0
 80053f4:	6363      	str	r3, [r4, #52]	; 0x34
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053fc:	81a3      	strh	r3, [r4, #12]
 80053fe:	2300      	movs	r3, #0
 8005400:	6063      	str	r3, [r4, #4]
 8005402:	6923      	ldr	r3, [r4, #16]
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	89a3      	ldrh	r3, [r4, #12]
 8005408:	f043 0308 	orr.w	r3, r3, #8
 800540c:	81a3      	strh	r3, [r4, #12]
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	b94b      	cbnz	r3, 8005426 <__swsetup_r+0x9a>
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800541c:	d003      	beq.n	8005426 <__swsetup_r+0x9a>
 800541e:	4621      	mov	r1, r4
 8005420:	4630      	mov	r0, r6
 8005422:	f000 f92b 	bl	800567c <__smakebuf_r>
 8005426:	89a0      	ldrh	r0, [r4, #12]
 8005428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800542c:	f010 0301 	ands.w	r3, r0, #1
 8005430:	d00a      	beq.n	8005448 <__swsetup_r+0xbc>
 8005432:	2300      	movs	r3, #0
 8005434:	60a3      	str	r3, [r4, #8]
 8005436:	6963      	ldr	r3, [r4, #20]
 8005438:	425b      	negs	r3, r3
 800543a:	61a3      	str	r3, [r4, #24]
 800543c:	6923      	ldr	r3, [r4, #16]
 800543e:	b943      	cbnz	r3, 8005452 <__swsetup_r+0xc6>
 8005440:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005444:	d1ba      	bne.n	80053bc <__swsetup_r+0x30>
 8005446:	bd70      	pop	{r4, r5, r6, pc}
 8005448:	0781      	lsls	r1, r0, #30
 800544a:	bf58      	it	pl
 800544c:	6963      	ldrpl	r3, [r4, #20]
 800544e:	60a3      	str	r3, [r4, #8]
 8005450:	e7f4      	b.n	800543c <__swsetup_r+0xb0>
 8005452:	2000      	movs	r0, #0
 8005454:	e7f7      	b.n	8005446 <__swsetup_r+0xba>
 8005456:	bf00      	nop
 8005458:	2000000c 	.word	0x2000000c
 800545c:	080058d8 	.word	0x080058d8
 8005460:	080058f8 	.word	0x080058f8
 8005464:	080058b8 	.word	0x080058b8

08005468 <_close_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	4d06      	ldr	r5, [pc, #24]	; (8005484 <_close_r+0x1c>)
 800546c:	2300      	movs	r3, #0
 800546e:	4604      	mov	r4, r0
 8005470:	4608      	mov	r0, r1
 8005472:	602b      	str	r3, [r5, #0]
 8005474:	f7fb fb5f 	bl	8000b36 <_close>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d102      	bne.n	8005482 <_close_r+0x1a>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	b103      	cbz	r3, 8005482 <_close_r+0x1a>
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	200132cc 	.word	0x200132cc

08005488 <__sflush_r>:
 8005488:	898a      	ldrh	r2, [r1, #12]
 800548a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800548e:	4605      	mov	r5, r0
 8005490:	0710      	lsls	r0, r2, #28
 8005492:	460c      	mov	r4, r1
 8005494:	d458      	bmi.n	8005548 <__sflush_r+0xc0>
 8005496:	684b      	ldr	r3, [r1, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	dc05      	bgt.n	80054a8 <__sflush_r+0x20>
 800549c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	dc02      	bgt.n	80054a8 <__sflush_r+0x20>
 80054a2:	2000      	movs	r0, #0
 80054a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054aa:	2e00      	cmp	r6, #0
 80054ac:	d0f9      	beq.n	80054a2 <__sflush_r+0x1a>
 80054ae:	2300      	movs	r3, #0
 80054b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054b4:	682f      	ldr	r7, [r5, #0]
 80054b6:	602b      	str	r3, [r5, #0]
 80054b8:	d032      	beq.n	8005520 <__sflush_r+0x98>
 80054ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	075a      	lsls	r2, r3, #29
 80054c0:	d505      	bpl.n	80054ce <__sflush_r+0x46>
 80054c2:	6863      	ldr	r3, [r4, #4]
 80054c4:	1ac0      	subs	r0, r0, r3
 80054c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054c8:	b10b      	cbz	r3, 80054ce <__sflush_r+0x46>
 80054ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054cc:	1ac0      	subs	r0, r0, r3
 80054ce:	2300      	movs	r3, #0
 80054d0:	4602      	mov	r2, r0
 80054d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054d4:	6a21      	ldr	r1, [r4, #32]
 80054d6:	4628      	mov	r0, r5
 80054d8:	47b0      	blx	r6
 80054da:	1c43      	adds	r3, r0, #1
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	d106      	bne.n	80054ee <__sflush_r+0x66>
 80054e0:	6829      	ldr	r1, [r5, #0]
 80054e2:	291d      	cmp	r1, #29
 80054e4:	d82c      	bhi.n	8005540 <__sflush_r+0xb8>
 80054e6:	4a2a      	ldr	r2, [pc, #168]	; (8005590 <__sflush_r+0x108>)
 80054e8:	40ca      	lsrs	r2, r1
 80054ea:	07d6      	lsls	r6, r2, #31
 80054ec:	d528      	bpl.n	8005540 <__sflush_r+0xb8>
 80054ee:	2200      	movs	r2, #0
 80054f0:	6062      	str	r2, [r4, #4]
 80054f2:	04d9      	lsls	r1, r3, #19
 80054f4:	6922      	ldr	r2, [r4, #16]
 80054f6:	6022      	str	r2, [r4, #0]
 80054f8:	d504      	bpl.n	8005504 <__sflush_r+0x7c>
 80054fa:	1c42      	adds	r2, r0, #1
 80054fc:	d101      	bne.n	8005502 <__sflush_r+0x7a>
 80054fe:	682b      	ldr	r3, [r5, #0]
 8005500:	b903      	cbnz	r3, 8005504 <__sflush_r+0x7c>
 8005502:	6560      	str	r0, [r4, #84]	; 0x54
 8005504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005506:	602f      	str	r7, [r5, #0]
 8005508:	2900      	cmp	r1, #0
 800550a:	d0ca      	beq.n	80054a2 <__sflush_r+0x1a>
 800550c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005510:	4299      	cmp	r1, r3
 8005512:	d002      	beq.n	800551a <__sflush_r+0x92>
 8005514:	4628      	mov	r0, r5
 8005516:	f000 f8fd 	bl	8005714 <_free_r>
 800551a:	2000      	movs	r0, #0
 800551c:	6360      	str	r0, [r4, #52]	; 0x34
 800551e:	e7c1      	b.n	80054a4 <__sflush_r+0x1c>
 8005520:	6a21      	ldr	r1, [r4, #32]
 8005522:	2301      	movs	r3, #1
 8005524:	4628      	mov	r0, r5
 8005526:	47b0      	blx	r6
 8005528:	1c41      	adds	r1, r0, #1
 800552a:	d1c7      	bne.n	80054bc <__sflush_r+0x34>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0c4      	beq.n	80054bc <__sflush_r+0x34>
 8005532:	2b1d      	cmp	r3, #29
 8005534:	d001      	beq.n	800553a <__sflush_r+0xb2>
 8005536:	2b16      	cmp	r3, #22
 8005538:	d101      	bne.n	800553e <__sflush_r+0xb6>
 800553a:	602f      	str	r7, [r5, #0]
 800553c:	e7b1      	b.n	80054a2 <__sflush_r+0x1a>
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005544:	81a3      	strh	r3, [r4, #12]
 8005546:	e7ad      	b.n	80054a4 <__sflush_r+0x1c>
 8005548:	690f      	ldr	r7, [r1, #16]
 800554a:	2f00      	cmp	r7, #0
 800554c:	d0a9      	beq.n	80054a2 <__sflush_r+0x1a>
 800554e:	0793      	lsls	r3, r2, #30
 8005550:	680e      	ldr	r6, [r1, #0]
 8005552:	bf08      	it	eq
 8005554:	694b      	ldreq	r3, [r1, #20]
 8005556:	600f      	str	r7, [r1, #0]
 8005558:	bf18      	it	ne
 800555a:	2300      	movne	r3, #0
 800555c:	eba6 0807 	sub.w	r8, r6, r7
 8005560:	608b      	str	r3, [r1, #8]
 8005562:	f1b8 0f00 	cmp.w	r8, #0
 8005566:	dd9c      	ble.n	80054a2 <__sflush_r+0x1a>
 8005568:	6a21      	ldr	r1, [r4, #32]
 800556a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800556c:	4643      	mov	r3, r8
 800556e:	463a      	mov	r2, r7
 8005570:	4628      	mov	r0, r5
 8005572:	47b0      	blx	r6
 8005574:	2800      	cmp	r0, #0
 8005576:	dc06      	bgt.n	8005586 <__sflush_r+0xfe>
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557e:	81a3      	strh	r3, [r4, #12]
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
 8005584:	e78e      	b.n	80054a4 <__sflush_r+0x1c>
 8005586:	4407      	add	r7, r0
 8005588:	eba8 0800 	sub.w	r8, r8, r0
 800558c:	e7e9      	b.n	8005562 <__sflush_r+0xda>
 800558e:	bf00      	nop
 8005590:	20400001 	.word	0x20400001

08005594 <_fflush_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	690b      	ldr	r3, [r1, #16]
 8005598:	4605      	mov	r5, r0
 800559a:	460c      	mov	r4, r1
 800559c:	b913      	cbnz	r3, 80055a4 <_fflush_r+0x10>
 800559e:	2500      	movs	r5, #0
 80055a0:	4628      	mov	r0, r5
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
 80055a4:	b118      	cbz	r0, 80055ae <_fflush_r+0x1a>
 80055a6:	6983      	ldr	r3, [r0, #24]
 80055a8:	b90b      	cbnz	r3, 80055ae <_fflush_r+0x1a>
 80055aa:	f7ff fa15 	bl	80049d8 <__sinit>
 80055ae:	4b14      	ldr	r3, [pc, #80]	; (8005600 <_fflush_r+0x6c>)
 80055b0:	429c      	cmp	r4, r3
 80055b2:	d11b      	bne.n	80055ec <_fflush_r+0x58>
 80055b4:	686c      	ldr	r4, [r5, #4]
 80055b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0ef      	beq.n	800559e <_fflush_r+0xa>
 80055be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055c0:	07d0      	lsls	r0, r2, #31
 80055c2:	d404      	bmi.n	80055ce <_fflush_r+0x3a>
 80055c4:	0599      	lsls	r1, r3, #22
 80055c6:	d402      	bmi.n	80055ce <_fflush_r+0x3a>
 80055c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ca:	f7ff faa3 	bl	8004b14 <__retarget_lock_acquire_recursive>
 80055ce:	4628      	mov	r0, r5
 80055d0:	4621      	mov	r1, r4
 80055d2:	f7ff ff59 	bl	8005488 <__sflush_r>
 80055d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055d8:	07da      	lsls	r2, r3, #31
 80055da:	4605      	mov	r5, r0
 80055dc:	d4e0      	bmi.n	80055a0 <_fflush_r+0xc>
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	059b      	lsls	r3, r3, #22
 80055e2:	d4dd      	bmi.n	80055a0 <_fflush_r+0xc>
 80055e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055e6:	f7ff fa96 	bl	8004b16 <__retarget_lock_release_recursive>
 80055ea:	e7d9      	b.n	80055a0 <_fflush_r+0xc>
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <_fflush_r+0x70>)
 80055ee:	429c      	cmp	r4, r3
 80055f0:	d101      	bne.n	80055f6 <_fflush_r+0x62>
 80055f2:	68ac      	ldr	r4, [r5, #8]
 80055f4:	e7df      	b.n	80055b6 <_fflush_r+0x22>
 80055f6:	4b04      	ldr	r3, [pc, #16]	; (8005608 <_fflush_r+0x74>)
 80055f8:	429c      	cmp	r4, r3
 80055fa:	bf08      	it	eq
 80055fc:	68ec      	ldreq	r4, [r5, #12]
 80055fe:	e7da      	b.n	80055b6 <_fflush_r+0x22>
 8005600:	080058d8 	.word	0x080058d8
 8005604:	080058f8 	.word	0x080058f8
 8005608:	080058b8 	.word	0x080058b8

0800560c <_lseek_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4d07      	ldr	r5, [pc, #28]	; (800562c <_lseek_r+0x20>)
 8005610:	4604      	mov	r4, r0
 8005612:	4608      	mov	r0, r1
 8005614:	4611      	mov	r1, r2
 8005616:	2200      	movs	r2, #0
 8005618:	602a      	str	r2, [r5, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	f7fb fab2 	bl	8000b84 <_lseek>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d102      	bne.n	800562a <_lseek_r+0x1e>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	b103      	cbz	r3, 800562a <_lseek_r+0x1e>
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	bd38      	pop	{r3, r4, r5, pc}
 800562c:	200132cc 	.word	0x200132cc

08005630 <__swhatbuf_r>:
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	460e      	mov	r6, r1
 8005634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005638:	2900      	cmp	r1, #0
 800563a:	b096      	sub	sp, #88	; 0x58
 800563c:	4614      	mov	r4, r2
 800563e:	461d      	mov	r5, r3
 8005640:	da08      	bge.n	8005654 <__swhatbuf_r+0x24>
 8005642:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	602a      	str	r2, [r5, #0]
 800564a:	061a      	lsls	r2, r3, #24
 800564c:	d410      	bmi.n	8005670 <__swhatbuf_r+0x40>
 800564e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005652:	e00e      	b.n	8005672 <__swhatbuf_r+0x42>
 8005654:	466a      	mov	r2, sp
 8005656:	f000 f8bb 	bl	80057d0 <_fstat_r>
 800565a:	2800      	cmp	r0, #0
 800565c:	dbf1      	blt.n	8005642 <__swhatbuf_r+0x12>
 800565e:	9a01      	ldr	r2, [sp, #4]
 8005660:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005664:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005668:	425a      	negs	r2, r3
 800566a:	415a      	adcs	r2, r3
 800566c:	602a      	str	r2, [r5, #0]
 800566e:	e7ee      	b.n	800564e <__swhatbuf_r+0x1e>
 8005670:	2340      	movs	r3, #64	; 0x40
 8005672:	2000      	movs	r0, #0
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	b016      	add	sp, #88	; 0x58
 8005678:	bd70      	pop	{r4, r5, r6, pc}
	...

0800567c <__smakebuf_r>:
 800567c:	898b      	ldrh	r3, [r1, #12]
 800567e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005680:	079d      	lsls	r5, r3, #30
 8005682:	4606      	mov	r6, r0
 8005684:	460c      	mov	r4, r1
 8005686:	d507      	bpl.n	8005698 <__smakebuf_r+0x1c>
 8005688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	6123      	str	r3, [r4, #16]
 8005690:	2301      	movs	r3, #1
 8005692:	6163      	str	r3, [r4, #20]
 8005694:	b002      	add	sp, #8
 8005696:	bd70      	pop	{r4, r5, r6, pc}
 8005698:	ab01      	add	r3, sp, #4
 800569a:	466a      	mov	r2, sp
 800569c:	f7ff ffc8 	bl	8005630 <__swhatbuf_r>
 80056a0:	9900      	ldr	r1, [sp, #0]
 80056a2:	4605      	mov	r5, r0
 80056a4:	4630      	mov	r0, r6
 80056a6:	f7ff fa57 	bl	8004b58 <_malloc_r>
 80056aa:	b948      	cbnz	r0, 80056c0 <__smakebuf_r+0x44>
 80056ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056b0:	059a      	lsls	r2, r3, #22
 80056b2:	d4ef      	bmi.n	8005694 <__smakebuf_r+0x18>
 80056b4:	f023 0303 	bic.w	r3, r3, #3
 80056b8:	f043 0302 	orr.w	r3, r3, #2
 80056bc:	81a3      	strh	r3, [r4, #12]
 80056be:	e7e3      	b.n	8005688 <__smakebuf_r+0xc>
 80056c0:	4b0d      	ldr	r3, [pc, #52]	; (80056f8 <__smakebuf_r+0x7c>)
 80056c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	6020      	str	r0, [r4, #0]
 80056c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056cc:	81a3      	strh	r3, [r4, #12]
 80056ce:	9b00      	ldr	r3, [sp, #0]
 80056d0:	6163      	str	r3, [r4, #20]
 80056d2:	9b01      	ldr	r3, [sp, #4]
 80056d4:	6120      	str	r0, [r4, #16]
 80056d6:	b15b      	cbz	r3, 80056f0 <__smakebuf_r+0x74>
 80056d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056dc:	4630      	mov	r0, r6
 80056de:	f000 f889 	bl	80057f4 <_isatty_r>
 80056e2:	b128      	cbz	r0, 80056f0 <__smakebuf_r+0x74>
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	f023 0303 	bic.w	r3, r3, #3
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	81a3      	strh	r3, [r4, #12]
 80056f0:	89a0      	ldrh	r0, [r4, #12]
 80056f2:	4305      	orrs	r5, r0
 80056f4:	81a5      	strh	r5, [r4, #12]
 80056f6:	e7cd      	b.n	8005694 <__smakebuf_r+0x18>
 80056f8:	08004971 	.word	0x08004971

080056fc <__malloc_lock>:
 80056fc:	4801      	ldr	r0, [pc, #4]	; (8005704 <__malloc_lock+0x8>)
 80056fe:	f7ff ba09 	b.w	8004b14 <__retarget_lock_acquire_recursive>
 8005702:	bf00      	nop
 8005704:	200132c0 	.word	0x200132c0

08005708 <__malloc_unlock>:
 8005708:	4801      	ldr	r0, [pc, #4]	; (8005710 <__malloc_unlock+0x8>)
 800570a:	f7ff ba04 	b.w	8004b16 <__retarget_lock_release_recursive>
 800570e:	bf00      	nop
 8005710:	200132c0 	.word	0x200132c0

08005714 <_free_r>:
 8005714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005716:	2900      	cmp	r1, #0
 8005718:	d044      	beq.n	80057a4 <_free_r+0x90>
 800571a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800571e:	9001      	str	r0, [sp, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	f1a1 0404 	sub.w	r4, r1, #4
 8005726:	bfb8      	it	lt
 8005728:	18e4      	addlt	r4, r4, r3
 800572a:	f7ff ffe7 	bl	80056fc <__malloc_lock>
 800572e:	4a1e      	ldr	r2, [pc, #120]	; (80057a8 <_free_r+0x94>)
 8005730:	9801      	ldr	r0, [sp, #4]
 8005732:	6813      	ldr	r3, [r2, #0]
 8005734:	b933      	cbnz	r3, 8005744 <_free_r+0x30>
 8005736:	6063      	str	r3, [r4, #4]
 8005738:	6014      	str	r4, [r2, #0]
 800573a:	b003      	add	sp, #12
 800573c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005740:	f7ff bfe2 	b.w	8005708 <__malloc_unlock>
 8005744:	42a3      	cmp	r3, r4
 8005746:	d908      	bls.n	800575a <_free_r+0x46>
 8005748:	6825      	ldr	r5, [r4, #0]
 800574a:	1961      	adds	r1, r4, r5
 800574c:	428b      	cmp	r3, r1
 800574e:	bf01      	itttt	eq
 8005750:	6819      	ldreq	r1, [r3, #0]
 8005752:	685b      	ldreq	r3, [r3, #4]
 8005754:	1949      	addeq	r1, r1, r5
 8005756:	6021      	streq	r1, [r4, #0]
 8005758:	e7ed      	b.n	8005736 <_free_r+0x22>
 800575a:	461a      	mov	r2, r3
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	b10b      	cbz	r3, 8005764 <_free_r+0x50>
 8005760:	42a3      	cmp	r3, r4
 8005762:	d9fa      	bls.n	800575a <_free_r+0x46>
 8005764:	6811      	ldr	r1, [r2, #0]
 8005766:	1855      	adds	r5, r2, r1
 8005768:	42a5      	cmp	r5, r4
 800576a:	d10b      	bne.n	8005784 <_free_r+0x70>
 800576c:	6824      	ldr	r4, [r4, #0]
 800576e:	4421      	add	r1, r4
 8005770:	1854      	adds	r4, r2, r1
 8005772:	42a3      	cmp	r3, r4
 8005774:	6011      	str	r1, [r2, #0]
 8005776:	d1e0      	bne.n	800573a <_free_r+0x26>
 8005778:	681c      	ldr	r4, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	6053      	str	r3, [r2, #4]
 800577e:	4421      	add	r1, r4
 8005780:	6011      	str	r1, [r2, #0]
 8005782:	e7da      	b.n	800573a <_free_r+0x26>
 8005784:	d902      	bls.n	800578c <_free_r+0x78>
 8005786:	230c      	movs	r3, #12
 8005788:	6003      	str	r3, [r0, #0]
 800578a:	e7d6      	b.n	800573a <_free_r+0x26>
 800578c:	6825      	ldr	r5, [r4, #0]
 800578e:	1961      	adds	r1, r4, r5
 8005790:	428b      	cmp	r3, r1
 8005792:	bf04      	itt	eq
 8005794:	6819      	ldreq	r1, [r3, #0]
 8005796:	685b      	ldreq	r3, [r3, #4]
 8005798:	6063      	str	r3, [r4, #4]
 800579a:	bf04      	itt	eq
 800579c:	1949      	addeq	r1, r1, r5
 800579e:	6021      	streq	r1, [r4, #0]
 80057a0:	6054      	str	r4, [r2, #4]
 80057a2:	e7ca      	b.n	800573a <_free_r+0x26>
 80057a4:	b003      	add	sp, #12
 80057a6:	bd30      	pop	{r4, r5, pc}
 80057a8:	200132c4 	.word	0x200132c4

080057ac <_read_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4d07      	ldr	r5, [pc, #28]	; (80057cc <_read_r+0x20>)
 80057b0:	4604      	mov	r4, r0
 80057b2:	4608      	mov	r0, r1
 80057b4:	4611      	mov	r1, r2
 80057b6:	2200      	movs	r2, #0
 80057b8:	602a      	str	r2, [r5, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f7fb f982 	bl	8000ac4 <_read>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d102      	bne.n	80057ca <_read_r+0x1e>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	b103      	cbz	r3, 80057ca <_read_r+0x1e>
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	200132cc 	.word	0x200132cc

080057d0 <_fstat_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4d07      	ldr	r5, [pc, #28]	; (80057f0 <_fstat_r+0x20>)
 80057d4:	2300      	movs	r3, #0
 80057d6:	4604      	mov	r4, r0
 80057d8:	4608      	mov	r0, r1
 80057da:	4611      	mov	r1, r2
 80057dc:	602b      	str	r3, [r5, #0]
 80057de:	f7fb f9b6 	bl	8000b4e <_fstat>
 80057e2:	1c43      	adds	r3, r0, #1
 80057e4:	d102      	bne.n	80057ec <_fstat_r+0x1c>
 80057e6:	682b      	ldr	r3, [r5, #0]
 80057e8:	b103      	cbz	r3, 80057ec <_fstat_r+0x1c>
 80057ea:	6023      	str	r3, [r4, #0]
 80057ec:	bd38      	pop	{r3, r4, r5, pc}
 80057ee:	bf00      	nop
 80057f0:	200132cc 	.word	0x200132cc

080057f4 <_isatty_r>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	4d06      	ldr	r5, [pc, #24]	; (8005810 <_isatty_r+0x1c>)
 80057f8:	2300      	movs	r3, #0
 80057fa:	4604      	mov	r4, r0
 80057fc:	4608      	mov	r0, r1
 80057fe:	602b      	str	r3, [r5, #0]
 8005800:	f7fb f9b5 	bl	8000b6e <_isatty>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d102      	bne.n	800580e <_isatty_r+0x1a>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	b103      	cbz	r3, 800580e <_isatty_r+0x1a>
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	bd38      	pop	{r3, r4, r5, pc}
 8005810:	200132cc 	.word	0x200132cc

08005814 <_init>:
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	bf00      	nop
 8005818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581a:	bc08      	pop	{r3}
 800581c:	469e      	mov	lr, r3
 800581e:	4770      	bx	lr

08005820 <_fini>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	bf00      	nop
 8005824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005826:	bc08      	pop	{r3}
 8005828:	469e      	mov	lr, r3
 800582a:	4770      	bx	lr
