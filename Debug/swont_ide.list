
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08005fe8  08005fe8  00015fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006184  08006184  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800618c  0800618c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013330  20000070  08006204  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200133a0  08006204  000233a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dac7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272a  00000000  00000000  0002db67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00030298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00031038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023af3  00000000  00000000  00031c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a71  00000000  00000000  00055773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb756  00000000  00000000  000661e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013193a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004170  00000000  00000000  0013198c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fd0 	.word	0x08005fd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005fd0 	.word	0x08005fd0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <API_Getcommand>:
//--------------------------------------------------------------
//
//--------------------------------------------------------------

void API_Getcommand(void)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b09b      	sub	sp, #108	; 0x6c
 8000578:	af18      	add	r7, sp, #96	; 0x60
	int i;
	int commacounter;

	// Reset some stuff
	input.byte_buffer_rx[0] = 0;
 800057a:	4b21      	ldr	r3, [pc, #132]	; (8000600 <API_Getcommand+0x8c>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
	input.char_counter = 0;
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <API_Getcommand+0x8c>)
 8000582:	2200      	movs	r2, #0
 8000584:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	input.command_execute_flag = FALSE;
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <API_Getcommand+0x8c>)
 800058a:	2200      	movs	r2, #0
 800058c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

	//Loop in the buffer
    for (i=0;i<LINE_BUFLEN;i++)
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	e00c      	b.n	80005b0 <API_Getcommand+0x3c>
    {
    	//Checks if there is a comma in the buffer
        if(input.line_rx_buffer[i] == ',')
 8000596:	4a1a      	ldr	r2, [pc, #104]	; (8000600 <API_Getcommand+0x8c>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	3301      	adds	r3, #1
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b2c      	cmp	r3, #44	; 0x2c
 80005a2:	d102      	bne.n	80005aa <API_Getcommand+0x36>
        {
        	//Counts the amount of comma's
        	commacounter++;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	3301      	adds	r3, #1
 80005a8:	603b      	str	r3, [r7, #0]
    for (i=0;i<LINE_BUFLEN;i++)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3301      	adds	r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005b6:	dbee      	blt.n	8000596 <API_Getcommand+0x22>
        }
    }
    API_Command_Data(commando,commacounter);
 80005b8:	4c12      	ldr	r4, [pc, #72]	; (8000604 <API_Getcommand+0x90>)
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	9316      	str	r3, [sp, #88]	; 0x58
 80005be:	4668      	mov	r0, sp
 80005c0:	f104 0310 	add.w	r3, r4, #16
 80005c4:	2258      	movs	r2, #88	; 0x58
 80005c6:	4619      	mov	r1, r3
 80005c8:	f004 fc6a 	bl	8004ea0 <memcpy>
 80005cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005d0:	f000 f81a 	bl	8000608 <API_Command_Data>

	//clear the buffer
	for(i = 0; i < LINE_BUFLEN; i++) input.line_rx_buffer[i] = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	e008      	b.n	80005ec <API_Getcommand+0x78>
 80005da:	4a09      	ldr	r2, [pc, #36]	; (8000600 <API_Getcommand+0x8c>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4413      	add	r3, r2
 80005e0:	3301      	adds	r3, #1
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005f2:	dbf2      	blt.n	80005da <API_Getcommand+0x66>
	commacounter = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	603b      	str	r3, [r7, #0]


}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	2000015c 	.word	0x2000015c
 8000604:	2000008c 	.word	0x2000008c

08000608 <API_Command_Data>:
//--------------------------------------------------------------
// Switching the amount of comma's and jumps into a certain function
//--------------------------------------------------------------

void API_Command_Data(UI_t commando,int counter)
{
 8000608:	b084      	sub	sp, #16
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
 800060e:	f107 0c08 	add.w	ip, r7, #8
 8000612:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	switch (counter)
 8000616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000618:	3b01      	subs	r3, #1
 800061a:	2b06      	cmp	r3, #6
 800061c:	d828      	bhi.n	8000670 <API_Command_Data+0x68>
 800061e:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <API_Command_Data+0x1c>)
 8000620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000624:	08000641 	.word	0x08000641
 8000628:	08000671 	.word	0x08000671
 800062c:	08000647 	.word	0x08000647
 8000630:	08000671 	.word	0x08000671
 8000634:	08000671 	.word	0x08000671
 8000638:	0800064d 	.word	0x0800064d
 800063c:	0800066b 	.word	0x0800066b
	{
		case CLEARSCREEN_COMMAND:
			Seperate_Clearscreen();
 8000640:	f000 f954 	bl	80008ec <Seperate_Clearscreen>
			break;
 8000644:	e019      	b.n	800067a <API_Command_Data+0x72>
		case BITMAP_COMMAND:
			Seperate_Bitmap();
 8000646:	f000 f91b 	bl	8000880 <Seperate_Bitmap>
			break;
 800064a:	e016      	b.n	800067a <API_Command_Data+0x72>
		case LINE_RECT_COMMAND:
			//Since Line command and Rectangle command have the same amount of commas
			//Checks if the returned value is a line or rectangle
			if (API_ReLi_Sep() == LINE) Seperate_line();
 800064c:	f000 f81e 	bl	800068c <API_ReLi_Sep>
 8000650:	4603      	mov	r3, r0
 8000652:	2b01      	cmp	r3, #1
 8000654:	d101      	bne.n	800065a <API_Command_Data+0x52>
 8000656:	f000 f851 	bl	80006fc <Seperate_line>
		    if (API_ReLi_Sep() == RECTANGLE) Seperate_Rectangle();
 800065a:	f000 f817 	bl	800068c <API_ReLi_Sep>
 800065e:	4603      	mov	r3, r0
 8000660:	2b02      	cmp	r3, #2
 8000662:	d109      	bne.n	8000678 <API_Command_Data+0x70>
 8000664:	f000 f88a 	bl	800077c <Seperate_Rectangle>
			break;
 8000668:	e006      	b.n	8000678 <API_Command_Data+0x70>
		case TEXT_COMMAND:
			Seperate_Text();
 800066a:	f000 f8c7 	bl	80007fc <Seperate_Text>
			break;
 800066e:	e004      	b.n	800067a <API_Command_Data+0x72>
		default:
			printf("Ik ben niet in de cases gegaan");
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <API_Command_Data+0x80>)
 8000672:	f004 fc2b 	bl	8004ecc <iprintf>
			break;
 8000676:	e000      	b.n	800067a <API_Command_Data+0x72>
			break;
 8000678:	bf00      	nop
	}

}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000682:	b004      	add	sp, #16
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	08005fe8 	.word	0x08005fe8

0800068c <API_ReLi_Sep>:
//--------------------------------------------------------------
// Check if the command is a line or a rectangle
// Returns 1 if line, 2 if rectangle
//--------------------------------------------------------------
int API_ReLi_Sep(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
	int cmp;
	char comp_line[LINE_TEXT];

	for(int i = 0; i<LINE_TEXT;i++)
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	e00c      	b.n	80006b2 <API_ReLi_Sep+0x26>
	{
		comp_line[i] = input.line_rx_buffer[i];
 8000698:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <API_ReLi_Sep+0x64>)
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	4413      	add	r3, r2
 800069e:	3301      	adds	r3, #1
 80006a0:	7819      	ldrb	r1, [r3, #0]
 80006a2:	1d3a      	adds	r2, r7, #4
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	4413      	add	r3, r2
 80006a8:	460a      	mov	r2, r1
 80006aa:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<LINE_TEXT;i++)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	3301      	adds	r3, #1
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2b03      	cmp	r3, #3
 80006b6:	ddef      	ble.n	8000698 <API_ReLi_Sep+0xc>
	}

	//Compare the written command with "lijn" and "rech"
	if (strncmp ( comp_line, "lijn", sizeof(comp_line)) == 0) cmp = LINE;
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2204      	movs	r2, #4
 80006bc:	490d      	ldr	r1, [pc, #52]	; (80006f4 <API_ReLi_Sep+0x68>)
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 fc1c 	bl	8004efc <strncmp>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <API_ReLi_Sep+0x42>
 80006ca:	2301      	movs	r3, #1
 80006cc:	60fb      	str	r3, [r7, #12]
	if (strncmp ( comp_line, "rech", sizeof(comp_line))== 0) cmp = RECTANGLE;
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2204      	movs	r2, #4
 80006d2:	4909      	ldr	r1, [pc, #36]	; (80006f8 <API_ReLi_Sep+0x6c>)
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 fc11 	bl	8004efc <strncmp>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d101      	bne.n	80006e4 <API_ReLi_Sep+0x58>
 80006e0:	2302      	movs	r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]

	//Returns 1 if line, 2 if rectangle
	return cmp;
 80006e4:	68fb      	ldr	r3, [r7, #12]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000015c 	.word	0x2000015c
 80006f4:	08006008 	.word	0x08006008
 80006f8:	08006010 	.word	0x08006010

080006fc <Seperate_line>:
//--------------------------------------------------------------
// Seperate the buffer of a line-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------
void Seperate_line(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0
	int i = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000706:	463b      	mov	r3, r7
 8000708:	2228      	movs	r2, #40	; 0x28
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f004 fbd5 	bl	8004ebc <memset>

	// comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000712:	4917      	ldr	r1, [pc, #92]	; (8000770 <Seperate_line+0x74>)
 8000714:	4817      	ldr	r0, [pc, #92]	; (8000774 <Seperate_line+0x78>)
 8000716:	f004 fc05 	bl	8004f24 <strtok>
 800071a:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 800071c:	e00e      	b.n	800073c <Seperate_line+0x40>
	{
		aryvul[i]= token;
 800071e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	3330      	adds	r3, #48	; 0x30
 8000724:	443b      	add	r3, r7
 8000726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000728:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 800072c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072e:	3301      	adds	r3, #1
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000732:	490f      	ldr	r1, [pc, #60]	; (8000770 <Seperate_line+0x74>)
 8000734:	2000      	movs	r0, #0
 8000736:	f004 fbf5 	bl	8004f24 <strtok>
 800073a:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 800073c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1ed      	bne.n	800071e <Seperate_line+0x22>
 8000742:	687b      	ldr	r3, [r7, #4]
	}

	//Fills the struct
	 memcpy(&commando.x_1, &aryvul[ARRAY_FIRST_lOCATION] , sizeof(commando.x_1));
 8000744:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <Seperate_line+0x7c>)
 8000746:	60d3      	str	r3, [r2, #12]
 8000748:	68bb      	ldr	r3, [r7, #8]
	 memcpy(&commando.y_1, &aryvul[ARRAY_SECOND_lOCATION] , sizeof(commando.x_1));
 800074a:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <Seperate_line+0x7c>)
 800074c:	6113      	str	r3, [r2, #16]
 800074e:	68fb      	ldr	r3, [r7, #12]
	 memcpy(&commando.x_2, &aryvul[ARRAY_THIRD_lOCATION] , sizeof(commando.x_1));
 8000750:	4a09      	ldr	r2, [pc, #36]	; (8000778 <Seperate_line+0x7c>)
 8000752:	6153      	str	r3, [r2, #20]
 8000754:	693b      	ldr	r3, [r7, #16]
	 memcpy(&commando.y_2, &aryvul[ARRAY_FOURTH_lOCATION] , sizeof(commando.x_1));
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <Seperate_line+0x7c>)
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	697b      	ldr	r3, [r7, #20]
	 memcpy(&commando.kleur, &aryvul[ARRAY_FIFTH_lOCATION] , sizeof(commando.x_1));
 800075c:	4a06      	ldr	r2, [pc, #24]	; (8000778 <Seperate_line+0x7c>)
 800075e:	61d3      	str	r3, [r2, #28]
 8000760:	69bb      	ldr	r3, [r7, #24]
	 memcpy(&commando.dikte, &aryvul[ARRAY_SIXTH_lOCATION] , sizeof(commando.x_1));
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <Seperate_line+0x7c>)
 8000764:	6213      	str	r3, [r2, #32]
}
 8000766:	bf00      	nop
 8000768:	3730      	adds	r7, #48	; 0x30
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	08006018 	.word	0x08006018
 8000774:	2000015d 	.word	0x2000015d
 8000778:	2000008c 	.word	0x2000008c

0800077c <Seperate_Rectangle>:
//--------------------------------------------------------------
// Seperate the buffer of a rectangle-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------
void Seperate_Rectangle(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08c      	sub	sp, #48	; 0x30
 8000780:	af00      	add	r7, sp, #0
	int i = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000786:	463b      	mov	r3, r7
 8000788:	2228      	movs	r2, #40	; 0x28
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f004 fb95 	bl	8004ebc <memset>

	// comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000792:	4917      	ldr	r1, [pc, #92]	; (80007f0 <Seperate_Rectangle+0x74>)
 8000794:	4817      	ldr	r0, [pc, #92]	; (80007f4 <Seperate_Rectangle+0x78>)
 8000796:	f004 fbc5 	bl	8004f24 <strtok>
 800079a:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 800079c:	e00e      	b.n	80007bc <Seperate_Rectangle+0x40>
	{
		aryvul[i]= token;
 800079e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	3330      	adds	r3, #48	; 0x30
 80007a4:	443b      	add	r3, r7
 80007a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007a8:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 80007ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ae:	3301      	adds	r3, #1
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 80007b2:	490f      	ldr	r1, [pc, #60]	; (80007f0 <Seperate_Rectangle+0x74>)
 80007b4:	2000      	movs	r0, #0
 80007b6:	f004 fbb5 	bl	8004f24 <strtok>
 80007ba:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 80007bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1ed      	bne.n	800079e <Seperate_Rectangle+0x22>
 80007c2:	687b      	ldr	r3, [r7, #4]
	}

	//Fills the struct
	 memcpy(&commando.x_lup, &aryvul[ARRAY_FIRST_lOCATION] , sizeof(commando.x_1));
 80007c4:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <Seperate_Rectangle+0x7c>)
 80007c6:	6253      	str	r3, [r2, #36]	; 0x24
 80007c8:	68bb      	ldr	r3, [r7, #8]
	 memcpy(&commando.y_lup, &aryvul[ARRAY_SECOND_lOCATION] , sizeof(commando.x_1));
 80007ca:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <Seperate_Rectangle+0x7c>)
 80007cc:	6293      	str	r3, [r2, #40]	; 0x28
 80007ce:	68fb      	ldr	r3, [r7, #12]
	 memcpy(&commando.breedte, &aryvul[ARRAY_THIRD_lOCATION] , sizeof(commando.x_1));
 80007d0:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <Seperate_Rectangle+0x7c>)
 80007d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007d4:	693b      	ldr	r3, [r7, #16]
	 memcpy(&commando.hoogte, &aryvul[ARRAY_FOURTH_lOCATION] , sizeof(commando.x_1));
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <Seperate_Rectangle+0x7c>)
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	697b      	ldr	r3, [r7, #20]
	 memcpy(&commando.rect_kleur, &aryvul[ARRAY_FIFTH_lOCATION] , sizeof(commando.x_1));
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <Seperate_Rectangle+0x7c>)
 80007de:	6353      	str	r3, [r2, #52]	; 0x34
 80007e0:	69bb      	ldr	r3, [r7, #24]
	 memcpy(&commando.gevuld, &aryvul[ARRAY_SIXTH_lOCATION] , sizeof(commando.x_1));
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <Seperate_Rectangle+0x7c>)
 80007e4:	6393      	str	r3, [r2, #56]	; 0x38

}
 80007e6:	bf00      	nop
 80007e8:	3730      	adds	r7, #48	; 0x30
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	08006018 	.word	0x08006018
 80007f4:	2000015d 	.word	0x2000015d
 80007f8:	2000008c 	.word	0x2000008c

080007fc <Seperate_Text>:
// Seperate the buffer of a text-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------

void Seperate_Text(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
	int i = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 8000806:	463b      	mov	r3, r7
 8000808:	2228      	movs	r2, #40	; 0x28
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f004 fb55 	bl	8004ebc <memset>

	//Comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000812:	4918      	ldr	r1, [pc, #96]	; (8000874 <Seperate_Text+0x78>)
 8000814:	4818      	ldr	r0, [pc, #96]	; (8000878 <Seperate_Text+0x7c>)
 8000816:	f004 fb85 	bl	8004f24 <strtok>
 800081a:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 800081c:	e00e      	b.n	800083c <Seperate_Text+0x40>
	{
		aryvul[i]= token;
 800081e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	3330      	adds	r3, #48	; 0x30
 8000824:	443b      	add	r3, r7
 8000826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000828:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 800082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800082e:	3301      	adds	r3, #1
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000832:	4910      	ldr	r1, [pc, #64]	; (8000874 <Seperate_Text+0x78>)
 8000834:	2000      	movs	r0, #0
 8000836:	f004 fb75 	bl	8004f24 <strtok>
 800083a:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 800083c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1ed      	bne.n	800081e <Seperate_Text+0x22>
 8000842:	687b      	ldr	r3, [r7, #4]
	}

	//Fills the struct
	 memcpy(&commando.x, &aryvul[ARRAY_FIRST_lOCATION] , sizeof(commando.x_1));
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <Seperate_Text+0x80>)
 8000846:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000848:	68bb      	ldr	r3, [r7, #8]
	 memcpy(&commando.y, &aryvul[ARRAY_SECOND_lOCATION] , sizeof(commando.x_1));
 800084a:	4a0c      	ldr	r2, [pc, #48]	; (800087c <Seperate_Text+0x80>)
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	68fb      	ldr	r3, [r7, #12]
	 memcpy(&commando.text_kleur, &aryvul[ARRAY_THIRD_lOCATION] , sizeof(commando.x_1));
 8000850:	4a0a      	ldr	r2, [pc, #40]	; (800087c <Seperate_Text+0x80>)
 8000852:	6453      	str	r3, [r2, #68]	; 0x44
 8000854:	693b      	ldr	r3, [r7, #16]
	 memcpy(&commando.tekst, &aryvul[ARRAY_FOURTH_lOCATION] , sizeof(commando.x_1));
 8000856:	4a09      	ldr	r2, [pc, #36]	; (800087c <Seperate_Text+0x80>)
 8000858:	6493      	str	r3, [r2, #72]	; 0x48
 800085a:	697b      	ldr	r3, [r7, #20]
	 memcpy(&commando.fontnaam, &aryvul[ARRAY_FIFTH_lOCATION] , sizeof(commando.x_1));
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <Seperate_Text+0x80>)
 800085e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000860:	69bb      	ldr	r3, [r7, #24]
	 memcpy(&commando.fontgrootte, &aryvul[ARRAY_SIXTH_lOCATION] , sizeof(commando.x_1));
 8000862:	4a06      	ldr	r2, [pc, #24]	; (800087c <Seperate_Text+0x80>)
 8000864:	6513      	str	r3, [r2, #80]	; 0x50
 8000866:	69fb      	ldr	r3, [r7, #28]
	 memcpy(&commando.fontstijl, &aryvul[ARRAY_SEVENTH_lOCATION] , sizeof(commando.x_1));
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <Seperate_Text+0x80>)
 800086a:	6553      	str	r3, [r2, #84]	; 0x54

}
 800086c:	bf00      	nop
 800086e:	3730      	adds	r7, #48	; 0x30
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	08006018 	.word	0x08006018
 8000878:	2000015d 	.word	0x2000015d
 800087c:	2000008c 	.word	0x2000008c

08000880 <Seperate_Bitmap>:
// Seperate the buffer of a Bitmap-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------

void Seperate_Bitmap(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	; 0x30
 8000884:	af00      	add	r7, sp, #0
	int i = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 800088a:	463b      	mov	r3, r7
 800088c:	2228      	movs	r2, #40	; 0x28
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f004 fb13 	bl	8004ebc <memset>

	//Comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000896:	4912      	ldr	r1, [pc, #72]	; (80008e0 <Seperate_Bitmap+0x60>)
 8000898:	4812      	ldr	r0, [pc, #72]	; (80008e4 <Seperate_Bitmap+0x64>)
 800089a:	f004 fb43 	bl	8004f24 <strtok>
 800089e:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 80008a0:	e00e      	b.n	80008c0 <Seperate_Bitmap+0x40>
	{
		aryvul[i]= token;
 80008a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	3330      	adds	r3, #48	; 0x30
 80008a8:	443b      	add	r3, r7
 80008aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008ac:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 80008b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b2:	3301      	adds	r3, #1
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 80008b6:	490a      	ldr	r1, [pc, #40]	; (80008e0 <Seperate_Bitmap+0x60>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f004 fb33 	bl	8004f24 <strtok>
 80008be:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 80008c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1ed      	bne.n	80008a2 <Seperate_Bitmap+0x22>
 80008c6:	687b      	ldr	r3, [r7, #4]
	}

	//Fills the struct
	 memcpy(&commando.nr, &aryvul[ARRAY_FIRST_lOCATION] , sizeof(commando.x_1));
 80008c8:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <Seperate_Bitmap+0x68>)
 80008ca:	6593      	str	r3, [r2, #88]	; 0x58
 80008cc:	68bb      	ldr	r3, [r7, #8]
	 memcpy(&commando.x_lup_bitmap, &aryvul[ARRAY_SECOND_lOCATION] , sizeof(commando.x_1));
 80008ce:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <Seperate_Bitmap+0x68>)
 80008d0:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008d2:	68fb      	ldr	r3, [r7, #12]
	 memcpy(&commando.y_lup_bitmap, &aryvul[ARRAY_THIRD_lOCATION] , sizeof(commando.x_1));
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <Seperate_Bitmap+0x68>)
 80008d6:	6613      	str	r3, [r2, #96]	; 0x60
}
 80008d8:	bf00      	nop
 80008da:	3730      	adds	r7, #48	; 0x30
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	08006018 	.word	0x08006018
 80008e4:	2000015d 	.word	0x2000015d
 80008e8:	2000008c 	.word	0x2000008c

080008ec <Seperate_Clearscreen>:
// Seperate the buffer of a Clearscreen-command using comma as delimiter
// Fills the variables in the struct
//--------------------------------------------------------------

void Seperate_Clearscreen(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
	int i = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	char* aryvul[ARRAY_SIZE]={0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2228      	movs	r2, #40	; 0x28
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f004 fadd 	bl	8004ebc <memset>

	//Comma is delimiter
	char * token = strtok(input.line_rx_buffer, ",");
 8000902:	490f      	ldr	r1, [pc, #60]	; (8000940 <Seperate_Clearscreen+0x54>)
 8000904:	480f      	ldr	r0, [pc, #60]	; (8000944 <Seperate_Clearscreen+0x58>)
 8000906:	f004 fb0d 	bl	8004f24 <strtok>
 800090a:	62b8      	str	r0, [r7, #40]	; 0x28

	//Fills an array with the seperated tokens
	while( token != NULL )
 800090c:	e00e      	b.n	800092c <Seperate_Clearscreen+0x40>
	{
		aryvul[i]= token;
 800090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	3330      	adds	r3, #48	; 0x30
 8000914:	443b      	add	r3, r7
 8000916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000918:	f843 2c30 	str.w	r2, [r3, #-48]
		i++;
 800091c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800091e:	3301      	adds	r3, #1
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
		token = strtok(NULL, ",");
 8000922:	4907      	ldr	r1, [pc, #28]	; (8000940 <Seperate_Clearscreen+0x54>)
 8000924:	2000      	movs	r0, #0
 8000926:	f004 fafd 	bl	8004f24 <strtok>
 800092a:	62b8      	str	r0, [r7, #40]	; 0x28
	while( token != NULL )
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1ed      	bne.n	800090e <Seperate_Clearscreen+0x22>
 8000932:	687b      	ldr	r3, [r7, #4]
	}

	//Fills the struct
	memcpy(&commando.color_screen, &aryvul[ARRAY_FIRST_lOCATION] , sizeof(commando.x_1));
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <Seperate_Clearscreen+0x5c>)
 8000936:	6653      	str	r3, [r2, #100]	; 0x64
}
 8000938:	bf00      	nop
 800093a:	3730      	adds	r7, #48	; 0x30
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	08006018 	.word	0x08006018
 8000944:	2000015d 	.word	0x2000015d
 8000948:	2000008c 	.word	0x2000008c

0800094c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_DMA_Init+0x3c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <MX_DMA_Init+0x3c>)
 800095c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_DMA_Init+0x3c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2044      	movs	r0, #68	; 0x44
 8000974:	f001 f829 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000978:	2044      	movs	r0, #68	; 0x44
 800097a:	f001 f842 	bl	8001a02 <HAL_NVIC_EnableIRQ>

}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <plotLine>:
 */

#include "main.h"

void plotLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,uint8_t COLOR)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	4604      	mov	r4, r0
 8000994:	4608      	mov	r0, r1
 8000996:	4611      	mov	r1, r2
 8000998:	461a      	mov	r2, r3
 800099a:	4623      	mov	r3, r4
 800099c:	80fb      	strh	r3, [r7, #6]
 800099e:	4603      	mov	r3, r0
 80009a0:	80bb      	strh	r3, [r7, #4]
 80009a2:	460b      	mov	r3, r1
 80009a4:	807b      	strh	r3, [r7, #2]
 80009a6:	4613      	mov	r3, r2
 80009a8:	803b      	strh	r3, [r7, #0]
     int dx =  abs(x1-x0), sx = x0<x1 ? 1 : -1;
 80009aa:	887a      	ldrh	r2, [r7, #2]
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bfb8      	it	lt
 80009b4:	425b      	neglt	r3, r3
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	88fa      	ldrh	r2, [r7, #6]
 80009ba:	887b      	ldrh	r3, [r7, #2]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d201      	bcs.n	80009c4 <plotLine+0x38>
 80009c0:	2301      	movs	r3, #1
 80009c2:	e001      	b.n	80009c8 <plotLine+0x3c>
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295
 80009c8:	617b      	str	r3, [r7, #20]
     int dy = -abs(y1-y0), sy = y0<y1 ? 1 : -1;
 80009ca:	883a      	ldrh	r2, [r7, #0]
 80009cc:	88bb      	ldrh	r3, [r7, #4]
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	bfb8      	it	lt
 80009d4:	425b      	neglt	r3, r3
 80009d6:	425b      	negs	r3, r3
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	88ba      	ldrh	r2, [r7, #4]
 80009dc:	883b      	ldrh	r3, [r7, #0]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d201      	bcs.n	80009e6 <plotLine+0x5a>
 80009e2:	2301      	movs	r3, #1
 80009e4:	e001      	b.n	80009ea <plotLine+0x5e>
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	60fb      	str	r3, [r7, #12]
     int err = dx+dy, e2; /* error value e_xy */
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	4413      	add	r3, r2
 80009f2:	61fb      	str	r3, [r7, #28]

     for(;;){  /* loop */
    	 UB_VGA_SetPixel(x0,y0,COLOR);
 80009f4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80009f8:	88b9      	ldrh	r1, [r7, #4]
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 fe6f 	bl	80016e0 <UB_VGA_SetPixel>
        if (x0==x1 && y0==y1) break;
 8000a02:	88fa      	ldrh	r2, [r7, #6]
 8000a04:	887b      	ldrh	r3, [r7, #2]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d103      	bne.n	8000a12 <plotLine+0x86>
 8000a0a:	88ba      	ldrh	r2, [r7, #4]
 8000a0c:	883b      	ldrh	r3, [r7, #0]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d01d      	beq.n	8000a4e <plotLine+0xc2>
        e2 = 2*err;
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
        if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
 8000a18:	68ba      	ldr	r2, [r7, #8]
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	db08      	blt.n	8000a32 <plotLine+0xa6>
 8000a20:	69fa      	ldr	r2, [r7, #28]
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	4413      	add	r3, r2
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	88fb      	ldrh	r3, [r7, #6]
 8000a2e:	4413      	add	r3, r2
 8000a30:	80fb      	strh	r3, [r7, #6]
        if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dcdc      	bgt.n	80009f4 <plotLine+0x68>
 8000a3a:	69fa      	ldr	r2, [r7, #28]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	4413      	add	r3, r2
 8000a40:	61fb      	str	r3, [r7, #28]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	88bb      	ldrh	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	80bb      	strh	r3, [r7, #4]
    	 UB_VGA_SetPixel(x0,y0,COLOR);
 8000a4c:	e7d2      	b.n	80009f4 <plotLine+0x68>
        if (x0==x1 && y0==y1) break;
 8000a4e:	bf00      	nop
    }
}
 8000a50:	bf00      	nop
 8000a52:	3724      	adds	r7, #36	; 0x24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd90      	pop	{r4, r7, pc}

08000a58 <plotRect>:


void plotRect(uint16_t xp,uint16_t yp,uint16_t width,uint16_t length, uint8_t COLOR, uint16_t fill)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b087      	sub	sp, #28
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	4604      	mov	r4, r0
 8000a60:	4608      	mov	r0, r1
 8000a62:	4611      	mov	r1, r2
 8000a64:	461a      	mov	r2, r3
 8000a66:	4623      	mov	r3, r4
 8000a68:	80fb      	strh	r3, [r7, #6]
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80bb      	strh	r3, [r7, #4]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	807b      	strh	r3, [r7, #2]
 8000a72:	4613      	mov	r3, r2
 8000a74:	803b      	strh	r3, [r7, #0]
	int y1;
	if(fill==FALSE)
 8000a76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d140      	bne.n	8000afe <plotRect+0xa6>
	{
	plotLine(xp,yp,xp,yp+length,COLOR);
 8000a7c:	88ba      	ldrh	r2, [r7, #4]
 8000a7e:	883b      	ldrh	r3, [r7, #0]
 8000a80:	4413      	add	r3, r2
 8000a82:	b29c      	uxth	r4, r3
 8000a84:	88fa      	ldrh	r2, [r7, #6]
 8000a86:	88b9      	ldrh	r1, [r7, #4]
 8000a88:	88f8      	ldrh	r0, [r7, #6]
 8000a8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	4623      	mov	r3, r4
 8000a92:	f7ff ff7b 	bl	800098c <plotLine>
	plotLine(xp,yp,xp+width,yp,COLOR);
 8000a96:	88fa      	ldrh	r2, [r7, #6]
 8000a98:	887b      	ldrh	r3, [r7, #2]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	88bc      	ldrh	r4, [r7, #4]
 8000aa0:	88b9      	ldrh	r1, [r7, #4]
 8000aa2:	88f8      	ldrh	r0, [r7, #6]
 8000aa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	4623      	mov	r3, r4
 8000aac:	f7ff ff6e 	bl	800098c <plotLine>
	plotLine(xp+width,yp+length,xp+width,yp,COLOR);
 8000ab0:	88fa      	ldrh	r2, [r7, #6]
 8000ab2:	887b      	ldrh	r3, [r7, #2]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b298      	uxth	r0, r3
 8000ab8:	88ba      	ldrh	r2, [r7, #4]
 8000aba:	883b      	ldrh	r3, [r7, #0]
 8000abc:	4413      	add	r3, r2
 8000abe:	b299      	uxth	r1, r3
 8000ac0:	88fa      	ldrh	r2, [r7, #6]
 8000ac2:	887b      	ldrh	r3, [r7, #2]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	88bc      	ldrh	r4, [r7, #4]
 8000aca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	4623      	mov	r3, r4
 8000ad2:	f7ff ff5b 	bl	800098c <plotLine>
	plotLine(xp+width,yp+length,xp,yp+length,COLOR);
 8000ad6:	88fa      	ldrh	r2, [r7, #6]
 8000ad8:	887b      	ldrh	r3, [r7, #2]
 8000ada:	4413      	add	r3, r2
 8000adc:	b298      	uxth	r0, r3
 8000ade:	88ba      	ldrh	r2, [r7, #4]
 8000ae0:	883b      	ldrh	r3, [r7, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b299      	uxth	r1, r3
 8000ae6:	88ba      	ldrh	r2, [r7, #4]
 8000ae8:	883b      	ldrh	r3, [r7, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	b29c      	uxth	r4, r3
 8000aee:	88fa      	ldrh	r2, [r7, #6]
 8000af0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	4623      	mov	r3, r4
 8000af8:	f7ff ff48 	bl	800098c <plotLine>
		for(y1=yp; y1<(yp+length); y1++)
		{
			plotLine(xp,yp+y1,xp+width,yp+(y1),COLOR>>1);
		}
	}
}
 8000afc:	e025      	b.n	8000b4a <plotRect+0xf2>
	y1 =yp;
 8000afe:	88bb      	ldrh	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]
		for(y1=yp; y1<(yp+length); y1++)
 8000b02:	88bb      	ldrh	r3, [r7, #4]
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	e01a      	b.n	8000b3e <plotRect+0xe6>
			plotLine(xp,yp+y1,xp+width,yp+(y1),COLOR>>1);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	88bb      	ldrh	r3, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	b299      	uxth	r1, r3
 8000b12:	88fa      	ldrh	r2, [r7, #6]
 8000b14:	887b      	ldrh	r3, [r7, #2]
 8000b16:	4413      	add	r3, r2
 8000b18:	b29c      	uxth	r4, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	88bb      	ldrh	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b28:	085b      	lsrs	r3, r3, #1
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	88f8      	ldrh	r0, [r7, #6]
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	4613      	mov	r3, r2
 8000b32:	4622      	mov	r2, r4
 8000b34:	f7ff ff2a 	bl	800098c <plotLine>
		for(y1=yp; y1<(yp+length); y1++)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	88ba      	ldrh	r2, [r7, #4]
 8000b40:	883b      	ldrh	r3, [r7, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	dbde      	blt.n	8000b08 <plotRect+0xb0>
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd90      	pop	{r4, r7, pc}
	...

08000b54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <MX_GPIO_Init+0xe4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a31      	ldr	r2, [pc, #196]	; (8000c38 <MX_GPIO_Init+0xe4>)
 8000b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <MX_GPIO_Init+0xe4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <MX_GPIO_Init+0xe4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a2a      	ldr	r2, [pc, #168]	; (8000c38 <MX_GPIO_Init+0xe4>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <MX_GPIO_Init+0xe4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <MX_GPIO_Init+0xe4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <MX_GPIO_Init+0xe4>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_GPIO_Init+0xe4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <MX_GPIO_Init+0xe4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <MX_GPIO_Init+0xe4>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_GPIO_Init+0xe4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000be0:	4816      	ldr	r0, [pc, #88]	; (8000c3c <MX_GPIO_Init+0xe8>)
 8000be2:	f001 fc57 	bl	8002494 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bec:	4814      	ldr	r0, [pc, #80]	; (8000c40 <MX_GPIO_Init+0xec>)
 8000bee:	f001 fc51 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000bf2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000bf6:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480c      	ldr	r0, [pc, #48]	; (8000c3c <MX_GPIO_Init+0xe8>)
 8000c0c:	f001 faa6 	bl	800215c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_GPIO_Init+0xec>)
 8000c2a:	f001 fa97 	bl	800215c <HAL_GPIO_Init>

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40020400 	.word	0x40020400

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b097      	sub	sp, #92	; 0x5c
 8000c48:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4a:	f000 fd71 	bl	8001730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4e:	f000 f84b 	bl	8000ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c52:	f7ff ff7f 	bl	8000b54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c56:	f7ff fe79 	bl	800094c <MX_DMA_Init>
  MX_TIM1_Init();
 8000c5a:	f000 fabf 	bl	80011dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c5e:	f000 fb0d 	bl	800127c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000c62:	f000 fc23 	bl	80014ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8000c66:	f000 fcc5 	bl	80015f4 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 fd14 	bl	8001698 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 8000c70:	220a      	movs	r2, #10
 8000c72:	210a      	movs	r1, #10
 8000c74:	200a      	movs	r0, #10
 8000c76:	f000 fd33 	bl	80016e0 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 fd2e 	bl	80016e0 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	f240 103f 	movw	r0, #319	; 0x13f
 8000c8c:	f000 fd28 	bl	80016e0 <UB_VGA_SetPixel>

  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000c90:	2201      	movs	r2, #1
 8000c92:	4912      	ldr	r1, [pc, #72]	; (8000cdc <main+0x98>)
 8000c94:	4812      	ldr	r0, [pc, #72]	; (8000ce0 <main+0x9c>)
 8000c96:	f003 f92b 	bl	8003ef0 <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  //unsigned char colorTest = TRUE;

  /* USER CODE END 2 */
plotRect(50,50,50,50,VGA_COL_GREEN,1);
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	231c      	movs	r3, #28
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2332      	movs	r3, #50	; 0x32
 8000ca4:	2232      	movs	r2, #50	; 0x32
 8000ca6:	2132      	movs	r1, #50	; 0x32
 8000ca8:	2032      	movs	r0, #50	; 0x32
 8000caa:	f7ff fed5 	bl	8000a58 <plotRect>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 if(input.command_execute_flag == TRUE)
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <main+0x98>)
 8000cb0:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8000cb4:	2bff      	cmp	r3, #255	; 0xff
 8000cb6:	d1fa      	bne.n	8000cae <main+0x6a>
	  {
		 API_Getcommand(commandos);
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ce4 <main+0xa0>)
 8000cba:	4668      	mov	r0, sp
 8000cbc:	f104 0310 	add.w	r3, r4, #16
 8000cc0:	2258      	movs	r2, #88	; 0x58
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f004 f8ec 	bl	8004ea0 <memcpy>
 8000cc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ccc:	f7ff fc52 	bl	8000574 <API_Getcommand>

	  // When finished reset the flag
	     input.command_execute_flag = FALSE;
 8000cd0:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <main+0x98>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	 if(input.command_execute_flag == TRUE)
 8000cd8:	e7e9      	b.n	8000cae <main+0x6a>
 8000cda:	bf00      	nop
 8000cdc:	2000015c 	.word	0x2000015c
 8000ce0:	20000650 	.word	0x20000650
 8000ce4:	200000f4 	.word	0x200000f4

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b094      	sub	sp, #80	; 0x50
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	2230      	movs	r2, #48	; 0x30
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f004 f8e0 	bl	8004ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <SystemClock_Config+0xcc>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	4a27      	ldr	r2, [pc, #156]	; (8000db4 <SystemClock_Config+0xcc>)
 8000d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1c:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <SystemClock_Config+0xcc>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <SystemClock_Config+0xd0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a21      	ldr	r2, [pc, #132]	; (8000db8 <SystemClock_Config+0xd0>)
 8000d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <SystemClock_Config+0xd0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d44:	2301      	movs	r3, #1
 8000d46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d5c:	23a8      	movs	r3, #168	; 0xa8
 8000d5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d64:	2304      	movs	r3, #4
 8000d66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d68:	f107 0320 	add.w	r3, r7, #32
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 fbab 	bl	80024c8 <HAL_RCC_OscConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d78:	f000 f832 	bl	8000de0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d80:	2302      	movs	r3, #2
 8000d82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2105      	movs	r1, #5
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 fe02 	bl	80029a4 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000da6:	f000 f81b 	bl	8000de0 <Error_Handler>
  }
}
 8000daa:	bf00      	nop
 8000dac:	3750      	adds	r7, #80	; 0x50
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40007000 	.word	0x40007000

08000dbc <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000dc4:	1d39      	adds	r1, r7, #4
 8000dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <__io_putchar+0x20>)
 8000dce:	f002 fff6 	bl	8003dbe <HAL_UART_Transmit>
	return ch;												//Return the character
 8000dd2:	687b      	ldr	r3, [r7, #4]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000650 	.word	0x20000650

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <HAL_MspInit+0x4c>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <HAL_MspInit+0x4c>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_MspInit+0x4c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_MspInit+0x4c>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_MspInit+0x4c>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 fc9e 	bl	80017d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ea0:	4828      	ldr	r0, [pc, #160]	; (8000f44 <TIM2_IRQHandler+0xa8>)
 8000ea2:	f002 f8db 	bl	800305c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000ea6:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <TIM2_IRQHandler+0xa8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f06f 0208 	mvn.w	r2, #8
 8000eae:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000eb0:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <TIM2_IRQHandler+0xac>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <TIM2_IRQHandler+0xac>)
 8000eba:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <TIM2_IRQHandler+0xac>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000ec4:	d905      	bls.n	8000ed2 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000ec6:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <TIM2_IRQHandler+0xac>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000ecc:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <TIM2_IRQHandler+0xb0>)
 8000ece:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <TIM2_IRQHandler+0xac>)
 8000ed0:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <TIM2_IRQHandler+0xac>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d802      	bhi.n	8000ee0 <TIM2_IRQHandler+0x44>
 8000eda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ede:	e001      	b.n	8000ee4 <TIM2_IRQHandler+0x48>
 8000ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee4:	4a1a      	ldr	r2, [pc, #104]	; (8000f50 <TIM2_IRQHandler+0xb4>)
 8000ee6:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000ee8:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <TIM2_IRQHandler+0xac>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	2b23      	cmp	r3, #35	; 0x23
 8000eee:	d927      	bls.n	8000f40 <TIM2_IRQHandler+0xa4>
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <TIM2_IRQHandler+0xac>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	f240 2202 	movw	r2, #514	; 0x202
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d821      	bhi.n	8000f40 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000efc:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <TIM2_IRQHandler+0xb8>)
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <TIM2_IRQHandler+0xac>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000f04:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <TIM2_IRQHandler+0xb8>)
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <TIM2_IRQHandler+0xac>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <TIM2_IRQHandler+0xbc>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a11      	ldr	r2, [pc, #68]	; (8000f58 <TIM2_IRQHandler+0xbc>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <TIM2_IRQHandler+0xc0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <TIM2_IRQHandler+0xc0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0201 	orr.w	r2, r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <TIM2_IRQHandler+0xac>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <TIM2_IRQHandler+0xac>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000f3c:	4a02      	ldr	r2, [pc, #8]	; (8000f48 <TIM2_IRQHandler+0xac>)
 8000f3e:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200005b0 	.word	0x200005b0
 8000f48:	20013380 	.word	0x20013380
 8000f4c:	20000690 	.word	0x20000690
 8000f50:	40020400 	.word	0x40020400
 8000f54:	40026488 	.word	0x40026488
 8000f58:	40010000 	.word	0x40010000
 8000f5c:	200005f0 	.word	0x200005f0

08000f60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <USART2_IRQHandler+0x78>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	71fb      	strb	r3, [r7, #7]


//	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b0a      	cmp	r3, #10
 8000f70:	d026      	beq.n	8000fc0 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	2b0d      	cmp	r3, #13
 8000f76:	d002      	beq.n	8000f7e <USART2_IRQHandler+0x1e>
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8000f7c:	d10e      	bne.n	8000f9c <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <USART2_IRQHandler+0x7c>)
 8000f80:	22ff      	movs	r2, #255	; 0xff
 8000f82:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <USART2_IRQHandler+0x7c>)
 8000f88:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000f8c:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <USART2_IRQHandler+0x7c>)
 8000f8e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <USART2_IRQHandler+0x7c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000f9a:	e011      	b.n	8000fc0 <USART2_IRQHandler+0x60>

		}
		else
		{
			input.command_execute_flag = FALSE;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <USART2_IRQHandler+0x7c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <USART2_IRQHandler+0x7c>)
 8000fa6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000faa:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <USART2_IRQHandler+0x7c>)
 8000fac:	4413      	add	r3, r2
 8000fae:	79fa      	ldrb	r2, [r7, #7]
 8000fb0:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <USART2_IRQHandler+0x7c>)
 8000fb4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000fb8:	3301      	adds	r3, #1
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <USART2_IRQHandler+0x7c>)
 8000fbc:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}

	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fc0:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <USART2_IRQHandler+0x80>)
 8000fc2:	f002 ffeb 	bl	8003f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, BYTE_BUFLEN);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4904      	ldr	r1, [pc, #16]	; (8000fdc <USART2_IRQHandler+0x7c>)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <USART2_IRQHandler+0x80>)
 8000fcc:	f002 ff90 	bl	8003ef0 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */

}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40004400 	.word	0x40004400
 8000fdc:	2000015c 	.word	0x2000015c
 8000fe0:	20000650 	.word	0x20000650

08000fe4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000fe8:	4b10      	ldr	r3, [pc, #64]	; (800102c <DMA2_Stream5_IRQHandler+0x48>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6a1a      	ldr	r2, [r3, #32]
 8000fee:	f241 1311 	movw	r3, #4369	; 0x1111
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10f      	bne.n	8001018 <DMA2_Stream5_IRQHandler+0x34>
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <DMA2_Stream5_IRQHandler+0x48>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6a1a      	ldr	r2, [r3, #32]
 8000ffe:	f240 4344 	movw	r3, #1092	; 0x444
 8001002:	4013      	ands	r3, r2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d107      	bne.n	8001018 <DMA2_Stream5_IRQHandler+0x34>
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <DMA2_Stream5_IRQHandler+0x48>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <DMA2_Stream5_IRQHandler+0x48>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0201 	bic.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <DMA2_Stream5_IRQHandler+0x4c>)
 800101a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800101e:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <DMA2_Stream5_IRQHandler+0x50>)
 8001022:	f000 fe31 	bl	8001c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000570 	.word	0x20000570
 8001030:	40021000 	.word	0x40021000
 8001034:	200005f0 	.word	0x200005f0

08001038 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
	return 1;
 800103c:	2301      	movs	r3, #1
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_kill>:

int _kill(int pid, int sig)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001052:	f003 fefb 	bl	8004e4c <__errno>
 8001056:	4603      	mov	r3, r0
 8001058:	2216      	movs	r2, #22
 800105a:	601a      	str	r2, [r3, #0]
	return -1;
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <_exit>:

void _exit (int status)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ffe7 	bl	8001048 <_kill>
	while (1) {}		/* Make sure we hang here */
 800107a:	e7fe      	b.n	800107a <_exit+0x12>

0800107c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	e00a      	b.n	80010a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800108e:	f3af 8000 	nop.w
 8001092:	4601      	mov	r1, r0
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	60ba      	str	r2, [r7, #8]
 800109a:	b2ca      	uxtb	r2, r1
 800109c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	dbf0      	blt.n	800108e <_read+0x12>
	}

return len;
 80010ac:	687b      	ldr	r3, [r7, #4]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	e009      	b.n	80010dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	60ba      	str	r2, [r7, #8]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fe73 	bl	8000dbc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dbf1      	blt.n	80010c8 <_write+0x12>
	}
	return len;
 80010e4:	687b      	ldr	r3, [r7, #4]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <_close>:

int _close(int file)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
	return -1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001116:	605a      	str	r2, [r3, #4]
	return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_isatty>:

int _isatty(int file)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
	return 1;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
	return 0;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <_sbrk+0x50>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <_sbrk+0x16>
		heap_end = &end;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <_sbrk+0x50>)
 800116a:	4a10      	ldr	r2, [pc, #64]	; (80011ac <_sbrk+0x54>)
 800116c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <_sbrk+0x50>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <_sbrk+0x50>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	466a      	mov	r2, sp
 800117e:	4293      	cmp	r3, r2
 8001180:	d907      	bls.n	8001192 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001182:	f003 fe63 	bl	8004e4c <__errno>
 8001186:	4603      	mov	r3, r0
 8001188:	220c      	movs	r2, #12
 800118a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	e006      	b.n	80011a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001192:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <_sbrk+0x50>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	4a03      	ldr	r2, [pc, #12]	; (80011a8 <_sbrk+0x50>)
 800119c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000056c 	.word	0x2000056c
 80011ac:	200133a0 	.word	0x200133a0

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <SystemInit+0x28>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <SystemInit+0x28>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SystemInit+0x28>)
 80011c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ca:	609a      	str	r2, [r3, #8]
#endif
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80011f8:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <MX_TIM1_Init+0x98>)
 80011fa:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <MX_TIM1_Init+0x9c>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_TIM1_Init+0x98>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_TIM1_Init+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_TIM1_Init+0x98>)
 800120c:	220b      	movs	r2, #11
 800120e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_TIM1_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_TIM1_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_TIM1_Init+0x98>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001222:	4814      	ldr	r0, [pc, #80]	; (8001274 <MX_TIM1_Init+0x98>)
 8001224:	f001 fdde 	bl	8002de4 <HAL_TIM_Base_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800122e:	f7ff fdd7 	bl	8000de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001236:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	4619      	mov	r1, r3
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_TIM1_Init+0x98>)
 8001240:	f002 f8da 	bl	80033f8 <HAL_TIM_ConfigClockSource>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800124a:	f7ff fdc9 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <MX_TIM1_Init+0x98>)
 800125c:	f002 fcd2 	bl	8003c04 <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001266:	f7ff fdbb 	bl	8000de0 <Error_Handler>
  }

}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000570 	.word	0x20000570
 8001278:	40010000 	.word	0x40010000

0800127c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <MX_TIM2_Init+0xcc>)
 80012a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <MX_TIM2_Init+0xcc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <MX_TIM2_Init+0xcc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 80012b2:	4b25      	ldr	r3, [pc, #148]	; (8001348 <MX_TIM2_Init+0xcc>)
 80012b4:	f640 226b 	movw	r2, #2667	; 0xa6b
 80012b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <MX_TIM2_Init+0xcc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <MX_TIM2_Init+0xcc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012c6:	4820      	ldr	r0, [pc, #128]	; (8001348 <MX_TIM2_Init+0xcc>)
 80012c8:	f001 fddb 	bl	8002e82 <HAL_TIM_PWM_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012d2:	f7ff fd85 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	4619      	mov	r1, r3
 80012e4:	4818      	ldr	r0, [pc, #96]	; (8001348 <MX_TIM2_Init+0xcc>)
 80012e6:	f002 fc8d 	bl	8003c04 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80012f0:	f7ff fd76 	bl	8000de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f4:	2360      	movs	r3, #96	; 0x60
 80012f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 80012f8:	f240 13bb 	movw	r3, #443	; 0x1bb
 80012fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80012fe:	2302      	movs	r3, #2
 8001300:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2208      	movs	r2, #8
 800130a:	4619      	mov	r1, r3
 800130c:	480e      	ldr	r0, [pc, #56]	; (8001348 <MX_TIM2_Init+0xcc>)
 800130e:	f001 ffad 	bl	800326c <HAL_TIM_PWM_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001318:	f7ff fd62 	bl	8000de0 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 800131c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001320:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	220c      	movs	r2, #12
 8001326:	4619      	mov	r1, r3
 8001328:	4807      	ldr	r0, [pc, #28]	; (8001348 <MX_TIM2_Init+0xcc>)
 800132a:	f001 ff9f 	bl	800326c <HAL_TIM_PWM_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001334:	f7ff fd54 	bl	8000de0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001338:	4803      	ldr	r0, [pc, #12]	; (8001348 <MX_TIM2_Init+0xcc>)
 800133a:	f000 f87f 	bl	800143c <HAL_TIM_MspPostInit>

}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200005b0 	.word	0x200005b0

0800134c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a21      	ldr	r2, [pc, #132]	; (80013e0 <HAL_TIM_Base_MspInit+0x94>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d13c      	bne.n	80013d8 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <HAL_TIM_Base_MspInit+0x98>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <HAL_TIM_Base_MspInit+0x98>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <HAL_TIM_Base_MspInit+0x98>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_TIM_Base_MspInit+0x9c>)
 800137c:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <HAL_TIM_Base_MspInit+0xa0>)
 800137e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <HAL_TIM_Base_MspInit+0x9c>)
 8001382:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001386:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <HAL_TIM_Base_MspInit+0x9c>)
 800138a:	2240      	movs	r2, #64	; 0x40
 800138c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_TIM_Base_MspInit+0x9c>)
 8001390:	2200      	movs	r2, #0
 8001392:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_TIM_Base_MspInit+0x9c>)
 8001396:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800139a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_TIM_Base_MspInit+0x9c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_TIM_Base_MspInit+0x9c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_TIM_Base_MspInit+0x9c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_TIM_Base_MspInit+0x9c>)
 80013b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013b4:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_TIM_Base_MspInit+0x9c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80013bc:	480a      	ldr	r0, [pc, #40]	; (80013e8 <HAL_TIM_Base_MspInit+0x9c>)
 80013be:	f000 fb3b 	bl	8001a38 <HAL_DMA_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 80013c8:	f7ff fd0a 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <HAL_TIM_Base_MspInit+0x9c>)
 80013d0:	621a      	str	r2, [r3, #32]
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <HAL_TIM_Base_MspInit+0x9c>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40010000 	.word	0x40010000
 80013e4:	40023800 	.word	0x40023800
 80013e8:	200005f0 	.word	0x200005f0
 80013ec:	40026488 	.word	0x40026488

080013f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001400:	d115      	bne.n	800142e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_TIM_PWM_MspInit+0x48>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <HAL_TIM_PWM_MspInit+0x48>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_TIM_PWM_MspInit+0x48>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	201c      	movs	r0, #28
 8001424:	f000 fad1 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001428:	201c      	movs	r0, #28
 800142a:	f000 faea 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800145c:	d11e      	bne.n	800149c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_TIM_MspPostInit+0x68>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <HAL_TIM_MspPostInit+0x68>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_TIM_MspPostInit+0x68>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 800147a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800147e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800148c:	2301      	movs	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	4804      	ldr	r0, [pc, #16]	; (80014a8 <HAL_TIM_MspPostInit+0x6c>)
 8001498:	f000 fe60 	bl	800215c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400

080014ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <MX_USART2_UART_Init+0x50>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014e4:	f002 fc1e 	bl	8003d24 <HAL_UART_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ee:	f7ff fc77 	bl	8000de0 <Error_Handler>
  }

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000650 	.word	0x20000650
 80014fc:	40004400 	.word	0x40004400

08001500 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <HAL_UART_MspInit+0x94>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d133      	bne.n	800158a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <HAL_UART_MspInit+0x98>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <HAL_UART_MspInit+0x98>)
 800152c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HAL_UART_MspInit+0x98>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_UART_MspInit+0x98>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a14      	ldr	r2, [pc, #80]	; (8001598 <HAL_UART_MspInit+0x98>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_UART_MspInit+0x98>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800155a:	230c      	movs	r3, #12
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800156a:	2307      	movs	r3, #7
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4809      	ldr	r0, [pc, #36]	; (800159c <HAL_UART_MspInit+0x9c>)
 8001576:	f000 fdf1 	bl	800215c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2026      	movs	r0, #38	; 0x26
 8001580:	f000 fa23 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001584:	2026      	movs	r0, #38	; 0x26
 8001586:	f000 fa3c 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40004400 	.word	0x40004400
 8001598:	40023800 	.word	0x40023800
 800159c:	40020000 	.word	0x40020000

080015a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015a6:	e003      	b.n	80015b0 <LoopCopyDataInit>

080015a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015ae:	3104      	adds	r1, #4

080015b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015b8:	d3f6      	bcc.n	80015a8 <CopyDataInit>
  ldr  r2, =_sbss
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015bc:	e002      	b.n	80015c4 <LoopFillZerobss>

080015be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015c0:	f842 3b04 	str.w	r3, [r2], #4

080015c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015c8:	d3f9      	bcc.n	80015be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ca:	f7ff fdf1 	bl	80011b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ce:	f003 fc43 	bl	8004e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d2:	f7ff fb37 	bl	8000c44 <main>
  bx  lr    
 80015d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015dc:	08006194 	.word	0x08006194
  ldr  r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015e4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80015e8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80015ec:	200133a0 	.word	0x200133a0

080015f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC_IRQHandler>
	...

080015f4 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <UB_VGA_Screen_Init+0x84>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 80015fe:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <UB_VGA_Screen_Init+0x84>)
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <UB_VGA_Screen_Init+0x84>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <UB_VGA_Screen_Init+0x88>)
 800160c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001610:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8001612:	481b      	ldr	r0, [pc, #108]	; (8001680 <UB_VGA_Screen_Init+0x8c>)
 8001614:	f001 fc11 	bl	8002e3a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001618:	210c      	movs	r1, #12
 800161a:	4819      	ldr	r0, [pc, #100]	; (8001680 <UB_VGA_Screen_Init+0x8c>)
 800161c:	f001 fc5c 	bl	8002ed8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001620:	2108      	movs	r1, #8
 8001622:	4817      	ldr	r0, [pc, #92]	; (8001680 <UB_VGA_Screen_Init+0x8c>)
 8001624:	f001 fc96 	bl	8002f54 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <UB_VGA_Screen_Init+0x90>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <UB_VGA_Screen_Init+0x90>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001636:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <UB_VGA_Screen_Init+0x90>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <UB_VGA_Screen_Init+0x90>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0201 	orr.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001648:	490f      	ldr	r1, [pc, #60]	; (8001688 <UB_VGA_Screen_Init+0x94>)
 800164a:	f240 1341 	movw	r3, #321	; 0x141
 800164e:	4a0f      	ldr	r2, [pc, #60]	; (800168c <UB_VGA_Screen_Init+0x98>)
 8001650:	480f      	ldr	r0, [pc, #60]	; (8001690 <UB_VGA_Screen_Init+0x9c>)
 8001652:	f000 fa9f 	bl	8001b94 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8001656:	480e      	ldr	r0, [pc, #56]	; (8001690 <UB_VGA_Screen_Init+0x9c>)
 8001658:	f000 f9ee 	bl	8001a38 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <UB_VGA_Screen_Init+0x9c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <UB_VGA_Screen_Init+0x9c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0210 	orr.w	r2, r2, #16
 800166a:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <UB_VGA_Screen_Init+0xa0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a01      	ldr	r2, [pc, #4]	; (8001678 <UB_VGA_Screen_Init+0x84>)
 8001672:	6093      	str	r3, [r2, #8]
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20013380 	.word	0x20013380
 800167c:	40020400 	.word	0x40020400
 8001680:	200005b0 	.word	0x200005b0
 8001684:	20000570 	.word	0x20000570
 8001688:	20000690 	.word	0x20000690
 800168c:	40021015 	.word	0x40021015
 8001690:	200005f0 	.word	0x200005f0
 8001694:	40026488 	.word	0x40026488

08001698 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80016a2:	2300      	movs	r3, #0
 80016a4:	81bb      	strh	r3, [r7, #12]
 80016a6:	e012      	b.n	80016ce <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80016a8:	2300      	movs	r3, #0
 80016aa:	81fb      	strh	r3, [r7, #14]
 80016ac:	e008      	b.n	80016c0 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 80016ae:	79fa      	ldrb	r2, [r7, #7]
 80016b0:	89b9      	ldrh	r1, [r7, #12]
 80016b2:	89fb      	ldrh	r3, [r7, #14]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 f813 	bl	80016e0 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80016ba:	89fb      	ldrh	r3, [r7, #14]
 80016bc:	3301      	adds	r3, #1
 80016be:	81fb      	strh	r3, [r7, #14]
 80016c0:	89fb      	ldrh	r3, [r7, #14]
 80016c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80016c6:	d3f2      	bcc.n	80016ae <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80016c8:	89bb      	ldrh	r3, [r7, #12]
 80016ca:	3301      	adds	r3, #1
 80016cc:	81bb      	strh	r3, [r7, #12]
 80016ce:	89bb      	ldrh	r3, [r7, #12]
 80016d0:	2bef      	cmp	r3, #239	; 0xef
 80016d2:	d9e9      	bls.n	80016a8 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
 80016ea:	460b      	mov	r3, r1
 80016ec:	80bb      	strh	r3, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80016f8:	d301      	bcc.n	80016fe <UB_VGA_SetPixel+0x1e>
    xp = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 80016fe:	88bb      	ldrh	r3, [r7, #4]
 8001700:	2bef      	cmp	r3, #239	; 0xef
 8001702:	d901      	bls.n	8001708 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001708:	88ba      	ldrh	r2, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	019b      	lsls	r3, r3, #6
 8001712:	441a      	add	r2, r3
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	4413      	add	r3, r2
 8001718:	4904      	ldr	r1, [pc, #16]	; (800172c <UB_VGA_SetPixel+0x4c>)
 800171a:	78fa      	ldrb	r2, [r7, #3]
 800171c:	54ca      	strb	r2, [r1, r3]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000690 	.word	0x20000690

08001730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <HAL_Init+0x40>)
 800173a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_Init+0x40>)
 8001746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a07      	ldr	r2, [pc, #28]	; (8001770 <HAL_Init+0x40>)
 8001752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001758:	2003      	movs	r0, #3
 800175a:	f000 f92b 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175e:	2000      	movs	r0, #0
 8001760:	f000 f808 	bl	8001774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001764:	f7ff fb44 	bl	8000df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023c00 	.word	0x40023c00

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_InitTick+0x54>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_InitTick+0x58>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178a:	fbb3 f3f1 	udiv	r3, r3, r1
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f943 	bl	8001a1e <HAL_SYSTICK_Config>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e00e      	b.n	80017c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d80a      	bhi.n	80017be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a8:	2200      	movs	r2, #0
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f000 f90b 	bl	80019ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b4:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <HAL_InitTick+0x5c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e000      	b.n	80017c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000008 	.word	0x20000008
 80017d0:	20000004 	.word	0x20000004

080017d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x20>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x24>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_IncTick+0x24>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008
 80017f8:	2001338c 	.word	0x2001338c

080017fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_GetTick+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	2001338c 	.word	0x2001338c

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4907      	ldr	r1, [pc, #28]	; (80018b0 <__NVIC_EnableIRQ+0x38>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f7ff ff8e 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff29 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff3e 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff8e 	bl	8001908 <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5d 	bl	80018b4 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff31 	bl	8001878 <__NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffa2 	bl	8001970 <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff feda 	bl	80017fc <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e099      	b.n	8001b88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a74:	e00f      	b.n	8001a96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a76:	f7ff fec1 	bl	80017fc <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d908      	bls.n	8001a96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2220      	movs	r2, #32
 8001a88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e078      	b.n	8001b88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1e8      	bne.n	8001a76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <HAL_DMA_Init+0x158>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d107      	bne.n	8001b00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	4313      	orrs	r3, r2
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f023 0307 	bic.w	r3, r3, #7
 8001b16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d117      	bne.n	8001b5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00e      	beq.n	8001b5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 fa91 	bl	8002064 <DMA_CheckFifoParam>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2240      	movs	r2, #64	; 0x40
 8001b4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b56:	2301      	movs	r3, #1
 8001b58:	e016      	b.n	8001b88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fa48 	bl	8001ff8 <DMA_CalcBaseAndBitshift>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	223f      	movs	r2, #63	; 0x3f
 8001b72:	409a      	lsls	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	f010803f 	.word	0xf010803f

08001b94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001baa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_DMA_Start_IT+0x26>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e040      	b.n	8001c3c <HAL_DMA_Start_IT+0xa8>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d12f      	bne.n	8001c2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f9da 	bl	8001f9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bec:	223f      	movs	r2, #63	; 0x3f
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0216 	orr.w	r2, r2, #22
 8001c02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0208 	orr.w	r2, r2, #8
 8001c1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e005      	b.n	8001c3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c36:	2302      	movs	r3, #2
 8001c38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d004      	beq.n	8001c62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00c      	b.n	8001c7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2205      	movs	r2, #5
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0201 	bic.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c94:	4b8e      	ldr	r3, [pc, #568]	; (8001ed0 <HAL_DMA_IRQHandler+0x248>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a8e      	ldr	r2, [pc, #568]	; (8001ed4 <HAL_DMA_IRQHandler+0x24c>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	0a9b      	lsrs	r3, r3, #10
 8001ca0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb2:	2208      	movs	r2, #8
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d01a      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d013      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0204 	bic.w	r2, r2, #4
 8001cda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	2208      	movs	r2, #8
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cec:	f043 0201 	orr.w	r2, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d012      	beq.n	8001d2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2201      	movs	r2, #1
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d22:	f043 0202 	orr.w	r2, r3, #2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2e:	2204      	movs	r2, #4
 8001d30:	409a      	lsls	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d012      	beq.n	8001d60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00b      	beq.n	8001d60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	f043 0204 	orr.w	r2, r3, #4
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	2210      	movs	r2, #16
 8001d66:	409a      	lsls	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d043      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d03c      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d82:	2210      	movs	r2, #16
 8001d84:	409a      	lsls	r2, r3
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d018      	beq.n	8001dca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d108      	bne.n	8001db8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d024      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	4798      	blx	r3
 8001db6:	e01f      	b.n	8001df8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01b      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	4798      	blx	r3
 8001dc8:	e016      	b.n	8001df8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d107      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0208 	bic.w	r2, r2, #8
 8001de6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 808f 	beq.w	8001f28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 8087 	beq.w	8001f28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	2220      	movs	r2, #32
 8001e20:	409a      	lsls	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b05      	cmp	r3, #5
 8001e30:	d136      	bne.n	8001ea0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0216 	bic.w	r2, r2, #22
 8001e40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d103      	bne.n	8001e62 <HAL_DMA_IRQHandler+0x1da>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0208 	bic.w	r2, r2, #8
 8001e70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e76:	223f      	movs	r2, #63	; 0x3f
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d07e      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	4798      	blx	r3
        }
        return;
 8001e9e:	e079      	b.n	8001f94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d01d      	beq.n	8001eea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10d      	bne.n	8001ed8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d031      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
 8001ecc:	e02c      	b.n	8001f28 <HAL_DMA_IRQHandler+0x2a0>
 8001ece:	bf00      	nop
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d023      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	4798      	blx	r3
 8001ee8:	e01e      	b.n	8001f28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10f      	bne.n	8001f18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0210 	bic.w	r2, r2, #16
 8001f06:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d032      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d022      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2205      	movs	r2, #5
 8001f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	3301      	adds	r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d307      	bcc.n	8001f70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f2      	bne.n	8001f54 <HAL_DMA_IRQHandler+0x2cc>
 8001f6e:	e000      	b.n	8001f72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f70:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	4798      	blx	r3
 8001f92:	e000      	b.n	8001f96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f94:	bf00      	nop
    }
  }
}
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b40      	cmp	r3, #64	; 0x40
 8001fc8:	d108      	bne.n	8001fdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fda:	e007      	b.n	8001fec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	60da      	str	r2, [r3, #12]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	3b10      	subs	r3, #16
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <DMA_CalcBaseAndBitshift+0x64>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002012:	4a13      	ldr	r2, [pc, #76]	; (8002060 <DMA_CalcBaseAndBitshift+0x68>)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d909      	bls.n	800203a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800202e:	f023 0303 	bic.w	r3, r3, #3
 8002032:	1d1a      	adds	r2, r3, #4
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	659a      	str	r2, [r3, #88]	; 0x58
 8002038:	e007      	b.n	800204a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002042:	f023 0303 	bic.w	r3, r3, #3
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	aaaaaaab 	.word	0xaaaaaaab
 8002060:	08006034 	.word	0x08006034

08002064 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d11f      	bne.n	80020be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d856      	bhi.n	8002132 <DMA_CheckFifoParam+0xce>
 8002084:	a201      	add	r2, pc, #4	; (adr r2, 800208c <DMA_CheckFifoParam+0x28>)
 8002086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208a:	bf00      	nop
 800208c:	0800209d 	.word	0x0800209d
 8002090:	080020af 	.word	0x080020af
 8002094:	0800209d 	.word	0x0800209d
 8002098:	08002133 	.word	0x08002133
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d046      	beq.n	8002136 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ac:	e043      	b.n	8002136 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020b6:	d140      	bne.n	800213a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020bc:	e03d      	b.n	800213a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c6:	d121      	bne.n	800210c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d837      	bhi.n	800213e <DMA_CheckFifoParam+0xda>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <DMA_CheckFifoParam+0x70>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	080020e5 	.word	0x080020e5
 80020d8:	080020eb 	.word	0x080020eb
 80020dc:	080020e5 	.word	0x080020e5
 80020e0:	080020fd 	.word	0x080020fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
      break;
 80020e8:	e030      	b.n	800214c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d025      	beq.n	8002142 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020fa:	e022      	b.n	8002142 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002104:	d11f      	bne.n	8002146 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800210a:	e01c      	b.n	8002146 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d903      	bls.n	800211a <DMA_CheckFifoParam+0xb6>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d003      	beq.n	8002120 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002118:	e018      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
      break;
 800211e:	e015      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00e      	beq.n	800214a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
      break;
 8002130:	e00b      	b.n	800214a <DMA_CheckFifoParam+0xe6>
      break;
 8002132:	bf00      	nop
 8002134:	e00a      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;
 8002136:	bf00      	nop
 8002138:	e008      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;
 800213a:	bf00      	nop
 800213c:	e006      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;
 800213e:	bf00      	nop
 8002140:	e004      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;
 8002142:	bf00      	nop
 8002144:	e002      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;   
 8002146:	bf00      	nop
 8002148:	e000      	b.n	800214c <DMA_CheckFifoParam+0xe8>
      break;
 800214a:	bf00      	nop
    }
  } 
  
  return status; 
 800214c:	7bfb      	ldrb	r3, [r7, #15]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop

0800215c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	e16b      	b.n	8002450 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	f040 815a 	bne.w	800244a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d00b      	beq.n	80021b6 <HAL_GPIO_Init+0x5a>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d007      	beq.n	80021b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021aa:	2b11      	cmp	r3, #17
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b12      	cmp	r3, #18
 80021b4:	d130      	bne.n	8002218 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 0201 	and.w	r2, r3, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0xfc>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b12      	cmp	r3, #18
 8002256:	d123      	bne.n	80022a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	69b9      	ldr	r1, [r7, #24]
 800229c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0203 	and.w	r2, r3, #3
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80b4 	beq.w	800244a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b60      	ldr	r3, [pc, #384]	; (8002468 <HAL_GPIO_Init+0x30c>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	4a5f      	ldr	r2, [pc, #380]	; (8002468 <HAL_GPIO_Init+0x30c>)
 80022ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f0:	6453      	str	r3, [r2, #68]	; 0x44
 80022f2:	4b5d      	ldr	r3, [pc, #372]	; (8002468 <HAL_GPIO_Init+0x30c>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fe:	4a5b      	ldr	r2, [pc, #364]	; (800246c <HAL_GPIO_Init+0x310>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a52      	ldr	r2, [pc, #328]	; (8002470 <HAL_GPIO_Init+0x314>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d02b      	beq.n	8002382 <HAL_GPIO_Init+0x226>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a51      	ldr	r2, [pc, #324]	; (8002474 <HAL_GPIO_Init+0x318>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d025      	beq.n	800237e <HAL_GPIO_Init+0x222>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a50      	ldr	r2, [pc, #320]	; (8002478 <HAL_GPIO_Init+0x31c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d01f      	beq.n	800237a <HAL_GPIO_Init+0x21e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4f      	ldr	r2, [pc, #316]	; (800247c <HAL_GPIO_Init+0x320>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d019      	beq.n	8002376 <HAL_GPIO_Init+0x21a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4e      	ldr	r2, [pc, #312]	; (8002480 <HAL_GPIO_Init+0x324>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <HAL_GPIO_Init+0x216>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4d      	ldr	r2, [pc, #308]	; (8002484 <HAL_GPIO_Init+0x328>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00d      	beq.n	800236e <HAL_GPIO_Init+0x212>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4c      	ldr	r2, [pc, #304]	; (8002488 <HAL_GPIO_Init+0x32c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <HAL_GPIO_Init+0x20e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4b      	ldr	r2, [pc, #300]	; (800248c <HAL_GPIO_Init+0x330>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d101      	bne.n	8002366 <HAL_GPIO_Init+0x20a>
 8002362:	2307      	movs	r3, #7
 8002364:	e00e      	b.n	8002384 <HAL_GPIO_Init+0x228>
 8002366:	2308      	movs	r3, #8
 8002368:	e00c      	b.n	8002384 <HAL_GPIO_Init+0x228>
 800236a:	2306      	movs	r3, #6
 800236c:	e00a      	b.n	8002384 <HAL_GPIO_Init+0x228>
 800236e:	2305      	movs	r3, #5
 8002370:	e008      	b.n	8002384 <HAL_GPIO_Init+0x228>
 8002372:	2304      	movs	r3, #4
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x228>
 8002376:	2303      	movs	r3, #3
 8002378:	e004      	b.n	8002384 <HAL_GPIO_Init+0x228>
 800237a:	2302      	movs	r3, #2
 800237c:	e002      	b.n	8002384 <HAL_GPIO_Init+0x228>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_GPIO_Init+0x228>
 8002382:	2300      	movs	r3, #0
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	f002 0203 	and.w	r2, r2, #3
 800238a:	0092      	lsls	r2, r2, #2
 800238c:	4093      	lsls	r3, r2
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002394:	4935      	ldr	r1, [pc, #212]	; (800246c <HAL_GPIO_Init+0x310>)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	3302      	adds	r3, #2
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a2:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <HAL_GPIO_Init+0x334>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c6:	4a32      	ldr	r2, [pc, #200]	; (8002490 <HAL_GPIO_Init+0x334>)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023cc:	4b30      	ldr	r3, [pc, #192]	; (8002490 <HAL_GPIO_Init+0x334>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023f0:	4a27      	ldr	r2, [pc, #156]	; (8002490 <HAL_GPIO_Init+0x334>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f6:	4b26      	ldr	r3, [pc, #152]	; (8002490 <HAL_GPIO_Init+0x334>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800241a:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <HAL_GPIO_Init+0x334>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_GPIO_Init+0x334>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002444:	4a12      	ldr	r2, [pc, #72]	; (8002490 <HAL_GPIO_Init+0x334>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3301      	adds	r3, #1
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	2b0f      	cmp	r3, #15
 8002454:	f67f ae90 	bls.w	8002178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3724      	adds	r7, #36	; 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	40013800 	.word	0x40013800
 8002470:	40020000 	.word	0x40020000
 8002474:	40020400 	.word	0x40020400
 8002478:	40020800 	.word	0x40020800
 800247c:	40020c00 	.word	0x40020c00
 8002480:	40021000 	.word	0x40021000
 8002484:	40021400 	.word	0x40021400
 8002488:	40021800 	.word	0x40021800
 800248c:	40021c00 	.word	0x40021c00
 8002490:	40013c00 	.word	0x40013c00

08002494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
 80024a0:	4613      	mov	r3, r2
 80024a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a4:	787b      	ldrb	r3, [r7, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b0:	e003      	b.n	80024ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024b2:	887b      	ldrh	r3, [r7, #2]
 80024b4:	041a      	lsls	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	619a      	str	r2, [r3, #24]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e25e      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d075      	beq.n	80025d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024e6:	4b88      	ldr	r3, [pc, #544]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d00c      	beq.n	800250c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f2:	4b85      	ldr	r3, [pc, #532]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d112      	bne.n	8002524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fe:	4b82      	ldr	r3, [pc, #520]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250a:	d10b      	bne.n	8002524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250c:	4b7e      	ldr	r3, [pc, #504]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d05b      	beq.n	80025d0 <HAL_RCC_OscConfig+0x108>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d157      	bne.n	80025d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e239      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252c:	d106      	bne.n	800253c <HAL_RCC_OscConfig+0x74>
 800252e:	4b76      	ldr	r3, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a75      	ldr	r2, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e01d      	b.n	8002578 <HAL_RCC_OscConfig+0xb0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x98>
 8002546:	4b70      	ldr	r3, [pc, #448]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6f      	ldr	r2, [pc, #444]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800254c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b6d      	ldr	r3, [pc, #436]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6c      	ldr	r2, [pc, #432]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e00b      	b.n	8002578 <HAL_RCC_OscConfig+0xb0>
 8002560:	4b69      	ldr	r3, [pc, #420]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a68      	ldr	r2, [pc, #416]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b66      	ldr	r3, [pc, #408]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a65      	ldr	r2, [pc, #404]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7ff f93c 	bl	80017fc <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff f938 	bl	80017fc <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1fe      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0xc0>
 80025a6:	e014      	b.n	80025d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7ff f928 	bl	80017fc <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b0:	f7ff f924 	bl	80017fc <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	; 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e1ea      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	4b51      	ldr	r3, [pc, #324]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0xe8>
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d063      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025de:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d11c      	bne.n	8002630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b44      	ldr	r3, [pc, #272]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d116      	bne.n	8002630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_RCC_OscConfig+0x152>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d001      	beq.n	800261a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e1be      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261a:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4937      	ldr	r1, [pc, #220]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	e03a      	b.n	80026a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002638:	4b34      	ldr	r3, [pc, #208]	; (800270c <HAL_RCC_OscConfig+0x244>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7ff f8dd 	bl	80017fc <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002646:	f7ff f8d9 	bl	80017fc <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e19f      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002664:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4925      	ldr	r1, [pc, #148]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_RCC_OscConfig+0x244>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7ff f8bc 	bl	80017fc <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002688:	f7ff f8b8 	bl	80017fc <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e17e      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d036      	beq.n	8002720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <HAL_RCC_OscConfig+0x248>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7ff f89c 	bl	80017fc <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c8:	f7ff f898 	bl	80017fc <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e15e      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80026dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x200>
 80026e6:	e01b      	b.n	8002720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_RCC_OscConfig+0x248>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ee:	f7ff f885 	bl	80017fc <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	e00e      	b.n	8002714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f6:	f7ff f881 	bl	80017fc <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d907      	bls.n	8002714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e147      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
 8002708:	40023800 	.word	0x40023800
 800270c:	42470000 	.word	0x42470000
 8002710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002714:	4b88      	ldr	r3, [pc, #544]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ea      	bne.n	80026f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8097 	beq.w	800285c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002732:	4b81      	ldr	r3, [pc, #516]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10f      	bne.n	800275e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	4b7d      	ldr	r3, [pc, #500]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a7c      	ldr	r2, [pc, #496]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274c:	6413      	str	r3, [r2, #64]	; 0x40
 800274e:	4b7a      	ldr	r3, [pc, #488]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275a:	2301      	movs	r3, #1
 800275c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275e:	4b77      	ldr	r3, [pc, #476]	; (800293c <HAL_RCC_OscConfig+0x474>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d118      	bne.n	800279c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800276a:	4b74      	ldr	r3, [pc, #464]	; (800293c <HAL_RCC_OscConfig+0x474>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a73      	ldr	r2, [pc, #460]	; (800293c <HAL_RCC_OscConfig+0x474>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002776:	f7ff f841 	bl	80017fc <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7ff f83d 	bl	80017fc <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e103      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_OscConfig+0x474>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x2ea>
 80027a4:	4b64      	ldr	r3, [pc, #400]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	4a63      	ldr	r2, [pc, #396]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	; 0x70
 80027b0:	e01c      	b.n	80027ec <HAL_RCC_OscConfig+0x324>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b05      	cmp	r3, #5
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x30c>
 80027ba:	4b5f      	ldr	r3, [pc, #380]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a5e      	ldr	r2, [pc, #376]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
 80027c6:	4b5c      	ldr	r3, [pc, #368]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a5b      	ldr	r2, [pc, #364]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	e00b      	b.n	80027ec <HAL_RCC_OscConfig+0x324>
 80027d4:	4b58      	ldr	r3, [pc, #352]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a57      	ldr	r2, [pc, #348]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
 80027e0:	4b55      	ldr	r3, [pc, #340]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a54      	ldr	r2, [pc, #336]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f023 0304 	bic.w	r3, r3, #4
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d015      	beq.n	8002820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7ff f802 	bl	80017fc <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7fe fffe 	bl	80017fc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0c2      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	4b49      	ldr	r3, [pc, #292]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0ee      	beq.n	80027fc <HAL_RCC_OscConfig+0x334>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002820:	f7fe ffec 	bl	80017fc <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002826:	e00a      	b.n	800283e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe ffe8 	bl	80017fc <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0ac      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283e:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1ee      	bne.n	8002828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002850:	4b39      	ldr	r3, [pc, #228]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	4a38      	ldr	r2, [pc, #224]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8098 	beq.w	8002996 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002866:	4b34      	ldr	r3, [pc, #208]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b08      	cmp	r3, #8
 8002870:	d05c      	beq.n	800292c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d141      	bne.n	80028fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <HAL_RCC_OscConfig+0x478>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe ffbc 	bl	80017fc <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe ffb8 	bl	80017fc <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e07e      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69da      	ldr	r2, [r3, #28]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	019b      	lsls	r3, r3, #6
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	3b01      	subs	r3, #1
 80028c0:	041b      	lsls	r3, r3, #16
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	491b      	ldr	r1, [pc, #108]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x478>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7fe ff91 	bl	80017fc <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028de:	f7fe ff8d 	bl	80017fc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e053      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x416>
 80028fc:	e04b      	b.n	8002996 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <HAL_RCC_OscConfig+0x478>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe ff7a 	bl	80017fc <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe ff76 	bl	80017fc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e03c      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x444>
 800292a:	e034      	b.n	8002996 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d107      	bne.n	8002944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e02f      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
 8002938:	40023800 	.word	0x40023800
 800293c:	40007000 	.word	0x40007000
 8002940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002944:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	429a      	cmp	r2, r3
 8002956:	d11c      	bne.n	8002992 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	429a      	cmp	r2, r3
 8002964:	d115      	bne.n	8002992 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800296c:	4013      	ands	r3, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002972:	4293      	cmp	r3, r2
 8002974:	d10d      	bne.n	8002992 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40023800 	.word	0x40023800

080029a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0cc      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b8:	4b68      	ldr	r3, [pc, #416]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d90c      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c6:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b63      	ldr	r3, [pc, #396]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0b8      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d020      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f8:	4b59      	ldr	r3, [pc, #356]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a58      	ldr	r2, [pc, #352]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a10:	4b53      	ldr	r3, [pc, #332]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a52      	ldr	r2, [pc, #328]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1c:	4b50      	ldr	r3, [pc, #320]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	494d      	ldr	r1, [pc, #308]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d044      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	4b47      	ldr	r3, [pc, #284]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d119      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e07f      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d003      	beq.n	8002a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d107      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a62:	4b3f      	ldr	r3, [pc, #252]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e06f      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a72:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e067      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a82:	4b37      	ldr	r3, [pc, #220]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f023 0203 	bic.w	r2, r3, #3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4934      	ldr	r1, [pc, #208]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a94:	f7fe feb2 	bl	80017fc <HAL_GetTick>
 8002a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9c:	f7fe feae 	bl	80017fc <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e04f      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	4b2b      	ldr	r3, [pc, #172]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 020c 	and.w	r2, r3, #12
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d1eb      	bne.n	8002a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac4:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d20c      	bcs.n	8002aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad2:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e032      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4916      	ldr	r1, [pc, #88]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	490e      	ldr	r1, [pc, #56]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b2a:	f000 f821 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	490a      	ldr	r1, [pc, #40]	; (8002b64 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	5ccb      	ldrb	r3, [r1, r3]
 8002b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b42:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fe12 	bl	8001774 <HAL_InitTick>

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023c00 	.word	0x40023c00
 8002b60:	40023800 	.word	0x40023800
 8002b64:	0800601c 	.word	0x0800601c
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	20000004 	.word	0x20000004

08002b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b74:	b094      	sub	sp, #80	; 0x50
 8002b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b80:	2300      	movs	r3, #0
 8002b82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b88:	4b79      	ldr	r3, [pc, #484]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d00d      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	f200 80e1 	bhi.w	8002d5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0x3a>
 8002ba2:	e0db      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ba4:	4b73      	ldr	r3, [pc, #460]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ba6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ba8:	e0db      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002baa:	4b73      	ldr	r3, [pc, #460]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bae:	e0d8      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb0:	4b6f      	ldr	r3, [pc, #444]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bba:	4b6d      	ldr	r3, [pc, #436]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d063      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc6:	4b6a      	ldr	r3, [pc, #424]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	099b      	lsrs	r3, r3, #6
 8002bcc:	2200      	movs	r2, #0
 8002bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bda:	2300      	movs	r3, #0
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002be2:	4622      	mov	r2, r4
 8002be4:	462b      	mov	r3, r5
 8002be6:	f04f 0000 	mov.w	r0, #0
 8002bea:	f04f 0100 	mov.w	r1, #0
 8002bee:	0159      	lsls	r1, r3, #5
 8002bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf4:	0150      	lsls	r0, r2, #5
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	1a51      	subs	r1, r2, r1
 8002bfe:	6139      	str	r1, [r7, #16]
 8002c00:	4629      	mov	r1, r5
 8002c02:	eb63 0301 	sbc.w	r3, r3, r1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c14:	4659      	mov	r1, fp
 8002c16:	018b      	lsls	r3, r1, #6
 8002c18:	4651      	mov	r1, sl
 8002c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c1e:	4651      	mov	r1, sl
 8002c20:	018a      	lsls	r2, r1, #6
 8002c22:	4651      	mov	r1, sl
 8002c24:	ebb2 0801 	subs.w	r8, r2, r1
 8002c28:	4659      	mov	r1, fp
 8002c2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c42:	4690      	mov	r8, r2
 8002c44:	4699      	mov	r9, r3
 8002c46:	4623      	mov	r3, r4
 8002c48:	eb18 0303 	adds.w	r3, r8, r3
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	462b      	mov	r3, r5
 8002c50:	eb49 0303 	adc.w	r3, r9, r3
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c62:	4629      	mov	r1, r5
 8002c64:	024b      	lsls	r3, r1, #9
 8002c66:	4621      	mov	r1, r4
 8002c68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	024a      	lsls	r2, r1, #9
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c76:	2200      	movs	r2, #0
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c80:	f7fd faf6 	bl	8000270 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c8c:	e058      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8e:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	099b      	lsrs	r3, r3, #6
 8002c94:	2200      	movs	r2, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	4611      	mov	r1, r2
 8002c9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c9e:	623b      	str	r3, [r7, #32]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ca8:	4642      	mov	r2, r8
 8002caa:	464b      	mov	r3, r9
 8002cac:	f04f 0000 	mov.w	r0, #0
 8002cb0:	f04f 0100 	mov.w	r1, #0
 8002cb4:	0159      	lsls	r1, r3, #5
 8002cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cba:	0150      	lsls	r0, r2, #5
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4641      	mov	r1, r8
 8002cc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ce0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ce4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	00eb      	lsls	r3, r5, #3
 8002cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cf6:	00e2      	lsls	r2, r4, #3
 8002cf8:	4614      	mov	r4, r2
 8002cfa:	461d      	mov	r5, r3
 8002cfc:	4643      	mov	r3, r8
 8002cfe:	18e3      	adds	r3, r4, r3
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	464b      	mov	r3, r9
 8002d04:	eb45 0303 	adc.w	r3, r5, r3
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d16:	4629      	mov	r1, r5
 8002d18:	028b      	lsls	r3, r1, #10
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d20:	4621      	mov	r1, r4
 8002d22:	028a      	lsls	r2, r1, #10
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	61fa      	str	r2, [r7, #28]
 8002d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d34:	f7fd fa9c 	bl	8000270 <__aeabi_uldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d5a:	e002      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3750      	adds	r7, #80	; 0x50
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800
 8002d74:	00f42400 	.word	0x00f42400
 8002d78:	007a1200 	.word	0x007a1200

08002d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000000 	.word	0x20000000

08002d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d98:	f7ff fff0 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	0a9b      	lsrs	r3, r3, #10
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	4903      	ldr	r1, [pc, #12]	; (8002db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002daa:	5ccb      	ldrb	r3, [r1, r3]
 8002dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40023800 	.word	0x40023800
 8002db8:	0800602c 	.word	0x0800602c

08002dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dc0:	f7ff ffdc 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	0b5b      	lsrs	r3, r3, #13
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	4903      	ldr	r1, [pc, #12]	; (8002de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dd2:	5ccb      	ldrb	r3, [r1, r3]
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	0800602c 	.word	0x0800602c

08002de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e01d      	b.n	8002e32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fa9e 	bl	800134c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f000 fbde 	bl	80035e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b06      	cmp	r3, #6
 8002e5a:	d007      	beq.n	8002e6c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e01d      	b.n	8002ed0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d106      	bne.n	8002eae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7fe faa1 	bl	80013f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	f000 fb8f 	bl	80035e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	6839      	ldr	r1, [r7, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fe64 	bl	8003bb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a15      	ldr	r2, [pc, #84]	; (8002f4c <HAL_TIM_PWM_Start+0x74>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_TIM_PWM_Start+0x2c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <HAL_TIM_PWM_Start+0x78>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_TIM_PWM_Start+0x30>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_TIM_PWM_Start+0x32>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b06      	cmp	r3, #6
 8002f2e:	d007      	beq.n	8002f40 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40010000 	.word	0x40010000
 8002f50:	40010400 	.word	0x40010400

08002f54 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b0c      	cmp	r3, #12
 8002f62:	d841      	bhi.n	8002fe8 <HAL_TIM_PWM_Start_IT+0x94>
 8002f64:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <HAL_TIM_PWM_Start_IT+0x18>)
 8002f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6a:	bf00      	nop
 8002f6c:	08002fa1 	.word	0x08002fa1
 8002f70:	08002fe9 	.word	0x08002fe9
 8002f74:	08002fe9 	.word	0x08002fe9
 8002f78:	08002fe9 	.word	0x08002fe9
 8002f7c:	08002fb3 	.word	0x08002fb3
 8002f80:	08002fe9 	.word	0x08002fe9
 8002f84:	08002fe9 	.word	0x08002fe9
 8002f88:	08002fe9 	.word	0x08002fe9
 8002f8c:	08002fc5 	.word	0x08002fc5
 8002f90:	08002fe9 	.word	0x08002fe9
 8002f94:	08002fe9 	.word	0x08002fe9
 8002f98:	08002fe9 	.word	0x08002fe9
 8002f9c:	08002fd7 	.word	0x08002fd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0202 	orr.w	r2, r2, #2
 8002fae:	60da      	str	r2, [r3, #12]
      break;
 8002fb0:	e01b      	b.n	8002fea <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0204 	orr.w	r2, r2, #4
 8002fc0:	60da      	str	r2, [r3, #12]
      break;
 8002fc2:	e012      	b.n	8002fea <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0208 	orr.w	r2, r2, #8
 8002fd2:	60da      	str	r2, [r3, #12]
      break;
 8002fd4:	e009      	b.n	8002fea <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0210 	orr.w	r2, r2, #16
 8002fe4:	60da      	str	r2, [r3, #12]
      break;
 8002fe6:	e000      	b.n	8002fea <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002fe8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	6839      	ldr	r1, [r7, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fde0 	bl	8003bb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a15      	ldr	r2, [pc, #84]	; (8003054 <HAL_TIM_PWM_Start_IT+0x100>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d004      	beq.n	800300c <HAL_TIM_PWM_Start_IT+0xb8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a14      	ldr	r2, [pc, #80]	; (8003058 <HAL_TIM_PWM_Start_IT+0x104>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d101      	bne.n	8003010 <HAL_TIM_PWM_Start_IT+0xbc>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <HAL_TIM_PWM_Start_IT+0xbe>
 8003010:	2300      	movs	r3, #0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b06      	cmp	r3, #6
 8003036:	d007      	beq.n	8003048 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40010000 	.word	0x40010000
 8003058:	40010400 	.word	0x40010400

0800305c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b02      	cmp	r3, #2
 8003070:	d122      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b02      	cmp	r3, #2
 800307e:	d11b      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0202 	mvn.w	r2, #2
 8003088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fa82 	bl	80035a8 <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fa74 	bl	8003594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fa85 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d122      	bne.n	800310c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d11b      	bne.n	800310c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0204 	mvn.w	r2, #4
 80030dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fa58 	bl	80035a8 <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fa4a 	bl	8003594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fa5b 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b08      	cmp	r3, #8
 8003118:	d122      	bne.n	8003160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b08      	cmp	r3, #8
 8003126:	d11b      	bne.n	8003160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0208 	mvn.w	r2, #8
 8003130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2204      	movs	r2, #4
 8003136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fa2e 	bl	80035a8 <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fa20 	bl	8003594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fa31 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b10      	cmp	r3, #16
 800316c:	d122      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b10      	cmp	r3, #16
 800317a:	d11b      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0210 	mvn.w	r2, #16
 8003184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2208      	movs	r2, #8
 800318a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fa04 	bl	80035a8 <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f9f6 	bl	8003594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fa07 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d10e      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d107      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0201 	mvn.w	r2, #1
 80031d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f9d0 	bl	8003580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	2b80      	cmp	r3, #128	; 0x80
 80031ec:	d10e      	bne.n	800320c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f8:	2b80      	cmp	r3, #128	; 0x80
 80031fa:	d107      	bne.n	800320c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fd82 	bl	8003d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b40      	cmp	r3, #64	; 0x40
 8003218:	d10e      	bne.n	8003238 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d107      	bne.n	8003238 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f9cc 	bl	80035d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b20      	cmp	r3, #32
 8003244:	d10e      	bne.n	8003264 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b20      	cmp	r3, #32
 8003252:	d107      	bne.n	8003264 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0220 	mvn.w	r2, #32
 800325c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fd4c 	bl	8003cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003282:	2302      	movs	r3, #2
 8003284:	e0b4      	b.n	80033f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2202      	movs	r2, #2
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b0c      	cmp	r3, #12
 800329a:	f200 809f 	bhi.w	80033dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800329e:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032d9 	.word	0x080032d9
 80032a8:	080033dd 	.word	0x080033dd
 80032ac:	080033dd 	.word	0x080033dd
 80032b0:	080033dd 	.word	0x080033dd
 80032b4:	08003319 	.word	0x08003319
 80032b8:	080033dd 	.word	0x080033dd
 80032bc:	080033dd 	.word	0x080033dd
 80032c0:	080033dd 	.word	0x080033dd
 80032c4:	0800335b 	.word	0x0800335b
 80032c8:	080033dd 	.word	0x080033dd
 80032cc:	080033dd 	.word	0x080033dd
 80032d0:	080033dd 	.word	0x080033dd
 80032d4:	0800339b 	.word	0x0800339b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fa20 	bl	8003724 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0208 	orr.w	r2, r2, #8
 80032f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0204 	bic.w	r2, r2, #4
 8003302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6999      	ldr	r1, [r3, #24]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	619a      	str	r2, [r3, #24]
      break;
 8003316:	e062      	b.n	80033de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fa70 	bl	8003804 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6999      	ldr	r1, [r3, #24]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	021a      	lsls	r2, r3, #8
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	619a      	str	r2, [r3, #24]
      break;
 8003358:	e041      	b.n	80033de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fac5 	bl	80038f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0208 	orr.w	r2, r2, #8
 8003374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0204 	bic.w	r2, r2, #4
 8003384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69d9      	ldr	r1, [r3, #28]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	61da      	str	r2, [r3, #28]
      break;
 8003398:	e021      	b.n	80033de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fb19 	bl	80039d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69d9      	ldr	r1, [r3, #28]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	021a      	lsls	r2, r3, #8
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	61da      	str	r2, [r3, #28]
      break;
 80033da:	e000      	b.n	80033de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80033dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_TIM_ConfigClockSource+0x18>
 800340c:	2302      	movs	r3, #2
 800340e:	e0b3      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x180>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800342e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003436:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d03e      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0xd0>
 800344a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800344e:	f200 8087 	bhi.w	8003560 <HAL_TIM_ConfigClockSource+0x168>
 8003452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003456:	f000 8085 	beq.w	8003564 <HAL_TIM_ConfigClockSource+0x16c>
 800345a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345e:	d87f      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x168>
 8003460:	2b70      	cmp	r3, #112	; 0x70
 8003462:	d01a      	beq.n	800349a <HAL_TIM_ConfigClockSource+0xa2>
 8003464:	2b70      	cmp	r3, #112	; 0x70
 8003466:	d87b      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x168>
 8003468:	2b60      	cmp	r3, #96	; 0x60
 800346a:	d050      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x116>
 800346c:	2b60      	cmp	r3, #96	; 0x60
 800346e:	d877      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x168>
 8003470:	2b50      	cmp	r3, #80	; 0x50
 8003472:	d03c      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0xf6>
 8003474:	2b50      	cmp	r3, #80	; 0x50
 8003476:	d873      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x168>
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d058      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x136>
 800347c:	2b40      	cmp	r3, #64	; 0x40
 800347e:	d86f      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x168>
 8003480:	2b30      	cmp	r3, #48	; 0x30
 8003482:	d064      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x156>
 8003484:	2b30      	cmp	r3, #48	; 0x30
 8003486:	d86b      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x168>
 8003488:	2b20      	cmp	r3, #32
 800348a:	d060      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x156>
 800348c:	2b20      	cmp	r3, #32
 800348e:	d867      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x168>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d05c      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x156>
 8003494:	2b10      	cmp	r3, #16
 8003496:	d05a      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003498:	e062      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6899      	ldr	r1, [r3, #8]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f000 fb65 	bl	8003b78 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	609a      	str	r2, [r3, #8]
      break;
 80034c6:	e04e      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6899      	ldr	r1, [r3, #8]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f000 fb4e 	bl	8003b78 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ea:	609a      	str	r2, [r3, #8]
      break;
 80034ec:	e03b      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6859      	ldr	r1, [r3, #4]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f000 fac2 	bl	8003a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2150      	movs	r1, #80	; 0x50
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fb1b 	bl	8003b42 <TIM_ITRx_SetConfig>
      break;
 800350c:	e02b      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	461a      	mov	r2, r3
 800351c:	f000 fae1 	bl	8003ae2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2160      	movs	r1, #96	; 0x60
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fb0b 	bl	8003b42 <TIM_ITRx_SetConfig>
      break;
 800352c:	e01b      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	461a      	mov	r2, r3
 800353c:	f000 faa2 	bl	8003a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2140      	movs	r1, #64	; 0x40
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fafb 	bl	8003b42 <TIM_ITRx_SetConfig>
      break;
 800354c:	e00b      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f000 faf2 	bl	8003b42 <TIM_ITRx_SetConfig>
      break;
 800355e:	e002      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003560:	bf00      	nop
 8003562:	e000      	b.n	8003566 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003564:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a40      	ldr	r2, [pc, #256]	; (80036f8 <TIM_Base_SetConfig+0x114>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <TIM_Base_SetConfig+0x40>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003602:	d00f      	beq.n	8003624 <TIM_Base_SetConfig+0x40>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a3d      	ldr	r2, [pc, #244]	; (80036fc <TIM_Base_SetConfig+0x118>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00b      	beq.n	8003624 <TIM_Base_SetConfig+0x40>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a3c      	ldr	r2, [pc, #240]	; (8003700 <TIM_Base_SetConfig+0x11c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d007      	beq.n	8003624 <TIM_Base_SetConfig+0x40>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a3b      	ldr	r2, [pc, #236]	; (8003704 <TIM_Base_SetConfig+0x120>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d003      	beq.n	8003624 <TIM_Base_SetConfig+0x40>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a3a      	ldr	r2, [pc, #232]	; (8003708 <TIM_Base_SetConfig+0x124>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d108      	bne.n	8003636 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a2f      	ldr	r2, [pc, #188]	; (80036f8 <TIM_Base_SetConfig+0x114>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d02b      	beq.n	8003696 <TIM_Base_SetConfig+0xb2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003644:	d027      	beq.n	8003696 <TIM_Base_SetConfig+0xb2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a2c      	ldr	r2, [pc, #176]	; (80036fc <TIM_Base_SetConfig+0x118>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d023      	beq.n	8003696 <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a2b      	ldr	r2, [pc, #172]	; (8003700 <TIM_Base_SetConfig+0x11c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01f      	beq.n	8003696 <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a2a      	ldr	r2, [pc, #168]	; (8003704 <TIM_Base_SetConfig+0x120>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01b      	beq.n	8003696 <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a29      	ldr	r2, [pc, #164]	; (8003708 <TIM_Base_SetConfig+0x124>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d017      	beq.n	8003696 <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a28      	ldr	r2, [pc, #160]	; (800370c <TIM_Base_SetConfig+0x128>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a27      	ldr	r2, [pc, #156]	; (8003710 <TIM_Base_SetConfig+0x12c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00f      	beq.n	8003696 <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a26      	ldr	r2, [pc, #152]	; (8003714 <TIM_Base_SetConfig+0x130>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00b      	beq.n	8003696 <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a25      	ldr	r2, [pc, #148]	; (8003718 <TIM_Base_SetConfig+0x134>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d007      	beq.n	8003696 <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a24      	ldr	r2, [pc, #144]	; (800371c <TIM_Base_SetConfig+0x138>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d003      	beq.n	8003696 <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a23      	ldr	r2, [pc, #140]	; (8003720 <TIM_Base_SetConfig+0x13c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d108      	bne.n	80036a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <TIM_Base_SetConfig+0x114>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d003      	beq.n	80036dc <TIM_Base_SetConfig+0xf8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a0c      	ldr	r2, [pc, #48]	; (8003708 <TIM_Base_SetConfig+0x124>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d103      	bne.n	80036e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	615a      	str	r2, [r3, #20]
}
 80036ea:	bf00      	nop
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800
 8003704:	40000c00 	.word	0x40000c00
 8003708:	40010400 	.word	0x40010400
 800370c:	40014000 	.word	0x40014000
 8003710:	40014400 	.word	0x40014400
 8003714:	40014800 	.word	0x40014800
 8003718:	40001800 	.word	0x40001800
 800371c:	40001c00 	.word	0x40001c00
 8003720:	40002000 	.word	0x40002000

08003724 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f023 0201 	bic.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0303 	bic.w	r3, r3, #3
 800375a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f023 0302 	bic.w	r3, r3, #2
 800376c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a20      	ldr	r2, [pc, #128]	; (80037fc <TIM_OC1_SetConfig+0xd8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d003      	beq.n	8003788 <TIM_OC1_SetConfig+0x64>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <TIM_OC1_SetConfig+0xdc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d10c      	bne.n	80037a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f023 0308 	bic.w	r3, r3, #8
 800378e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f023 0304 	bic.w	r3, r3, #4
 80037a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a15      	ldr	r2, [pc, #84]	; (80037fc <TIM_OC1_SetConfig+0xd8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d003      	beq.n	80037b2 <TIM_OC1_SetConfig+0x8e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a14      	ldr	r2, [pc, #80]	; (8003800 <TIM_OC1_SetConfig+0xdc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d111      	bne.n	80037d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	621a      	str	r2, [r3, #32]
}
 80037f0:	bf00      	nop
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	40010000 	.word	0x40010000
 8003800:	40010400 	.word	0x40010400

08003804 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f023 0210 	bic.w	r2, r3, #16
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f023 0320 	bic.w	r3, r3, #32
 800384e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a22      	ldr	r2, [pc, #136]	; (80038e8 <TIM_OC2_SetConfig+0xe4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d003      	beq.n	800386c <TIM_OC2_SetConfig+0x68>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a21      	ldr	r2, [pc, #132]	; (80038ec <TIM_OC2_SetConfig+0xe8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d10d      	bne.n	8003888 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003886:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a17      	ldr	r2, [pc, #92]	; (80038e8 <TIM_OC2_SetConfig+0xe4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d003      	beq.n	8003898 <TIM_OC2_SetConfig+0x94>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a16      	ldr	r2, [pc, #88]	; (80038ec <TIM_OC2_SetConfig+0xe8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d113      	bne.n	80038c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800389e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	621a      	str	r2, [r3, #32]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40010000 	.word	0x40010000
 80038ec:	40010400 	.word	0x40010400

080038f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a21      	ldr	r2, [pc, #132]	; (80039d0 <TIM_OC3_SetConfig+0xe0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d003      	beq.n	8003956 <TIM_OC3_SetConfig+0x66>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a20      	ldr	r2, [pc, #128]	; (80039d4 <TIM_OC3_SetConfig+0xe4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d10d      	bne.n	8003972 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800395c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	021b      	lsls	r3, r3, #8
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a16      	ldr	r2, [pc, #88]	; (80039d0 <TIM_OC3_SetConfig+0xe0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d003      	beq.n	8003982 <TIM_OC3_SetConfig+0x92>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <TIM_OC3_SetConfig+0xe4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d113      	bne.n	80039aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	621a      	str	r2, [r3, #32]
}
 80039c4:	bf00      	nop
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	40010000 	.word	0x40010000
 80039d4:	40010400 	.word	0x40010400

080039d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	021b      	lsls	r3, r3, #8
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	031b      	lsls	r3, r3, #12
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a12      	ldr	r2, [pc, #72]	; (8003a7c <TIM_OC4_SetConfig+0xa4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d003      	beq.n	8003a40 <TIM_OC4_SetConfig+0x68>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a11      	ldr	r2, [pc, #68]	; (8003a80 <TIM_OC4_SetConfig+0xa8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d109      	bne.n	8003a54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	019b      	lsls	r3, r3, #6
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	621a      	str	r2, [r3, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40010400 	.word	0x40010400

08003a84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f023 0201 	bic.w	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f023 030a 	bic.w	r3, r3, #10
 8003ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b087      	sub	sp, #28
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f023 0210 	bic.w	r2, r3, #16
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	031b      	lsls	r3, r3, #12
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b085      	sub	sp, #20
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f043 0307 	orr.w	r3, r3, #7
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	609a      	str	r2, [r3, #8]
}
 8003b6c:	bf00      	nop
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	021a      	lsls	r2, r3, #8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 031f 	and.w	r3, r3, #31
 8003bca:	2201      	movs	r2, #1
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a1a      	ldr	r2, [r3, #32]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	401a      	ands	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e05a      	b.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a21      	ldr	r2, [pc, #132]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d022      	beq.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c68:	d01d      	beq.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d018      	beq.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1b      	ldr	r2, [pc, #108]	; (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d013      	beq.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1a      	ldr	r2, [pc, #104]	; (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00e      	beq.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a18      	ldr	r2, [pc, #96]	; (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d009      	beq.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a17      	ldr	r2, [pc, #92]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d004      	beq.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	40000400 	.word	0x40000400
 8003ce8:	40000800 	.word	0x40000800
 8003cec:	40000c00 	.word	0x40000c00
 8003cf0:	40010400 	.word	0x40010400
 8003cf4:	40014000 	.word	0x40014000
 8003cf8:	40001800 	.word	0x40001800

08003cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e03f      	b.n	8003db6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd fbd8 	bl	8001500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2224      	movs	r2, #36	; 0x24
 8003d54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fba1 	bl	80044b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b088      	sub	sp, #32
 8003dc2:	af02      	add	r7, sp, #8
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	603b      	str	r3, [r7, #0]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	f040 8083 	bne.w	8003ee6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_UART_Transmit+0x2e>
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e07b      	b.n	8003ee8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_UART_Transmit+0x40>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e074      	b.n	8003ee8 <HAL_UART_Transmit+0x12a>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2221      	movs	r2, #33	; 0x21
 8003e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e14:	f7fd fcf2 	bl	80017fc <HAL_GetTick>
 8003e18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	88fa      	ldrh	r2, [r7, #6]
 8003e1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	88fa      	ldrh	r2, [r7, #6]
 8003e24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003e2e:	e042      	b.n	8003eb6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	d122      	bne.n	8003e8e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2180      	movs	r1, #128	; 0x80
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f9c0 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e042      	b.n	8003ee8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e74:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	3302      	adds	r3, #2
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	e017      	b.n	8003eb6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	e013      	b.n	8003eb6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	2180      	movs	r1, #128	; 0x80
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f99d 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e01f      	b.n	8003ee8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	60ba      	str	r2, [r7, #8]
 8003eae:	781a      	ldrb	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1b7      	bne.n	8003e30 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2140      	movs	r1, #64	; 0x40
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f984 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e006      	b.n	8003ee8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e000      	b.n	8003ee8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003ee6:	2302      	movs	r3, #2
  }
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	d140      	bne.n	8003f8c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_UART_Receive_IT+0x26>
 8003f10:	88fb      	ldrh	r3, [r7, #6]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e039      	b.n	8003f8e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_UART_Receive_IT+0x38>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e032      	b.n	8003f8e <HAL_UART_Receive_IT+0x9e>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	88fa      	ldrh	r2, [r7, #6]
 8003f3a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	88fa      	ldrh	r2, [r7, #6]
 8003f40:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2222      	movs	r2, #34	; 0x22
 8003f4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f66:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0220 	orr.w	r2, r2, #32
 8003f86:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	e000      	b.n	8003f8e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003f8c:	2302      	movs	r3, #2
  }
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10d      	bne.n	8003fee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_UART_IRQHandler+0x52>
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f9e0 	bl	80043ac <UART_Receive_IT>
      return;
 8003fec:	e0d0      	b.n	8004190 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80b0 	beq.w	8004156 <HAL_UART_IRQHandler+0x1ba>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <HAL_UART_IRQHandler+0x70>
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 80a5 	beq.w	8004156 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_UART_IRQHandler+0x90>
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004024:	f043 0201 	orr.w	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_UART_IRQHandler+0xb0>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004044:	f043 0202 	orr.w	r2, r3, #2
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_UART_IRQHandler+0xd0>
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	f043 0204 	orr.w	r2, r3, #4
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00f      	beq.n	8004096 <HAL_UART_IRQHandler+0xfa>
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d104      	bne.n	800408a <HAL_UART_IRQHandler+0xee>
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d005      	beq.n	8004096 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	f043 0208 	orr.w	r2, r3, #8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	2b00      	cmp	r3, #0
 800409c:	d077      	beq.n	800418e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <HAL_UART_IRQHandler+0x11c>
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f97a 	bl	80043ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b40      	cmp	r3, #64	; 0x40
 80040c4:	bf0c      	ite	eq
 80040c6:	2301      	moveq	r3, #1
 80040c8:	2300      	movne	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d102      	bne.n	80040e0 <HAL_UART_IRQHandler+0x144>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d031      	beq.n	8004144 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f8c3 	bl	800426c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f0:	2b40      	cmp	r3, #64	; 0x40
 80040f2:	d123      	bne.n	800413c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004102:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004108:	2b00      	cmp	r3, #0
 800410a:	d013      	beq.n	8004134 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	4a21      	ldr	r2, [pc, #132]	; (8004198 <HAL_UART_IRQHandler+0x1fc>)
 8004112:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004118:	4618      	mov	r0, r3
 800411a:	f7fd fd93 	bl	8001c44 <HAL_DMA_Abort_IT>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d016      	beq.n	8004152 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800412e:	4610      	mov	r0, r2
 8004130:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004132:	e00e      	b.n	8004152 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f845 	bl	80041c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413a:	e00a      	b.n	8004152 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f841 	bl	80041c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004142:	e006      	b.n	8004152 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f83d 	bl	80041c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004150:	e01d      	b.n	800418e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004152:	bf00      	nop
    return;
 8004154:	e01b      	b.n	800418e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_UART_IRQHandler+0x1d6>
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8b0 	bl	80042d0 <UART_Transmit_IT>
    return;
 8004170:	e00e      	b.n	8004190 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d009      	beq.n	8004190 <HAL_UART_IRQHandler+0x1f4>
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d004      	beq.n	8004190 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f8f8 	bl	800437c <UART_EndTransmit_IT>
    return;
 800418c:	e000      	b.n	8004190 <HAL_UART_IRQHandler+0x1f4>
    return;
 800418e:	bf00      	nop
  }
}
 8004190:	3720      	adds	r7, #32
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	080042a9 	.word	0x080042a9

0800419c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e8:	e02c      	b.n	8004244 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d028      	beq.n	8004244 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d007      	beq.n	8004208 <UART_WaitOnFlagUntilTimeout+0x30>
 80041f8:	f7fd fb00 	bl	80017fc <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	429a      	cmp	r2, r3
 8004206:	d21d      	bcs.n	8004244 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004216:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e00f      	b.n	8004264 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4013      	ands	r3, r2
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	429a      	cmp	r2, r3
 8004252:	bf0c      	ite	eq
 8004254:	2301      	moveq	r3, #1
 8004256:	2300      	movne	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	429a      	cmp	r2, r3
 8004260:	d0c3      	beq.n	80041ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004282:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f7ff ff7e 	bl	80041c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b21      	cmp	r3, #33	; 0x21
 80042e2:	d144      	bne.n	800436e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ec:	d11a      	bne.n	8004324 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004302:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d105      	bne.n	8004318 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	1c9a      	adds	r2, r3, #2
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]
 8004316:	e00e      	b.n	8004336 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]
 8004322:	e008      	b.n	8004336 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	1c59      	adds	r1, r3, #1
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6211      	str	r1, [r2, #32]
 800432e:	781a      	ldrb	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29b      	uxth	r3, r3
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	4619      	mov	r1, r3
 8004344:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10f      	bne.n	800436a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004358:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004368:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800436e:	2302      	movs	r3, #2
  }
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004392:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff fefd 	bl	800419c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b22      	cmp	r3, #34	; 0x22
 80043be:	d171      	bne.n	80044a4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c8:	d123      	bne.n	8004412 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10e      	bne.n	80043f6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ee:	1c9a      	adds	r2, r3, #2
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28
 80043f4:	e029      	b.n	800444a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	629a      	str	r2, [r3, #40]	; 0x28
 8004410:	e01b      	b.n	800444a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6858      	ldr	r0, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	1c59      	adds	r1, r3, #1
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6291      	str	r1, [r2, #40]	; 0x28
 800442a:	b2c2      	uxtb	r2, r0
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e00c      	b.n	800444a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b2da      	uxtb	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	1c58      	adds	r0, r3, #1
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	6288      	str	r0, [r1, #40]	; 0x28
 8004442:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29b      	uxth	r3, r3
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	4619      	mov	r1, r3
 8004458:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800445a:	2b00      	cmp	r3, #0
 800445c:	d120      	bne.n	80044a0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0220 	bic.w	r2, r2, #32
 800446c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800447c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695a      	ldr	r2, [r3, #20]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff fe8a 	bl	80041b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	e002      	b.n	80044a6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	e000      	b.n	80044a6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
  }
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044b4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044ce:	68d9      	ldr	r1, [r3, #12]
 80044d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	ea40 0301 	orr.w	r3, r0, r1
 80044da:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80044fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800450a:	f021 010c 	bic.w	r1, r1, #12
 800450e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004518:	430b      	orrs	r3, r1
 800451a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800451c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004528:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800452c:	6999      	ldr	r1, [r3, #24]
 800452e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	ea40 0301 	orr.w	r3, r0, r1
 8004538:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004544:	f040 824a 	bne.w	80049dc <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004548:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4b96      	ldr	r3, [pc, #600]	; (80047a8 <UART_SetConfig+0x2f8>)
 8004550:	429a      	cmp	r2, r3
 8004552:	d006      	beq.n	8004562 <UART_SetConfig+0xb2>
 8004554:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4b94      	ldr	r3, [pc, #592]	; (80047ac <UART_SetConfig+0x2fc>)
 800455c:	429a      	cmp	r2, r3
 800455e:	f040 8129 	bne.w	80047b4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004562:	f7fe fc2b 	bl	8002dbc <HAL_RCC_GetPCLK2Freq>
 8004566:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800456a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800456e:	2200      	movs	r2, #0
 8004570:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004574:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004578:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 800457c:	4622      	mov	r2, r4
 800457e:	462b      	mov	r3, r5
 8004580:	1891      	adds	r1, r2, r2
 8004582:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004586:	415b      	adcs	r3, r3
 8004588:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800458c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004590:	4621      	mov	r1, r4
 8004592:	1851      	adds	r1, r2, r1
 8004594:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004598:	4629      	mov	r1, r5
 800459a:	414b      	adcs	r3, r1
 800459c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80045ac:	4649      	mov	r1, r9
 80045ae:	00cb      	lsls	r3, r1, #3
 80045b0:	4641      	mov	r1, r8
 80045b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045b6:	4641      	mov	r1, r8
 80045b8:	00ca      	lsls	r2, r1, #3
 80045ba:	4610      	mov	r0, r2
 80045bc:	4619      	mov	r1, r3
 80045be:	4603      	mov	r3, r0
 80045c0:	4622      	mov	r2, r4
 80045c2:	189b      	adds	r3, r3, r2
 80045c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80045c8:	462b      	mov	r3, r5
 80045ca:	460a      	mov	r2, r1
 80045cc:	eb42 0303 	adc.w	r3, r2, r3
 80045d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80045d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80045e0:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80045e4:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80045e8:	460b      	mov	r3, r1
 80045ea:	18db      	adds	r3, r3, r3
 80045ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045f0:	4613      	mov	r3, r2
 80045f2:	eb42 0303 	adc.w	r3, r2, r3
 80045f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045fa:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80045fe:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004602:	f7fb fe35 	bl	8000270 <__aeabi_uldivmod>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4b69      	ldr	r3, [pc, #420]	; (80047b0 <UART_SetConfig+0x300>)
 800460c:	fba3 2302 	umull	r2, r3, r3, r2
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	011c      	lsls	r4, r3, #4
 8004614:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004618:	2200      	movs	r2, #0
 800461a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800461e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004622:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8004626:	4642      	mov	r2, r8
 8004628:	464b      	mov	r3, r9
 800462a:	1891      	adds	r1, r2, r2
 800462c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004630:	415b      	adcs	r3, r3
 8004632:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004636:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800463a:	4641      	mov	r1, r8
 800463c:	1851      	adds	r1, r2, r1
 800463e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8004642:	4649      	mov	r1, r9
 8004644:	414b      	adcs	r3, r1
 8004646:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8004656:	4659      	mov	r1, fp
 8004658:	00cb      	lsls	r3, r1, #3
 800465a:	4651      	mov	r1, sl
 800465c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004660:	4651      	mov	r1, sl
 8004662:	00ca      	lsls	r2, r1, #3
 8004664:	4610      	mov	r0, r2
 8004666:	4619      	mov	r1, r3
 8004668:	4603      	mov	r3, r0
 800466a:	4642      	mov	r2, r8
 800466c:	189b      	adds	r3, r3, r2
 800466e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004672:	464b      	mov	r3, r9
 8004674:	460a      	mov	r2, r1
 8004676:	eb42 0303 	adc.w	r3, r2, r3
 800467a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800467e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800468a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800468e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8004692:	460b      	mov	r3, r1
 8004694:	18db      	adds	r3, r3, r3
 8004696:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800469a:	4613      	mov	r3, r2
 800469c:	eb42 0303 	adc.w	r3, r2, r3
 80046a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046a4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80046a8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80046ac:	f7fb fde0 	bl	8000270 <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4611      	mov	r1, r2
 80046b6:	4b3e      	ldr	r3, [pc, #248]	; (80047b0 <UART_SetConfig+0x300>)
 80046b8:	fba3 2301 	umull	r2, r3, r3, r1
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	2264      	movs	r2, #100	; 0x64
 80046c0:	fb02 f303 	mul.w	r3, r2, r3
 80046c4:	1acb      	subs	r3, r1, r3
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046cc:	4b38      	ldr	r3, [pc, #224]	; (80047b0 <UART_SetConfig+0x300>)
 80046ce:	fba3 2302 	umull	r2, r3, r3, r2
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046da:	441c      	add	r4, r3
 80046dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046e0:	2200      	movs	r2, #0
 80046e2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80046e6:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80046ea:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80046ee:	4642      	mov	r2, r8
 80046f0:	464b      	mov	r3, r9
 80046f2:	1891      	adds	r1, r2, r2
 80046f4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80046f8:	415b      	adcs	r3, r3
 80046fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80046fe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004702:	4641      	mov	r1, r8
 8004704:	1851      	adds	r1, r2, r1
 8004706:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800470a:	4649      	mov	r1, r9
 800470c:	414b      	adcs	r3, r1
 800470e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800471e:	4659      	mov	r1, fp
 8004720:	00cb      	lsls	r3, r1, #3
 8004722:	4651      	mov	r1, sl
 8004724:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004728:	4651      	mov	r1, sl
 800472a:	00ca      	lsls	r2, r1, #3
 800472c:	4610      	mov	r0, r2
 800472e:	4619      	mov	r1, r3
 8004730:	4603      	mov	r3, r0
 8004732:	4642      	mov	r2, r8
 8004734:	189b      	adds	r3, r3, r2
 8004736:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800473a:	464b      	mov	r3, r9
 800473c:	460a      	mov	r2, r1
 800473e:	eb42 0303 	adc.w	r3, r2, r3
 8004742:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004746:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8004752:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8004756:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800475a:	460b      	mov	r3, r1
 800475c:	18db      	adds	r3, r3, r3
 800475e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004762:	4613      	mov	r3, r2
 8004764:	eb42 0303 	adc.w	r3, r2, r3
 8004768:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800476c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004770:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004774:	f7fb fd7c 	bl	8000270 <__aeabi_uldivmod>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <UART_SetConfig+0x300>)
 800477e:	fba3 1302 	umull	r1, r3, r3, r2
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	2164      	movs	r1, #100	; 0x64
 8004786:	fb01 f303 	mul.w	r3, r1, r3
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	3332      	adds	r3, #50	; 0x32
 8004790:	4a07      	ldr	r2, [pc, #28]	; (80047b0 <UART_SetConfig+0x300>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	f003 0207 	and.w	r2, r3, #7
 800479c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4422      	add	r2, r4
 80047a4:	609a      	str	r2, [r3, #8]
 80047a6:	e349      	b.n	8004e3c <UART_SetConfig+0x98c>
 80047a8:	40011000 	.word	0x40011000
 80047ac:	40011400 	.word	0x40011400
 80047b0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047b4:	f7fe faee 	bl	8002d94 <HAL_RCC_GetPCLK1Freq>
 80047b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047c0:	2200      	movs	r2, #0
 80047c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80047c6:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80047ca:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80047ce:	4622      	mov	r2, r4
 80047d0:	462b      	mov	r3, r5
 80047d2:	1891      	adds	r1, r2, r2
 80047d4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80047d8:	415b      	adcs	r3, r3
 80047da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047de:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80047e2:	4621      	mov	r1, r4
 80047e4:	eb12 0a01 	adds.w	sl, r2, r1
 80047e8:	4629      	mov	r1, r5
 80047ea:	eb43 0b01 	adc.w	fp, r3, r1
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004802:	4692      	mov	sl, r2
 8004804:	469b      	mov	fp, r3
 8004806:	4623      	mov	r3, r4
 8004808:	eb1a 0303 	adds.w	r3, sl, r3
 800480c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004810:	462b      	mov	r3, r5
 8004812:	eb4b 0303 	adc.w	r3, fp, r3
 8004816:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800481a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8004826:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800482a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 800482e:	460b      	mov	r3, r1
 8004830:	18db      	adds	r3, r3, r3
 8004832:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004836:	4613      	mov	r3, r2
 8004838:	eb42 0303 	adc.w	r3, r2, r3
 800483c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004840:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004844:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004848:	f7fb fd12 	bl	8000270 <__aeabi_uldivmod>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4b61      	ldr	r3, [pc, #388]	; (80049d8 <UART_SetConfig+0x528>)
 8004852:	fba3 2302 	umull	r2, r3, r3, r2
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	011c      	lsls	r4, r3, #4
 800485a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800485e:	2200      	movs	r2, #0
 8004860:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004864:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004868:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 800486c:	4642      	mov	r2, r8
 800486e:	464b      	mov	r3, r9
 8004870:	1891      	adds	r1, r2, r2
 8004872:	67b9      	str	r1, [r7, #120]	; 0x78
 8004874:	415b      	adcs	r3, r3
 8004876:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004878:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800487c:	4641      	mov	r1, r8
 800487e:	1851      	adds	r1, r2, r1
 8004880:	6739      	str	r1, [r7, #112]	; 0x70
 8004882:	4649      	mov	r1, r9
 8004884:	414b      	adcs	r3, r1
 8004886:	677b      	str	r3, [r7, #116]	; 0x74
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004894:	4659      	mov	r1, fp
 8004896:	00cb      	lsls	r3, r1, #3
 8004898:	4651      	mov	r1, sl
 800489a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800489e:	4651      	mov	r1, sl
 80048a0:	00ca      	lsls	r2, r1, #3
 80048a2:	4610      	mov	r0, r2
 80048a4:	4619      	mov	r1, r3
 80048a6:	4603      	mov	r3, r0
 80048a8:	4642      	mov	r2, r8
 80048aa:	189b      	adds	r3, r3, r2
 80048ac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80048b0:	464b      	mov	r3, r9
 80048b2:	460a      	mov	r2, r1
 80048b4:	eb42 0303 	adc.w	r3, r2, r3
 80048b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80048bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80048c8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80048cc:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80048d0:	460b      	mov	r3, r1
 80048d2:	18db      	adds	r3, r3, r3
 80048d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80048d6:	4613      	mov	r3, r2
 80048d8:	eb42 0303 	adc.w	r3, r2, r3
 80048dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048de:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80048e2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80048e6:	f7fb fcc3 	bl	8000270 <__aeabi_uldivmod>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4611      	mov	r1, r2
 80048f0:	4b39      	ldr	r3, [pc, #228]	; (80049d8 <UART_SetConfig+0x528>)
 80048f2:	fba3 2301 	umull	r2, r3, r3, r1
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	2264      	movs	r2, #100	; 0x64
 80048fa:	fb02 f303 	mul.w	r3, r2, r3
 80048fe:	1acb      	subs	r3, r1, r3
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004906:	4b34      	ldr	r3, [pc, #208]	; (80049d8 <UART_SetConfig+0x528>)
 8004908:	fba3 2302 	umull	r2, r3, r3, r2
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004914:	441c      	add	r4, r3
 8004916:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800491a:	2200      	movs	r2, #0
 800491c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004920:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004924:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	1891      	adds	r1, r2, r2
 800492e:	6639      	str	r1, [r7, #96]	; 0x60
 8004930:	415b      	adcs	r3, r3
 8004932:	667b      	str	r3, [r7, #100]	; 0x64
 8004934:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004938:	4641      	mov	r1, r8
 800493a:	1851      	adds	r1, r2, r1
 800493c:	65b9      	str	r1, [r7, #88]	; 0x58
 800493e:	4649      	mov	r1, r9
 8004940:	414b      	adcs	r3, r1
 8004942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004950:	4659      	mov	r1, fp
 8004952:	00cb      	lsls	r3, r1, #3
 8004954:	4651      	mov	r1, sl
 8004956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800495a:	4651      	mov	r1, sl
 800495c:	00ca      	lsls	r2, r1, #3
 800495e:	4610      	mov	r0, r2
 8004960:	4619      	mov	r1, r3
 8004962:	4603      	mov	r3, r0
 8004964:	4642      	mov	r2, r8
 8004966:	189b      	adds	r3, r3, r2
 8004968:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800496c:	464b      	mov	r3, r9
 800496e:	460a      	mov	r2, r1
 8004970:	eb42 0303 	adc.w	r3, r2, r3
 8004974:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004978:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004984:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004988:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 800498c:	460b      	mov	r3, r1
 800498e:	18db      	adds	r3, r3, r3
 8004990:	653b      	str	r3, [r7, #80]	; 0x50
 8004992:	4613      	mov	r3, r2
 8004994:	eb42 0303 	adc.w	r3, r2, r3
 8004998:	657b      	str	r3, [r7, #84]	; 0x54
 800499a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800499e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80049a2:	f7fb fc65 	bl	8000270 <__aeabi_uldivmod>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <UART_SetConfig+0x528>)
 80049ac:	fba3 1302 	umull	r1, r3, r3, r2
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	2164      	movs	r1, #100	; 0x64
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	3332      	adds	r3, #50	; 0x32
 80049be:	4a06      	ldr	r2, [pc, #24]	; (80049d8 <UART_SetConfig+0x528>)
 80049c0:	fba2 2303 	umull	r2, r3, r2, r3
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	f003 0207 	and.w	r2, r3, #7
 80049ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4422      	add	r2, r4
 80049d2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80049d4:	e232      	b.n	8004e3c <UART_SetConfig+0x98c>
 80049d6:	bf00      	nop
 80049d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b8d      	ldr	r3, [pc, #564]	; (8004c18 <UART_SetConfig+0x768>)
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d006      	beq.n	80049f6 <UART_SetConfig+0x546>
 80049e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b8b      	ldr	r3, [pc, #556]	; (8004c1c <UART_SetConfig+0x76c>)
 80049f0:	429a      	cmp	r2, r3
 80049f2:	f040 8117 	bne.w	8004c24 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80049f6:	f7fe f9e1 	bl	8002dbc <HAL_RCC_GetPCLK2Freq>
 80049fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004a08:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004a0c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004a10:	4622      	mov	r2, r4
 8004a12:	462b      	mov	r3, r5
 8004a14:	1891      	adds	r1, r2, r2
 8004a16:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a18:	415b      	adcs	r3, r3
 8004a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a20:	4621      	mov	r1, r4
 8004a22:	eb12 0801 	adds.w	r8, r2, r1
 8004a26:	4629      	mov	r1, r5
 8004a28:	eb43 0901 	adc.w	r9, r3, r1
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a40:	4690      	mov	r8, r2
 8004a42:	4699      	mov	r9, r3
 8004a44:	4623      	mov	r3, r4
 8004a46:	eb18 0303 	adds.w	r3, r8, r3
 8004a4a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004a4e:	462b      	mov	r3, r5
 8004a50:	eb49 0303 	adc.w	r3, r9, r3
 8004a54:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004a58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004a64:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004a74:	4629      	mov	r1, r5
 8004a76:	008b      	lsls	r3, r1, #2
 8004a78:	4621      	mov	r1, r4
 8004a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a7e:	4621      	mov	r1, r4
 8004a80:	008a      	lsls	r2, r1, #2
 8004a82:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8004a86:	f7fb fbf3 	bl	8000270 <__aeabi_uldivmod>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4b64      	ldr	r3, [pc, #400]	; (8004c20 <UART_SetConfig+0x770>)
 8004a90:	fba3 2302 	umull	r2, r3, r3, r2
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	011c      	lsls	r4, r3, #4
 8004a98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004aa2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004aa6:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004aaa:	4642      	mov	r2, r8
 8004aac:	464b      	mov	r3, r9
 8004aae:	1891      	adds	r1, r2, r2
 8004ab0:	6439      	str	r1, [r7, #64]	; 0x40
 8004ab2:	415b      	adcs	r3, r3
 8004ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004aba:	4641      	mov	r1, r8
 8004abc:	1851      	adds	r1, r2, r1
 8004abe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	414b      	adcs	r3, r1
 8004ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8004ad2:	4659      	mov	r1, fp
 8004ad4:	00cb      	lsls	r3, r1, #3
 8004ad6:	4651      	mov	r1, sl
 8004ad8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004adc:	4651      	mov	r1, sl
 8004ade:	00ca      	lsls	r2, r1, #3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4642      	mov	r2, r8
 8004ae8:	189b      	adds	r3, r3, r2
 8004aea:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004aee:	464b      	mov	r3, r9
 8004af0:	460a      	mov	r2, r1
 8004af2:	eb42 0303 	adc.w	r3, r2, r3
 8004af6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004afa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004b06:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8004b16:	4649      	mov	r1, r9
 8004b18:	008b      	lsls	r3, r1, #2
 8004b1a:	4641      	mov	r1, r8
 8004b1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b20:	4641      	mov	r1, r8
 8004b22:	008a      	lsls	r2, r1, #2
 8004b24:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004b28:	f7fb fba2 	bl	8000270 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4b3b      	ldr	r3, [pc, #236]	; (8004c20 <UART_SetConfig+0x770>)
 8004b32:	fba3 1302 	umull	r1, r3, r3, r2
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	2164      	movs	r1, #100	; 0x64
 8004b3a:	fb01 f303 	mul.w	r3, r1, r3
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	3332      	adds	r3, #50	; 0x32
 8004b44:	4a36      	ldr	r2, [pc, #216]	; (8004c20 <UART_SetConfig+0x770>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b50:	441c      	add	r4, r3
 8004b52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004b5c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004b60:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8004b64:	4642      	mov	r2, r8
 8004b66:	464b      	mov	r3, r9
 8004b68:	1891      	adds	r1, r2, r2
 8004b6a:	6339      	str	r1, [r7, #48]	; 0x30
 8004b6c:	415b      	adcs	r3, r3
 8004b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b74:	4641      	mov	r1, r8
 8004b76:	1851      	adds	r1, r2, r1
 8004b78:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	414b      	adcs	r3, r1
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004b8c:	4659      	mov	r1, fp
 8004b8e:	00cb      	lsls	r3, r1, #3
 8004b90:	4651      	mov	r1, sl
 8004b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b96:	4651      	mov	r1, sl
 8004b98:	00ca      	lsls	r2, r1, #3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	189b      	adds	r3, r3, r2
 8004ba4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ba8:	464b      	mov	r3, r9
 8004baa:	460a      	mov	r2, r1
 8004bac:	eb42 0303 	adc.w	r3, r2, r3
 8004bb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004bb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004bc0:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8004bd0:	4649      	mov	r1, r9
 8004bd2:	008b      	lsls	r3, r1, #2
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bda:	4641      	mov	r1, r8
 8004bdc:	008a      	lsls	r2, r1, #2
 8004bde:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8004be2:	f7fb fb45 	bl	8000270 <__aeabi_uldivmod>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4b0d      	ldr	r3, [pc, #52]	; (8004c20 <UART_SetConfig+0x770>)
 8004bec:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	2164      	movs	r1, #100	; 0x64
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	3332      	adds	r3, #50	; 0x32
 8004bfe:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <UART_SetConfig+0x770>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	f003 020f 	and.w	r2, r3, #15
 8004c0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4422      	add	r2, r4
 8004c12:	609a      	str	r2, [r3, #8]
 8004c14:	e112      	b.n	8004e3c <UART_SetConfig+0x98c>
 8004c16:	bf00      	nop
 8004c18:	40011000 	.word	0x40011000
 8004c1c:	40011400 	.word	0x40011400
 8004c20:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c24:	f7fe f8b6 	bl	8002d94 <HAL_RCC_GetPCLK1Freq>
 8004c28:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004c36:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004c3a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004c3e:	4642      	mov	r2, r8
 8004c40:	464b      	mov	r3, r9
 8004c42:	1891      	adds	r1, r2, r2
 8004c44:	6239      	str	r1, [r7, #32]
 8004c46:	415b      	adcs	r3, r3
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c4e:	4641      	mov	r1, r8
 8004c50:	1854      	adds	r4, r2, r1
 8004c52:	4649      	mov	r1, r9
 8004c54:	eb43 0501 	adc.w	r5, r3, r1
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	00eb      	lsls	r3, r5, #3
 8004c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c66:	00e2      	lsls	r2, r4, #3
 8004c68:	4614      	mov	r4, r2
 8004c6a:	461d      	mov	r5, r3
 8004c6c:	4643      	mov	r3, r8
 8004c6e:	18e3      	adds	r3, r4, r3
 8004c70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004c74:	464b      	mov	r3, r9
 8004c76:	eb45 0303 	adc.w	r3, r5, r3
 8004c7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004c7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004c8a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	008b      	lsls	r3, r1, #2
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	008a      	lsls	r2, r1, #2
 8004ca8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004cac:	f7fb fae0 	bl	8000270 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4b64      	ldr	r3, [pc, #400]	; (8004e48 <UART_SetConfig+0x998>)
 8004cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	011c      	lsls	r4, r3, #4
 8004cbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cc8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004ccc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	1891      	adds	r1, r2, r2
 8004cd6:	61b9      	str	r1, [r7, #24]
 8004cd8:	415b      	adcs	r3, r3
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	1851      	adds	r1, r2, r1
 8004ce4:	6139      	str	r1, [r7, #16]
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	414b      	adcs	r3, r1
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cf8:	4659      	mov	r1, fp
 8004cfa:	00cb      	lsls	r3, r1, #3
 8004cfc:	4651      	mov	r1, sl
 8004cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d02:	4651      	mov	r1, sl
 8004d04:	00ca      	lsls	r2, r1, #3
 8004d06:	4610      	mov	r0, r2
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	189b      	adds	r3, r3, r2
 8004d10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d14:	464b      	mov	r3, r9
 8004d16:	460a      	mov	r2, r1
 8004d18:	eb42 0303 	adc.w	r3, r2, r3
 8004d1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d2c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	008b      	lsls	r3, r1, #2
 8004d40:	4641      	mov	r1, r8
 8004d42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d46:	4641      	mov	r1, r8
 8004d48:	008a      	lsls	r2, r1, #2
 8004d4a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004d4e:	f7fb fa8f 	bl	8000270 <__aeabi_uldivmod>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4b3c      	ldr	r3, [pc, #240]	; (8004e48 <UART_SetConfig+0x998>)
 8004d58:	fba3 1302 	umull	r1, r3, r3, r2
 8004d5c:	095b      	lsrs	r3, r3, #5
 8004d5e:	2164      	movs	r1, #100	; 0x64
 8004d60:	fb01 f303 	mul.w	r3, r1, r3
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	3332      	adds	r3, #50	; 0x32
 8004d6a:	4a37      	ldr	r2, [pc, #220]	; (8004e48 <UART_SetConfig+0x998>)
 8004d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d76:	441c      	add	r4, r3
 8004d78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d86:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004d8a:	4642      	mov	r2, r8
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	1891      	adds	r1, r2, r2
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	415b      	adcs	r3, r3
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d9a:	4641      	mov	r1, r8
 8004d9c:	1851      	adds	r1, r2, r1
 8004d9e:	6039      	str	r1, [r7, #0]
 8004da0:	4649      	mov	r1, r9
 8004da2:	414b      	adcs	r3, r1
 8004da4:	607b      	str	r3, [r7, #4]
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004db2:	4659      	mov	r1, fp
 8004db4:	00cb      	lsls	r3, r1, #3
 8004db6:	4651      	mov	r1, sl
 8004db8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dbc:	4651      	mov	r1, sl
 8004dbe:	00ca      	lsls	r2, r1, #3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	4642      	mov	r2, r8
 8004dc8:	189b      	adds	r3, r3, r2
 8004dca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dce:	464b      	mov	r3, r9
 8004dd0:	460a      	mov	r2, r1
 8004dd2:	eb42 0303 	adc.w	r3, r2, r3
 8004dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004de6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004df6:	4649      	mov	r1, r9
 8004df8:	008b      	lsls	r3, r1, #2
 8004dfa:	4641      	mov	r1, r8
 8004dfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e00:	4641      	mov	r1, r8
 8004e02:	008a      	lsls	r2, r1, #2
 8004e04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e08:	f7fb fa32 	bl	8000270 <__aeabi_uldivmod>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <UART_SetConfig+0x998>)
 8004e12:	fba3 1302 	umull	r1, r3, r3, r2
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	2164      	movs	r1, #100	; 0x64
 8004e1a:	fb01 f303 	mul.w	r3, r1, r3
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	3332      	adds	r3, #50	; 0x32
 8004e24:	4a08      	ldr	r2, [pc, #32]	; (8004e48 <UART_SetConfig+0x998>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	f003 020f 	and.w	r2, r3, #15
 8004e30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4422      	add	r2, r4
 8004e38:	609a      	str	r2, [r3, #8]
}
 8004e3a:	e7ff      	b.n	8004e3c <UART_SetConfig+0x98c>
 8004e3c:	bf00      	nop
 8004e3e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004e42:	46bd      	mov	sp, r7
 8004e44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e48:	51eb851f 	.word	0x51eb851f

08004e4c <__errno>:
 8004e4c:	4b01      	ldr	r3, [pc, #4]	; (8004e54 <__errno+0x8>)
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	2000000c 	.word	0x2000000c

08004e58 <__libc_init_array>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	4d0d      	ldr	r5, [pc, #52]	; (8004e90 <__libc_init_array+0x38>)
 8004e5c:	4c0d      	ldr	r4, [pc, #52]	; (8004e94 <__libc_init_array+0x3c>)
 8004e5e:	1b64      	subs	r4, r4, r5
 8004e60:	10a4      	asrs	r4, r4, #2
 8004e62:	2600      	movs	r6, #0
 8004e64:	42a6      	cmp	r6, r4
 8004e66:	d109      	bne.n	8004e7c <__libc_init_array+0x24>
 8004e68:	4d0b      	ldr	r5, [pc, #44]	; (8004e98 <__libc_init_array+0x40>)
 8004e6a:	4c0c      	ldr	r4, [pc, #48]	; (8004e9c <__libc_init_array+0x44>)
 8004e6c:	f001 f8b0 	bl	8005fd0 <_init>
 8004e70:	1b64      	subs	r4, r4, r5
 8004e72:	10a4      	asrs	r4, r4, #2
 8004e74:	2600      	movs	r6, #0
 8004e76:	42a6      	cmp	r6, r4
 8004e78:	d105      	bne.n	8004e86 <__libc_init_array+0x2e>
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
 8004e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e80:	4798      	blx	r3
 8004e82:	3601      	adds	r6, #1
 8004e84:	e7ee      	b.n	8004e64 <__libc_init_array+0xc>
 8004e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8a:	4798      	blx	r3
 8004e8c:	3601      	adds	r6, #1
 8004e8e:	e7f2      	b.n	8004e76 <__libc_init_array+0x1e>
 8004e90:	0800618c 	.word	0x0800618c
 8004e94:	0800618c 	.word	0x0800618c
 8004e98:	0800618c 	.word	0x0800618c
 8004e9c:	08006190 	.word	0x08006190

08004ea0 <memcpy>:
 8004ea0:	440a      	add	r2, r1
 8004ea2:	4291      	cmp	r1, r2
 8004ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ea8:	d100      	bne.n	8004eac <memcpy+0xc>
 8004eaa:	4770      	bx	lr
 8004eac:	b510      	push	{r4, lr}
 8004eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eb6:	4291      	cmp	r1, r2
 8004eb8:	d1f9      	bne.n	8004eae <memcpy+0xe>
 8004eba:	bd10      	pop	{r4, pc}

08004ebc <memset>:
 8004ebc:	4402      	add	r2, r0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d100      	bne.n	8004ec6 <memset+0xa>
 8004ec4:	4770      	bx	lr
 8004ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eca:	e7f9      	b.n	8004ec0 <memset+0x4>

08004ecc <iprintf>:
 8004ecc:	b40f      	push	{r0, r1, r2, r3}
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <iprintf+0x2c>)
 8004ed0:	b513      	push	{r0, r1, r4, lr}
 8004ed2:	681c      	ldr	r4, [r3, #0]
 8004ed4:	b124      	cbz	r4, 8004ee0 <iprintf+0x14>
 8004ed6:	69a3      	ldr	r3, [r4, #24]
 8004ed8:	b913      	cbnz	r3, 8004ee0 <iprintf+0x14>
 8004eda:	4620      	mov	r0, r4
 8004edc:	f000 f8f4 	bl	80050c8 <__sinit>
 8004ee0:	ab05      	add	r3, sp, #20
 8004ee2:	9a04      	ldr	r2, [sp, #16]
 8004ee4:	68a1      	ldr	r1, [r4, #8]
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f000 fab1 	bl	8005450 <_vfiprintf_r>
 8004eee:	b002      	add	sp, #8
 8004ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef4:	b004      	add	sp, #16
 8004ef6:	4770      	bx	lr
 8004ef8:	2000000c 	.word	0x2000000c

08004efc <strncmp>:
 8004efc:	b510      	push	{r4, lr}
 8004efe:	b17a      	cbz	r2, 8004f20 <strncmp+0x24>
 8004f00:	4603      	mov	r3, r0
 8004f02:	3901      	subs	r1, #1
 8004f04:	1884      	adds	r4, r0, r2
 8004f06:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004f0a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004f0e:	4290      	cmp	r0, r2
 8004f10:	d101      	bne.n	8004f16 <strncmp+0x1a>
 8004f12:	42a3      	cmp	r3, r4
 8004f14:	d101      	bne.n	8004f1a <strncmp+0x1e>
 8004f16:	1a80      	subs	r0, r0, r2
 8004f18:	bd10      	pop	{r4, pc}
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	d1f3      	bne.n	8004f06 <strncmp+0xa>
 8004f1e:	e7fa      	b.n	8004f16 <strncmp+0x1a>
 8004f20:	4610      	mov	r0, r2
 8004f22:	e7f9      	b.n	8004f18 <strncmp+0x1c>

08004f24 <strtok>:
 8004f24:	4b16      	ldr	r3, [pc, #88]	; (8004f80 <strtok+0x5c>)
 8004f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f28:	681e      	ldr	r6, [r3, #0]
 8004f2a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004f2c:	4605      	mov	r5, r0
 8004f2e:	b9fc      	cbnz	r4, 8004f70 <strtok+0x4c>
 8004f30:	2050      	movs	r0, #80	; 0x50
 8004f32:	9101      	str	r1, [sp, #4]
 8004f34:	f000 f97a 	bl	800522c <malloc>
 8004f38:	9901      	ldr	r1, [sp, #4]
 8004f3a:	65b0      	str	r0, [r6, #88]	; 0x58
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	b920      	cbnz	r0, 8004f4a <strtok+0x26>
 8004f40:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <strtok+0x60>)
 8004f42:	4811      	ldr	r0, [pc, #68]	; (8004f88 <strtok+0x64>)
 8004f44:	2157      	movs	r1, #87	; 0x57
 8004f46:	f000 f849 	bl	8004fdc <__assert_func>
 8004f4a:	e9c0 4400 	strd	r4, r4, [r0]
 8004f4e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004f52:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004f56:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004f5a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004f5e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004f62:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004f66:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004f6a:	6184      	str	r4, [r0, #24]
 8004f6c:	7704      	strb	r4, [r0, #28]
 8004f6e:	6244      	str	r4, [r0, #36]	; 0x24
 8004f70:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004f72:	2301      	movs	r3, #1
 8004f74:	4628      	mov	r0, r5
 8004f76:	b002      	add	sp, #8
 8004f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f7c:	f000 b806 	b.w	8004f8c <__strtok_r>
 8004f80:	2000000c 	.word	0x2000000c
 8004f84:	08006040 	.word	0x08006040
 8004f88:	08006057 	.word	0x08006057

08004f8c <__strtok_r>:
 8004f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f8e:	b908      	cbnz	r0, 8004f94 <__strtok_r+0x8>
 8004f90:	6810      	ldr	r0, [r2, #0]
 8004f92:	b188      	cbz	r0, 8004fb8 <__strtok_r+0x2c>
 8004f94:	4604      	mov	r4, r0
 8004f96:	4620      	mov	r0, r4
 8004f98:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004f9c:	460f      	mov	r7, r1
 8004f9e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004fa2:	b91e      	cbnz	r6, 8004fac <__strtok_r+0x20>
 8004fa4:	b965      	cbnz	r5, 8004fc0 <__strtok_r+0x34>
 8004fa6:	6015      	str	r5, [r2, #0]
 8004fa8:	4628      	mov	r0, r5
 8004faa:	e005      	b.n	8004fb8 <__strtok_r+0x2c>
 8004fac:	42b5      	cmp	r5, r6
 8004fae:	d1f6      	bne.n	8004f9e <__strtok_r+0x12>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f0      	bne.n	8004f96 <__strtok_r+0xa>
 8004fb4:	6014      	str	r4, [r2, #0]
 8004fb6:	7003      	strb	r3, [r0, #0]
 8004fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fba:	461c      	mov	r4, r3
 8004fbc:	e00c      	b.n	8004fd8 <__strtok_r+0x4c>
 8004fbe:	b915      	cbnz	r5, 8004fc6 <__strtok_r+0x3a>
 8004fc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004fc4:	460e      	mov	r6, r1
 8004fc6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004fca:	42ab      	cmp	r3, r5
 8004fcc:	d1f7      	bne.n	8004fbe <__strtok_r+0x32>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f3      	beq.n	8004fba <__strtok_r+0x2e>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004fd8:	6014      	str	r4, [r2, #0]
 8004fda:	e7ed      	b.n	8004fb8 <__strtok_r+0x2c>

08004fdc <__assert_func>:
 8004fdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004fde:	4614      	mov	r4, r2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <__assert_func+0x2c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4605      	mov	r5, r0
 8004fe8:	68d8      	ldr	r0, [r3, #12]
 8004fea:	b14c      	cbz	r4, 8005000 <__assert_func+0x24>
 8004fec:	4b07      	ldr	r3, [pc, #28]	; (800500c <__assert_func+0x30>)
 8004fee:	9100      	str	r1, [sp, #0]
 8004ff0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004ff4:	4906      	ldr	r1, [pc, #24]	; (8005010 <__assert_func+0x34>)
 8004ff6:	462b      	mov	r3, r5
 8004ff8:	f000 f8e4 	bl	80051c4 <fiprintf>
 8004ffc:	f000 fe12 	bl	8005c24 <abort>
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <__assert_func+0x38>)
 8005002:	461c      	mov	r4, r3
 8005004:	e7f3      	b.n	8004fee <__assert_func+0x12>
 8005006:	bf00      	nop
 8005008:	2000000c 	.word	0x2000000c
 800500c:	080060b4 	.word	0x080060b4
 8005010:	080060c1 	.word	0x080060c1
 8005014:	080060ef 	.word	0x080060ef

08005018 <std>:
 8005018:	2300      	movs	r3, #0
 800501a:	b510      	push	{r4, lr}
 800501c:	4604      	mov	r4, r0
 800501e:	e9c0 3300 	strd	r3, r3, [r0]
 8005022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005026:	6083      	str	r3, [r0, #8]
 8005028:	8181      	strh	r1, [r0, #12]
 800502a:	6643      	str	r3, [r0, #100]	; 0x64
 800502c:	81c2      	strh	r2, [r0, #14]
 800502e:	6183      	str	r3, [r0, #24]
 8005030:	4619      	mov	r1, r3
 8005032:	2208      	movs	r2, #8
 8005034:	305c      	adds	r0, #92	; 0x5c
 8005036:	f7ff ff41 	bl	8004ebc <memset>
 800503a:	4b05      	ldr	r3, [pc, #20]	; (8005050 <std+0x38>)
 800503c:	6263      	str	r3, [r4, #36]	; 0x24
 800503e:	4b05      	ldr	r3, [pc, #20]	; (8005054 <std+0x3c>)
 8005040:	62a3      	str	r3, [r4, #40]	; 0x28
 8005042:	4b05      	ldr	r3, [pc, #20]	; (8005058 <std+0x40>)
 8005044:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005046:	4b05      	ldr	r3, [pc, #20]	; (800505c <std+0x44>)
 8005048:	6224      	str	r4, [r4, #32]
 800504a:	6323      	str	r3, [r4, #48]	; 0x30
 800504c:	bd10      	pop	{r4, pc}
 800504e:	bf00      	nop
 8005050:	080059f9 	.word	0x080059f9
 8005054:	08005a1b 	.word	0x08005a1b
 8005058:	08005a53 	.word	0x08005a53
 800505c:	08005a77 	.word	0x08005a77

08005060 <_cleanup_r>:
 8005060:	4901      	ldr	r1, [pc, #4]	; (8005068 <_cleanup_r+0x8>)
 8005062:	f000 b8c1 	b.w	80051e8 <_fwalk_reent>
 8005066:	bf00      	nop
 8005068:	08005d61 	.word	0x08005d61

0800506c <__sfmoreglue>:
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	2268      	movs	r2, #104	; 0x68
 8005070:	1e4d      	subs	r5, r1, #1
 8005072:	4355      	muls	r5, r2
 8005074:	460e      	mov	r6, r1
 8005076:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800507a:	f000 f94b 	bl	8005314 <_malloc_r>
 800507e:	4604      	mov	r4, r0
 8005080:	b140      	cbz	r0, 8005094 <__sfmoreglue+0x28>
 8005082:	2100      	movs	r1, #0
 8005084:	e9c0 1600 	strd	r1, r6, [r0]
 8005088:	300c      	adds	r0, #12
 800508a:	60a0      	str	r0, [r4, #8]
 800508c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005090:	f7ff ff14 	bl	8004ebc <memset>
 8005094:	4620      	mov	r0, r4
 8005096:	bd70      	pop	{r4, r5, r6, pc}

08005098 <__sfp_lock_acquire>:
 8005098:	4801      	ldr	r0, [pc, #4]	; (80050a0 <__sfp_lock_acquire+0x8>)
 800509a:	f000 b8c5 	b.w	8005228 <__retarget_lock_acquire_recursive>
 800509e:	bf00      	nop
 80050a0:	20013391 	.word	0x20013391

080050a4 <__sfp_lock_release>:
 80050a4:	4801      	ldr	r0, [pc, #4]	; (80050ac <__sfp_lock_release+0x8>)
 80050a6:	f000 b8c0 	b.w	800522a <__retarget_lock_release_recursive>
 80050aa:	bf00      	nop
 80050ac:	20013391 	.word	0x20013391

080050b0 <__sinit_lock_acquire>:
 80050b0:	4801      	ldr	r0, [pc, #4]	; (80050b8 <__sinit_lock_acquire+0x8>)
 80050b2:	f000 b8b9 	b.w	8005228 <__retarget_lock_acquire_recursive>
 80050b6:	bf00      	nop
 80050b8:	20013392 	.word	0x20013392

080050bc <__sinit_lock_release>:
 80050bc:	4801      	ldr	r0, [pc, #4]	; (80050c4 <__sinit_lock_release+0x8>)
 80050be:	f000 b8b4 	b.w	800522a <__retarget_lock_release_recursive>
 80050c2:	bf00      	nop
 80050c4:	20013392 	.word	0x20013392

080050c8 <__sinit>:
 80050c8:	b510      	push	{r4, lr}
 80050ca:	4604      	mov	r4, r0
 80050cc:	f7ff fff0 	bl	80050b0 <__sinit_lock_acquire>
 80050d0:	69a3      	ldr	r3, [r4, #24]
 80050d2:	b11b      	cbz	r3, 80050dc <__sinit+0x14>
 80050d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050d8:	f7ff bff0 	b.w	80050bc <__sinit_lock_release>
 80050dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050e0:	6523      	str	r3, [r4, #80]	; 0x50
 80050e2:	4b13      	ldr	r3, [pc, #76]	; (8005130 <__sinit+0x68>)
 80050e4:	4a13      	ldr	r2, [pc, #76]	; (8005134 <__sinit+0x6c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80050ea:	42a3      	cmp	r3, r4
 80050ec:	bf04      	itt	eq
 80050ee:	2301      	moveq	r3, #1
 80050f0:	61a3      	streq	r3, [r4, #24]
 80050f2:	4620      	mov	r0, r4
 80050f4:	f000 f820 	bl	8005138 <__sfp>
 80050f8:	6060      	str	r0, [r4, #4]
 80050fa:	4620      	mov	r0, r4
 80050fc:	f000 f81c 	bl	8005138 <__sfp>
 8005100:	60a0      	str	r0, [r4, #8]
 8005102:	4620      	mov	r0, r4
 8005104:	f000 f818 	bl	8005138 <__sfp>
 8005108:	2200      	movs	r2, #0
 800510a:	60e0      	str	r0, [r4, #12]
 800510c:	2104      	movs	r1, #4
 800510e:	6860      	ldr	r0, [r4, #4]
 8005110:	f7ff ff82 	bl	8005018 <std>
 8005114:	68a0      	ldr	r0, [r4, #8]
 8005116:	2201      	movs	r2, #1
 8005118:	2109      	movs	r1, #9
 800511a:	f7ff ff7d 	bl	8005018 <std>
 800511e:	68e0      	ldr	r0, [r4, #12]
 8005120:	2202      	movs	r2, #2
 8005122:	2112      	movs	r1, #18
 8005124:	f7ff ff78 	bl	8005018 <std>
 8005128:	2301      	movs	r3, #1
 800512a:	61a3      	str	r3, [r4, #24]
 800512c:	e7d2      	b.n	80050d4 <__sinit+0xc>
 800512e:	bf00      	nop
 8005130:	0800603c 	.word	0x0800603c
 8005134:	08005061 	.word	0x08005061

08005138 <__sfp>:
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	4607      	mov	r7, r0
 800513c:	f7ff ffac 	bl	8005098 <__sfp_lock_acquire>
 8005140:	4b1e      	ldr	r3, [pc, #120]	; (80051bc <__sfp+0x84>)
 8005142:	681e      	ldr	r6, [r3, #0]
 8005144:	69b3      	ldr	r3, [r6, #24]
 8005146:	b913      	cbnz	r3, 800514e <__sfp+0x16>
 8005148:	4630      	mov	r0, r6
 800514a:	f7ff ffbd 	bl	80050c8 <__sinit>
 800514e:	3648      	adds	r6, #72	; 0x48
 8005150:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005154:	3b01      	subs	r3, #1
 8005156:	d503      	bpl.n	8005160 <__sfp+0x28>
 8005158:	6833      	ldr	r3, [r6, #0]
 800515a:	b30b      	cbz	r3, 80051a0 <__sfp+0x68>
 800515c:	6836      	ldr	r6, [r6, #0]
 800515e:	e7f7      	b.n	8005150 <__sfp+0x18>
 8005160:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005164:	b9d5      	cbnz	r5, 800519c <__sfp+0x64>
 8005166:	4b16      	ldr	r3, [pc, #88]	; (80051c0 <__sfp+0x88>)
 8005168:	60e3      	str	r3, [r4, #12]
 800516a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800516e:	6665      	str	r5, [r4, #100]	; 0x64
 8005170:	f000 f859 	bl	8005226 <__retarget_lock_init_recursive>
 8005174:	f7ff ff96 	bl	80050a4 <__sfp_lock_release>
 8005178:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800517c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005180:	6025      	str	r5, [r4, #0]
 8005182:	61a5      	str	r5, [r4, #24]
 8005184:	2208      	movs	r2, #8
 8005186:	4629      	mov	r1, r5
 8005188:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800518c:	f7ff fe96 	bl	8004ebc <memset>
 8005190:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005194:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005198:	4620      	mov	r0, r4
 800519a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800519c:	3468      	adds	r4, #104	; 0x68
 800519e:	e7d9      	b.n	8005154 <__sfp+0x1c>
 80051a0:	2104      	movs	r1, #4
 80051a2:	4638      	mov	r0, r7
 80051a4:	f7ff ff62 	bl	800506c <__sfmoreglue>
 80051a8:	4604      	mov	r4, r0
 80051aa:	6030      	str	r0, [r6, #0]
 80051ac:	2800      	cmp	r0, #0
 80051ae:	d1d5      	bne.n	800515c <__sfp+0x24>
 80051b0:	f7ff ff78 	bl	80050a4 <__sfp_lock_release>
 80051b4:	230c      	movs	r3, #12
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	e7ee      	b.n	8005198 <__sfp+0x60>
 80051ba:	bf00      	nop
 80051bc:	0800603c 	.word	0x0800603c
 80051c0:	ffff0001 	.word	0xffff0001

080051c4 <fiprintf>:
 80051c4:	b40e      	push	{r1, r2, r3}
 80051c6:	b503      	push	{r0, r1, lr}
 80051c8:	4601      	mov	r1, r0
 80051ca:	ab03      	add	r3, sp, #12
 80051cc:	4805      	ldr	r0, [pc, #20]	; (80051e4 <fiprintf+0x20>)
 80051ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80051d2:	6800      	ldr	r0, [r0, #0]
 80051d4:	9301      	str	r3, [sp, #4]
 80051d6:	f000 f93b 	bl	8005450 <_vfiprintf_r>
 80051da:	b002      	add	sp, #8
 80051dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80051e0:	b003      	add	sp, #12
 80051e2:	4770      	bx	lr
 80051e4:	2000000c 	.word	0x2000000c

080051e8 <_fwalk_reent>:
 80051e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051ec:	4606      	mov	r6, r0
 80051ee:	4688      	mov	r8, r1
 80051f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051f4:	2700      	movs	r7, #0
 80051f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051fa:	f1b9 0901 	subs.w	r9, r9, #1
 80051fe:	d505      	bpl.n	800520c <_fwalk_reent+0x24>
 8005200:	6824      	ldr	r4, [r4, #0]
 8005202:	2c00      	cmp	r4, #0
 8005204:	d1f7      	bne.n	80051f6 <_fwalk_reent+0xe>
 8005206:	4638      	mov	r0, r7
 8005208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800520c:	89ab      	ldrh	r3, [r5, #12]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d907      	bls.n	8005222 <_fwalk_reent+0x3a>
 8005212:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005216:	3301      	adds	r3, #1
 8005218:	d003      	beq.n	8005222 <_fwalk_reent+0x3a>
 800521a:	4629      	mov	r1, r5
 800521c:	4630      	mov	r0, r6
 800521e:	47c0      	blx	r8
 8005220:	4307      	orrs	r7, r0
 8005222:	3568      	adds	r5, #104	; 0x68
 8005224:	e7e9      	b.n	80051fa <_fwalk_reent+0x12>

08005226 <__retarget_lock_init_recursive>:
 8005226:	4770      	bx	lr

08005228 <__retarget_lock_acquire_recursive>:
 8005228:	4770      	bx	lr

0800522a <__retarget_lock_release_recursive>:
 800522a:	4770      	bx	lr

0800522c <malloc>:
 800522c:	4b02      	ldr	r3, [pc, #8]	; (8005238 <malloc+0xc>)
 800522e:	4601      	mov	r1, r0
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	f000 b86f 	b.w	8005314 <_malloc_r>
 8005236:	bf00      	nop
 8005238:	2000000c 	.word	0x2000000c

0800523c <_free_r>:
 800523c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800523e:	2900      	cmp	r1, #0
 8005240:	d044      	beq.n	80052cc <_free_r+0x90>
 8005242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005246:	9001      	str	r0, [sp, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f1a1 0404 	sub.w	r4, r1, #4
 800524e:	bfb8      	it	lt
 8005250:	18e4      	addlt	r4, r4, r3
 8005252:	f000 fe39 	bl	8005ec8 <__malloc_lock>
 8005256:	4a1e      	ldr	r2, [pc, #120]	; (80052d0 <_free_r+0x94>)
 8005258:	9801      	ldr	r0, [sp, #4]
 800525a:	6813      	ldr	r3, [r2, #0]
 800525c:	b933      	cbnz	r3, 800526c <_free_r+0x30>
 800525e:	6063      	str	r3, [r4, #4]
 8005260:	6014      	str	r4, [r2, #0]
 8005262:	b003      	add	sp, #12
 8005264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005268:	f000 be34 	b.w	8005ed4 <__malloc_unlock>
 800526c:	42a3      	cmp	r3, r4
 800526e:	d908      	bls.n	8005282 <_free_r+0x46>
 8005270:	6825      	ldr	r5, [r4, #0]
 8005272:	1961      	adds	r1, r4, r5
 8005274:	428b      	cmp	r3, r1
 8005276:	bf01      	itttt	eq
 8005278:	6819      	ldreq	r1, [r3, #0]
 800527a:	685b      	ldreq	r3, [r3, #4]
 800527c:	1949      	addeq	r1, r1, r5
 800527e:	6021      	streq	r1, [r4, #0]
 8005280:	e7ed      	b.n	800525e <_free_r+0x22>
 8005282:	461a      	mov	r2, r3
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	b10b      	cbz	r3, 800528c <_free_r+0x50>
 8005288:	42a3      	cmp	r3, r4
 800528a:	d9fa      	bls.n	8005282 <_free_r+0x46>
 800528c:	6811      	ldr	r1, [r2, #0]
 800528e:	1855      	adds	r5, r2, r1
 8005290:	42a5      	cmp	r5, r4
 8005292:	d10b      	bne.n	80052ac <_free_r+0x70>
 8005294:	6824      	ldr	r4, [r4, #0]
 8005296:	4421      	add	r1, r4
 8005298:	1854      	adds	r4, r2, r1
 800529a:	42a3      	cmp	r3, r4
 800529c:	6011      	str	r1, [r2, #0]
 800529e:	d1e0      	bne.n	8005262 <_free_r+0x26>
 80052a0:	681c      	ldr	r4, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	6053      	str	r3, [r2, #4]
 80052a6:	4421      	add	r1, r4
 80052a8:	6011      	str	r1, [r2, #0]
 80052aa:	e7da      	b.n	8005262 <_free_r+0x26>
 80052ac:	d902      	bls.n	80052b4 <_free_r+0x78>
 80052ae:	230c      	movs	r3, #12
 80052b0:	6003      	str	r3, [r0, #0]
 80052b2:	e7d6      	b.n	8005262 <_free_r+0x26>
 80052b4:	6825      	ldr	r5, [r4, #0]
 80052b6:	1961      	adds	r1, r4, r5
 80052b8:	428b      	cmp	r3, r1
 80052ba:	bf04      	itt	eq
 80052bc:	6819      	ldreq	r1, [r3, #0]
 80052be:	685b      	ldreq	r3, [r3, #4]
 80052c0:	6063      	str	r3, [r4, #4]
 80052c2:	bf04      	itt	eq
 80052c4:	1949      	addeq	r1, r1, r5
 80052c6:	6021      	streq	r1, [r4, #0]
 80052c8:	6054      	str	r4, [r2, #4]
 80052ca:	e7ca      	b.n	8005262 <_free_r+0x26>
 80052cc:	b003      	add	sp, #12
 80052ce:	bd30      	pop	{r4, r5, pc}
 80052d0:	20013394 	.word	0x20013394

080052d4 <sbrk_aligned>:
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	4e0e      	ldr	r6, [pc, #56]	; (8005310 <sbrk_aligned+0x3c>)
 80052d8:	460c      	mov	r4, r1
 80052da:	6831      	ldr	r1, [r6, #0]
 80052dc:	4605      	mov	r5, r0
 80052de:	b911      	cbnz	r1, 80052e6 <sbrk_aligned+0x12>
 80052e0:	f000 fb7a 	bl	80059d8 <_sbrk_r>
 80052e4:	6030      	str	r0, [r6, #0]
 80052e6:	4621      	mov	r1, r4
 80052e8:	4628      	mov	r0, r5
 80052ea:	f000 fb75 	bl	80059d8 <_sbrk_r>
 80052ee:	1c43      	adds	r3, r0, #1
 80052f0:	d00a      	beq.n	8005308 <sbrk_aligned+0x34>
 80052f2:	1cc4      	adds	r4, r0, #3
 80052f4:	f024 0403 	bic.w	r4, r4, #3
 80052f8:	42a0      	cmp	r0, r4
 80052fa:	d007      	beq.n	800530c <sbrk_aligned+0x38>
 80052fc:	1a21      	subs	r1, r4, r0
 80052fe:	4628      	mov	r0, r5
 8005300:	f000 fb6a 	bl	80059d8 <_sbrk_r>
 8005304:	3001      	adds	r0, #1
 8005306:	d101      	bne.n	800530c <sbrk_aligned+0x38>
 8005308:	f04f 34ff 	mov.w	r4, #4294967295
 800530c:	4620      	mov	r0, r4
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	20013398 	.word	0x20013398

08005314 <_malloc_r>:
 8005314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005318:	1ccd      	adds	r5, r1, #3
 800531a:	f025 0503 	bic.w	r5, r5, #3
 800531e:	3508      	adds	r5, #8
 8005320:	2d0c      	cmp	r5, #12
 8005322:	bf38      	it	cc
 8005324:	250c      	movcc	r5, #12
 8005326:	2d00      	cmp	r5, #0
 8005328:	4607      	mov	r7, r0
 800532a:	db01      	blt.n	8005330 <_malloc_r+0x1c>
 800532c:	42a9      	cmp	r1, r5
 800532e:	d905      	bls.n	800533c <_malloc_r+0x28>
 8005330:	230c      	movs	r3, #12
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	2600      	movs	r6, #0
 8005336:	4630      	mov	r0, r6
 8005338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800533c:	4e2e      	ldr	r6, [pc, #184]	; (80053f8 <_malloc_r+0xe4>)
 800533e:	f000 fdc3 	bl	8005ec8 <__malloc_lock>
 8005342:	6833      	ldr	r3, [r6, #0]
 8005344:	461c      	mov	r4, r3
 8005346:	bb34      	cbnz	r4, 8005396 <_malloc_r+0x82>
 8005348:	4629      	mov	r1, r5
 800534a:	4638      	mov	r0, r7
 800534c:	f7ff ffc2 	bl	80052d4 <sbrk_aligned>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	4604      	mov	r4, r0
 8005354:	d14d      	bne.n	80053f2 <_malloc_r+0xde>
 8005356:	6834      	ldr	r4, [r6, #0]
 8005358:	4626      	mov	r6, r4
 800535a:	2e00      	cmp	r6, #0
 800535c:	d140      	bne.n	80053e0 <_malloc_r+0xcc>
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	4631      	mov	r1, r6
 8005362:	4638      	mov	r0, r7
 8005364:	eb04 0803 	add.w	r8, r4, r3
 8005368:	f000 fb36 	bl	80059d8 <_sbrk_r>
 800536c:	4580      	cmp	r8, r0
 800536e:	d13a      	bne.n	80053e6 <_malloc_r+0xd2>
 8005370:	6821      	ldr	r1, [r4, #0]
 8005372:	3503      	adds	r5, #3
 8005374:	1a6d      	subs	r5, r5, r1
 8005376:	f025 0503 	bic.w	r5, r5, #3
 800537a:	3508      	adds	r5, #8
 800537c:	2d0c      	cmp	r5, #12
 800537e:	bf38      	it	cc
 8005380:	250c      	movcc	r5, #12
 8005382:	4629      	mov	r1, r5
 8005384:	4638      	mov	r0, r7
 8005386:	f7ff ffa5 	bl	80052d4 <sbrk_aligned>
 800538a:	3001      	adds	r0, #1
 800538c:	d02b      	beq.n	80053e6 <_malloc_r+0xd2>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	442b      	add	r3, r5
 8005392:	6023      	str	r3, [r4, #0]
 8005394:	e00e      	b.n	80053b4 <_malloc_r+0xa0>
 8005396:	6822      	ldr	r2, [r4, #0]
 8005398:	1b52      	subs	r2, r2, r5
 800539a:	d41e      	bmi.n	80053da <_malloc_r+0xc6>
 800539c:	2a0b      	cmp	r2, #11
 800539e:	d916      	bls.n	80053ce <_malloc_r+0xba>
 80053a0:	1961      	adds	r1, r4, r5
 80053a2:	42a3      	cmp	r3, r4
 80053a4:	6025      	str	r5, [r4, #0]
 80053a6:	bf18      	it	ne
 80053a8:	6059      	strne	r1, [r3, #4]
 80053aa:	6863      	ldr	r3, [r4, #4]
 80053ac:	bf08      	it	eq
 80053ae:	6031      	streq	r1, [r6, #0]
 80053b0:	5162      	str	r2, [r4, r5]
 80053b2:	604b      	str	r3, [r1, #4]
 80053b4:	4638      	mov	r0, r7
 80053b6:	f104 060b 	add.w	r6, r4, #11
 80053ba:	f000 fd8b 	bl	8005ed4 <__malloc_unlock>
 80053be:	f026 0607 	bic.w	r6, r6, #7
 80053c2:	1d23      	adds	r3, r4, #4
 80053c4:	1af2      	subs	r2, r6, r3
 80053c6:	d0b6      	beq.n	8005336 <_malloc_r+0x22>
 80053c8:	1b9b      	subs	r3, r3, r6
 80053ca:	50a3      	str	r3, [r4, r2]
 80053cc:	e7b3      	b.n	8005336 <_malloc_r+0x22>
 80053ce:	6862      	ldr	r2, [r4, #4]
 80053d0:	42a3      	cmp	r3, r4
 80053d2:	bf0c      	ite	eq
 80053d4:	6032      	streq	r2, [r6, #0]
 80053d6:	605a      	strne	r2, [r3, #4]
 80053d8:	e7ec      	b.n	80053b4 <_malloc_r+0xa0>
 80053da:	4623      	mov	r3, r4
 80053dc:	6864      	ldr	r4, [r4, #4]
 80053de:	e7b2      	b.n	8005346 <_malloc_r+0x32>
 80053e0:	4634      	mov	r4, r6
 80053e2:	6876      	ldr	r6, [r6, #4]
 80053e4:	e7b9      	b.n	800535a <_malloc_r+0x46>
 80053e6:	230c      	movs	r3, #12
 80053e8:	603b      	str	r3, [r7, #0]
 80053ea:	4638      	mov	r0, r7
 80053ec:	f000 fd72 	bl	8005ed4 <__malloc_unlock>
 80053f0:	e7a1      	b.n	8005336 <_malloc_r+0x22>
 80053f2:	6025      	str	r5, [r4, #0]
 80053f4:	e7de      	b.n	80053b4 <_malloc_r+0xa0>
 80053f6:	bf00      	nop
 80053f8:	20013394 	.word	0x20013394

080053fc <__sfputc_r>:
 80053fc:	6893      	ldr	r3, [r2, #8]
 80053fe:	3b01      	subs	r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	b410      	push	{r4}
 8005404:	6093      	str	r3, [r2, #8]
 8005406:	da08      	bge.n	800541a <__sfputc_r+0x1e>
 8005408:	6994      	ldr	r4, [r2, #24]
 800540a:	42a3      	cmp	r3, r4
 800540c:	db01      	blt.n	8005412 <__sfputc_r+0x16>
 800540e:	290a      	cmp	r1, #10
 8005410:	d103      	bne.n	800541a <__sfputc_r+0x1e>
 8005412:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005416:	f000 bb33 	b.w	8005a80 <__swbuf_r>
 800541a:	6813      	ldr	r3, [r2, #0]
 800541c:	1c58      	adds	r0, r3, #1
 800541e:	6010      	str	r0, [r2, #0]
 8005420:	7019      	strb	r1, [r3, #0]
 8005422:	4608      	mov	r0, r1
 8005424:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005428:	4770      	bx	lr

0800542a <__sfputs_r>:
 800542a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542c:	4606      	mov	r6, r0
 800542e:	460f      	mov	r7, r1
 8005430:	4614      	mov	r4, r2
 8005432:	18d5      	adds	r5, r2, r3
 8005434:	42ac      	cmp	r4, r5
 8005436:	d101      	bne.n	800543c <__sfputs_r+0x12>
 8005438:	2000      	movs	r0, #0
 800543a:	e007      	b.n	800544c <__sfputs_r+0x22>
 800543c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005440:	463a      	mov	r2, r7
 8005442:	4630      	mov	r0, r6
 8005444:	f7ff ffda 	bl	80053fc <__sfputc_r>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d1f3      	bne.n	8005434 <__sfputs_r+0xa>
 800544c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005450 <_vfiprintf_r>:
 8005450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005454:	460d      	mov	r5, r1
 8005456:	b09d      	sub	sp, #116	; 0x74
 8005458:	4614      	mov	r4, r2
 800545a:	4698      	mov	r8, r3
 800545c:	4606      	mov	r6, r0
 800545e:	b118      	cbz	r0, 8005468 <_vfiprintf_r+0x18>
 8005460:	6983      	ldr	r3, [r0, #24]
 8005462:	b90b      	cbnz	r3, 8005468 <_vfiprintf_r+0x18>
 8005464:	f7ff fe30 	bl	80050c8 <__sinit>
 8005468:	4b89      	ldr	r3, [pc, #548]	; (8005690 <_vfiprintf_r+0x240>)
 800546a:	429d      	cmp	r5, r3
 800546c:	d11b      	bne.n	80054a6 <_vfiprintf_r+0x56>
 800546e:	6875      	ldr	r5, [r6, #4]
 8005470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005472:	07d9      	lsls	r1, r3, #31
 8005474:	d405      	bmi.n	8005482 <_vfiprintf_r+0x32>
 8005476:	89ab      	ldrh	r3, [r5, #12]
 8005478:	059a      	lsls	r2, r3, #22
 800547a:	d402      	bmi.n	8005482 <_vfiprintf_r+0x32>
 800547c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800547e:	f7ff fed3 	bl	8005228 <__retarget_lock_acquire_recursive>
 8005482:	89ab      	ldrh	r3, [r5, #12]
 8005484:	071b      	lsls	r3, r3, #28
 8005486:	d501      	bpl.n	800548c <_vfiprintf_r+0x3c>
 8005488:	692b      	ldr	r3, [r5, #16]
 800548a:	b9eb      	cbnz	r3, 80054c8 <_vfiprintf_r+0x78>
 800548c:	4629      	mov	r1, r5
 800548e:	4630      	mov	r0, r6
 8005490:	f000 fb5a 	bl	8005b48 <__swsetup_r>
 8005494:	b1c0      	cbz	r0, 80054c8 <_vfiprintf_r+0x78>
 8005496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005498:	07dc      	lsls	r4, r3, #31
 800549a:	d50e      	bpl.n	80054ba <_vfiprintf_r+0x6a>
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	b01d      	add	sp, #116	; 0x74
 80054a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a6:	4b7b      	ldr	r3, [pc, #492]	; (8005694 <_vfiprintf_r+0x244>)
 80054a8:	429d      	cmp	r5, r3
 80054aa:	d101      	bne.n	80054b0 <_vfiprintf_r+0x60>
 80054ac:	68b5      	ldr	r5, [r6, #8]
 80054ae:	e7df      	b.n	8005470 <_vfiprintf_r+0x20>
 80054b0:	4b79      	ldr	r3, [pc, #484]	; (8005698 <_vfiprintf_r+0x248>)
 80054b2:	429d      	cmp	r5, r3
 80054b4:	bf08      	it	eq
 80054b6:	68f5      	ldreq	r5, [r6, #12]
 80054b8:	e7da      	b.n	8005470 <_vfiprintf_r+0x20>
 80054ba:	89ab      	ldrh	r3, [r5, #12]
 80054bc:	0598      	lsls	r0, r3, #22
 80054be:	d4ed      	bmi.n	800549c <_vfiprintf_r+0x4c>
 80054c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054c2:	f7ff feb2 	bl	800522a <__retarget_lock_release_recursive>
 80054c6:	e7e9      	b.n	800549c <_vfiprintf_r+0x4c>
 80054c8:	2300      	movs	r3, #0
 80054ca:	9309      	str	r3, [sp, #36]	; 0x24
 80054cc:	2320      	movs	r3, #32
 80054ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80054d6:	2330      	movs	r3, #48	; 0x30
 80054d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800569c <_vfiprintf_r+0x24c>
 80054dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054e0:	f04f 0901 	mov.w	r9, #1
 80054e4:	4623      	mov	r3, r4
 80054e6:	469a      	mov	sl, r3
 80054e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054ec:	b10a      	cbz	r2, 80054f2 <_vfiprintf_r+0xa2>
 80054ee:	2a25      	cmp	r2, #37	; 0x25
 80054f0:	d1f9      	bne.n	80054e6 <_vfiprintf_r+0x96>
 80054f2:	ebba 0b04 	subs.w	fp, sl, r4
 80054f6:	d00b      	beq.n	8005510 <_vfiprintf_r+0xc0>
 80054f8:	465b      	mov	r3, fp
 80054fa:	4622      	mov	r2, r4
 80054fc:	4629      	mov	r1, r5
 80054fe:	4630      	mov	r0, r6
 8005500:	f7ff ff93 	bl	800542a <__sfputs_r>
 8005504:	3001      	adds	r0, #1
 8005506:	f000 80aa 	beq.w	800565e <_vfiprintf_r+0x20e>
 800550a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800550c:	445a      	add	r2, fp
 800550e:	9209      	str	r2, [sp, #36]	; 0x24
 8005510:	f89a 3000 	ldrb.w	r3, [sl]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80a2 	beq.w	800565e <_vfiprintf_r+0x20e>
 800551a:	2300      	movs	r3, #0
 800551c:	f04f 32ff 	mov.w	r2, #4294967295
 8005520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005524:	f10a 0a01 	add.w	sl, sl, #1
 8005528:	9304      	str	r3, [sp, #16]
 800552a:	9307      	str	r3, [sp, #28]
 800552c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005530:	931a      	str	r3, [sp, #104]	; 0x68
 8005532:	4654      	mov	r4, sl
 8005534:	2205      	movs	r2, #5
 8005536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553a:	4858      	ldr	r0, [pc, #352]	; (800569c <_vfiprintf_r+0x24c>)
 800553c:	f7fa fe48 	bl	80001d0 <memchr>
 8005540:	9a04      	ldr	r2, [sp, #16]
 8005542:	b9d8      	cbnz	r0, 800557c <_vfiprintf_r+0x12c>
 8005544:	06d1      	lsls	r1, r2, #27
 8005546:	bf44      	itt	mi
 8005548:	2320      	movmi	r3, #32
 800554a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800554e:	0713      	lsls	r3, r2, #28
 8005550:	bf44      	itt	mi
 8005552:	232b      	movmi	r3, #43	; 0x2b
 8005554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005558:	f89a 3000 	ldrb.w	r3, [sl]
 800555c:	2b2a      	cmp	r3, #42	; 0x2a
 800555e:	d015      	beq.n	800558c <_vfiprintf_r+0x13c>
 8005560:	9a07      	ldr	r2, [sp, #28]
 8005562:	4654      	mov	r4, sl
 8005564:	2000      	movs	r0, #0
 8005566:	f04f 0c0a 	mov.w	ip, #10
 800556a:	4621      	mov	r1, r4
 800556c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005570:	3b30      	subs	r3, #48	; 0x30
 8005572:	2b09      	cmp	r3, #9
 8005574:	d94e      	bls.n	8005614 <_vfiprintf_r+0x1c4>
 8005576:	b1b0      	cbz	r0, 80055a6 <_vfiprintf_r+0x156>
 8005578:	9207      	str	r2, [sp, #28]
 800557a:	e014      	b.n	80055a6 <_vfiprintf_r+0x156>
 800557c:	eba0 0308 	sub.w	r3, r0, r8
 8005580:	fa09 f303 	lsl.w	r3, r9, r3
 8005584:	4313      	orrs	r3, r2
 8005586:	9304      	str	r3, [sp, #16]
 8005588:	46a2      	mov	sl, r4
 800558a:	e7d2      	b.n	8005532 <_vfiprintf_r+0xe2>
 800558c:	9b03      	ldr	r3, [sp, #12]
 800558e:	1d19      	adds	r1, r3, #4
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	9103      	str	r1, [sp, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	bfbb      	ittet	lt
 8005598:	425b      	neglt	r3, r3
 800559a:	f042 0202 	orrlt.w	r2, r2, #2
 800559e:	9307      	strge	r3, [sp, #28]
 80055a0:	9307      	strlt	r3, [sp, #28]
 80055a2:	bfb8      	it	lt
 80055a4:	9204      	strlt	r2, [sp, #16]
 80055a6:	7823      	ldrb	r3, [r4, #0]
 80055a8:	2b2e      	cmp	r3, #46	; 0x2e
 80055aa:	d10c      	bne.n	80055c6 <_vfiprintf_r+0x176>
 80055ac:	7863      	ldrb	r3, [r4, #1]
 80055ae:	2b2a      	cmp	r3, #42	; 0x2a
 80055b0:	d135      	bne.n	800561e <_vfiprintf_r+0x1ce>
 80055b2:	9b03      	ldr	r3, [sp, #12]
 80055b4:	1d1a      	adds	r2, r3, #4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	9203      	str	r2, [sp, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bfb8      	it	lt
 80055be:	f04f 33ff 	movlt.w	r3, #4294967295
 80055c2:	3402      	adds	r4, #2
 80055c4:	9305      	str	r3, [sp, #20]
 80055c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80056ac <_vfiprintf_r+0x25c>
 80055ca:	7821      	ldrb	r1, [r4, #0]
 80055cc:	2203      	movs	r2, #3
 80055ce:	4650      	mov	r0, sl
 80055d0:	f7fa fdfe 	bl	80001d0 <memchr>
 80055d4:	b140      	cbz	r0, 80055e8 <_vfiprintf_r+0x198>
 80055d6:	2340      	movs	r3, #64	; 0x40
 80055d8:	eba0 000a 	sub.w	r0, r0, sl
 80055dc:	fa03 f000 	lsl.w	r0, r3, r0
 80055e0:	9b04      	ldr	r3, [sp, #16]
 80055e2:	4303      	orrs	r3, r0
 80055e4:	3401      	adds	r4, #1
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ec:	482c      	ldr	r0, [pc, #176]	; (80056a0 <_vfiprintf_r+0x250>)
 80055ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055f2:	2206      	movs	r2, #6
 80055f4:	f7fa fdec 	bl	80001d0 <memchr>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	d03f      	beq.n	800567c <_vfiprintf_r+0x22c>
 80055fc:	4b29      	ldr	r3, [pc, #164]	; (80056a4 <_vfiprintf_r+0x254>)
 80055fe:	bb1b      	cbnz	r3, 8005648 <_vfiprintf_r+0x1f8>
 8005600:	9b03      	ldr	r3, [sp, #12]
 8005602:	3307      	adds	r3, #7
 8005604:	f023 0307 	bic.w	r3, r3, #7
 8005608:	3308      	adds	r3, #8
 800560a:	9303      	str	r3, [sp, #12]
 800560c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800560e:	443b      	add	r3, r7
 8005610:	9309      	str	r3, [sp, #36]	; 0x24
 8005612:	e767      	b.n	80054e4 <_vfiprintf_r+0x94>
 8005614:	fb0c 3202 	mla	r2, ip, r2, r3
 8005618:	460c      	mov	r4, r1
 800561a:	2001      	movs	r0, #1
 800561c:	e7a5      	b.n	800556a <_vfiprintf_r+0x11a>
 800561e:	2300      	movs	r3, #0
 8005620:	3401      	adds	r4, #1
 8005622:	9305      	str	r3, [sp, #20]
 8005624:	4619      	mov	r1, r3
 8005626:	f04f 0c0a 	mov.w	ip, #10
 800562a:	4620      	mov	r0, r4
 800562c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005630:	3a30      	subs	r2, #48	; 0x30
 8005632:	2a09      	cmp	r2, #9
 8005634:	d903      	bls.n	800563e <_vfiprintf_r+0x1ee>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0c5      	beq.n	80055c6 <_vfiprintf_r+0x176>
 800563a:	9105      	str	r1, [sp, #20]
 800563c:	e7c3      	b.n	80055c6 <_vfiprintf_r+0x176>
 800563e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005642:	4604      	mov	r4, r0
 8005644:	2301      	movs	r3, #1
 8005646:	e7f0      	b.n	800562a <_vfiprintf_r+0x1da>
 8005648:	ab03      	add	r3, sp, #12
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	462a      	mov	r2, r5
 800564e:	4b16      	ldr	r3, [pc, #88]	; (80056a8 <_vfiprintf_r+0x258>)
 8005650:	a904      	add	r1, sp, #16
 8005652:	4630      	mov	r0, r6
 8005654:	f3af 8000 	nop.w
 8005658:	4607      	mov	r7, r0
 800565a:	1c78      	adds	r0, r7, #1
 800565c:	d1d6      	bne.n	800560c <_vfiprintf_r+0x1bc>
 800565e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005660:	07d9      	lsls	r1, r3, #31
 8005662:	d405      	bmi.n	8005670 <_vfiprintf_r+0x220>
 8005664:	89ab      	ldrh	r3, [r5, #12]
 8005666:	059a      	lsls	r2, r3, #22
 8005668:	d402      	bmi.n	8005670 <_vfiprintf_r+0x220>
 800566a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800566c:	f7ff fddd 	bl	800522a <__retarget_lock_release_recursive>
 8005670:	89ab      	ldrh	r3, [r5, #12]
 8005672:	065b      	lsls	r3, r3, #25
 8005674:	f53f af12 	bmi.w	800549c <_vfiprintf_r+0x4c>
 8005678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800567a:	e711      	b.n	80054a0 <_vfiprintf_r+0x50>
 800567c:	ab03      	add	r3, sp, #12
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	462a      	mov	r2, r5
 8005682:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <_vfiprintf_r+0x258>)
 8005684:	a904      	add	r1, sp, #16
 8005686:	4630      	mov	r0, r6
 8005688:	f000 f880 	bl	800578c <_printf_i>
 800568c:	e7e4      	b.n	8005658 <_vfiprintf_r+0x208>
 800568e:	bf00      	nop
 8005690:	08006110 	.word	0x08006110
 8005694:	08006130 	.word	0x08006130
 8005698:	080060f0 	.word	0x080060f0
 800569c:	08006150 	.word	0x08006150
 80056a0:	0800615a 	.word	0x0800615a
 80056a4:	00000000 	.word	0x00000000
 80056a8:	0800542b 	.word	0x0800542b
 80056ac:	08006156 	.word	0x08006156

080056b0 <_printf_common>:
 80056b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b4:	4616      	mov	r6, r2
 80056b6:	4699      	mov	r9, r3
 80056b8:	688a      	ldr	r2, [r1, #8]
 80056ba:	690b      	ldr	r3, [r1, #16]
 80056bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056c0:	4293      	cmp	r3, r2
 80056c2:	bfb8      	it	lt
 80056c4:	4613      	movlt	r3, r2
 80056c6:	6033      	str	r3, [r6, #0]
 80056c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056cc:	4607      	mov	r7, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	b10a      	cbz	r2, 80056d6 <_printf_common+0x26>
 80056d2:	3301      	adds	r3, #1
 80056d4:	6033      	str	r3, [r6, #0]
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	0699      	lsls	r1, r3, #26
 80056da:	bf42      	ittt	mi
 80056dc:	6833      	ldrmi	r3, [r6, #0]
 80056de:	3302      	addmi	r3, #2
 80056e0:	6033      	strmi	r3, [r6, #0]
 80056e2:	6825      	ldr	r5, [r4, #0]
 80056e4:	f015 0506 	ands.w	r5, r5, #6
 80056e8:	d106      	bne.n	80056f8 <_printf_common+0x48>
 80056ea:	f104 0a19 	add.w	sl, r4, #25
 80056ee:	68e3      	ldr	r3, [r4, #12]
 80056f0:	6832      	ldr	r2, [r6, #0]
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	42ab      	cmp	r3, r5
 80056f6:	dc26      	bgt.n	8005746 <_printf_common+0x96>
 80056f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056fc:	1e13      	subs	r3, r2, #0
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	bf18      	it	ne
 8005702:	2301      	movne	r3, #1
 8005704:	0692      	lsls	r2, r2, #26
 8005706:	d42b      	bmi.n	8005760 <_printf_common+0xb0>
 8005708:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800570c:	4649      	mov	r1, r9
 800570e:	4638      	mov	r0, r7
 8005710:	47c0      	blx	r8
 8005712:	3001      	adds	r0, #1
 8005714:	d01e      	beq.n	8005754 <_printf_common+0xa4>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	68e5      	ldr	r5, [r4, #12]
 800571a:	6832      	ldr	r2, [r6, #0]
 800571c:	f003 0306 	and.w	r3, r3, #6
 8005720:	2b04      	cmp	r3, #4
 8005722:	bf08      	it	eq
 8005724:	1aad      	subeq	r5, r5, r2
 8005726:	68a3      	ldr	r3, [r4, #8]
 8005728:	6922      	ldr	r2, [r4, #16]
 800572a:	bf0c      	ite	eq
 800572c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005730:	2500      	movne	r5, #0
 8005732:	4293      	cmp	r3, r2
 8005734:	bfc4      	itt	gt
 8005736:	1a9b      	subgt	r3, r3, r2
 8005738:	18ed      	addgt	r5, r5, r3
 800573a:	2600      	movs	r6, #0
 800573c:	341a      	adds	r4, #26
 800573e:	42b5      	cmp	r5, r6
 8005740:	d11a      	bne.n	8005778 <_printf_common+0xc8>
 8005742:	2000      	movs	r0, #0
 8005744:	e008      	b.n	8005758 <_printf_common+0xa8>
 8005746:	2301      	movs	r3, #1
 8005748:	4652      	mov	r2, sl
 800574a:	4649      	mov	r1, r9
 800574c:	4638      	mov	r0, r7
 800574e:	47c0      	blx	r8
 8005750:	3001      	adds	r0, #1
 8005752:	d103      	bne.n	800575c <_printf_common+0xac>
 8005754:	f04f 30ff 	mov.w	r0, #4294967295
 8005758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800575c:	3501      	adds	r5, #1
 800575e:	e7c6      	b.n	80056ee <_printf_common+0x3e>
 8005760:	18e1      	adds	r1, r4, r3
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	2030      	movs	r0, #48	; 0x30
 8005766:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800576a:	4422      	add	r2, r4
 800576c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005770:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005774:	3302      	adds	r3, #2
 8005776:	e7c7      	b.n	8005708 <_printf_common+0x58>
 8005778:	2301      	movs	r3, #1
 800577a:	4622      	mov	r2, r4
 800577c:	4649      	mov	r1, r9
 800577e:	4638      	mov	r0, r7
 8005780:	47c0      	blx	r8
 8005782:	3001      	adds	r0, #1
 8005784:	d0e6      	beq.n	8005754 <_printf_common+0xa4>
 8005786:	3601      	adds	r6, #1
 8005788:	e7d9      	b.n	800573e <_printf_common+0x8e>
	...

0800578c <_printf_i>:
 800578c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	7e0f      	ldrb	r7, [r1, #24]
 8005792:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005794:	2f78      	cmp	r7, #120	; 0x78
 8005796:	4691      	mov	r9, r2
 8005798:	4680      	mov	r8, r0
 800579a:	460c      	mov	r4, r1
 800579c:	469a      	mov	sl, r3
 800579e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057a2:	d807      	bhi.n	80057b4 <_printf_i+0x28>
 80057a4:	2f62      	cmp	r7, #98	; 0x62
 80057a6:	d80a      	bhi.n	80057be <_printf_i+0x32>
 80057a8:	2f00      	cmp	r7, #0
 80057aa:	f000 80d8 	beq.w	800595e <_printf_i+0x1d2>
 80057ae:	2f58      	cmp	r7, #88	; 0x58
 80057b0:	f000 80a3 	beq.w	80058fa <_printf_i+0x16e>
 80057b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057bc:	e03a      	b.n	8005834 <_printf_i+0xa8>
 80057be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057c2:	2b15      	cmp	r3, #21
 80057c4:	d8f6      	bhi.n	80057b4 <_printf_i+0x28>
 80057c6:	a101      	add	r1, pc, #4	; (adr r1, 80057cc <_printf_i+0x40>)
 80057c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057cc:	08005825 	.word	0x08005825
 80057d0:	08005839 	.word	0x08005839
 80057d4:	080057b5 	.word	0x080057b5
 80057d8:	080057b5 	.word	0x080057b5
 80057dc:	080057b5 	.word	0x080057b5
 80057e0:	080057b5 	.word	0x080057b5
 80057e4:	08005839 	.word	0x08005839
 80057e8:	080057b5 	.word	0x080057b5
 80057ec:	080057b5 	.word	0x080057b5
 80057f0:	080057b5 	.word	0x080057b5
 80057f4:	080057b5 	.word	0x080057b5
 80057f8:	08005945 	.word	0x08005945
 80057fc:	08005869 	.word	0x08005869
 8005800:	08005927 	.word	0x08005927
 8005804:	080057b5 	.word	0x080057b5
 8005808:	080057b5 	.word	0x080057b5
 800580c:	08005967 	.word	0x08005967
 8005810:	080057b5 	.word	0x080057b5
 8005814:	08005869 	.word	0x08005869
 8005818:	080057b5 	.word	0x080057b5
 800581c:	080057b5 	.word	0x080057b5
 8005820:	0800592f 	.word	0x0800592f
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	1d1a      	adds	r2, r3, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	602a      	str	r2, [r5, #0]
 800582c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005834:	2301      	movs	r3, #1
 8005836:	e0a3      	b.n	8005980 <_printf_i+0x1f4>
 8005838:	6820      	ldr	r0, [r4, #0]
 800583a:	6829      	ldr	r1, [r5, #0]
 800583c:	0606      	lsls	r6, r0, #24
 800583e:	f101 0304 	add.w	r3, r1, #4
 8005842:	d50a      	bpl.n	800585a <_printf_i+0xce>
 8005844:	680e      	ldr	r6, [r1, #0]
 8005846:	602b      	str	r3, [r5, #0]
 8005848:	2e00      	cmp	r6, #0
 800584a:	da03      	bge.n	8005854 <_printf_i+0xc8>
 800584c:	232d      	movs	r3, #45	; 0x2d
 800584e:	4276      	negs	r6, r6
 8005850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005854:	485e      	ldr	r0, [pc, #376]	; (80059d0 <_printf_i+0x244>)
 8005856:	230a      	movs	r3, #10
 8005858:	e019      	b.n	800588e <_printf_i+0x102>
 800585a:	680e      	ldr	r6, [r1, #0]
 800585c:	602b      	str	r3, [r5, #0]
 800585e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005862:	bf18      	it	ne
 8005864:	b236      	sxthne	r6, r6
 8005866:	e7ef      	b.n	8005848 <_printf_i+0xbc>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	6820      	ldr	r0, [r4, #0]
 800586c:	1d19      	adds	r1, r3, #4
 800586e:	6029      	str	r1, [r5, #0]
 8005870:	0601      	lsls	r1, r0, #24
 8005872:	d501      	bpl.n	8005878 <_printf_i+0xec>
 8005874:	681e      	ldr	r6, [r3, #0]
 8005876:	e002      	b.n	800587e <_printf_i+0xf2>
 8005878:	0646      	lsls	r6, r0, #25
 800587a:	d5fb      	bpl.n	8005874 <_printf_i+0xe8>
 800587c:	881e      	ldrh	r6, [r3, #0]
 800587e:	4854      	ldr	r0, [pc, #336]	; (80059d0 <_printf_i+0x244>)
 8005880:	2f6f      	cmp	r7, #111	; 0x6f
 8005882:	bf0c      	ite	eq
 8005884:	2308      	moveq	r3, #8
 8005886:	230a      	movne	r3, #10
 8005888:	2100      	movs	r1, #0
 800588a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800588e:	6865      	ldr	r5, [r4, #4]
 8005890:	60a5      	str	r5, [r4, #8]
 8005892:	2d00      	cmp	r5, #0
 8005894:	bfa2      	ittt	ge
 8005896:	6821      	ldrge	r1, [r4, #0]
 8005898:	f021 0104 	bicge.w	r1, r1, #4
 800589c:	6021      	strge	r1, [r4, #0]
 800589e:	b90e      	cbnz	r6, 80058a4 <_printf_i+0x118>
 80058a0:	2d00      	cmp	r5, #0
 80058a2:	d04d      	beq.n	8005940 <_printf_i+0x1b4>
 80058a4:	4615      	mov	r5, r2
 80058a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80058aa:	fb03 6711 	mls	r7, r3, r1, r6
 80058ae:	5dc7      	ldrb	r7, [r0, r7]
 80058b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058b4:	4637      	mov	r7, r6
 80058b6:	42bb      	cmp	r3, r7
 80058b8:	460e      	mov	r6, r1
 80058ba:	d9f4      	bls.n	80058a6 <_printf_i+0x11a>
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d10b      	bne.n	80058d8 <_printf_i+0x14c>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	07de      	lsls	r6, r3, #31
 80058c4:	d508      	bpl.n	80058d8 <_printf_i+0x14c>
 80058c6:	6923      	ldr	r3, [r4, #16]
 80058c8:	6861      	ldr	r1, [r4, #4]
 80058ca:	4299      	cmp	r1, r3
 80058cc:	bfde      	ittt	le
 80058ce:	2330      	movle	r3, #48	; 0x30
 80058d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058d8:	1b52      	subs	r2, r2, r5
 80058da:	6122      	str	r2, [r4, #16]
 80058dc:	f8cd a000 	str.w	sl, [sp]
 80058e0:	464b      	mov	r3, r9
 80058e2:	aa03      	add	r2, sp, #12
 80058e4:	4621      	mov	r1, r4
 80058e6:	4640      	mov	r0, r8
 80058e8:	f7ff fee2 	bl	80056b0 <_printf_common>
 80058ec:	3001      	adds	r0, #1
 80058ee:	d14c      	bne.n	800598a <_printf_i+0x1fe>
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295
 80058f4:	b004      	add	sp, #16
 80058f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fa:	4835      	ldr	r0, [pc, #212]	; (80059d0 <_printf_i+0x244>)
 80058fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005900:	6829      	ldr	r1, [r5, #0]
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	f851 6b04 	ldr.w	r6, [r1], #4
 8005908:	6029      	str	r1, [r5, #0]
 800590a:	061d      	lsls	r5, r3, #24
 800590c:	d514      	bpl.n	8005938 <_printf_i+0x1ac>
 800590e:	07df      	lsls	r7, r3, #31
 8005910:	bf44      	itt	mi
 8005912:	f043 0320 	orrmi.w	r3, r3, #32
 8005916:	6023      	strmi	r3, [r4, #0]
 8005918:	b91e      	cbnz	r6, 8005922 <_printf_i+0x196>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	f023 0320 	bic.w	r3, r3, #32
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	2310      	movs	r3, #16
 8005924:	e7b0      	b.n	8005888 <_printf_i+0xfc>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	f043 0320 	orr.w	r3, r3, #32
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	2378      	movs	r3, #120	; 0x78
 8005930:	4828      	ldr	r0, [pc, #160]	; (80059d4 <_printf_i+0x248>)
 8005932:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005936:	e7e3      	b.n	8005900 <_printf_i+0x174>
 8005938:	0659      	lsls	r1, r3, #25
 800593a:	bf48      	it	mi
 800593c:	b2b6      	uxthmi	r6, r6
 800593e:	e7e6      	b.n	800590e <_printf_i+0x182>
 8005940:	4615      	mov	r5, r2
 8005942:	e7bb      	b.n	80058bc <_printf_i+0x130>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	6826      	ldr	r6, [r4, #0]
 8005948:	6961      	ldr	r1, [r4, #20]
 800594a:	1d18      	adds	r0, r3, #4
 800594c:	6028      	str	r0, [r5, #0]
 800594e:	0635      	lsls	r5, r6, #24
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	d501      	bpl.n	8005958 <_printf_i+0x1cc>
 8005954:	6019      	str	r1, [r3, #0]
 8005956:	e002      	b.n	800595e <_printf_i+0x1d2>
 8005958:	0670      	lsls	r0, r6, #25
 800595a:	d5fb      	bpl.n	8005954 <_printf_i+0x1c8>
 800595c:	8019      	strh	r1, [r3, #0]
 800595e:	2300      	movs	r3, #0
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	4615      	mov	r5, r2
 8005964:	e7ba      	b.n	80058dc <_printf_i+0x150>
 8005966:	682b      	ldr	r3, [r5, #0]
 8005968:	1d1a      	adds	r2, r3, #4
 800596a:	602a      	str	r2, [r5, #0]
 800596c:	681d      	ldr	r5, [r3, #0]
 800596e:	6862      	ldr	r2, [r4, #4]
 8005970:	2100      	movs	r1, #0
 8005972:	4628      	mov	r0, r5
 8005974:	f7fa fc2c 	bl	80001d0 <memchr>
 8005978:	b108      	cbz	r0, 800597e <_printf_i+0x1f2>
 800597a:	1b40      	subs	r0, r0, r5
 800597c:	6060      	str	r0, [r4, #4]
 800597e:	6863      	ldr	r3, [r4, #4]
 8005980:	6123      	str	r3, [r4, #16]
 8005982:	2300      	movs	r3, #0
 8005984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005988:	e7a8      	b.n	80058dc <_printf_i+0x150>
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	462a      	mov	r2, r5
 800598e:	4649      	mov	r1, r9
 8005990:	4640      	mov	r0, r8
 8005992:	47d0      	blx	sl
 8005994:	3001      	adds	r0, #1
 8005996:	d0ab      	beq.n	80058f0 <_printf_i+0x164>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	079b      	lsls	r3, r3, #30
 800599c:	d413      	bmi.n	80059c6 <_printf_i+0x23a>
 800599e:	68e0      	ldr	r0, [r4, #12]
 80059a0:	9b03      	ldr	r3, [sp, #12]
 80059a2:	4298      	cmp	r0, r3
 80059a4:	bfb8      	it	lt
 80059a6:	4618      	movlt	r0, r3
 80059a8:	e7a4      	b.n	80058f4 <_printf_i+0x168>
 80059aa:	2301      	movs	r3, #1
 80059ac:	4632      	mov	r2, r6
 80059ae:	4649      	mov	r1, r9
 80059b0:	4640      	mov	r0, r8
 80059b2:	47d0      	blx	sl
 80059b4:	3001      	adds	r0, #1
 80059b6:	d09b      	beq.n	80058f0 <_printf_i+0x164>
 80059b8:	3501      	adds	r5, #1
 80059ba:	68e3      	ldr	r3, [r4, #12]
 80059bc:	9903      	ldr	r1, [sp, #12]
 80059be:	1a5b      	subs	r3, r3, r1
 80059c0:	42ab      	cmp	r3, r5
 80059c2:	dcf2      	bgt.n	80059aa <_printf_i+0x21e>
 80059c4:	e7eb      	b.n	800599e <_printf_i+0x212>
 80059c6:	2500      	movs	r5, #0
 80059c8:	f104 0619 	add.w	r6, r4, #25
 80059cc:	e7f5      	b.n	80059ba <_printf_i+0x22e>
 80059ce:	bf00      	nop
 80059d0:	08006161 	.word	0x08006161
 80059d4:	08006172 	.word	0x08006172

080059d8 <_sbrk_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4d06      	ldr	r5, [pc, #24]	; (80059f4 <_sbrk_r+0x1c>)
 80059dc:	2300      	movs	r3, #0
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	f7fb fbb8 	bl	8001158 <_sbrk>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_sbrk_r+0x1a>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_sbrk_r+0x1a>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	2001339c 	.word	0x2001339c

080059f8 <__sread>:
 80059f8:	b510      	push	{r4, lr}
 80059fa:	460c      	mov	r4, r1
 80059fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a00:	f000 fa6e 	bl	8005ee0 <_read_r>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	bfab      	itete	ge
 8005a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a0c:	181b      	addge	r3, r3, r0
 8005a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a12:	bfac      	ite	ge
 8005a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a16:	81a3      	strhlt	r3, [r4, #12]
 8005a18:	bd10      	pop	{r4, pc}

08005a1a <__swrite>:
 8005a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1e:	461f      	mov	r7, r3
 8005a20:	898b      	ldrh	r3, [r1, #12]
 8005a22:	05db      	lsls	r3, r3, #23
 8005a24:	4605      	mov	r5, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	4616      	mov	r6, r2
 8005a2a:	d505      	bpl.n	8005a38 <__swrite+0x1e>
 8005a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a30:	2302      	movs	r3, #2
 8005a32:	2200      	movs	r2, #0
 8005a34:	f000 f9d0 	bl	8005dd8 <_lseek_r>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a42:	81a3      	strh	r3, [r4, #12]
 8005a44:	4632      	mov	r2, r6
 8005a46:	463b      	mov	r3, r7
 8005a48:	4628      	mov	r0, r5
 8005a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4e:	f000 b869 	b.w	8005b24 <_write_r>

08005a52 <__sseek>:
 8005a52:	b510      	push	{r4, lr}
 8005a54:	460c      	mov	r4, r1
 8005a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a5a:	f000 f9bd 	bl	8005dd8 <_lseek_r>
 8005a5e:	1c43      	adds	r3, r0, #1
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	bf15      	itete	ne
 8005a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a6e:	81a3      	strheq	r3, [r4, #12]
 8005a70:	bf18      	it	ne
 8005a72:	81a3      	strhne	r3, [r4, #12]
 8005a74:	bd10      	pop	{r4, pc}

08005a76 <__sclose>:
 8005a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7a:	f000 b8db 	b.w	8005c34 <_close_r>
	...

08005a80 <__swbuf_r>:
 8005a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a82:	460e      	mov	r6, r1
 8005a84:	4614      	mov	r4, r2
 8005a86:	4605      	mov	r5, r0
 8005a88:	b118      	cbz	r0, 8005a92 <__swbuf_r+0x12>
 8005a8a:	6983      	ldr	r3, [r0, #24]
 8005a8c:	b90b      	cbnz	r3, 8005a92 <__swbuf_r+0x12>
 8005a8e:	f7ff fb1b 	bl	80050c8 <__sinit>
 8005a92:	4b21      	ldr	r3, [pc, #132]	; (8005b18 <__swbuf_r+0x98>)
 8005a94:	429c      	cmp	r4, r3
 8005a96:	d12b      	bne.n	8005af0 <__swbuf_r+0x70>
 8005a98:	686c      	ldr	r4, [r5, #4]
 8005a9a:	69a3      	ldr	r3, [r4, #24]
 8005a9c:	60a3      	str	r3, [r4, #8]
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	071a      	lsls	r2, r3, #28
 8005aa2:	d52f      	bpl.n	8005b04 <__swbuf_r+0x84>
 8005aa4:	6923      	ldr	r3, [r4, #16]
 8005aa6:	b36b      	cbz	r3, 8005b04 <__swbuf_r+0x84>
 8005aa8:	6923      	ldr	r3, [r4, #16]
 8005aaa:	6820      	ldr	r0, [r4, #0]
 8005aac:	1ac0      	subs	r0, r0, r3
 8005aae:	6963      	ldr	r3, [r4, #20]
 8005ab0:	b2f6      	uxtb	r6, r6
 8005ab2:	4283      	cmp	r3, r0
 8005ab4:	4637      	mov	r7, r6
 8005ab6:	dc04      	bgt.n	8005ac2 <__swbuf_r+0x42>
 8005ab8:	4621      	mov	r1, r4
 8005aba:	4628      	mov	r0, r5
 8005abc:	f000 f950 	bl	8005d60 <_fflush_r>
 8005ac0:	bb30      	cbnz	r0, 8005b10 <__swbuf_r+0x90>
 8005ac2:	68a3      	ldr	r3, [r4, #8]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	60a3      	str	r3, [r4, #8]
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	6022      	str	r2, [r4, #0]
 8005ace:	701e      	strb	r6, [r3, #0]
 8005ad0:	6963      	ldr	r3, [r4, #20]
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	4283      	cmp	r3, r0
 8005ad6:	d004      	beq.n	8005ae2 <__swbuf_r+0x62>
 8005ad8:	89a3      	ldrh	r3, [r4, #12]
 8005ada:	07db      	lsls	r3, r3, #31
 8005adc:	d506      	bpl.n	8005aec <__swbuf_r+0x6c>
 8005ade:	2e0a      	cmp	r6, #10
 8005ae0:	d104      	bne.n	8005aec <__swbuf_r+0x6c>
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f000 f93b 	bl	8005d60 <_fflush_r>
 8005aea:	b988      	cbnz	r0, 8005b10 <__swbuf_r+0x90>
 8005aec:	4638      	mov	r0, r7
 8005aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af0:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <__swbuf_r+0x9c>)
 8005af2:	429c      	cmp	r4, r3
 8005af4:	d101      	bne.n	8005afa <__swbuf_r+0x7a>
 8005af6:	68ac      	ldr	r4, [r5, #8]
 8005af8:	e7cf      	b.n	8005a9a <__swbuf_r+0x1a>
 8005afa:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <__swbuf_r+0xa0>)
 8005afc:	429c      	cmp	r4, r3
 8005afe:	bf08      	it	eq
 8005b00:	68ec      	ldreq	r4, [r5, #12]
 8005b02:	e7ca      	b.n	8005a9a <__swbuf_r+0x1a>
 8005b04:	4621      	mov	r1, r4
 8005b06:	4628      	mov	r0, r5
 8005b08:	f000 f81e 	bl	8005b48 <__swsetup_r>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d0cb      	beq.n	8005aa8 <__swbuf_r+0x28>
 8005b10:	f04f 37ff 	mov.w	r7, #4294967295
 8005b14:	e7ea      	b.n	8005aec <__swbuf_r+0x6c>
 8005b16:	bf00      	nop
 8005b18:	08006110 	.word	0x08006110
 8005b1c:	08006130 	.word	0x08006130
 8005b20:	080060f0 	.word	0x080060f0

08005b24 <_write_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	4d07      	ldr	r5, [pc, #28]	; (8005b44 <_write_r+0x20>)
 8005b28:	4604      	mov	r4, r0
 8005b2a:	4608      	mov	r0, r1
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	2200      	movs	r2, #0
 8005b30:	602a      	str	r2, [r5, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	f7fb fabf 	bl	80010b6 <_write>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_write_r+0x1e>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_write_r+0x1e>
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	2001339c 	.word	0x2001339c

08005b48 <__swsetup_r>:
 8005b48:	4b32      	ldr	r3, [pc, #200]	; (8005c14 <__swsetup_r+0xcc>)
 8005b4a:	b570      	push	{r4, r5, r6, lr}
 8005b4c:	681d      	ldr	r5, [r3, #0]
 8005b4e:	4606      	mov	r6, r0
 8005b50:	460c      	mov	r4, r1
 8005b52:	b125      	cbz	r5, 8005b5e <__swsetup_r+0x16>
 8005b54:	69ab      	ldr	r3, [r5, #24]
 8005b56:	b913      	cbnz	r3, 8005b5e <__swsetup_r+0x16>
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f7ff fab5 	bl	80050c8 <__sinit>
 8005b5e:	4b2e      	ldr	r3, [pc, #184]	; (8005c18 <__swsetup_r+0xd0>)
 8005b60:	429c      	cmp	r4, r3
 8005b62:	d10f      	bne.n	8005b84 <__swsetup_r+0x3c>
 8005b64:	686c      	ldr	r4, [r5, #4]
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b6c:	0719      	lsls	r1, r3, #28
 8005b6e:	d42c      	bmi.n	8005bca <__swsetup_r+0x82>
 8005b70:	06dd      	lsls	r5, r3, #27
 8005b72:	d411      	bmi.n	8005b98 <__swsetup_r+0x50>
 8005b74:	2309      	movs	r3, #9
 8005b76:	6033      	str	r3, [r6, #0]
 8005b78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b7c:	81a3      	strh	r3, [r4, #12]
 8005b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b82:	e03e      	b.n	8005c02 <__swsetup_r+0xba>
 8005b84:	4b25      	ldr	r3, [pc, #148]	; (8005c1c <__swsetup_r+0xd4>)
 8005b86:	429c      	cmp	r4, r3
 8005b88:	d101      	bne.n	8005b8e <__swsetup_r+0x46>
 8005b8a:	68ac      	ldr	r4, [r5, #8]
 8005b8c:	e7eb      	b.n	8005b66 <__swsetup_r+0x1e>
 8005b8e:	4b24      	ldr	r3, [pc, #144]	; (8005c20 <__swsetup_r+0xd8>)
 8005b90:	429c      	cmp	r4, r3
 8005b92:	bf08      	it	eq
 8005b94:	68ec      	ldreq	r4, [r5, #12]
 8005b96:	e7e6      	b.n	8005b66 <__swsetup_r+0x1e>
 8005b98:	0758      	lsls	r0, r3, #29
 8005b9a:	d512      	bpl.n	8005bc2 <__swsetup_r+0x7a>
 8005b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b9e:	b141      	cbz	r1, 8005bb2 <__swsetup_r+0x6a>
 8005ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ba4:	4299      	cmp	r1, r3
 8005ba6:	d002      	beq.n	8005bae <__swsetup_r+0x66>
 8005ba8:	4630      	mov	r0, r6
 8005baa:	f7ff fb47 	bl	800523c <_free_r>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	6363      	str	r3, [r4, #52]	; 0x34
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bb8:	81a3      	strh	r3, [r4, #12]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	6063      	str	r3, [r4, #4]
 8005bbe:	6923      	ldr	r3, [r4, #16]
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	f043 0308 	orr.w	r3, r3, #8
 8005bc8:	81a3      	strh	r3, [r4, #12]
 8005bca:	6923      	ldr	r3, [r4, #16]
 8005bcc:	b94b      	cbnz	r3, 8005be2 <__swsetup_r+0x9a>
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd8:	d003      	beq.n	8005be2 <__swsetup_r+0x9a>
 8005bda:	4621      	mov	r1, r4
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f000 f933 	bl	8005e48 <__smakebuf_r>
 8005be2:	89a0      	ldrh	r0, [r4, #12]
 8005be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005be8:	f010 0301 	ands.w	r3, r0, #1
 8005bec:	d00a      	beq.n	8005c04 <__swsetup_r+0xbc>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60a3      	str	r3, [r4, #8]
 8005bf2:	6963      	ldr	r3, [r4, #20]
 8005bf4:	425b      	negs	r3, r3
 8005bf6:	61a3      	str	r3, [r4, #24]
 8005bf8:	6923      	ldr	r3, [r4, #16]
 8005bfa:	b943      	cbnz	r3, 8005c0e <__swsetup_r+0xc6>
 8005bfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c00:	d1ba      	bne.n	8005b78 <__swsetup_r+0x30>
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	0781      	lsls	r1, r0, #30
 8005c06:	bf58      	it	pl
 8005c08:	6963      	ldrpl	r3, [r4, #20]
 8005c0a:	60a3      	str	r3, [r4, #8]
 8005c0c:	e7f4      	b.n	8005bf8 <__swsetup_r+0xb0>
 8005c0e:	2000      	movs	r0, #0
 8005c10:	e7f7      	b.n	8005c02 <__swsetup_r+0xba>
 8005c12:	bf00      	nop
 8005c14:	2000000c 	.word	0x2000000c
 8005c18:	08006110 	.word	0x08006110
 8005c1c:	08006130 	.word	0x08006130
 8005c20:	080060f0 	.word	0x080060f0

08005c24 <abort>:
 8005c24:	b508      	push	{r3, lr}
 8005c26:	2006      	movs	r0, #6
 8005c28:	f000 f994 	bl	8005f54 <raise>
 8005c2c:	2001      	movs	r0, #1
 8005c2e:	f7fb fa1b 	bl	8001068 <_exit>
	...

08005c34 <_close_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d06      	ldr	r5, [pc, #24]	; (8005c50 <_close_r+0x1c>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	602b      	str	r3, [r5, #0]
 8005c40:	f7fb fa55 	bl	80010ee <_close>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_close_r+0x1a>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_close_r+0x1a>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	2001339c 	.word	0x2001339c

08005c54 <__sflush_r>:
 8005c54:	898a      	ldrh	r2, [r1, #12]
 8005c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	0710      	lsls	r0, r2, #28
 8005c5e:	460c      	mov	r4, r1
 8005c60:	d458      	bmi.n	8005d14 <__sflush_r+0xc0>
 8005c62:	684b      	ldr	r3, [r1, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	dc05      	bgt.n	8005c74 <__sflush_r+0x20>
 8005c68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	dc02      	bgt.n	8005c74 <__sflush_r+0x20>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c76:	2e00      	cmp	r6, #0
 8005c78:	d0f9      	beq.n	8005c6e <__sflush_r+0x1a>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c80:	682f      	ldr	r7, [r5, #0]
 8005c82:	602b      	str	r3, [r5, #0]
 8005c84:	d032      	beq.n	8005cec <__sflush_r+0x98>
 8005c86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	075a      	lsls	r2, r3, #29
 8005c8c:	d505      	bpl.n	8005c9a <__sflush_r+0x46>
 8005c8e:	6863      	ldr	r3, [r4, #4]
 8005c90:	1ac0      	subs	r0, r0, r3
 8005c92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c94:	b10b      	cbz	r3, 8005c9a <__sflush_r+0x46>
 8005c96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c98:	1ac0      	subs	r0, r0, r3
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ca0:	6a21      	ldr	r1, [r4, #32]
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	47b0      	blx	r6
 8005ca6:	1c43      	adds	r3, r0, #1
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	d106      	bne.n	8005cba <__sflush_r+0x66>
 8005cac:	6829      	ldr	r1, [r5, #0]
 8005cae:	291d      	cmp	r1, #29
 8005cb0:	d82c      	bhi.n	8005d0c <__sflush_r+0xb8>
 8005cb2:	4a2a      	ldr	r2, [pc, #168]	; (8005d5c <__sflush_r+0x108>)
 8005cb4:	40ca      	lsrs	r2, r1
 8005cb6:	07d6      	lsls	r6, r2, #31
 8005cb8:	d528      	bpl.n	8005d0c <__sflush_r+0xb8>
 8005cba:	2200      	movs	r2, #0
 8005cbc:	6062      	str	r2, [r4, #4]
 8005cbe:	04d9      	lsls	r1, r3, #19
 8005cc0:	6922      	ldr	r2, [r4, #16]
 8005cc2:	6022      	str	r2, [r4, #0]
 8005cc4:	d504      	bpl.n	8005cd0 <__sflush_r+0x7c>
 8005cc6:	1c42      	adds	r2, r0, #1
 8005cc8:	d101      	bne.n	8005cce <__sflush_r+0x7a>
 8005cca:	682b      	ldr	r3, [r5, #0]
 8005ccc:	b903      	cbnz	r3, 8005cd0 <__sflush_r+0x7c>
 8005cce:	6560      	str	r0, [r4, #84]	; 0x54
 8005cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cd2:	602f      	str	r7, [r5, #0]
 8005cd4:	2900      	cmp	r1, #0
 8005cd6:	d0ca      	beq.n	8005c6e <__sflush_r+0x1a>
 8005cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cdc:	4299      	cmp	r1, r3
 8005cde:	d002      	beq.n	8005ce6 <__sflush_r+0x92>
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f7ff faab 	bl	800523c <_free_r>
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	6360      	str	r0, [r4, #52]	; 0x34
 8005cea:	e7c1      	b.n	8005c70 <__sflush_r+0x1c>
 8005cec:	6a21      	ldr	r1, [r4, #32]
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b0      	blx	r6
 8005cf4:	1c41      	adds	r1, r0, #1
 8005cf6:	d1c7      	bne.n	8005c88 <__sflush_r+0x34>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0c4      	beq.n	8005c88 <__sflush_r+0x34>
 8005cfe:	2b1d      	cmp	r3, #29
 8005d00:	d001      	beq.n	8005d06 <__sflush_r+0xb2>
 8005d02:	2b16      	cmp	r3, #22
 8005d04:	d101      	bne.n	8005d0a <__sflush_r+0xb6>
 8005d06:	602f      	str	r7, [r5, #0]
 8005d08:	e7b1      	b.n	8005c6e <__sflush_r+0x1a>
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d10:	81a3      	strh	r3, [r4, #12]
 8005d12:	e7ad      	b.n	8005c70 <__sflush_r+0x1c>
 8005d14:	690f      	ldr	r7, [r1, #16]
 8005d16:	2f00      	cmp	r7, #0
 8005d18:	d0a9      	beq.n	8005c6e <__sflush_r+0x1a>
 8005d1a:	0793      	lsls	r3, r2, #30
 8005d1c:	680e      	ldr	r6, [r1, #0]
 8005d1e:	bf08      	it	eq
 8005d20:	694b      	ldreq	r3, [r1, #20]
 8005d22:	600f      	str	r7, [r1, #0]
 8005d24:	bf18      	it	ne
 8005d26:	2300      	movne	r3, #0
 8005d28:	eba6 0807 	sub.w	r8, r6, r7
 8005d2c:	608b      	str	r3, [r1, #8]
 8005d2e:	f1b8 0f00 	cmp.w	r8, #0
 8005d32:	dd9c      	ble.n	8005c6e <__sflush_r+0x1a>
 8005d34:	6a21      	ldr	r1, [r4, #32]
 8005d36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d38:	4643      	mov	r3, r8
 8005d3a:	463a      	mov	r2, r7
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	47b0      	blx	r6
 8005d40:	2800      	cmp	r0, #0
 8005d42:	dc06      	bgt.n	8005d52 <__sflush_r+0xfe>
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d4a:	81a3      	strh	r3, [r4, #12]
 8005d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d50:	e78e      	b.n	8005c70 <__sflush_r+0x1c>
 8005d52:	4407      	add	r7, r0
 8005d54:	eba8 0800 	sub.w	r8, r8, r0
 8005d58:	e7e9      	b.n	8005d2e <__sflush_r+0xda>
 8005d5a:	bf00      	nop
 8005d5c:	20400001 	.word	0x20400001

08005d60 <_fflush_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	690b      	ldr	r3, [r1, #16]
 8005d64:	4605      	mov	r5, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	b913      	cbnz	r3, 8005d70 <_fflush_r+0x10>
 8005d6a:	2500      	movs	r5, #0
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	b118      	cbz	r0, 8005d7a <_fflush_r+0x1a>
 8005d72:	6983      	ldr	r3, [r0, #24]
 8005d74:	b90b      	cbnz	r3, 8005d7a <_fflush_r+0x1a>
 8005d76:	f7ff f9a7 	bl	80050c8 <__sinit>
 8005d7a:	4b14      	ldr	r3, [pc, #80]	; (8005dcc <_fflush_r+0x6c>)
 8005d7c:	429c      	cmp	r4, r3
 8005d7e:	d11b      	bne.n	8005db8 <_fflush_r+0x58>
 8005d80:	686c      	ldr	r4, [r5, #4]
 8005d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0ef      	beq.n	8005d6a <_fflush_r+0xa>
 8005d8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d8c:	07d0      	lsls	r0, r2, #31
 8005d8e:	d404      	bmi.n	8005d9a <_fflush_r+0x3a>
 8005d90:	0599      	lsls	r1, r3, #22
 8005d92:	d402      	bmi.n	8005d9a <_fflush_r+0x3a>
 8005d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d96:	f7ff fa47 	bl	8005228 <__retarget_lock_acquire_recursive>
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	f7ff ff59 	bl	8005c54 <__sflush_r>
 8005da2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005da4:	07da      	lsls	r2, r3, #31
 8005da6:	4605      	mov	r5, r0
 8005da8:	d4e0      	bmi.n	8005d6c <_fflush_r+0xc>
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	059b      	lsls	r3, r3, #22
 8005dae:	d4dd      	bmi.n	8005d6c <_fflush_r+0xc>
 8005db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005db2:	f7ff fa3a 	bl	800522a <__retarget_lock_release_recursive>
 8005db6:	e7d9      	b.n	8005d6c <_fflush_r+0xc>
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <_fflush_r+0x70>)
 8005dba:	429c      	cmp	r4, r3
 8005dbc:	d101      	bne.n	8005dc2 <_fflush_r+0x62>
 8005dbe:	68ac      	ldr	r4, [r5, #8]
 8005dc0:	e7df      	b.n	8005d82 <_fflush_r+0x22>
 8005dc2:	4b04      	ldr	r3, [pc, #16]	; (8005dd4 <_fflush_r+0x74>)
 8005dc4:	429c      	cmp	r4, r3
 8005dc6:	bf08      	it	eq
 8005dc8:	68ec      	ldreq	r4, [r5, #12]
 8005dca:	e7da      	b.n	8005d82 <_fflush_r+0x22>
 8005dcc:	08006110 	.word	0x08006110
 8005dd0:	08006130 	.word	0x08006130
 8005dd4:	080060f0 	.word	0x080060f0

08005dd8 <_lseek_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4d07      	ldr	r5, [pc, #28]	; (8005df8 <_lseek_r+0x20>)
 8005ddc:	4604      	mov	r4, r0
 8005dde:	4608      	mov	r0, r1
 8005de0:	4611      	mov	r1, r2
 8005de2:	2200      	movs	r2, #0
 8005de4:	602a      	str	r2, [r5, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f7fb f9a8 	bl	800113c <_lseek>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_lseek_r+0x1e>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_lseek_r+0x1e>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	2001339c 	.word	0x2001339c

08005dfc <__swhatbuf_r>:
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	460e      	mov	r6, r1
 8005e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e04:	2900      	cmp	r1, #0
 8005e06:	b096      	sub	sp, #88	; 0x58
 8005e08:	4614      	mov	r4, r2
 8005e0a:	461d      	mov	r5, r3
 8005e0c:	da08      	bge.n	8005e20 <__swhatbuf_r+0x24>
 8005e0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	602a      	str	r2, [r5, #0]
 8005e16:	061a      	lsls	r2, r3, #24
 8005e18:	d410      	bmi.n	8005e3c <__swhatbuf_r+0x40>
 8005e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e1e:	e00e      	b.n	8005e3e <__swhatbuf_r+0x42>
 8005e20:	466a      	mov	r2, sp
 8005e22:	f000 f8b3 	bl	8005f8c <_fstat_r>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	dbf1      	blt.n	8005e0e <__swhatbuf_r+0x12>
 8005e2a:	9a01      	ldr	r2, [sp, #4]
 8005e2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e34:	425a      	negs	r2, r3
 8005e36:	415a      	adcs	r2, r3
 8005e38:	602a      	str	r2, [r5, #0]
 8005e3a:	e7ee      	b.n	8005e1a <__swhatbuf_r+0x1e>
 8005e3c:	2340      	movs	r3, #64	; 0x40
 8005e3e:	2000      	movs	r0, #0
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	b016      	add	sp, #88	; 0x58
 8005e44:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e48 <__smakebuf_r>:
 8005e48:	898b      	ldrh	r3, [r1, #12]
 8005e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e4c:	079d      	lsls	r5, r3, #30
 8005e4e:	4606      	mov	r6, r0
 8005e50:	460c      	mov	r4, r1
 8005e52:	d507      	bpl.n	8005e64 <__smakebuf_r+0x1c>
 8005e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	6123      	str	r3, [r4, #16]
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	6163      	str	r3, [r4, #20]
 8005e60:	b002      	add	sp, #8
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	ab01      	add	r3, sp, #4
 8005e66:	466a      	mov	r2, sp
 8005e68:	f7ff ffc8 	bl	8005dfc <__swhatbuf_r>
 8005e6c:	9900      	ldr	r1, [sp, #0]
 8005e6e:	4605      	mov	r5, r0
 8005e70:	4630      	mov	r0, r6
 8005e72:	f7ff fa4f 	bl	8005314 <_malloc_r>
 8005e76:	b948      	cbnz	r0, 8005e8c <__smakebuf_r+0x44>
 8005e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e7c:	059a      	lsls	r2, r3, #22
 8005e7e:	d4ef      	bmi.n	8005e60 <__smakebuf_r+0x18>
 8005e80:	f023 0303 	bic.w	r3, r3, #3
 8005e84:	f043 0302 	orr.w	r3, r3, #2
 8005e88:	81a3      	strh	r3, [r4, #12]
 8005e8a:	e7e3      	b.n	8005e54 <__smakebuf_r+0xc>
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <__smakebuf_r+0x7c>)
 8005e8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	6020      	str	r0, [r4, #0]
 8005e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e98:	81a3      	strh	r3, [r4, #12]
 8005e9a:	9b00      	ldr	r3, [sp, #0]
 8005e9c:	6163      	str	r3, [r4, #20]
 8005e9e:	9b01      	ldr	r3, [sp, #4]
 8005ea0:	6120      	str	r0, [r4, #16]
 8005ea2:	b15b      	cbz	r3, 8005ebc <__smakebuf_r+0x74>
 8005ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f000 f881 	bl	8005fb0 <_isatty_r>
 8005eae:	b128      	cbz	r0, 8005ebc <__smakebuf_r+0x74>
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	f023 0303 	bic.w	r3, r3, #3
 8005eb6:	f043 0301 	orr.w	r3, r3, #1
 8005eba:	81a3      	strh	r3, [r4, #12]
 8005ebc:	89a0      	ldrh	r0, [r4, #12]
 8005ebe:	4305      	orrs	r5, r0
 8005ec0:	81a5      	strh	r5, [r4, #12]
 8005ec2:	e7cd      	b.n	8005e60 <__smakebuf_r+0x18>
 8005ec4:	08005061 	.word	0x08005061

08005ec8 <__malloc_lock>:
 8005ec8:	4801      	ldr	r0, [pc, #4]	; (8005ed0 <__malloc_lock+0x8>)
 8005eca:	f7ff b9ad 	b.w	8005228 <__retarget_lock_acquire_recursive>
 8005ece:	bf00      	nop
 8005ed0:	20013390 	.word	0x20013390

08005ed4 <__malloc_unlock>:
 8005ed4:	4801      	ldr	r0, [pc, #4]	; (8005edc <__malloc_unlock+0x8>)
 8005ed6:	f7ff b9a8 	b.w	800522a <__retarget_lock_release_recursive>
 8005eda:	bf00      	nop
 8005edc:	20013390 	.word	0x20013390

08005ee0 <_read_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	4d07      	ldr	r5, [pc, #28]	; (8005f00 <_read_r+0x20>)
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	4608      	mov	r0, r1
 8005ee8:	4611      	mov	r1, r2
 8005eea:	2200      	movs	r2, #0
 8005eec:	602a      	str	r2, [r5, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f7fb f8c4 	bl	800107c <_read>
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	d102      	bne.n	8005efe <_read_r+0x1e>
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	b103      	cbz	r3, 8005efe <_read_r+0x1e>
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	2001339c 	.word	0x2001339c

08005f04 <_raise_r>:
 8005f04:	291f      	cmp	r1, #31
 8005f06:	b538      	push	{r3, r4, r5, lr}
 8005f08:	4604      	mov	r4, r0
 8005f0a:	460d      	mov	r5, r1
 8005f0c:	d904      	bls.n	8005f18 <_raise_r+0x14>
 8005f0e:	2316      	movs	r3, #22
 8005f10:	6003      	str	r3, [r0, #0]
 8005f12:	f04f 30ff 	mov.w	r0, #4294967295
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005f1a:	b112      	cbz	r2, 8005f22 <_raise_r+0x1e>
 8005f1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f20:	b94b      	cbnz	r3, 8005f36 <_raise_r+0x32>
 8005f22:	4620      	mov	r0, r4
 8005f24:	f000 f830 	bl	8005f88 <_getpid_r>
 8005f28:	462a      	mov	r2, r5
 8005f2a:	4601      	mov	r1, r0
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f32:	f000 b817 	b.w	8005f64 <_kill_r>
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d00a      	beq.n	8005f50 <_raise_r+0x4c>
 8005f3a:	1c59      	adds	r1, r3, #1
 8005f3c:	d103      	bne.n	8005f46 <_raise_r+0x42>
 8005f3e:	2316      	movs	r3, #22
 8005f40:	6003      	str	r3, [r0, #0]
 8005f42:	2001      	movs	r0, #1
 8005f44:	e7e7      	b.n	8005f16 <_raise_r+0x12>
 8005f46:	2400      	movs	r4, #0
 8005f48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	4798      	blx	r3
 8005f50:	2000      	movs	r0, #0
 8005f52:	e7e0      	b.n	8005f16 <_raise_r+0x12>

08005f54 <raise>:
 8005f54:	4b02      	ldr	r3, [pc, #8]	; (8005f60 <raise+0xc>)
 8005f56:	4601      	mov	r1, r0
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	f7ff bfd3 	b.w	8005f04 <_raise_r>
 8005f5e:	bf00      	nop
 8005f60:	2000000c 	.word	0x2000000c

08005f64 <_kill_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4d07      	ldr	r5, [pc, #28]	; (8005f84 <_kill_r+0x20>)
 8005f68:	2300      	movs	r3, #0
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	4611      	mov	r1, r2
 8005f70:	602b      	str	r3, [r5, #0]
 8005f72:	f7fb f869 	bl	8001048 <_kill>
 8005f76:	1c43      	adds	r3, r0, #1
 8005f78:	d102      	bne.n	8005f80 <_kill_r+0x1c>
 8005f7a:	682b      	ldr	r3, [r5, #0]
 8005f7c:	b103      	cbz	r3, 8005f80 <_kill_r+0x1c>
 8005f7e:	6023      	str	r3, [r4, #0]
 8005f80:	bd38      	pop	{r3, r4, r5, pc}
 8005f82:	bf00      	nop
 8005f84:	2001339c 	.word	0x2001339c

08005f88 <_getpid_r>:
 8005f88:	f7fb b856 	b.w	8001038 <_getpid>

08005f8c <_fstat_r>:
 8005f8c:	b538      	push	{r3, r4, r5, lr}
 8005f8e:	4d07      	ldr	r5, [pc, #28]	; (8005fac <_fstat_r+0x20>)
 8005f90:	2300      	movs	r3, #0
 8005f92:	4604      	mov	r4, r0
 8005f94:	4608      	mov	r0, r1
 8005f96:	4611      	mov	r1, r2
 8005f98:	602b      	str	r3, [r5, #0]
 8005f9a:	f7fb f8b4 	bl	8001106 <_fstat>
 8005f9e:	1c43      	adds	r3, r0, #1
 8005fa0:	d102      	bne.n	8005fa8 <_fstat_r+0x1c>
 8005fa2:	682b      	ldr	r3, [r5, #0]
 8005fa4:	b103      	cbz	r3, 8005fa8 <_fstat_r+0x1c>
 8005fa6:	6023      	str	r3, [r4, #0]
 8005fa8:	bd38      	pop	{r3, r4, r5, pc}
 8005faa:	bf00      	nop
 8005fac:	2001339c 	.word	0x2001339c

08005fb0 <_isatty_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4d06      	ldr	r5, [pc, #24]	; (8005fcc <_isatty_r+0x1c>)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	4608      	mov	r0, r1
 8005fba:	602b      	str	r3, [r5, #0]
 8005fbc:	f7fb f8b3 	bl	8001126 <_isatty>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	d102      	bne.n	8005fca <_isatty_r+0x1a>
 8005fc4:	682b      	ldr	r3, [r5, #0]
 8005fc6:	b103      	cbz	r3, 8005fca <_isatty_r+0x1a>
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	bd38      	pop	{r3, r4, r5, pc}
 8005fcc:	2001339c 	.word	0x2001339c

08005fd0 <_init>:
 8005fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd2:	bf00      	nop
 8005fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd6:	bc08      	pop	{r3}
 8005fd8:	469e      	mov	lr, r3
 8005fda:	4770      	bx	lr

08005fdc <_fini>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	bf00      	nop
 8005fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe2:	bc08      	pop	{r3}
 8005fe4:	469e      	mov	lr, r3
 8005fe6:	4770      	bx	lr
